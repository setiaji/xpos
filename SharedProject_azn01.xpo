Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: SRO

; Microsoft Dynamics AX ROLE : ABU_AP_INVOICE unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  ROLE #ABU_AP_INVOICE
    PROPERTIES
      Name                #ABU_AP_INVOICE
      Label               #ABU_AP_INVOICE
      Origin              #{DC70A98B-21A9-4335-8DF2-16EE8B274D85}
    ENDPROPERTIES
    
    DUTIES #Duties
      DUTY #AP_INVOICING
        PROPERTIES
          Name                #AP_INVOICING
          Enabled             #No
        ENDPROPERTIES
        
      ENDDUTY
      
  ENDDUTIES
  
PRIVILEGES #Privileges
  PRIVILEGE #LedgerJournalPostVendInvoice
    PROPERTIES
      Name                #LedgerJournalPostVendInvoice
    ENDPROPERTIES
    
  ENDPRIVILEGE
  
PRIVILEGE #LedgerJournalPostVendPaym
  PROPERTIES
    Name                #LedgerJournalPostVendPaym
    Enabled             #No
  ENDPROPERTIES
  
ENDPRIVILEGE

PRIVILEGE #ProjInvoiceProposalMaintain
  PROPERTIES
    Name                #ProjInvoiceProposalMaintain
  ENDPROPERTIES
  
ENDPRIVILEGE

PRIVILEGE #PSAPwpInvoiceInquiryMaintain
  PROPERTIES
    Name                #PSAPwpInvoiceInquiryMaintain
    Enabled             #No
  ENDPROPERTIES
  
ENDPRIVILEGE

PRIVILEGE #PurchFormLetter_InvoiceMaintain
  PROPERTIES
    Name                #PurchFormLetter_InvoiceMaintain
  ENDPROPERTIES
  
ENDPRIVILEGE

PRIVILEGE #TMSInvoiceJournalMaintain
  PROPERTIES
    Name                #TMSInvoiceJournalMaintain
    Enabled             #No
  ENDPROPERTIES
  
ENDPRIVILEGE

PRIVILEGE #TMSInvoiceTableMaintain
  PROPERTIES
    Name                #TMSInvoiceTableMaintain
    Enabled             #No
  ENDPROPERTIES
  
ENDPRIVILEGE

PRIVILEGE #TMSReconcileInvoiceMaintain
  PROPERTIES
    Name                #TMSReconcileInvoiceMaintain
  ENDPROPERTIES
  
ENDPRIVILEGE

PRIVILEGE #VendInvoicePostPendingVendInvoice
  PROPERTIES
    Name                #VendInvoicePostPendingVendInvoice
  ENDPROPERTIES
  
ENDPRIVILEGE

ENDPRIVILEGES

PERMISSIONSET #Permissions
  PROPERTIES
  ENDPROPERTIES
  
  TABLES #Tables
  ENDTABLES
  
FORMS #Forms
ENDFORMS

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ENDPERMISSIONSET

SUBROLES #Sub Roles
ENDSUBROLES

ENDROLE


***Element: SRO

; Microsoft Dynamics AX ROLE : ABU_SalesStock unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  ROLE #ABU_SalesStock
    PROPERTIES
      Name                #ABU_SalesStock
      Label               #ABU Sales Stock Controller
      Description         #ABU Sales Stock Controller
      Origin              #{C1361909-CC1C-4A3E-A2D8-8E4E01EF7793}
    ENDPROPERTIES
    
    DUTIES #Duties
      DUTY #ABU_SalesStock
        PROPERTIES
          Name                #ABU_SalesStock
          Enabled             #No
        ENDPROPERTIES
        
      ENDDUTY
      
  ENDDUTIES
  
PRIVILEGES #Privileges
ENDPRIVILEGES

PERMISSIONSET #Permissions
  PROPERTIES
  ENDPROPERTIES
  
  TABLES #Tables
  ENDTABLES
  
FORMS #Forms
ENDFORMS

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ENDPERMISSIONSET

SUBROLES #Sub Roles
  SUBROLE #ABU_AP_INVOICE
    PROPERTIES
      Name                #ABU_AP_INVOICE
      Enabled             #No
    ENDPROPERTIES
    
  ENDSUBROLE
  
ENDSUBROLES

ENDROLE


***Element: FTM

; Microsoft Dynamics AX MENUITEM : BatchConfiguration unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #BatchConfiguration
    Type: 1
    PROPERTIES
      Name                #BatchConfiguration
      Label               #Barcode Batch Configuration
      Object              #barcodeconfiguration
      Origin              #{137E8FBC-84FC-4136-A015-633BE4EF3013}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: MNU

; Microsoft Dynamics AX Menu : WHS unloaded
; --------------------------------------------------------------------------------
  MNUVERSION 5
  
  MENU #WHS
    PROPERTIES
      Name                #WHS
      Label               #@WAX13
      ConfigurationKey    #WHSandTMS
      SetCompany          #Yes
      NormalImage         #10935
      ImageLocation       #EmbeddedResource
      Origin              #{B502BCD7-9C4F-4975-B509-B588A10DCD3E}
    ENDPROPERTIES
    
    MENU #@SYS333846
      PROPERTIES
        Name                #Common
        Label               #@SYS333846
        NormalImage         #3495
        ImageLocation       #EmbeddedResource
      ENDPROPERTIES
      
      MENU #@WAX312
        PROPERTIES
          Name                #Loads
          Label               #@WAX312
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #All loads
            MenuItemName        #WHSLoadPlanningListPage
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Active loads
            MenuItemName        #WHSLoadPlanningListPageActive
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Open loads
            MenuItemName        #WHSLoadPlanningListPageOpen
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Waved loads
            MenuItemName        #WHSLoadPlanningListPageWave
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Picking loads
            MenuItemName        #WHSLoadPlanningListPageInProcess
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #In packing loads
            MenuItemName        #WHSLoadPlanningListPageInPacking
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Loads ready to ship
            MenuItemName        #WHSLoadPlanningListPageLoaded
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENU #@WAX428
        PROPERTIES
          Name                #Shipments
          Label               #@WAX428
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #All shipments
            MenuItemName        #WHSShipPlanningListPage
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Active shipments
            MenuItemName        #WHSShipPlanningListPageActive
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Open shipments
            MenuItemName        #WHSShipPlanningListPageOpen
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Waved shipments
            MenuItemName        #WHSShipPlanningListPageWave
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Picking shipments
            MenuItemName        #WHSShipPlanningListPageInProcess
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #In packing shipments
            MenuItemName        #WHSShipPlanningListPageInPacking
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Shipments ready to ship
            MenuItemName        #WHSShipPlanningListPageLoaded
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENU #@WAX411
        PROPERTIES
          Name                #Work
          Label               #@WAX411
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #All work
            MenuItemName        #WHSWorkTableListPage
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Open purchase work
            MenuItemName        #WHSWorkTableListPageOpenPurch
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Closed purchase work
            MenuItemName        #WHSWorkTableListPageClosedPurch
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #In process purchase work
            MenuItemName        #WHSWorkTableListPageInProcessPurch
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Open sales work
            MenuItemName        #WHSWorkTableListPageOpenSales
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Closed sales work
            MenuItemName        #WHSWorkTableListPageClosedSales
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #In process sales work
            MenuItemName        #WHSWorkTableListPageInProcessSales
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Open cycle count work
            MenuItemName        #WHSWorkTableListPageOpenCycleCount
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Closed cycle count work
            MenuItemName        #WHSWorkTableListPageClosedCycleCount
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Cycle count work pending review
            MenuItemName        #WHSWorkTableListPagePendReviewCycleCount
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Open replenishment work
            MenuItemName        #WHSWorkTableListPageOpenReplen
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Closed replenishment work
            MenuItemName        #WHSWorkTableListPageCloasedReplen
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #In process replenishment work
            MenuItemName        #WHSWorkTableListPageInProcessReplen
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENU #@WAX1494
        PROPERTIES
          Name                #Waves
          Label               #@WAX1494
        ENDPROPERTIES
        
        MENU #@WAX5662
          PROPERTIES
            Name                #ShipmentWaves
            Label               #@WAX5662
          ENDPROPERTIES
          
          MENUITEM
            PROPERTIES
              Name                #All waves
              MenuItemName        #WHSWaveTableListPage
              IsDisplayedInContentArea    #Yes
            ENDPROPERTIES
            
          ENDMENUITEM
          MENUITEM
            PROPERTIES
              Name                #Pending waves
              MenuItemName        #WHSWaveTableListPagePending
              IsDisplayedInContentArea    #Yes
            ENDPROPERTIES
            
          ENDMENUITEM
          MENUITEM
            PROPERTIES
              Name                #Open waves
              MenuItemName        #WHSWaveTableListPageOpen
              IsDisplayedInContentArea    #Yes
            ENDPROPERTIES
            
          ENDMENUITEM
          MENUITEM
            PROPERTIES
              Name                #Closed waves
              MenuItemName        #WHSWaveTableListPageClosed
              IsDisplayedInContentArea    #Yes
            ENDPROPERTIES
            
          ENDMENUITEM
        ENDMENU
        MENU #@WAX3328
          PROPERTIES
            Name                #ProductionWaves
            Label               #@WAX3328
          ENDPROPERTIES
          
          MENUITEM
            PROPERTIES
              Name                #All production waves
              MenuItemName        #WHSProdWaveTableListPage
              IsDisplayedInContentArea    #Yes
            ENDPROPERTIES
            
          ENDMENUITEM
          MENUITEM
            PROPERTIES
              Name                #Pending waves
              MenuItemName        #WHSProdWaveTableListPagePending
              IsDisplayedInContentArea    #Yes
            ENDPROPERTIES
            
          ENDMENUITEM
          MENUITEM
            PROPERTIES
              Name                #Open waves
              MenuItemName        #WHSProdWaveTableListPageOpen
              IsDisplayedInContentArea    #Yes
            ENDPROPERTIES
            
          ENDMENUITEM
          MENUITEM
            PROPERTIES
              Name                #Closed waves
              MenuItemName        #WHSProdWaveTableListPageClosed
              IsDisplayedInContentArea    #Yes
            ENDPROPERTIES
            
          ENDMENUITEM
        ENDMENU
        MENU #@WAX4764
          PROPERTIES
            Name                #KanbanWaves
            Label               #@WAX4764
          ENDPROPERTIES
          
          MENUITEM
            PROPERTIES
              Name                #All kanban waves
              MenuItemName        #WHSKanbanWaveTableListPage
              IsDisplayedInContentArea    #Yes
            ENDPROPERTIES
            
          ENDMENUITEM
          MENUITEM
            PROPERTIES
              Name                #Pending waves
              MenuItemName        #WHSKanbanWaveTableListPagePending
              IsDisplayedInContentArea    #Yes
            ENDPROPERTIES
            
          ENDMENUITEM
          MENUITEM
            PROPERTIES
              Name                #Open waves
              MenuItemName        #WHSKanbanWaveTableListPageOpen
              IsDisplayedInContentArea    #Yes
            ENDPROPERTIES
            
          ENDMENUITEM
          MENUITEM
            PROPERTIES
              Name                #Closed waves
              MenuItemName        #WHSKanbanWaveTableListPageClosed
              IsDisplayedInContentArea    #Yes
            ENDPROPERTIES
            
          ENDMENUITEM
        ENDMENU
      ENDMENU
      MENUITEM
        PROPERTIES
          Name                #Cycle count scheduling
          MenuItemName        #WHSCycleCountPlanListPage
          IsDisplayedInContentArea    #Yes
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Shipment details
          MenuItemName        #WHSShipmentDetails
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Release to warehouse
          MenuItemName        #WHSReleaseToWarehouse
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Work user sessions
          MenuItemName        #WHSWorkUserSession
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Mobile device activity log
          MenuItemName        #WHSMobileDeviceActivityLog
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Work details
          MenuItemName        #WHSWorkTable
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Load planning workbench
          MenuItemName        #WHSLoadPlanningWorkBench
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Pack
          MenuItemName        #WHSPack
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Container close
          MenuItemName        #WHSContainerClose
        ENDPROPERTIES
        
      ENDMENUITEM
    ENDMENU
    MENU #@SYS3850
      PROPERTIES
        Name                #Inquiries
        Label               #@SYS3850
        NormalImage         #3474
        ImageLocation       #EmbeddedResource
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #On hand by location
          MenuItemName        #WHSOnHand
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Physical on-hand inventory
          MenuItemName        #WHSInventPhysicalOnhand
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #License plate labels
          MenuItemName        #WHSLicensePlateLabel
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Work inventory transactions
          MenuItemName        #WHSWorkInventTrans
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Containers
          MenuItemName        #WHSContainerTable
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Work clusters
          MenuItemName        #WHSWorkCluster
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Work audit data capture
          MenuItemName        #WHSWorkAuditCaptureData
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Bill of lading
          MenuItemName        #WHSBillOfLading
        ENDPROPERTIES
        
      ENDMENUITEM
      MENU #@WAX1774
        PROPERTIES
          Name                #History
          Label               #@WAX1774
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Work exceptions log
            MenuItemName        #WHSWorkExceptionLog
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Shipment modification log
            MenuItemName        #WHSShipmentExceptionLog
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Temporary work history
            MenuItemName        #WHSTmpWorkLineHistory
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Work creation history log
            MenuItemName        #WHSWorkCreateHistory
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Containerization history
            MenuItemName        #WHSContainerizationHistory
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Wave processing history log
            MenuItemName        #WHSWaveExecutionHistory
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Reservation removal history
            MenuItemName        #WHSReservationRemoveHistory
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
    ENDMENU
    MENU #@SYS6845
      PROPERTIES
        Name                #Reports
        Label               #@SYS6845
        NormalImage         #3477
        ImageLocation       #EmbeddedResource
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #Closed work
          MenuItemType        #Output
          MenuItemName        #WHSWorkTrans
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Work
          MenuItemType        #Output
          MenuItemName        #WHSWork
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Loads
          MenuItemType        #Output
          MenuItemName        #WHSLoads
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Load list
          MenuItemType        #Output
          MenuItemName        #WHSLoadList
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Cycle count sheet
          MenuItemType        #Output
          MenuItemName        #WHSCycleCount
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Fixed locations
          MenuItemType        #Output
          MenuItemName        #WHSInventFixedLocation
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Container contents
          MenuItemType        #Output
          MenuItemName        #WHSContainerContents
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Receiving exceptions
          MenuItemType        #Output
          MenuItemName        #WHSReceivingException
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Labor by work transaction type
          MenuItemType        #Output
          MenuItemName        #WHSLaborByWorkTrans
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Labor by user
          MenuItemType        #Output
          MenuItemName        #WHSLaborByUser
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Warehouse utilization
          MenuItemType        #Output
          MenuItemName        #WHSVolumetricsOnLocation
        ENDPROPERTIES
        
      ENDMENUITEM
      MENU #@WAX1388
        PROPERTIES
          Name                #PickList
          Label               #@WAX1388
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Shipping pick list
            MenuItemType        #Output
            MenuItemName        #WHSPickListShipping
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Production pick list
            MenuItemType        #Output
            MenuItemName        #WHSPickListProduction
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
    ENDMENU
    MENU #@SYS8782
      PROPERTIES
        Name                #Periodic
        Label               #@SYS8782
        NormalImage         #3476
        ImageLocation       #EmbeddedResource
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #Cycle count work by location
          MenuItemType        #Action
          MenuItemName        #WHSCycleCountCreateLocation
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Cycle count work by item
          MenuItemType        #Action
          MenuItemName        #WHSCycleCountCreateItem
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Update product receipts
          MenuItemType        #Action
          MenuItemName        #WHSPostPackingSlip
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Replenishments
          MenuItemType        #Action
          MenuItemName        #WHSReplenishment
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Load demand replenishment
          MenuItemType        #Action
          MenuItemName        #WHSLoadReplenishment
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Automatic release of sales orders
          MenuItemType        #Action
          MenuItemName        #WHSAutoReleaseToWarehouse
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Automatic release of transfer orders
          MenuItemType        #Action
          MenuItemName        #WHSTransferAutoRTW
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Process waves
          MenuItemType        #Action
          MenuItemName        #WHSWaveExecute
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Inventory status change
          MenuItemType        #Action
          MenuItemName        #WHSInventoryStatusConvert
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Change item hierarchy
          MenuItemType        #Action
          MenuItemName        #WHSChangeItemHierarchy
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Warehouse status change
          MenuItemName        #WHSWarehouseStatusChange
        ENDPROPERTIES
        
      ENDMENUITEM
      MENU #@SYS78705
        PROPERTIES
          Name                #Cleanup
          Label               #@SYS78705
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Work creation history purge
            MenuItemType        #Action
            MenuItemName        #WHSWorkCreateHistoryPurge
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Containerization history purge
            MenuItemType        #Action
            MenuItemName        #WHSContainerizationHistoryPurge
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Wave batch cleanup
            MenuItemType        #Action
            MenuItemName        #WHSWaveBatchCleanup
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Cycle count plan cleanup
            MenuItemType        #Action
            MenuItemName        #WHSCycleCountPlanCleanup
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Mobile device activity log cleanup
            MenuItemType        #Action
            MenuItemName        #WHSMobileDeviceActivityLogCleanup
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Work user session log cleanup
            MenuItemType        #Action
            MenuItemName        #WHSSessionLogCleanupServiceDoCleanup
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
    ENDMENU
    MENU #@SYS12687
      PROPERTIES
        Name                #Setup
        Label               #@SYS12687
        NormalImage         #3478
        ImageLocation       #EmbeddedResource
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #Location directives
          MenuItemName        #WHSLocDirTable
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Directive codes
          MenuItemName        #WHSLocDirHint
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Load posting methods
          MenuItemName        #WHSLoadPostMethod
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Warehouse management parameters
          MenuItemName        #WHSParameters
        ENDPROPERTIES
        
      ENDMENUITEM
      MENU #@WAX3471
        PROPERTIES
          Name                #DocumentRouting
          Label               #@WAX3471
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Document routing
            MenuItemName        #WHSDocumentRouting
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Document routing layouts
            MenuItemName        #WHSDocumentRoutingLayout
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENU #@WAX1494
        PROPERTIES
          Name                #Waves
          Label               #@WAX1494
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Wave templates
            MenuItemName        #WHSWaveTemplateTable
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Wave process methods
            MenuItemName        #WHSPostMethod
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Wave attributes
            MenuItemName        #WHSWaveAttributes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Wave filters
            MenuItemName        #WHSWaveFiltertable
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENU #@SYS981
        PROPERTIES
          Name                #Inventory
          Label               #@SYS981
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Adjustment types
            MenuItemName        #WHSAdjustmentType
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Movement types
            MenuItemName        #WHSMovementType
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Inventory status
            MenuItemName        #WHSInventStatus
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Default item status
            MenuItemName        #WHSAccountItemStatusDefault
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #NMFC code
            MenuItemName        #WHSNMFC
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #LTL class
            MenuItemName        #WHSLTLClass
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Batches
            MenuItemName        #InventBatch
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Physical dimension groups
            MenuItemName        #WHSPhysDimGroup
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Reservation hierarchy
            MenuItemName        #WHSReservationHierarchy
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENU #@WAX1045
        PROPERTIES
          Name                #RF
          Label               #@WAX1045
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Mobile device menu
            MenuItemName        #WHSRFMenu
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Mobile device menu items
            MenuItemName        #WHSRFMenuItem
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Mobile device text colors
            MenuItemName        #WHSRFColor
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Disposition codes
            MenuItemName        #WHSDispositionTable
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Cluster profiles
            MenuItemName        #WHSClusterProfile
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Work user mobile device display settings
            MenuItemName        #WHSWorkUserDisplaySettings
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Barcode Batch Configuration
            MenuItemName        #BatchConfiguration
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENU #@WAX1382
        PROPERTIES
          Name                #Shipping
          Label               #@WAX1382
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Shipping carrier
            MenuItemName        #TMSCarrier
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Carrier group
            MenuItemName        #TMSCarrierGroup
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENU #@WAX403
        PROPERTIES
          Name                #Load
          Label               #@WAX403
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Load template
            MenuItemName        #WHSLoadTemplate
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Item load mapping
            MenuItemName        #WHSItemGroupLoadTemplate
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Port
            MenuItemName        #IntrastatPort
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Reason for late shipping
            MenuItemName        #TMSLateShipReason
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENU #@WAX411
        PROPERTIES
          Name                #Work
          Label               #@WAX411
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Work templates
            MenuItemName        #WHSWorkTemplateTable
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Custom work type
            MenuItemName        #WHSWorkTypeCustom
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Work status change codes
            MenuItemName        #WHSWorkTypeStatusChange
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Work exceptions
            MenuItemName        #WHSWorkException
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Location directive failures
            MenuItemName        #WHSLocDirFailure
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Work classes
            MenuItemName        #WHSWorkClass
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Work pools
            MenuItemName        #WHSWorkPool
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Work audit template
            MenuItemName        #WHSWorkAuditTemplate
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENU #@WAX972
        PROPERTIES
          Name                #Filters
          Label               #@WAX972
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Filter groups
            MenuItemName        #WHSFilterGroupTable
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Filters
            MenuItemName        #WHSFilters
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Generally available items
            MenuItemName        #WHSFilterGenerallyAvail
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENU #@WAX443
        PROPERTIES
          Name                #Users
          Label               #@WAX443
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Worker
            MenuItemName        #WHSWorker
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENU #@WAX574
        PROPERTIES
          Name                #WarehouseSetup
          Label               #@WAX574
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Sites
            MenuItemName        #InventSite
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Warehouses
            MenuItemName        #InventLocations
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Locations
            MenuItemName        #WHSLocation
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Location setup wizard
            MenuItemName        #WHSLocationBuild
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Location formats
            MenuItemName        #WHSLocationFormat
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Location stocking limits
            MenuItemName        #WHSLocationLimit
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Location profiles
            MenuItemName        #WHSLocationProfile
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Location types
            MenuItemName        #WHSLocationType
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Dock management profiles
            MenuItemName        #WHSDockMgmtProfile
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Zone groups
            MenuItemName        #WHSZoneGroup
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Zones
            MenuItemName        #WHSZone
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Unit sequence groups
            MenuItemName        #WHSUOMSeqGroupTable
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Pack size categories
            MenuItemName        #WHSPackSizeCategory
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #License plates
            MenuItemName        #WHSLicensePlate
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Fixed locations
            MenuItemName        #WHSInventFixedLocation
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENU #@WAX1424
        PROPERTIES
          Name                #Containers
          Label               #@WAX1424
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Container build template
            MenuItemName        #WHSContainerizationTable
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Container groups
            MenuItemName        #WHSContainerGroup
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Container type
            MenuItemName        #WHSContainerType
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Container attributes
            MenuItemName        #WHSContainerAttributes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Container closing profiles
            MenuItemName        #WHSCloseContainerProfile
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENU #@WAX1905
        PROPERTIES
          Name                #Replenishment
          Label               #@WAX1905
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Request types
            MenuItemName        #WHSRequestType
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Replenishment templates
            MenuItemName        #WHSReplenishmentTemplates
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENU #@WAX2096
        PROPERTIES
          Name                #Packing
          Label               #@WAX2096
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Package class
            MenuItemName        #WHSPackageClass
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Packing profiles
            MenuItemName        #WHSPackProfile
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENU #@WAX510
        PROPERTIES
          Name                #CycleCounting
          Label               #@WAX510
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Cycle count plans
            MenuItemName        #WHSCycleCountPlan
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Cycle count thresholds
            MenuItemName        #WHSCycleCountThreshold
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENU #@WAX3944
        PROPERTIES
          Name                #LaborStandards
          Label               #@WAX3944
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Labor standards
            MenuItemName        #WHSLaborStandards
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
    ENDMENU
  ENDMENU
  

***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #BarcodeConfiguration
  PROPERTIES
    Name                #BarcodeConfiguration
    Origin              #{12B975CE-90D2-4145-8B20-028B14A42B21}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #BarcodeConfiguration
          Table               #AZ_BatchConfig
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #Batch Label Configuration
      Style               #SimpleList
    ENDPROPERTIES
    
    CONTAINER
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #ActionPane
          ElementPosition     #715827882
          Style               #Strip
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #ActionPane
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #NewDeleteGroup
          ElementPosition     #1431655764
          HierarchyParent     #ActionPaneTab
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #BatchConfigurationGrid
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #GridContainer
          MultiSelect         #No
          ShowRowLabels       #No
          DataSource          #BarcodeConfiguration
          AlternateRowShading #No
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GridContainer
          ElementPosition     #357913941
          Style               #BorderlessGridContainer
          DataSource          #BarcodeConfiguration
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #BarcodeConfiguration_AZ_DateType
          ElementPosition     #976128930
          HierarchyParent     #BatchConfigurationGrid
          DataSource          #BarcodeConfiguration
          DataField           #AZ_DateType
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #DeleteButton
          ElementPosition     #1610612733
          HierarchyParent     #NewDeleteGroup
          Text                #@sys14425
          ButtonDisplay       #Text & Image left
          NormalImage         #10121
          ImageLocation       #EmbeddedResource
          SaveRecord          #No
          Primary             #Yes
          Command             #2832
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #NewButton
          ElementPosition     #1073741822
          HierarchyParent     #NewDeleteGroup
          ButtonDisplay       #Text & Image left
          NormalImage         #11045
          ImageLocation       #EmbeddedResource
          Primary             #Yes
          Command             #260
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #BarcodeConfiguration_DateCharlength
          ElementPosition     #1366580502
          HierarchyParent     #BatchConfigurationGrid
          DataSource          #BarcodeConfiguration
          DataField           #DateCharlength
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #BarcodeConfiguration_DateCharStart
          ElementPosition     #1171354716
          HierarchyParent     #BatchConfigurationGrid
          DataSource          #BarcodeConfiguration
          DataField           #DateCharStart
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #BarcodeConfiguration_ProdCharLength
          ElementPosition     #780903144
          HierarchyParent     #BatchConfigurationGrid
          DataSource          #BarcodeConfiguration
          DataField           #ProdCharLength
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #BarcodeConfiguration_ProdCharStart
          ElementPosition     #585677358
          HierarchyParent     #BatchConfigurationGrid
          DataSource          #BarcodeConfiguration
          DataField           #ProdCharStart
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #BarcodeConfiguration_WeightCharLength
          ElementPosition     #1757032074
          HierarchyParent     #BatchConfigurationGrid
          DataSource          #BarcodeConfiguration
          DataField           #WeightCharLength
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #BarcodeConfiguration_WeightCharStart
          ElementPosition     #1561806288
          HierarchyParent     #BatchConfigurationGrid
          DataSource          #BarcodeConfiguration
          DataField           #WeightCharStart
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #BarcodeConfiguration_WeightFactor
          ElementPosition     #1952257860
          HierarchyParent     #BatchConfigurationGrid
          DataSource          #BarcodeConfiguration
          DataField           #WeightFactor
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #BarcodeConfiguration_BarcodeConfigId
          ElementPosition     #390451572
          HierarchyParent     #BatchConfigurationGrid
          DataSource          #BarcodeConfiguration
          DataField           #BarcodeConfigId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #EcoResProductDetailsExtended
  PROPERTIES
    Name                #EcoResProductDetailsExtended
    Origin              #{B92DE9BC-58B9-4F85-9B04-06EE0BAB1D2D}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #    DimensionDefaultingController   dimensionDefaultingController;
      #    #ISOCountryRegionCodes
      #
      #    PmfFormCtrl_EcoResProductDetailsExtended pmfFormCtrl;
      #    DialogButton                    keepVersions;
      #    boolean                         isTemplate;
      #    EcoResReleasedProduct           releasedProduct;
      #
      #    SysFormSplitter_X               mFormSplitter;
      #    EcoResCategoryTreeDatasource    mHierarchyTree;
      #    boolean                         fromReleasedProductsByCategory;
      #    boolean                         selectedHierachyIsSpecial;
      #
      #    // <GIN>
      #    #ISOCountryRegionCodes
      #    boolean                         isIsoIN;
      #    TaxExciseTypeController_IN      taxExciseTypeController;
      #    // </GIN>
      #}
    ENDSOURCE
    SOURCE #checkNonStockedDependencies
      #public void checkNonStockedDependencies()
      #{
      #    InventModelGroup    inventModelGroupLocal;
      #
      #    if (inventTable.bomUnitId)
      #    {
      #        if ((inventModelGroupItem.RecId && inventModelGroupItem.ModelGroupId != inventModelGroupItem.orig().ModelGroupId)
      #          || !inventModelGroupItem.RecId && inventModelGroupItem.ModelGroupId)
      #        { // Model group has been specified or changed
      #            inventModelGroupLocal = inventModelGroupItem.modelGroup();
      #            if (!inventModelGroupLocal.isStocked())
      #            { // BOM unit cannot be specified for non-stocked items
      #                inventTable.bomUnitId = '';
      #            }
      #        }
      #    }
      #}
    ENDSOURCE
    SOURCE #docCursor
      #public Common docCursor()
      #{
      #    return inventTable;
      #}
    ENDSOURCE
    SOURCE #enableButtonFci_BR
      #// <GBR>
      #public void enableButtonFci_BR()
      #{
      #    buttonFci_BR.enabled(inventTable.ItemType == ItemType::Item);
      #}
      #// </GBR>
      #
    ENDSOURCE
    SOURCE #enableCategoryHierarchy
      #private void enableCategoryHierarchy()
      #{
      #    if(element.args() &&
      #        element.args().parm() &&
      #        element.args().menuItemName() == menuitemDisplayStr(RetailReleasedProductsByCategory))
      #    {
      #        fromReleasedProductsByCategory = true;
      #
      #        // disable product query until a category is selected
      #        ecoResProduct_ds.query().dataSourceTable(tableNum(EcoResProduct)).enabled(false);
      #
      #        categoryHierarchyLookup.visible(true);
      #        categoryTree.visible(true);
      #        verticalSplitter.visible(true);
      #        mFormSplitter = new SysFormSplitter_X(verticalSplitter, categoryTree, element);
      #        this.initializeCategoryHierarchy();
      #        this.initializeCategoryTree();
      #        mcrModifyCategory.visible(true);
      #    }
      #    else
      #    {
      #        fromReleasedProductsByCategory = false;
      #        ecoResProductCategory_ds.queryBuildDataSource().enabled(false);
      #        ecoResCategoryDescendents_ds.queryBuildDataSource().enabled(false);
      #    }
      #}
    ENDSOURCE
    SOURCE #enableCostingViewMode
      #/// <summary>
      #/// Hides all parts of the form that are not relevant from costing perspective.
      #/// </summary>
      #private void enableCostingViewMode()
      #{
      #    if (this.args() && this.args().menuItemName() == menuitemDisplayStr(CostProductDetailsExtended))
      #    {
      #        actionPaneTabPurchase.visible(false);
      #        actionPaneTabSell.visible(false);
      #        actionPaneTabManageInventory.visible(false);
      #        actionPaneTabEngineer.visible(false);
      #        actionPaneTabPlan.visible(false);
      #        actionPaneTabManageProjects.visible(false);
      #        actionPaneTabRetail.visible(false);
      #        tabPagePurchase.visible(false);
      #        tabPageSales.visible(false);
      #        tabPageForeignTrade.visible(false);
      #        tabPageInventory.visible(false);
      #        tabPageEngineer.visible(false);
      #        tabPagePlan.visible(false);
      #        tabPageProject.visible(false);
      #        tabFiscalInformation_BR.visible(false);
      #        tabPageAlcoholDeclaration_RU.visible(false);
      #        tabPageRetail.visible(false);
      #    }
      #}
    ENDSOURCE
    SOURCE #enableServiceFields_BR
      #public void enableServiceFields_BR()
      #{
      #    boolean enable = false;
      #
      #    enable = inventTable.ItemType == ItemType::Service;
      #
      #    inventTable_ds.object(fieldNum(InventTable, icmsOnService_BR)).enabled(enable);
      #    inventTable_ds.object(fieldNum(InventTable, TaxServiceCode_BR)).enabled(enable);
      #    inventTable_ds.object(fieldNum(InventTable, TaxFiscalClassification_BR)).enabled(!enable);
      #    inventTable_ds.object(fieldNum(InventTable, ExceptionCode_BR)).enabled(!enable);
      #
      #    inventTable_ds.refresh();
      #}
      #
    ENDSOURCE
    SOURCE #getCategoryHierarchy
      #private EcoResCategoryHierarchy getCategoryHierarchy()
      #{
      #    return EcoResCategoryHierarchy::find(categoryHierarchyReferenceGroup.value());
      #}
    ENDSOURCE
    SOURCE #getComparisonPrice
      #display Price getComparisonPrice()
      #{
      #    return UnitOfMeasureConverter::convert(sales.Price,
      #                                           UnitOfMeasure::unitOfMeasureIdBySymbol(retailInventTable.BaseComparisonUnitCode),
      #                                           UnitOfMeasure::unitOfMeasureIdBySymbol(sales.UnitId),
      #                                           NoYes::Yes,
      #                                           InventTable::itemProduct(inventTable.ItemId),
      #                                           NoYes::No);
      #}
    ENDSOURCE
    SOURCE #hasTemplate
      #private boolean hasTemplate()
      #{
      #    SysRecordTemplateStorageCompany     company;
      #    SysRecordTemplateStorageUser        user;
      #
      #    company = SysRecordTemplateStorage::newCommon(inventTable, SysRecordTemplateType::Company);
      #    user = SysRecordTemplateStorage::newCommon(inventTable, SysRecordTemplateType::User);
      #
      #    return (user.get() != conNull() || company.get() != conNull());
      #}
    ENDSOURCE
    SOURCE #init
      #public void init()
      #{
      #
      #    pmfFormCtrl = PmfFormCtrl_EcoResProductDetailsExtended::newFromForm(this);
      #    pmfFormCtrl.initPre();
      #
      #    super();
      #
      #    pmfFormCtrl.setDatasources(inventTable);
      #    pmfFormCtrl.initPost();
      #    releasedProduct = EcoResReleasedProductFactory::construct().getReleasedProductFromProductForm(this);
      #
      #    this.setApplyTemplateMenuItem();
      #    this.setUseInvoiceMatchingItemEnabled();
      #    this.setQualityManagementMenuItemsVisibility();
      #
      #    dimensionDefaultingController = DimensionDefaultingController::constructInTabWithValues(true, true, true, 0, this, tabFinancialDimensions, "@SYS138487");
      #    dimensionDefaultingController.parmAttributeValueSetDataSource(inventTable_ds, fieldStr(InventTable, DefaultDimension));
      #    dimensionDefaultingController.pageActivated();
      #
      #    this.enableCostingViewMode();
      #
      #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
      #    {
      #        element.setVisible_IN();
      #    }
      #
      #    element.enableCategoryHierarchy();
      #
      #    if (RetailSMB::IsRetailSMBEnabled())
      #    {
      #        RetailSMB::SetVisible(element);
      #    }
      #
      #    // <GIN>
      #    isIsoIN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
      #    if (isIsoIN)
      #    {
      #        taxExciseTypeController = TaxExciseTypeController_IN::construct(null,
      #                                                                        ExciseManufacture_IN,
      #                                                                        null,
      #                                                                        null,
      #                                                                        null,
      #                                                                        null,
      #                                                                        inventTable_DS);
      #        taxExciseTypeController.parmFieldNumDSA(fieldNum(inventTable, DSA_IN));
      #        taxExciseTypeController.parmFieldNumExciseRecordType(fieldNum(inventTable, ExciseRecordType_IN));
      #        taxExciseTypeController.parmFieldNumTariffCodes(fieldNum(inventTable, ExciseTariffCodes_IN));
      #        element.updateDesign_IN();
      #    }
      #    // </GIN>
      #}
    ENDSOURCE
    SOURCE #initializeCategoryHierarchy
      #private void initializeCategoryHierarchy()
      #{
      #    categoryHierarchyReferenceGroup.value(EcoResCategoryHierarchy::findDefaultFormHierarchyRecId());
      #}
    ENDSOURCE
    SOURCE #initializeCategoryTree
      #public void initializeCategoryTree()
      #{
      #    EcoResCategoryLookupParameters lookupParameters = new EcoResCategoryLookupParameters(false, false, false);
      #    EcoResCategoryHierarchy retailCategoryHierarchy = this.getCategoryHierarchy();
      #    EcoResCategory root = EcoResCategory::getRoot(retailCategoryHierarchy.RecId);
      #
      #    selectedHierachyIsSpecial = EcoResCategoryHierarchyRole::existRoleHierarchyPair(EcoResCategoryNamedHierarchyRole::RetailSpecialGroup, retailCategoryHierarchy.RecId);
      #
      #    mHierarchyTree = new EcoResCategoryTreeDatasource( ecoResCategory_ds,
      #                                                       hierarchyTreeCtrl,
      #                                                       fieldNum(EcoResCategory, RecId),
      #                                                       fieldNum(EcoResCategory, ParentCategory),
      #                                                       fieldNum(EcoResCategory, Name),
      #                                                       false /* No ID in description */,
      #                                                       true,
      #                                                       fieldNum(EcoResCategory, Code),
      #                                                       retailCategoryHierarchy,
      #                                                       null,
      #                                                       lookupParameters,
      #                                                       fieldNum(EcoResCategory, NestedSetLeft) /* for tree sort order */
      #                                                       );
      #
      #    mHierarchyTree.initRoot(root.Name, root.RecId, mHierarchyTree.image(root) );
      #}
    ENDSOURCE
    SOURCE #initializeRetailKitOptions
      #public void initializeRetailKitOptions()
      #{
      #    boolean isRetailKit = RetailKit::existByProductMaster(ecoResProduct.RecId);
      #    retailKitMenuItem.enabled(isRetailKit);
      #    salesBasePrice_Price.enabled(!isRetailKit);
      #}
    ENDSOURCE
    SOURCE #isStocked
      #private boolean isStocked()
      #{
      #    if (inventModelGroupItem.ModelGroupId)
      #    {
      #        //we don't use InventTable.isStocked here because it doesn't work with templates
      #        return InventModelGroup::find(inventModelGroupItem.ModelGroupId).isStocked();
      #    }
      #
      #    return false;
      #}
    ENDSOURCE
    SOURCE #mcrEnableButtons
      #void mcrEnableButtons()
      #{
      #    boolean installmentEnabled = false;
      #
      #    if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
      #    {
      #        installmentEnabled = mcrInventTable.InstallmentEligible && !mcrInventTable.ContinuityScheduleId;
      #
      #        // Disable/Enable the installment setup button based on whether or not this item is eligible.
      #        mcrInstallmentSetup.enabled(installmentEnabled);
      #    }
      #
      #    if (RetailSMB::IsRetailSMBEnabled())
      #    {
      #        RetailSMB::SetVisible(element);
      #    }
      #}
    ENDSOURCE
    SOURCE #pdsFinishCWSetup
      #public void pdsFinishCWSetup()
      #{
      #    boolean isCWChecked = pdsCWItem.value();
      #
      #    if (isCWChecked)
      #    {
      #        if(!pdsCatchWeightItem.ItemId)
      #        {
      #            // this is not filled automatically when record is not found
      #            pdsCatchWeightItem.ItemId = inventTable.ItemId;
      #        }
      #    }
      #
      #}
    ENDSOURCE
    SOURCE #refreshInventTableModule
      #void refreshInventTableModule()
      #{
      #    inventTable_ds.reread();
      #    purch_ds.reread();
      #    invent_ds.reread();
      #    sales_ds.reread();
      #    inventTable_ds.refresh();
      #    inventTable_ds.active();
      #    costBasePrice.update();
      #    costBasePrice.update();
      #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
      #    {
      #        secondaryCost_RU.update();
      #    }
      #}
    ENDSOURCE
    SOURCE #run
      #public void run()
      #{
      #    super();
      #
      #    if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
      #    {
      #       this.initializeRetailKitOptions();
      #    }
      #}
    ENDSOURCE
    SOURCE #setAltItemProductDimensionFields
      #/// <summary>
      #/// Enables or disables the product dimension fields for alternative item.
      #/// </summary>
      #void setAltItemProductDimensionFields()
      #{
      #    boolean     altConfigActive;
      #    boolean     altSizeActive;
      #    boolean     altColorActive;
      #    boolean     altStyleActive;
      #    InventTable altInventTable;
      #
      #    altInventTable  = InventTable::find(inventTable.AltItemId);
      #    altConfigActive = altInventTable.RecId && altInventTable.configActive();
      #    altSizeActive   = altInventTable.RecId && altInventTable.sizeActive();
      #    altColorActive  = altInventTable.RecId && altInventTable.colorActive();
      #    altStyleActive  = altInventTable.RecId && altInventTable.styleActive();
      #
      #    inventTable_ds.object(fieldNum(InventTable, AltConfigId)).allowEdit(altConfigActive);
      #    inventTable_ds.object(fieldNum(InventTable, AltInventSizeId)).allowEdit(altSizeActive);
      #    inventTable_ds.object(fieldNum(InventTable, AltInventColorId)).allowEdit(altColorActive);
      #    inventTable_ds.object(fieldNum(InventTable, AltInventStyleId)).allowEdit(altStyleActive);
      #}
    ENDSOURCE
    SOURCE #setApplyTemplateMenuItem
      #/// <summary>
      #/// Enables or disables the Apply template menu item.
      #/// </summary>
      #void setApplyTemplateMenuItem()
      #{
      #    boolean hasTemplate = this.hasTemplate();
      #
      #    ecoResProductTemplateApply.enabled(hasTemplate && !isTemplate);
      #}
    ENDSOURCE
    SOURCE #setAssetGroupIdFields_RU
      #void setAssetGroupIdFields_RU()
      #{
      #    inventTable_DS.object(fieldNum(InventTable, AssetGroupId_RU)).allowEdit(! inventTable.AssetId_RU);
      #    inventTable_ds.object(fieldNum(InventTable, AssetGroupId_RU)).skip(inventTable.AssetId_RU != '');
      #    inventTable_DS.object(fieldNum(InventTable, AssetId_RU)).visible(ecoResProduct.ProductType == EcoResProductType::Item);
      #}
    ENDSOURCE
    SOURCE #setCustomsTariffCodeEnabled_IN
      #public void setCustomsTariffCodeEnabled_IN()
      #{
      #    inventTable_ds.object(fieldNum(InventTable, CustomsImportTariffCodeTable_IN)).allowEdit(inventTable.ItemType != ItemType::Service);
      #    inventTable_ds.object(fieldNum(InventTable, CustomsExportTariffCodeTable_IN)).allowEdit(inventTable.ItemType != ItemType::Service);
      #}
      #
    ENDSOURCE
    SOURCE #setCWQuantityFields
      #public void setCWQuantityFields()
      #{
      #    boolean                         isCWEnabled = pdsCWItem.value() && pdsCatchWeightItem.PdsCWUnitId;
      #    UnitOfMeasureDecimalPrecision   unitDecimals = UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(invent.UnitId));
      #
      #    pdsCatchWeightItem_ds.object(fieldNum(PdsCatchWeightItem, PdsCWMax)).allowEdit(isCWEnabled);
      #    pdsCatchWeightItem_ds.object(fieldNum(PdsCatchWeightItem, PdsCWMax)).skip(!isCWEnabled);
      #
      #    pdsCatchWeightItem_ds.object(fieldNum(PdsCatchWeightItem, PdsCWMin)).allowEdit(isCWEnabled);
      #    pdsCatchWeightItem_ds.object(fieldNum(PdsCatchWeightItem, PdsCWMin)).skip(!isCWEnabled);
      #
      #    pdsCatchWeightItem_PdsCWMin.noOfDecimals(unitDecimals);
      #    pdsCatchWeightItem_PdsCWMax.noOfDecimals(unitDecimals);
      #
      #    element.pdsFinishCWSetup();
      #}
    ENDSOURCE
    SOURCE #setEngineerFields
      #/// <summary>
      #/// Enables or disables the Engineer tab menu items.
      #/// </summary>
      #void setEngineerFields()
      #{
      #    boolean isStocked = this.isStocked();
      #
      #    inventTable_ds.object(fieldNum(InventTable, bomUnitId)).allowEdit(isStocked);
      #    inventTable_ds.object(fieldNum(InventTable, bomUnitId)).skip(!isStocked);
      #
      #    inventTable_ds.object(fieldNum(InventTable, ScrapConst)).allowEdit(isStocked);
      #    inventTable_ds.object(fieldNum(InventTable, ScrapConst)).skip(!(isStocked));
      #
      #    inventTable_ds.object(fieldNum(InventTable, ScrapVar)).allowEdit(isStocked);
      #    inventTable_ds.object(fieldNum(InventTable, ScrapVar)).skip(!(isStocked));
      #
      #    inventTable_ds.object(fieldNum(InventTable, bomLevel)).allowEdit(isStocked);
      #    inventTable_ds.object(fieldNum(InventTable, bomLevel)).skip(!(isStocked));
      #
      #    element.setNonBOMFields();
      #
      #
      #    inventTable_ds.object(fieldNum(InventTable, bomCalcGroupId)).allowEdit(isStocked);
      #    inventTable_ds.object(fieldNum(InventTable, bomCalcGroupId)).skip(!(isStocked));
      #
      #    inventTable_ds.object(fieldNum(InventTable, ProdPoolId)).allowEdit(isStocked);
      #    inventTable_ds.object(fieldNum(InventTable, ProdPoolId)).skip(!(isStocked));
      #
      #    inventTable_ds.object(fieldNum(InventTable, ProdGroupId)).allowEdit(isStocked);
      #    inventTable_ds.object(fieldNum(InventTable, ProdGroupId)).skip(!(isStocked));
      #
      #    inventTable_ds.object(fieldNum(InventTable, PropertyId)).allowEdit(isStocked);
      #    inventTable_ds.object(fieldNum(InventTable, PropertyId)).skip(!(isStocked));
      #
      #    inventTable_ds.object(fieldNum(InventTable, bomManualReceipt)).allowEdit(isStocked);
      #    inventTable_ds.object(fieldNum(InventTable, bomManualReceipt)).skip(!(isStocked));
      #
      #    inventTable_ds.object(fieldNum(InventTable, ProdFlushingPrincip)).allowEdit(isStocked);
      #    inventTable_ds.object(fieldNum(InventTable, ProdFlushingPrincip)).skip(!(isStocked));
      #
      #    element.setPBAFields();
      #}
    ENDSOURCE
    SOURCE #setEngineerMenuItems
      #/// <summary>
      #/// Enables or disables the Engineer tab menu items.
      #/// </summary>
      #void setEngineerMenuItems()
      #{
      #    InventItemType  inventItemType          = inventTable.inventItemType();
      #    boolean         isStocked               = this.isStocked();
      #    boolean         canHaveBOM              = inventTable.isBOMAllowed() && isStocked;
      #    boolean         canHaveFormula          = inventTable.isFormulaAllowed() && isStocked;
      #    boolean         isCoBy                  = inventTable.PmfProductType == PmfProductType::Co_Product || inventTable.PmfProductType == PmfProductType::By_Product;
      #    boolean         canHaveRoute            = inventItemType.canHaveRoutes() && isStocked;
      #    boolean         canBeProduced           = inventItemType.canBeProduced() && isStocked;
      #    boolean         isConfigActive          = inventTable.configActive();
      #    boolean         isDimensionBasedProduct = ecoResProduct.isProductMaster() && ecoResProduct_EcoResProductMaster.isDimensionBased();
      #    CaseCategoryHierarchyDetail caseCategoryHierarchyDetail;
      #
      #    //BOM
      #    bomConsistOfAction.enabled(canHaveBOM);
      #    bomDesignerAction.enabled(canHaveBOM);
      #    bomPartOfAction.enabled(isStocked);
      #
      #    //Route
      #    routeInventProdAction.enabled(canHaveRoute);
      #
      #    //Configuration
      #    bomConfigRouteAction.enabled(canHaveBOM && isConfigActive);
      #    configHierarchyAction.enabled(canHaveBOM && isConfigActive);
      #    ecoResDimensionBasedConfiguration.enabled(isDimensionBasedProduct);
      #
      #    //BOM Report
      #    bomReportFinishedAction.enabled(canBeProduced);
      #    bomReportFinishMaxAction.enabled(canBeProduced
      #        || isCoBy
      #        );
      #
      #    //View
      #    pmfProdProcessBatch.enabled(canHaveFormula);
      #    prodTableAction.enabled(canHaveBOM);
      #
      #    // Engineering Change
      #    select firstonly RecId from caseCategoryHierarchyDetail
      #                           where caseCategoryHierarchyDetail.CategoryType == CaseCategoryType::EngineeringChange;
      #
      #    engineeringChangeGroupCreateCase.enabled(caseCategoryHierarchyDetail.RecId);
      #    engineeringChangeGroupAssociateCase.enabled(caseCategoryHierarchyDetail.RecId);
      #    engineeringChangeGroupAddToLog.enabled(caseCategoryHierarchyDetail.RecId);
      #}
    ENDSOURCE
    SOURCE #setFiscalLIFOFields
      #/// <summary>
      #/// Enables or disables the Fiscal LIFO fields.
      #/// </summary>
      #void setFiscalLIFOFields()
      #{
      #    inventTable_ds.object(fieldNum(InventTable,InventFiscalLIFOGroup)).allowEdit(inventTable.ItemType != ItemType::Service);
      #    inventTable_ds.object(fieldNum(InventTable,FiscalLIFOAvoidCalc)).allowEdit(inventTable.ItemType != ItemType::Service);
      #    inventTable_ds.object(fieldNum(InventTable,FiscalLIFONormalValue)).allowEdit(inventTable.ItemType != ItemType::Service);
      #    inventTable_ds.object(fieldNum(InventTable,FiscalLIFONormalValueCalc)).allowEdit(inventTable.ItemType != ItemType::Service);
      #}
    ENDSOURCE
    SOURCE #setItemStockedDependentObjects
      #public void setItemStockedDependentObjects()
      #{
      #    element.setManageInventoryMenuItems();
      #    element.setEngineerMenuItems();
      #    element.setPlanMenuItems();
      #
      #    element.setManageInventoryFields();
      #    element.setEngineerFields();
      #    element.setPlanFields();
      #}
    ENDSOURCE
    SOURCE #setManageInventoryFields
      #/// <summary>
      #/// Enables or disables the Manage Inventory tab fields.
      #/// </summary>
      #void setManageInventoryFields()
      #{
      #    boolean isStocked = this.isStocked();
      #
      #    inventTable_ds.object(fieldNum(InventTable, BatchNumGroupId)).allowEdit(isStocked);
      #    inventTable_ds.object(fieldNum(InventTable, BatchNumGroupId)).skip(!isStocked);
      #
      #    inventTable_ds.object(fieldNum(InventTable, SerialNumGroupId)).allowEdit(isStocked);
      #    inventTable_ds.object(fieldNum(InventTable, SerialNumGroupId)).skip(!(isStocked));
      #
      #    this.setRFIDFields();
      #
      #    inventTable_ds.object(fieldNum(InventTableModule, OverDeliveryPct)).allowEdit(isStocked);
      #    inventTable_ds.object(fieldNum(InventTableModule, OverDeliveryPct)).skip(!(isStocked));
      #
      #    inventTable_ds.object(fieldNum(InventTableModule, UnderDeliveryPct)).allowEdit(isStocked);
      #    inventTable_ds.object(fieldNum(InventTableModule, UnderDeliveryPct)).skip(!(isStocked));
      #
      #    inventTable_ds.object(fieldNum(InventItemLocation, CountGroupId)).allowEdit(isStocked);
      #    inventTable_ds.object(fieldNum(InventItemLocation, CountGroupId)).skip(!(isStocked));
      #}
    ENDSOURCE
    SOURCE #setManageInventoryMenuItems
      #/// <summary>
      #/// Enables or disables the Manage Inventory tab menu items.
      #/// </summary>
      #void setManageInventoryMenuItems()
      #{
      #    boolean isStocked = this.isStocked();
      #
      #    buttonGroupManageInventoryView.enabled(isStocked && !isTemplate);
      #    buttonGroupManageInventoryWarehouse.enabled(isStocked && !isTemplate);
      #    buttonGroupManageInventoryQuality.enabled(isStocked && !isTemplate);
      #
      #    inventItemLocationAction.enabled(inventTable.storageDimensionGroup() && !isTemplate);
      #}
    ENDSOURCE
    SOURCE #setMarkupCodeField_RU
      #void setMarkupCodeField_RU()
      #{
      #    boolean isAllowed = ! this.isStocked();
      #
      #    inventTable_ds.object(fieldNum(InventTable, MarkupCode_RU)).allowEdit(isAllowed);
      #    inventTable_ds.object(fieldNum(InventTable, MarkupCode_RU)).skip(! isAllowed);
      #}
    ENDSOURCE
    SOURCE #setNonBOMFields
      #void setNonBOMFields()
      #{
      #    InventItemType  inventItemType  = inventTable.inventItemType();
      #    boolean         isStocked       = this.isStocked();
      #    boolean         canHaveBOM     = inventTable.isFormulaOrBOMAllowed() && isStocked;
      #    boolean         isPlanningItem = inventTable.PmfProductType == PmfProductType::MainItem;
      #    boolean         allowPhantom;
      #
      #    boolean         canBeProduced   = inventItemType.canBeProduced()  && isStocked;
      #
      #
      #    allowPhantom = canHaveBOM && !isPlanningItem && !pdsIsCWItem(inventTable.ItemId);
      #    inventTable_ds.object(fieldNum(InventTable, Phantom)).allowEdit(allowPhantom);
      #    inventTable_ds.object(fieldNum(InventTable, Phantom)).skip(!allowPhantom);
      #
      #    inventTable_ds.object(fieldNum(InventTable, AutoReportFinished)).allowEdit(canBeProduced && !inventTable.Phantom);
      #    inventTable_ds.object(fieldNum(InventTable, AutoReportFinished)).skip(!(canBeProduced && !inventTable.Phantom));
      #}
    ENDSOURCE
    SOURCE #setPBAFields
      #/// <summary>
      #/// Enables or disables the fields if the item is pbaConfigurable.
      #/// </summary>
      #void setPBAFields()
      #{
      #    inventTable_ds.object(fieldNum(InventTable, pbaHideDialog)).allowEdit(inventTable.pbaItemConfigurable);
      #    inventTable_ds.object(fieldNum(InventTable, pbaHideDialog)).skip(!inventTable.pbaItemConfigurable);
      #
      #    inventTable_ds.object(fieldNum(InventTable, pbaHideApproval)).allowEdit(inventTable.pbaItemConfigurable);
      #    inventTable_ds.object(fieldNum(InventTable, pbaHideApproval)).skip(!inventTable.pbaItemConfigurable);
      #
      #    inventTable_ds.object(fieldNum(InventTable, pbaAutoStart)).allowEdit(inventTable.pbaItemConfigurable);
      #    inventTable_ds.object(fieldNum(InventTable, pbaAutoStart)).skip(!inventTable.pbaItemConfigurable);
      #
      #    inventTable_ds.object(fieldNum(InventTable, pbaMandatoryConfig)).allowEdit(inventTable.pbaItemConfigurable);
      #    inventTable_ds.object(fieldNum(InventTable, pbaMandatoryConfig)).skip(!inventTable.pbaItemConfigurable);
      #
      #    inventTable_ds.object(fieldNum(InventTable, pbaInventItemGroupId)).allowEdit(inventTable.pbaItemConfigurable);
      #    inventTable_ds.object(fieldNum(InventTable, pbaInventItemGroupId)).skip(!inventTable.pbaItemConfigurable);
      #}
    ENDSOURCE
    SOURCE #setPDSPotencyFields
      #/// <summary>
      #///     Enables or disables the potency fields on the form.
      #/// </summary>
      #public void setPDSPotencyFields()
      #{
      #    inventTable_ds.object(fieldNum(InventTable, pdsPotencyAttribRecording)).allowEdit(inventTable.pdsBaseAttributeId != '');
      #}
      #
    ENDSOURCE
    SOURCE #setPlanFields
      #/// <summary>
      #/// Enables or disables the Plan tab fields.
      #/// </summary>
      #void setPlanFields()
      #{
      #    boolean isStocked = this.isStocked();
      #
      #    inventTable_ds.object(fieldNum(InventTable, ForecastDMPInclude)).allowEdit(isStocked);
      #    inventTable_ds.object(fieldNum(InventTable, ForecastDMPInclude)).skip(!isStocked);
      #
      #    inventTable_ds.object(fieldNum(InventTable, ReqGroupId)).allowEdit(isStocked);
      #    inventTable_ds.object(fieldNum(InventTable, ReqGroupId)).skip(!(isStocked));
      #}
    ENDSOURCE
    SOURCE #setPlanMenuItems
      #/// <summary>
      #/// Enables or disables the Plan tab menu items.
      #/// </summary>
      #void setPlanMenuItems()
      #{
      #    boolean isStocked = this.isStocked();
      #
      #    forecastInventAction.enabled(isStocked && !isTemplate);
      #    buttonGroupPlanCoverage.enabled(isStocked && !isTemplate);
      #    buttonGroupPlanRequirement.enabled(isStocked && !isTemplate);
      #}
    ENDSOURCE
    SOURCE #setPmfObjects
      #public void setPmfObjects()
      #{
      #    boolean     isServiceItem       = inventTable.ItemType == ItemType::Service;
      #    boolean     batchActivated      = inventTable.isItemBatchActivated() && !isServiceItem && inventModelGroupItem.ModelGroupId && inventModelGroupItem.modelGroup().isStocked();
      #    boolean     isFormulaAllowed    = inventTable.isFormulaAllowed();
      #    boolean     isBOMAllowed        = inventTable.isBOMAllowed();
      #    boolean     isPlanningItem      = inventTable.PmfProductType == PmfProductType::MainItem && !isServiceItem;
      #    boolean     shelfLifeCapable    = inventTable.pdsIsShelfLifeCapable();
      #    boolean     shelfLifeMandatory  = hasFieldAccess(tableNum(InventTable), fieldNum(InventTable, PdsShelfLife), AccessType::Edit)
      #                                      && inventTable.pdsIsShelfLifeMandatory();
      #    boolean     bestBeforeMandatory = hasFieldAccess(tableNum(InventTable), fieldNum(InventTable, PdsBestBefore), AccessType::Edit)
      #                                      && inventTable.pdsIsBestBeforeMandatory();
      #    boolean     batchDateCalculationCapable = batchActivated
      #                                                && hasFieldAccess(tableNum(InventTable), fieldNum(InventTable, BatchMergeDateCalculationMethod), AccessType::Edit);
      #
      #    if (#PmfEnabled)
      #    {
      #        bomConsistOfAction.enabled(isBOMAllowed);
      #        bomDesignerAction.enabled(isBOMAllowed);
      #        bomPartOfAction.enabled(!isFormulaAllowed && !isPlanningItem);
      #
      #        pmfFormulaConsistOfAction.enabled(isFormulaAllowed);
      #        pmfFormulaDesignerAction.enabled(isFormulaAllowed);
      #        pmfFormulaPartOfAction.enabled(!isBOMAllowed && !isPlanningItem);
      #
      #        pmfBulkItemConv.enabled(inventTable.PmfProductType == PmfProductType::Formula);
      #        pmfPackOnHand.enabled(PmfBulkItemConv::isBulkorPack(inventTable.ItemId));
      #        pmfFormulaPlanning.enabled(!isServiceItem);
      #        pmfFormulaPlanning_PmfPlanningItemId.enabled(inventTable.PmfProductType == PmfProductType::Co_Product);
      #
      #        inventTable_ds.object(fieldNum(InventTable, PmfYieldPct)).allowEdit(isFormulaAllowed);
      #        inventTable_ds.object(fieldNum(InventTable, PmfYieldPct)).skip(!isFormulaAllowed);
      #    }
      #
      #    inventTable_ds.object(fieldNum(InventTable, BatchMergeDateCalculationMethod)).allowEdit(batchDateCalculationCapable);
      #    inventTable_ds.object(fieldNum(InventTable, BatchMergeDateCalculationMethod)).skip(!batchDateCalculationCapable);
      #    inventTable_ds.object(fieldNum(InventTable, BatchMergeDateCalculationMethod)).mandatory(batchDateCalculationCapable);
      #
      #    if (#PdsBatchAttribEnabled)
      #    {
      #        pdsButtonGroupManageInventoryBatchAttrib.enabled(batchActivated);
      #
      #        pdsBatchAttribByItemCustomer.enabled(batchActivated && PdsBatchAttribByItem::existItemIdAny(inventTable.ItemId));
      #
      #        inventTable_ds.object(fieldNum(InventTable, PdsBestBefore)).allowEdit(shelfLifeCapable);
      #        inventTable_ds.object(fieldNum(InventTable, PdsBestBefore)).skip(!shelfLifeCapable);
      #
      #        inventTable_ds.object(fieldNum(InventTable, PdsShelfAdvice)).allowEdit(shelfLifeCapable);
      #        inventTable_ds.object(fieldNum(InventTable, PdsShelfAdvice)).skip(!shelfLifeCapable);
      #
      #        inventTable_ds.object(fieldNum(InventTable, PdsShelfLife)).allowEdit(shelfLifeCapable);
      #        inventTable_ds.object(fieldNum(InventTable, PdsShelfLife)).skip(!shelfLifeCapable);
      #
      #        inventTable_ds.object(fieldNum(InventTable, PdsShelfLife)).mandatory(shelfLifeMandatory);
      #        inventTable_ds.object(fieldNum(InventTable, PdsBestBefore)).mandatory(bestBeforeMandatory);
      #    }
      #    else
      #    {
      #        //be sure to revert the mandatory status on the cases its not valid to add anything
      #        inventTable_ds.object(fieldNum(InventTable, PdsShelfLife)).mandatory(false);
      #        inventTable_ds.object(fieldNum(InventTable, PdsBestBefore)).mandatory(false);
      #    }
      #
      #
      #    if (    #PdsEnabled
      #        &&  (   (shelfLifeMandatory && !inventTable.PdsShelfLife)
      #            ||  (bestBeforeMandatory && !inventTable.PdsBestBefore)
      #            ||  (ecoResProduct.PdsCWProduct  && !pdsCatchWeightItem.RecId)))
      #    {
      #        //ignore the "save record" status, otherwise, the flow is locked in case the setup is missing
      #        editRecord.saveRecord(false);
      #    }
      #    else
      #    {
      #        editRecord.saveRecord(true);
      #    }
      #
      #    if (#PdsRebateEnabled)
      #    {
      #        inventTable_ds.object(fieldNum(InventTable, PdsItemRebateGroupId)).allowEdit(!isServiceItem);
      #        inventTable_ds.object(fieldNum(InventTable, PdsItemRebateGroupId)).skip(isServiceItem);
      #
      #        inventTable_ds.object(fieldNum(InventTable, PdsFreightAllocationGroupId)).allowEdit(!isServiceItem);
      #        inventTable_ds.object(fieldNum(InventTable, PdsItemRebateGroupId)).skip(isServiceItem);
      #    }
      #
      #    if (ecoResProduct.PdsCWProduct)
      #    {
      #        pdsCWItem.value(1);
      #    }
      #    else
      #    {
      #        pdsCWItem.value(0);
      #    }
      #
      #    pdsCatchWeightItem_ds.object(fieldNum(PdsCatchWeightItem, PdsCWUnitId)).allowEdit(pdsCWItem.value());
      #    pdsCatchWeightItem_ds.object(fieldNum(PdsCatchWeightItem, PdsCWUnitId)).skip(!pdsCWItem.value());
      #
      #    element.setCWQuantityFields();
      #
      #    if (#PdsMRCEnabled)
      #    {
      #        pdsButtonGroupManageInventoryRegulatory.enabled(!isServiceItem);
      #    }
      #}
    ENDSOURCE
    SOURCE #setProductDimensionFields
      #/// <summary>
      #/// Enables or disables the product dimension fields.
      #/// </summary>
      #void setProductDimensionFields()
      #{
      #    boolean     isProductMaster         = EcoResProduct.isProductMaster();
      #    boolean     configActive            = isProductMaster && inventTable.configActive();
      #    boolean     sizeActive              = isProductMaster && inventTable.sizeActive();
      #    boolean     colorActive             = isProductMaster && inventTable.colorActive();
      #    boolean     styleActive             = isProductMaster && inventTable.styleActive();
      #
      #    element.lock();
      #
      #    extCodeValueTableAction.enabled(!isProductMaster);
      #
      #    inventTable_ds.object(fieldNum(InventTable, StandardConfigId)).allowEdit(configActive);
      #    inventTable_ds.object(fieldNum(InventTable, StandardConfigId)).skip(!configActive);
      #
      #    inventTable_ds.object(fieldNum(InventTable, StandardInventSizeId)).allowEdit(sizeActive);
      #    inventTable_ds.object(fieldNum(InventTable, StandardInventSizeId)).skip(!sizeActive);
      #
      #    inventTable_ds.object(fieldNum(InventTable, StandardInventColorId)).allowEdit(colorActive);
      #    inventTable_ds.object(fieldNum(InventTable, StandardInventColorId)).skip(!colorActive);
      #
      #    inventTable_ds.object(fieldNum(InventTable, StandardInventStyleId)).allowEdit(styleActive);
      #    inventTable_ds.object(fieldNum(InventTable, StandardInventStyleId)).skip(!styleActive);
      #
      #    inventTable_ds.object(fieldNum(InventTable, ItemDimCostPrice)).allowEdit(isProductMaster);
      #    inventTable_ds.object(fieldNum(InventTable, ItemDimCostPrice)).skip(!isProductMaster);
      #
      #    element.setAltItemProductDimensionFields();
      #
      #    element.unLock();
      #}
    ENDSOURCE
    SOURCE #setProductDimensionGroupField
      #public void setProductDimensionGroupField()
      #{
      #    boolean     allowEditProductDimensionGroup = !ecoResProduct.isReleased();
      #
      #    // Product dimension group for product master can only be changed if there are no variants created
      #    if (ecoResProduct.isProductMaster())
      #    {
      #        allowEditProductDimensionGroup = !ecoResProduct_EcoResProductMaster.hasProductVariants();
      #    }
      #
      #    ecoResProductDimensionGroupProduct_ds.object(fieldNum(EcoResProductDimensionGroupProduct, ProductDimensionGroup)).allowEdit(allowEditProductDimensionGroup);
      #    ecoResProductDimensionGroupProduct_ds.object(fieldNum(EcoResProductDimensionGroupProduct, ProductDimensionGroup)).skip(!allowEditProductDimensionGroup);
      #}
    ENDSOURCE
    SOURCE #setProductModelingPolicyFields
      #public void setProductModelingPolicyFields()
      #{
      #    boolean     isProductMaster                              = ecoResProduct.isProductMaster();
      #    boolean     allowEditIsAutomaticVariantGenerationEnabled = isProductMaster && ecoResProduct_EcoResProductMaster.isPredefinedVariants();
      #    boolean     allowEditIsReuseExistingConfigurationEnabled = isProductMaster && ecoResProduct_EcoResProductMaster.isRuleBased();
      #
      #    ecoResProductMasterModelingPolicy_ds.object(fieldNum(EcoResProductMasterModelingPolicy, IsVariantGenerationEnabled)).allowEdit(allowEditIsAutomaticVariantGenerationEnabled);
      #    ecoResProductMasterModelingPolicy_ds.object(fieldNum(EcoResProductMasterModelingPolicy, IsVariantGenerationEnabled)).skip(!allowEditIsAutomaticVariantGenerationEnabled);
      #    ecoResProductMasterModelingPolicy_ds.object(fieldNum(EcoResProductMasterModelingPolicy, IsReuseConfigurationEnabled)).allowEdit(allowEditIsReuseExistingConfigurationEnabled);
      #    ecoResProductMasterModelingPolicy_ds.object(fieldNum(EcoResProductMasterModelingPolicy, IsReuseConfigurationEnabled)).skip(!allowEditIsReuseExistingConfigurationEnabled);
      #}
    ENDSOURCE
    SOURCE #setQualityManagementMenuItemsVisibility
      #void setQualityManagementMenuItemsVisibility()
      #{
      #    buttonGroupManageInventoryQuality.visible(InventParameters::find().UseQualityManagement);
      #}
    ENDSOURCE
    SOURCE #setRFIDFields
      #/// <summary>
      #/// Enables or disables the RFID fields.
      #/// </summary>
      #void setRFIDFields()
      #{
      #    boolean                             isItemService           = inventTable.ItemType == ItemType::Service;
      #    EcoResStorageDimensionGroupRecId    storageDimensionGroup   = inventTable.storageDimensionGroup();
      #    EcoResTrackingDimensionGroupRecId   trackingDimensionGroup  = inventTable.trackingDimensionGroup();
      #
      #    if (!isItemService &&
      #        trackingDimensionGroup &&
      #        EcoResTrackingDimGroupSetup::newDimensionGroup(trackingDimensionGroup).getFieldSetup(fieldNum(InventDim,InventSerialId)).isActive())
      #    {
      #        inventTable_ds.object(fieldNum(InventTable, ItemTaggingLevel)).allowEdit(true);
      #        inventTable_ds.object(fieldNum(InventTable, ItemTaggingLevel)).skip(false);
      #    }
      #    else
      #    {
      #        inventTable_ds.object(fieldNum(InventTable, ItemTaggingLevel)).allowEdit(false);
      #        inventTable_ds.object(fieldNum(InventTable, ItemTaggingLevel)).skip(true);
      #    }
      #
      #    if (!isItemService &&
      #        storageDimensionGroup &&
      #        EcoResStorageDimGroupSetup::newDimensionGroup(storageDimensionGroup).getFieldSetup(fieldNum(InventDim,wmsPalletId)).isActive())
      #    {
      #        inventTable_ds.object(fieldNum(InventTable, PalletTagging)).allowEdit(true);
      #        inventTable_ds.object(fieldNum(InventTable, PalletTagging)).skip(false);
      #    }
      #    else
      #    {
      #        inventTable_ds.object(fieldNum(InventTable, PalletTagging)).allowEdit(false);
      #        inventTable_ds.object(fieldNum(InventTable, PalletTagging)).skip(true);
      #    }
      #}
    ENDSOURCE
    SOURCE #setServiceCodeEnabled_IN
      #public void setServiceCodeEnabled_IN()
      #{
      #    inventTable_ds.object(fieldNum(InventTable, ServiceCodeTable_IN)).enabled(inventTable.ItemType == ItemType::Service);
      #
      #    if (inventTable.ItemType != ItemType::Service)
      #    {
      #        inventTable.ServiceCodeTable_IN = 0;
      #    }
      #
      #    inventTable_ds.refresh();
      #}
      #
    ENDSOURCE
    SOURCE #setTMSInventEnabledEnabled
      #/// <summary>
      #/// Enables or disables the control "Item is TMS enabled".
      #/// </summary>
      #public void setTMSInventEnabledEnabled()
      #{
      #    tmsInventEnabled_Enabled.enabled(!WHSInventEnabled::exist(inventTable.ItemId));
      #}
    ENDSOURCE
    SOURCE #setUseInvoiceMatchingItemEnabled
      #/// <summary>
      #/// Enables or disables the field and buttons based upon the status of 'Use invoice matching' for the current company.
      #/// </summary>
      #public void setUseInvoiceMatchingItemEnabled()
      #{
      #    VendParameters  vendParameters;
      #    boolean         enable;
      #
      #    vendParameters = VendParameters::find();
      #    enable = (vendParameters.editUseInvoiceMatching() == NoYes::Yes);
      #
      #    inventTable_ds.object(fieldNum(InventTable, ItemPriceToleranceGroupId)).allowEdit(enable);
      #    inventTable_ds.object(fieldNum(InventTable, ItemPriceToleranceGroupId)).skip(!enable);
      #
      #    purchLineMatchingPolicyAction.visible(enable);
      #    purchPriceToleranceAction.visible(enable);
      #}
    ENDSOURCE
    SOURCE #setVisible_IN
      #public void setVisible_IN()
      #{
      #    TaxParameters       taxParametersLoc;
      #    boolean             isTaxParametersMarked = TaxParameters::checkTaxParameters_IN();
      #
      #    taxParametersLoc = TaxParameters::find();
      #    serviceCode_IN.visible(taxParametersLoc.ServiceTax_IN);
      #    customsTariff_IN.visible(taxParametersLoc.Customs_IN);
      #    exciseTariffcode_IN.visible(taxParametersLoc.Excise_IN);
      #    purch_ds.object(fieldNum(InventTableModule, MaximumRetailPrice_IN)).visible(isTaxParametersMarked);
      #    invent_ds.object(fieldNum(InventTableModule, MaximumRetailPrice_IN)).visible(isTaxParametersMarked);
      #    sales_ds.object(fieldNum(InventTableModule, MaximumRetailPrice_IN)).visible(isTaxParametersMarked);
      #    eximIncentiveSchemes_IN.visible(taxParametersLoc.EximIncentiveSchemes_IN);
      #    inventTable_ds.object(fieldNum(InventTable, CustomsExportTariffCodeTable_IN)).visible(taxParametersLoc.Customs_IN);
      #    inventTable_ds.object(fieldNum(InventTable, CustomsImportTariffCodeTable_IN)).visible(taxParametersLoc.Customs_IN);
      #    inventTable_ds.object(fieldNum(InventTable, EximProductGroupTable_IN)).visible(taxParametersLoc.Customs_IN);
      #    TransferPrice_IN.visible(InventParameters::find().ActivateStockTransfer_IN);
      #}
    ENDSOURCE
    SOURCE #setWHSMenuItems
      #/// <summary>
      #/// Enables or disables the WHS tab menu items.
      #/// </summary>
      #public void setWHSMenuItems()
      #{
      #    boolean isWHSEnabled    = WHSInventEnabled::exist(inventTable.ItemId);
      #    boolean isProductMaster = EcoResProduct.isProductMaster();
      #
      #    whsPhysDim.enabled(isWHSEnabled);
      #    whsDescription.enabled(isWHSEnabled);
      #    whsFixedLocations.enabled(isWHSEnabled);
      #    whsProductVariantFixedLocations.enabled(isWHSEnabled && isProductMaster);
      #    whsProductVariantFixedLocations.visible(isWHSEnabled && isProductMaster);
      #    whsFilterCode1.enabled(isWHSEnabled);
      #    whsFilterGroup1.enabled(isWHSEnabled);
      #    whsProduction.enabled(isWHSEnabled);
      #    whsEcoResProductTrnsCodes_NMFC.enabled(isWHSEnabled);
      #    whsAdditionalCodes.enabled(isWHSEnabled);
      #
      #    buttonWHSInventTableReservationHierarchy.enabled(isWHSEnabled && !isTemplate);
      #}
    ENDSOURCE
    SOURCE #updateDesign_IN
      #/// <summary>
      #/// Updates design for India fields.
      #/// </summary>
      #// <GIN>
      #public void updateDesign_IN()
      #{
      #    element.lock();
      #
      #    if (!TaxParameters::find().Customs_IN)
      #    {
      #        customsTariff_IN.visible(false);
      #    }
      #    else
      #    {
      #        customsTariff_IN.visible(true);
      #    }
      #
      #    if (inventTable.ItemType == ItemType::Item
      #        || InventItemSetupSupplyType::find(inventTable.ItemId, inventTable.DataAreaId).DefaultOrderType == ReqPOType::Production)
      #    {
      #        exciseTariffcode_IN.allowEdit(true);
      #    }
      #    else
      #    {
      #        exciseTariffcode_IN.allowEdit(false);
      #    }
      #
      #    taxExciseTypeController.enableDisableTariffCodes();
      #    taxExciseTypeController.enableDisableDSA(ExciseType_IN::Manufacturer, inventTable.ExciseRecordType_IN, inventTable.ItemId);
      #    taxExciseTypeController.mandatoryTariffCodes();
      #
      #    element.unLock();
      #    this.redraw();
      #}
      #// </GIN>
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #InventTable
          Table               #InventTable
          Index               #ItemIdx
          AllowCreate         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #exciseManufacture_IN
          #/// <summary>
          #/// Edits manufacturer excise record type.
          #/// </summary>
          #/// <param name="_set">
          #/// True to set.
          #/// </param>
          #/// <param name="_exciseManufacture_IN">
          #/// Manufacturer excise record type.
          #/// </param>
          #/// <returns>
          #/// Manufacturer excise record type.
          #/// </returns>
          #// <GIN>
          #public edit ExciseManufacture_IN exciseManufacture_IN(
          #    boolean                 _set,
          #    ExciseManufacture_IN    _exciseManufacture_IN)
          #{
          #    ExciseManufacture_IN    exciseManufacture;
          #
          #    inventTable.ExciseRecordType_IN = TaxExciseTypeController_IN::exciseManufacture(
          #        _set,
          #        _exciseManufacture_IN,
          #        inventTable.ExciseRecordType_IN);
          #
          #    exciseManufacture = taxExciseTypeController.exciseRecordType2ExciseManufacture(inventTable.ExciseRecordType_IN);
          #
          #    if (_set)
          #    {
          #        if (inventTable.ExciseRecordType_IN != ExciseRecordType_IN::None)
          #        {
          #            inventTable.DSA_IN = false;
          #        }
          #
          #        // update UI field InventTable_ExciseTariffCodes_IN and InventTable_DSA_IN
          #        element.updateDesign_IN();
          #    }
          #
          #    return exciseManufacture;
          #}
          #// </GIN>
        ENDSOURCE
        SOURCE #init
          #public void init()
          #{
          #    QueryBuildDataSource        qbs;
          #    PdsComdPricingTemplateLine  pdsComdPricingTemplateLine;
          #    InventTable                 refInventTable;
          #
          #    super();
          #
          #    isTemplate = SysRecordTemplate::isTemplateEditFormRecord(inventTable);
          #
          #    if (element.args() && element.args().record())
          #    {
          #        qbs = this.query().dataSourceTable(tableNum(InventTable));
          #
          #        switch (element.args().dataset())
          #        {
          #            case tableNum(PdsComdPricingTemplateLine):
          #                // Remove the dynalink created by the kernel between InventTable.ItemId and InventTable.PmfPlanningItemId
          #                qbs.clearDynalinks();
          #                pdsComdPricingTemplateLine = element.args().record();
          #                SysQuery::findOrCreateRange(qbs, fieldNum(InventTable,ItemId)).value(queryValue(pdsComdPricingTemplateLine.MarginItemRelation));
          #            break;
          #
          #            case tableNum(InventTable):
          #                // in cases where dynalinks were not created (manual form launch)
          #                if (!element.args().caller())
          #                {
          #                    qbs.clearDynalinks();
          #                    refInventTable = element.args().record();
          #                    SysQuery::findOrCreateRange(qbs, fieldNum(InventTable,ItemId)).value(queryValue(refInventTable.ItemId));
          #                }
          #            break;
          #        }
          #    }
          #}
          #
        ENDSOURCE
        SOURCE #active
          #public int active()
          #{
          #    int ret;
          #
          #    ret = super();
          #    element.lock();
          #
          #    dimensionDefaultingController.activated(true);
          #
          #    if (pmfFormCtrl)
          #    {
          #        pmfFormCtrl.dataSourceActivePost();
          #    }
          #
          #    element.setPmfObjects();
          #
          #    element.setTMSInventEnabledEnabled();
          #    // <GIN>
          #    if (TaxParameters::checkTaxParameters_IN())
          #    {
          #        element.setServiceCodeEnabled_IN();
          #        element.setCustomsTariffCodeEnabled_IN();
          #        element.updateDesign_IN();
          #    }
          #
          #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
          #    {
          #        TransferPrice_IN.visible(InventParameters::find().ActivateStockTransfer_IN);
          #    }
          #    // </GIN>
          #    if (BrazilParameters::isEnabled())
          #    {
          #        element.enableServiceFields_BR();
          #        element.enableButtonFci_BR();
          #    }
          #
          #    element.mcrEnableButtons();
          #
          #    if (RetailParameters::find().GiftcardItem == inventTable.ItemId)
          #    {
          #        mcrInventTable_ds.object(fieldNum(MCRInventTable, ShipAlone)).enabled(false);
          #    }
          #
          #    mcrInventTable_ds.object(fieldNum(MCRInventTable, DropShipment)).enabled(true);
          #    mcrInventTable_ds.object(fieldNum(MCRInventTable, DefaultDropShipmentWarehouse)).enabled(true);
          #
          #    element.unLock();
          #
          #
          #    return ret;
          #}
        ENDSOURCE
        SOURCE #delete
          #public void delete()
          #{
          #    super();
          #    dimensionDefaultingController.deleted();
          #}
        ENDSOURCE
        SOURCE #write
          #// AOSRunMode::Client
          #void write()
          #{
          #    WHSPhysDimUOM       whsPhysDimUOM;
          #    EcoResProductMaster ecoResProductMaster;
          #
          #    ttsbegin;
          #
          #    dimensionDefaultingController.writing();
          #    releasedProduct.checkAndUpdateNonStockedDependencies();
          #
          #    if (#PmfEnabled)
          #    {
          #        if (InventTable.PmfProductType == PmfProductType::Formula && ecoResProduct.isProductMaster())
          #        {
          #            ecoResProductMaster = ecoResProduct as EcoResProductMaster;
          #            if (ecoResProductMaster.VariantConfigurationTechnology == EcoResVariantConfigurationTechnologyType::ConstraintBased)
          #            {
          #                throw error("@SYP4881585");
          #            }
          #        }
          #        this.writePmfProductTypeChange();
          #    }
          #
          #    super();
          #
          #    if (!mcrInventTable.RecId)
          #    {
          #        // need to force the write in the create case since the form won't do it.
          #        mcrInventTable.InventTable = inventTable.RecId;
          #        mcrInventTable.write();
          #    }
          #
          #    // Update the dimensions on the WHSPhysDimUOM Table
          #    select firstonly forupdate whsPhysDimUOM
          #        where whsPhysDimUOM.ItemId == inventTable.ItemId    &&
          #              whsPhysDimUOM.uom == InventTableModule::find(inventTable.ItemId, ModuleInventPurchSales::Invent).UnitId;
          #
          #    if (whsPhysDimUOM)
          #    {
          #        whsPhysDimUOM.Depth  = inventTable.GrossDepth;
          #        whsPhysDimUOM.Height = inventTable.GrossHeight;
          #        whsPhysDimUOM.Width  = inventTable.GrossWidth;
          #        whsPhysDimUOM.Weight = inventTable.NetWeight;
          #        whsPhysDimUOM.update();
          #    }
          #
          #    ttscommit;
          #
          #    // update sales price
          #    sales_ds.reread();
          #}
        ENDSOURCE
        SOURCE #validateWrite
          #boolean validateWrite()
          #{
          #    boolean ret = true;
          #
          #    ret = super();
          #
          #    if (ret && inventTable.isProductVariantUnitConversionEnabled())
          #    {
          #        ret = inventTable.validateProductVariantUnitConversion(invent.UnitId, purch.UnitId, sales.UnitId);
          #    }
          #
          #    if (   inventModelGroupItem.ModelGroupId
          #        && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
          #        && !inventModelGroupItem.modelGroup().inventModelTypeSecCur_RU().validateWriteInventTable(inventTable))
          #    {
          #        return false;
          #    }
          #
          #    if (#PmfEnabled)
          #    {
          #        if (inventTable.ItemType == ItemType::Item && !inventTable_ds.checkPmfProductTypeChange())
          #        {
          #            ret = false;
          #        }
          #        if (    (inventTable.orig().PmfProductType  == PmfProductType::None)
          #            &&  (inventTable.PmfProductType         !=  PmfProductType::None)
          #            &&  (inventModelGroupItem.ModelGroupId  && (!inventModelGroupItem.modelGroup().isStocked())))
          #        {
          #            ret = checkFailed("@PDS1440");
          #            inventTable.PmfProductType = PmfProductType::None;
          #        }
          #    }
          #
          #    releasedProduct.checkAndUpdateNonStockedDependencies();
          #    ret = ret && releasedProduct.validateWrite();
          #    return ret;
          #}
          #
        ENDSOURCE
        SOURCE #selectionChanged
          #public void selectionChanged()
          #{
          #    EcoResProductImageManagement productImageManagement;
          #
          #    super();
          #
          #    if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
          #    {
          #       element.initializeRetailKitOptions();
          #    }
          #
          #    element.setWHSMenuItems();
          #    element.setProductDimensionFields();
          #    element.setFiscalLIFOFields();
          #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
          #    {
          #        element.setAssetGroupIdFields_RU();
          #        element.setMarkupCodeField_RU();
          #    }
          #    element.setProductDimensionGroupField();
          #    element.setProductModelingPolicyFields();
          #
          #    element.setItemStockedDependentObjects();
          #    element.setPDSPotencyFields();
          #
          #    productImageManagement = EcoResProductImageManagement::newFromCommon(inventTable);
          #    productImageManagement.loadProductImage(productImage);
          #
          #    dimensionDefaultingController.activated();
          #}
        ENDSOURCE
        SOURCE #writePmfProductTypeChange
          #public void writePmfProductTypeChange()
          #{
          #    InventTable orig    = inventTable.orig();
          #    boolean     ret     = true;
          #
          #    if (orig.PmfProductType == inventTable.PmfProductType
          #        || !BOMVersion::pmfExistApproved(inventTable.ItemId))
          #    {
          #        return;
          #    }
          #
          #    switch (orig.PmfProductType)
          #    {
          #        case PmfProductType::MainItem:
          #        case PmfProductType::Formula:
          #            switch (inventTable.PmfProductType)
          #            {
          #                case PmfProductType::MainItem:
          #                case PmfProductType::Formula:
          #                    switch (keepVersions)
          #                    {
          #                        case DialogButton::Yes:
          #                            BOMVersion::pmfUnapproveVersions(inventTable.ItemId);
          #                            break;
          #                        case DialogButton::No:
          #                            BOMVersion::deleteVersions(inventTable.ItemId);
          #                            break;
          #                    }
          #
          #                    break;
          #                default:
          #                    if (keepVersions == DialogButton::Ok)
          #                    {
          #                        BOMVersion::deleteVersions(inventTable.ItemId);
          #                    }
          #                    break;
          #            }
          #            break;
          #        case PmfProductType::BOM:
          #            switch (keepVersions)
          #            {
          #                case DialogButton::Cancel:
          #                    BOMVersion::pmfUnapproveVersions(inventTable.ItemId);
          #                    break;
          #                case DialogButton::Ok:
          #                    BOMVersion::deleteVersions(inventTable.ItemId);
          #                    break;
          #            }
          #
          #            break;
          #    }
          #}
          #
          #
        ENDSOURCE
        SOURCE #checkPmfProductTypeChange
          #public boolean checkPmfProductTypeChange()
          #{
          #    InventTable orig    = inventTable.orig();
          #    boolean     ret     = true;
          #
          #    if (orig.PmfProductType == inventTable.PmfProductType
          #        || !BOMVersion::pmfExistApproved(inventTable.ItemId))
          #    {
          #        return ret;
          #    }
          #
          #    switch (orig.PmfProductType)
          #    {
          #        case PmfProductType::MainItem:
          #        case PmfProductType::None:
          #        case PmfProductType::Formula:
          #            switch (inventTable.PmfProductType)
          #            {
          #                case PmfProductType::MainItem:
          #                case PmfProductType::Formula:
          #                    keepVersions = Box::yesNoCancel("@PRO2633", DialogButton::Cancel, "@PRO2602", "@PRO2623");
          #                    if (keepVersions == DialogButton::Cancel)
          #                    {
          #                        ret = false;
          #                    }
          #                    break;
          #                default:
          #                    keepVersions = Box::okCancel("@PRO2634", DialogButton::Cancel, "@PRO2605", "@PRO2622");
          #                    if (keepVersions == DialogButton::Cancel)
          #                    {
          #                        ret = false;
          #                    }
          #                    break;
          #            }
          #            break;
          #        case PmfProductType::BOM:
          #            keepVersions = Box::okCancel("@PRO2635", DialogButton::Cancel, "@PRO2608", "@PRO2621");
          #            if (keepVersions == DialogButton::Cancel)
          #            {
          #                ret = false;
          #            }
          #            break;
          #    }
          #
          #    if (!ret)
          #    {
          #        inventTable.PmfProductType  = orig.PmfProductType;
          #        pmfFormulaPlanning_PmfProductType.update();
          #
          #        inventTable.PmfYieldPct     = orig.PmfYieldPct;
          #        pmfYield_PmfYieldPct.update();
          #
          #        element.setPmfObjects();
          #    }
          #
          #    return ret;
          #}
          #
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #Purch
          Table               #InventTableModule
          AllowCreate         #No
          JoinSource          #InventTable
          LinkType            #InnerJoin
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD UnitId
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
              SOURCE #validate
                #public boolean validate()
                #{
                #    boolean ret;
                #
                #    ret = super();
                #
                #    if (ret)
                #    {
                #        if (!UnitOfMeasureConverter::canBeConverted(
                #            UnitOfMeasure::unitOfMeasureIdBySymbol(purch.UnitId),
                #            UnitOfMeasure::unitOfMeasureIdBySymbol(invent.UnitId),
                #            InventTable::itemProduct(inventTable.ItemId),
                #            null,
                #            true))
                #        {
                #            return checkFailed(strFmt("@SYS28690", purch.UnitId, invent.UnitId));
                #        }
                #    }
                #
                #    return ret;
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD Price
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
              SOURCE #modified
                #void modified()
                #{
                #    super();
                #
                #    purch_Ds.updateNewPrice();
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD PriceUnit
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
              SOURCE #modified
                #void modified()
                #{
                #    super();
                #
                #    purch_Ds.updateNewPrice();
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD Markup
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
              SOURCE #modified
                #void modified()
                #{
                #    super();
                #
                #    purch_Ds.updateNewPrice();
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD LineDisc
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD MultiLineDisc
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD EndDisc
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD TaxItemGroupId
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD MarkupGroupId
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD PriceDate
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD PriceQty
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD AllocateMarkup
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD OverDeliveryPct
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD UnderDeliveryPct
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD SuppItemGroupId
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD InterCompanyBlocked
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD TaxWithholdCalculate_TH
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #modified
                #public void modified()
                #{
                #    super();
                #
                #    purch_ds.object(fieldNum(InventTableModule, TaxWithholdItemGroupHeading_TH)).allowEdit(purch.TaxWithholdCalculate_TH);
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          REFERENCEFIELD TaxGSTReliefCategory_MY
            PROPERTIES
              Visible             #No
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDREFERENCEFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #active
          #public int active()
          #{
          #    int ret;
          #
          #    ret = super();
          #
          #    if (ret)
          #    {
          #        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR]))
          #        {
          #            if (inventTable.ItemType != ItemType::Service)
          #            {
          #                purch_ds.object(fieldNum(InventTableModule, TaxWithholdCalculate_TH)).allowEdit(false);
          #                purch_ds.object(fieldNum(InventTableModule, TaxWithholdItemGroupHeading_TH)).allowEdit(false);
          #            }
          #            else
          #            {
          #                purch_ds.object(fieldNum(InventTableModule, TaxWithholdCalculate_TH)).allowEdit(true);
          #                purch_ds.object(fieldNum(InventTableModule, TaxWithholdItemGroupHeading_TH)).allowEdit(purch.TaxWithholdCalculate_TH);
          #            }
          #        }
          #        else if (TaxThaiGovCertificationFeatureChecker::isTaxWithholdEnabled())
          #        {
          #            purch_ds.object(fieldNum(InventTableModule, TaxWithholdCalculate_TH)).allowEdit(true);
          #            purch_ds.object(fieldNum(InventTableModule, TaxWithholdItemGroupHeading_TH)).allowEdit(purch.TaxWithholdCalculate_TH);
          #        }
          #    }
          #    return ret;
          #}
          #
        ENDSOURCE
        SOURCE #init
          #void init()
          #{
          #    QueryBuildRange                 criteriaPurch;
          #
          #    super();
          #
          #    criteriaPurch = this.query().dataSourceName(this.name()).addRange(fieldNum(InventTableModule,ModuleType));
          #    criteriaPurch.value(queryValue(ModuleInventPurchSales::Purch));
          #    criteriaPurch.status(RangeStatus::Hidden);
          #}
        ENDSOURCE
        SOURCE #updateNewPrice
          #void updateNewPrice()
          #{
          #    if (purch && inventTable.SalesModel && inventTable.SalesPriceModelBasic == SalesPriceModelBasic::PurchPrice)
          #    {
          #        purch_DS.write();
          #        sales_DS.reread();
          #    }
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #Invent
          Table               #InventTableModule
          AllowCreate         #No
          JoinSource          #InventTable
          LinkType            #InnerJoin
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD UnitId
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
              SOURCE #modified
                #public void modified()
                #{
                #    super();
                #
                #    element.setCWQuantityFields();
                #}
                #
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD Price
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
              SOURCE #modified
                #void modified()
                #{
                #    super();
                #
                #    invent_DS.updateNewPrice();
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD PriceUnit
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
              SOURCE #modified
                #void modified()
                #{
                #    super();
                #
                #    invent_DS.updateNewPrice();
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD Markup
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
              SOURCE #modified
                #void modified()
                #{
                #    super();
                #
                #    invent_DS.updateNewPrice();
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD LineDisc
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD MultiLineDisc
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD EndDisc
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD TaxItemGroupId
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD MarkupGroupId
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD PriceDate
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD PriceQty
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD AllocateMarkup
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD OverDeliveryPct
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD UnderDeliveryPct
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD SuppItemGroupId
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD InterCompanyBlocked
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #write
          #public void write(boolean _mustRecalculatePrice = true)
          #{
          #    if (_mustRecalculatePrice || !invent.RecId)
          #    {
          #        super();
          #    }
          #    else
          #    {
          #        invent.update(true, false);
          #        invent_ds.reread();
          #        invent_ds.refresh();
          #    }
          #}
        ENDSOURCE
        SOURCE #init
          #void init()
          #{
          #    QueryBuildRange                 criteriaInvent;
          #
          #    super();
          #
          #    criteriaInvent = this.query().dataSourceName(this.name()).addRange(fieldNum(InventTableModule,ModuleType));
          #    criteriaInvent.value(queryValue(ModuleInventPurchSales::Invent));
          #    criteriaInvent.status(RangeStatus::Hidden);
          #}
        ENDSOURCE
        SOURCE #updateNewPrice
          #void updateNewPrice()
          #{
          #    DialogButton dialogButton;
          #
          #    if (invent && inventTable.SalesModel && inventTable.SalesPriceModelBasic == SalesPriceModelBasic::CostPrice)
          #    {
          #        dialogButton = Box::yesNo(strFmt('%1 %2?', "@SYS40695", "@SYS77785"), DialogButton::No, "@SYS6998");
          #
          #        if (dialogButton == DialogButton::Yes )
          #        {
          #            invent_DS.write();
          #            sales_DS.reread();
          #        }
          #        else
          #        {
          #            invent_DS.write(false);
          #        }
          #    }
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #Sales
          Table               #InventTableModule
          AllowCreate         #No
          JoinSource          #InventTable
          LinkType            #InnerJoin
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD UnitId
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
              SOURCE #validate
                #public boolean validate()
                #{
                #    boolean ret;
                #
                #    ret = super();
                #
                #    if (ret)
                #    {
                #        if (!UnitOfMeasureConverter::canBeConverted(
                #                UnitOfMeasure::unitOfMeasureIdBySymbol(invent.UnitId),
                #                UnitOfMeasure::unitOfMeasureIdBySymbol(sales.UnitId),
                #                InventTable::itemProduct(inventTable.ItemId),
                #                null,
                #                true))
                #        {
                #            return checkFailed(strFmt("@SYS28690", invent.UnitId, sales.UnitId));
                #        }
                #    }
                #
                #    return ret;
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD Price
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD PriceUnit
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD Markup
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD LineDisc
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD MultiLineDisc
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD EndDisc
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD TaxItemGroupId
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD MarkupGroupId
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD PriceDate
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD PriceQty
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD AllocateMarkup
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD OverDeliveryPct
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD UnderDeliveryPct
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD SuppItemGroupId
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD InterCompanyBlocked
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD TaxWithholdCalculate_TH
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #modified
                #public void modified()
                #{
                #    super();
                #
                #    sales_ds.object(fieldNum(InventTableModule, TaxWithholdItemGroupHeading_TH)).allowEdit(sales.TaxWithholdCalculate_TH);
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #active
          #public int active()
          #{
          #    int ret;
          #
          #    ret = super();
          #
          #    if (ret)
          #    {
          #        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoSA, #isoBR]))
          #        {
          #            if (inventTable.ItemType != ItemType::Service)
          #            {
          #                sales_ds.object(fieldNum(InventTableModule, TaxWithholdCalculate_TH)).allowEdit(false);
          #                sales_ds.object(fieldNum(InventTableModule, TaxWithholdItemGroupHeading_TH)).allowEdit(false);
          #            }
          #            else
          #            {
          #                sales_ds.object(fieldNum(InventTableModule, TaxWithholdCalculate_TH)).allowEdit(true);
          #                sales_ds.object(fieldNum(InventTableModule, TaxWithholdItemGroupHeading_TH)).allowEdit(sales.TaxWithholdCalculate_TH);
          #            }
          #        }
          #        else if (TaxThaiGovCertificationFeatureChecker::isTaxWithholdEnabled())
          #        {
          #            sales_ds.object(fieldNum(InventTableModule, TaxWithholdCalculate_TH)).allowEdit(true);
          #            sales_ds.object(fieldNum(InventTableModule, TaxWithholdItemGroupHeading_TH)).allowEdit(sales.TaxWithholdCalculate_TH);
          #        }
          #    }
          #
          #    return ret;
          #}
          #
        ENDSOURCE
        SOURCE #init
          #void init()
          #{
          #    QueryBuildRange                 criteriaSalesOrder;
          #
          #    super();
          #
          #    criteriaSalesOrder= this.query().dataSourceName(this.name()).addRange(fieldNum(InventTableModule,ModuleType));
          #    criteriaSalesOrder.value(queryValue(ModuleInventPurchSales::Sales));
          #    criteriaSalesOrder.status(RangeStatus::Hidden);
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #InventItemLocation
          Table               #InventItemLocation
          AllowCreate         #No
          JoinSource          #InventTable
          LinkType            #InnerJoin
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD CountGroupId
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD wMSStoreZoneId
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD wMSPickingLocation
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD WMSLocationIdDefaultIssue
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD WMSLocationIdDefaultReceipt
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD inventDimId
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD useWMSOrder
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD pickingLocationRefillMin
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD PickingLocationMaxQty
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD useEmptyPalletLocation
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #init
          #void init()
          #{
          #    QueryBuildRange queryBuildRange;
          #
          #    super();
          #
          #    queryBuildRange = this.query().dataSourceTable(tableNum(InventItemLocation)).addRange(fieldNum(InventItemLocation,InventDimId));
          #    queryBuildRange.value(queryValue(InventDim::inventDimIdBlank()));
          #    queryBuildRange.status(RangeStatus::Hidden);
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #EcoResStorageDimensionGroupItem
          Table               #EcoResStorageDimensionGroupItem
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          JoinSource          #InventTable
          LinkType            #OuterJoin
        ENDPROPERTIES
        
        FIELDLIST
          REFERENCEFIELD StorageDimensionGroup
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDREFERENCEFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #write
          #public void write()
          #{
          #}
        ENDSOURCE
        SOURCE #validateWrite
          #public boolean validateWrite()
          #{
          #    return true;    // Cannot be modified in this form, so no need to validate - also if not specified
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #EcoResTrackingDimensionGroupItem
          Table               #EcoResTrackingDimensionGroupItem
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          JoinSource          #InventTable
          LinkType            #OuterJoin
        ENDPROPERTIES
        
        FIELDLIST
          REFERENCEFIELD TrackingDimensionGroup
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDREFERENCEFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #write
          #public void write()
          #{
          #}
        ENDSOURCE
        SOURCE #validateWrite
          #public boolean validateWrite()
          #{
          #    return true;    // Cannot be modified in this form, so no need to validate - also if not specified
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #InventItemGroupItem
          Table               #InventItemGroupItem
          AllowCreate         #No
          JoinSource          #InventTable
          LinkType            #OuterJoin
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD ItemGroupId
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #validate
                #public boolean validate()
                #{
                #    boolean     ret;
                #
                #    inventItemGroupItem_ds.initRecord();
                #    ret = super() && inventItemGroupItem.validateFieldValueItemGroupId();
                #
                #    return ret;
                #}
              ENDSOURCE
              SOURCE #modified
                #public void modified()
                #{
                #    InventItemGroup inventItemGroup;
                #
                #    super();
                #
                #    inventItemGroup = InventItemGroup::find(inventItemGroupItem.ItemGroupId);
                #    purch.initTaxItemGroupFromItemGrp(inventItemGroup, false);
                #    sales.initTaxItemGroupFromItemGrp(inventItemGroup, false);
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #write
          #public void write()
          #{
          #    if (inventItemGroupItem.ItemGroupId == '')
          #    {
          #        if (inventItemGroupItem.orig().ItemGroupId != ''
          #         && !SysRecordTemplate::isTemplateEditFormRecord(inventItemGroupItem))
          #        {
          #            // delete the relationship table
          #            this.delete();
          #        }
          #    }
          #    else
          #    {
          #        // insert and update relationship table
          #        super();
          #    }
          #}
        ENDSOURCE
        SOURCE #initRecord
          #public void initRecord()
          #{
          #    if (!inventItemGroupItem.RecId)
          #    {
          #        inventItemGroupItem.ItemId                  = inventTable.ItemId;
          #        inventItemGroupItem.ItemDataAreaId          = inventTable.DataAreaId;
          #        inventItemGroupItem.ItemGroupDataAreaId     = curExt2dataareaid(tableNum(InventItemGroup));
          #    }
          #}
        ENDSOURCE
        SOURCE #validateWrite
          #public boolean validateWrite()
          #{
          #    boolean ret;
          #
          #    this.initRecord();
          #    ret = super();
          #
          #    return ret;
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #InventModelGroupItem
          Table               #InventModelGroupItem
          AllowCreate         #No
          JoinSource          #InventTable
          LinkType            #OuterJoin
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD ModelGroupId
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #modified
                #public void modified()
                #{
                #    super();
                #    element.setItemStockedDependentObjects();
                #    element.setPmfObjects();
                #}
              ENDSOURCE
              SOURCE #validate
                #public boolean validate()
                #{
                #    boolean ret;
                #
                #    if (pdsCwItem.value() && !InventModelGroup::find(inventModelGroupItem.ModelGroupId).isStocked())
                #    {
                #        return checkFailed("@PDS1441");
                #    }
                #
                #    inventModelGroupItem_ds.initRecord();
                #    ret = super();
                #
                #    return ret;
                #}
              ENDSOURCE
              SOURCE #lookup
                #public void lookup(FormControl _formControl, str _filterStr)
                #{
                #    // Only show item model groups applicable to the product.
                #    InventTableInventoriedPolicy::lookupModelGroupId(_formControl, inventTable.Product);
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #write
          #public void write()
          #{
          #    boolean modelGroupJustCreated = false;
          #
          #    if (inventModelGroupItem.ModelGroupId == '')
          #    {
          #        if (inventModelGroupItem.orig().ModelGroupId != ''
          #         && !SysRecordTemplate::isTemplateEditFormRecord(inventModelGroupItem))
          #        {
          #            // delete the relationship table
          #            this.delete();
          #        }
          #    }
          #    else
          #    {
          #        if (inventModelGroupItem.orig().ModelGroupId == '')
          #        {
          #            modelGroupJustCreated = true;
          #        }
          #
          #        // insert and update relationship table
          #        super();
          #
          #        if (modelGroupJustCreated)
          #        {
          #            inventTable.initPdsVendorCheckFromInventModelGroup();
          #        }
          #    }
          #}
        ENDSOURCE
        SOURCE #initRecord
          #public void initRecord()
          #{
          #    if (!inventModelGroupItem.RecId)
          #    {
          #        inventModelGroupItem.ItemId                  = inventTable.ItemId;
          #        inventModelGroupItem.ItemDataAreaId          = inventTable.DataAreaId;
          #        inventModelGroupItem.ModelGroupDataAreaId    = curExt2dataareaid(tableNum(InventModelGroup));
          #    }
          #}
        ENDSOURCE
        SOURCE #validateWrite
          #public boolean validateWrite()
          #{
          #    boolean ret;
          #    PdsBatchAttribByItem         byItem;
          #    PdsBatchAttribByItemCustomer byCust;
          #
          #    this.initRecord();
          #
          #    if (#PdsBatchAttribEnabled && !inventModelGroupItem.RecId && inventTable.isItemBatchActivated()
          #        && !InventModelGroup::find(inventModelGroupItem.ModelGroupId).isStocked())
          #    {
          #        if (inventTable.PdsShelfLife || inventTable.PdsBestBefore || inventTable.PdsShelfAdvice)
          #        {
          #            if(Box::okCancel("@PRO2652",DialogButton::Ok) == DialogButton::Ok)
          #            {
          #                inventTable.PdsShelfLife = 0;
          #                inventTable.PdsBestBefore = 0;
          #                inventTable.PdsShelfAdvice =0;
          #            }
          #            else
          #            {
          #                inventModelGroupItem.RecId= 0;
          #                return false;
          #            }
          #
          #
          #        }
          #        select firstonly RecId from byItem
          #            where byItem.PdsBatchAttribItemId == inventTable.ItemId;
          #        select firstonly RecId from byCust
          #            where byItem.PdsBatchAttribItemId == inventTable.ItemId;
          #        if (byItem || byCust)
          #        {
          #            Box::warning("@PRO2653");
          #            inventModelGroupItem.RecId= 0;
          #            return false;
          #        }
          #    }
          #
          #    ret = super();
          #
          #    return ret;
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #EcoResProduct
          Table               #EcoResProduct
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          JoinSource          #InventTable
          LinkType            #InnerJoin
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD DisplayProductNumber
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
              SOURCE #jumpRef
                #public void jumpRef()
                #{
                #    Args argsProductForm;
                #
                #    argsProductForm = new Args();
                #    argsProductForm.record(ecoResProduct);
                #    argsProductForm.caller(element);
                #    argsProductForm.copyCallerQuery(CopyCallerQuery::No);
                #
                #    MenuFunction::runClient(menuitemDisplayStr(EcoResProductDetails),MenuItemType::Display,false,argsProductForm);
                #}
                #
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD SearchName
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD ProductType
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #write
          #public void write()
          #{
          #    //Do not call super as the product is read only
          #}
        ENDSOURCE
        SOURCE #validateWrite
          #public boolean validateWrite()
          #{
          #    //Product is read only so no need to validate
          #    return true;
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #EcoResProductDimensionGroupProduct
          Table               #EcoResProductDimensionGroupProduct
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          JoinSource          #EcoResProduct_EcoResProductMaster
          LinkType            #OuterJoin
        ENDPROPERTIES
        
        FIELDLIST
          REFERENCEFIELD ProductDimensionGroup
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDREFERENCEFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #validateWrite
          #public boolean validateWrite()
          #{
          #    return true;
          #}
        ENDSOURCE
        SOURCE #write
          #public void write()
          #{
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #EcoResProductMasterModelingPolicy
          Table               #EcoResProductMasterModelingPolicy
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          JoinSource          #EcoResProduct_EcoResProductMaster
          LinkType            #OuterJoin
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD IsVariantGenerationEnabled
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD IsReuseConfigurationEnabled
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #write
          #public void write()
          #{
          #    //Some products don't have a modeling policy record
          #    //so call super only if modeling policy record exists
          #    //(An EcoResProductMasterModelingPolicy record exists only for product masters
          #    //that have either 'Predefined variant' or 'Dimension based' variant configuration technology selected.)
          #    if (ecoResProductMasterModelingPolicy.RecId)
          #    {
          #        super();
          #    }
          #}
        ENDSOURCE
        SOURCE #validateWrite
          #public boolean validateWrite()
          #{
          #    //Some products don't have a modeling policy record
          #    //so call super only if modeling policy record exists
          #    //(An EcoResProductMasterModelingPolicy record exists only for product masters
          #    //that have either 'Predefined variant' or 'Dimension based' variant configuration technology selected.)
          #    if (ecoResProductMasterModelingPolicy.RecId)
          #    {
          #        return super();
          #    }
          #
          #    return true;
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DERIVEDDATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #EcoResProduct_EcoResDistinctProduct
          Table               #EcoResDistinctProduct
          InsertIfEmpty       #No
          Extends             #EcoResProduct
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDERIVEDDATASOURCE
    DERIVEDDATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #EcoResProduct_EcoResDistinctProductVariant
          Table               #EcoResDistinctProductVariant
          Extends             #EcoResProduct_EcoResDistinctProduct
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDERIVEDDATASOURCE
    DERIVEDDATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #EcoResProduct_EcoResProductMaster
          Table               #EcoResProductMaster
          Extends             #EcoResProduct
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD VariantConfigurationTechnology
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDERIVEDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #EcoResProductTranslation
          Table               #EcoResProductTranslation
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          JoinSource          #EcoResProduct
          LinkType            #OuterJoin
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD Description
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD Name
            PROPERTIES
              AllowAdd            #Yes
            ENDPROPERTIES
            
            METHODS
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #write
          #public void write()
          #{
          #}
        ENDSOURCE
        SOURCE #validateWrite
          #public boolean validateWrite()
          #{
          #    return true;
          #}
        ENDSOURCE
        SOURCE #init
          #public void init()
          #{
          #    super();
          #
          #    EcoResProductTranslation::queryAddDefaultLanguage(this.query());
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #WHSInventTable
          Table               #WHSInventTable
          AllowCheck          #No
          AllowCreate         #No
          AllowDelete         #No
          JoinSource          #InventTable
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #whsGetItemGroupId
          #// Return the ItemGroupId
          #ItemGroupId whsGetItemGroupId()
          #{
          #    return element.control(element.controlId(formControlStr(EcoResProductDetailsExtended, CostPosting_ItemGroupId))).valueStr();
          #}
          #
        ENDSOURCE
        SOURCE #write
          #// Populate group code initially
          #public void write()
          #{
          #    whsInventTable.setGroupCode(inventTable.itemGroupId());
          #
          #    super();
          #}
          #
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #WHSInventFixedLocation
          Table               #WHSInventFixedLocation
          AllowCheck          #No
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          JoinSource          #InventTable
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #EcoResCategory
          Table               #EcoResCategory
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #selectionChanged
          #public void selectionChanged()
          #{
          #    super();
          #
          #    if (fromReleasedProductsByCategory)
          #    {
          #        ecoResProduct_ds.query().dataSourceTable(tableNum(EcoResProduct)).enabled(true);
          #        RetailCategoryHelper::categorySelectionChanged(
          #            ecoResCategory,
          #            ecoResCategoryDescendents_ds,
          #            retailCategoryContainmentLookup_ds,
          #            selectedHierachyIsSpecial);
          #
          #        inventTable_ds.executeQuery();
          #    }
          #}
          #
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DERIVEDDATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #EcoResCategory_PCClass
          Table               #PCClass
          Extends             #EcoResCategory
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDERIVEDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #EcoResCategoryDescendents
          Table               #EcoResCategory
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          JoinSource          #EcoResProductCategory
          LinkType            #ExistJoin
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
    DERIVEDDATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #EcoResCategoryDescendents_PCClass
          Table               #PCClass
          Extends             #EcoResCategoryDescendents
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDERIVEDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #EcoResProductCategory
          Table               #EcoResProductCategory
          Index               #ProductCategory
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          JoinSource          #EcoResProduct
          LinkType            #ExistJoin
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #PdsCatchWeightItem
          Table               #PdsCatchWeightItem
          AllowCheck          #No
          AllowDelete         #No
          JoinSource          #InventTable
          LinkType            #Active
          InsertAtEnd         #No
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD PdsCWUnitId
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #lookup
                #public void lookup(FormControl _formControl, str _filterStr)
                #{
                #    //create a lookup that can run with uncommited records
                #    UnitOfMeasureLookup::lookup(
                #        _formControl,
                #        _filterStr,
                #        true,
                #        UnitOfMeasure::findBySymbol(invent.UnitId).RecId,
                #        inventTable.Product);
                #}
                #
              ENDSOURCE
              SOURCE #modified
                #public void modified()
                #{
                #    super();
                #
                #    pdsCatchWeightItem_ds.cacheCalculateMethod(tableMethodStr(PdsCatchWeightItem, nominalQty));
                #    element.setCWQuantityFields();
                #    if (pdsCatchWeightItem)
                #    {
                #        //refresh the conversion quantities on the form
                #        pdsCatchWeightItem_ds.refresh();
                #    }
                #}
                #
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #create
          #public void create(boolean _append = false)
          #{
          #    boolean allowCreate = !isTemplate && ecoResProduct.PdsCWProduct && !pdsCatchWeightItem.RecId;
          #
          #    if (allowCreate)
          #    {
          #        super(_append);
          #    }
          #}
        ENDSOURCE
        SOURCE #init
          #public void init()
          #{
          #    boolean pdsCatchWeightEnabled = !isTemplate && #PdsCatchWeightEnabled;
          #
          #    if (!pdsCatchWeightEnabled)
          #    {
          #        //remove the join to the DS
          #        pdsCatchWeightItem_DS.joinSource(null);
          #        pdsCatchWeightItem_DS.allowCreate(NoYes::No);
          #        pdsCatchWeightItem_DS.insertIfEmpty(NoYes::No);
          #        pdsCatchWeightItem_DS.linkType(QueryDataLinkType::None);
          #    }
          #
          #    super();
          #
          #    if (pdsCatchWeightEnabled)
          #    {
          #        //this must be done after Super()
          #        pdsCatchWeightItem_ds.cacheAddMethod(tableMethodStr(PdsCatchWeightItem, nominalQty));
          #    }
          #}
        ENDSOURCE
        SOURCE #write
          #public void write()
          #{
          #    if (pdsCatchWeightItem.RecId || pdsCatchWeightItem.PdsCWUnitId)
          #    {
          #        super();
          #        //refresh the conversion quantities on the form
          #        pdsCatchWeightItem_ds.refresh();
          #    }
          #}
          #
        ENDSOURCE
        SOURCE #validateWrite
          #public boolean validateWrite()
          #{
          #    boolean ret = true;
          #
          #    element.pdsFinishCWSetup();
          #
          #    if (pdsCatchWeightItem.RecId || pdsCatchWeightItem.PdsCWUnitId)
          #    {
          #        ret = super();
          #        pdsCatchWeightItem_ds.cacheCalculateMethod(tableMethodStr(PdsCatchWeightItem, nominalQty));
          #    }
          #
          #    return ret;
          #}
          #
        ENDSOURCE
        SOURCE #active
          #public int active()
          #{
          #    int ret;
          #
          #    ret = super();
          #    if (ecoResProduct.PdsCWProduct  && !pdsCatchWeightItem.RecId && inventModelGroupItem.RecId)
          #    {
          #        pdsCatchWeightItem.ItemId = inventTable.ItemId;
          #        pdsCatchWeightItem_ds.write();
          #        element.setPmfObjects();
          #    }
          #    return ret;
          #}
          #
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #RetailCategoryContainmentLookup
          Table               #RetailCategoryContainmentLookup
          AllowCheck          #No
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          JoinSource          #EcoResProductCategory
          LinkType            #ExistJoin
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #RetailInventTable
          Table               #RetailInventTable
          Index               #itemIdx
          AllowCheck          #No
          AllowCreate         #No
          AllowDelete         #No
          JoinSource          #InventTable
          LinkType            #Active
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD concessionVendAccount
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #jumpRef
                #public void jumpRef()
                #{
                #    Args    args;
                #    FormRun formRun;
                #
                #    args = new Args(formStr(VendTable));
                #    args.record(retailInventTable);
                #    args.caller(element);
                #
                #    formRun = classfactory.formRunClass(args);
                #    formRun.init();
                #    formRun.run();
                #    formRun.detach();
                #}
                #
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #WHSReservationHierarchyItem
          Table               #WHSReservationHierarchyItem
          AllowCheck          #No
          AllowCreate         #No
          AllowDelete         #No
          JoinSource          #InventTable
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #MCRInventTable
          Table               #MCRInventTable
          JoinSource          #InventTable
          DelayActive         #No
          InsertAtEnd         #No
        ENDPROPERTIES
        
        FIELDLIST
          DATAFIELD ContinuityScheduleId
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #lookup
                #public void lookup(FormControl _formControl, str _filterStr)
                #{
                #    SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(MCRContinuityScheduleHeader), _formControl);
                #    Query query = new Query();
                #    QueryBuildDataSource queryBuildDataSource;
                #
                #    sysTableLookup.addLookupfield(fieldNum(MCRContinuityScheduleHeader, ScheduleID));
                #    queryBuildDataSource = query.addDataSource(tableNum(MCRContinuityScheduleHeader));
                #    queryBuildDataSource.addRange(fieldNum(MCRContinuityScheduleHeader, Active)).value(enum2str(NoYes::Yes));
                #    sysTableLookup.parmQuery(query);
                #
                #    sysTableLookup.performFormLookup();
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
          DATAFIELD InstallmentEligible
            PROPERTIES
            ENDPROPERTIES
            
            METHODS
              SOURCE #modified
                #public void modified()
                #{
                #    super();
                #
                #    mcrInstallmentSetup.enabled(mcrInventTable.InstallmentEligible);
                #}
              ENDSOURCE
            ENDMETHODS
          ENDDATAFIELD
          
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #active
          #public int active()
          #{
          #    int ret;
          #
          #    ret = super();
          #
          #    element.mcrEnableButtons();
          #
          #    return ret;
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #WHSProductVariantFixedLocation
          Table               #WHSProductVariantFixedLocation
          AllowCheck          #No
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          JoinSource          #InventTable
          InsertAtEnd         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #InventDim
          Table               #InventDim
          JoinSource          #WHSProductVariantFixedLocation
          LinkType            #InnerJoin
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
    Purch InventTable
    Invent InventTable
    Sales InventTable
    InventItemLocation InventTable
    EcoResStorageDimensionGroupItem InventTable
    EcoResTrackingDimensionGroupItem InventTable
    InventItemGroupItem InventTable
    InventModelGroupItem InventTable
    EcoResProduct InventTable
    EcoResProductDimensionGroupProduct EcoResProduct_EcoResProductMaster
    EcoResProductMasterModelingPolicy EcoResProduct_EcoResProductMaster
    EcoResProductTranslation EcoResProduct
    WHSInventTable InventTable
    WHSInventFixedLocation InventTable
    EcoResCategoryDescendents EcoResProductCategory
    EcoResProductCategory EcoResProduct
    PdsCatchWeightItem InventTable
    RetailCategoryContainmentLookup EcoResProductCategory
    RetailInventTable InventTable
    WHSReservationHierarchyItem InventTable
    MCRInventTable InventTable
    WHSProductVariantFixedLocation InventTable
    InventDim WHSProductVariantFixedLocation
  ENDJOINS
  
  PARTREFERENCES
    PARTREFERENCE #RetailItemChannelFactBox
      PROPERTIES
        Name                #RetailItemChannelFactBox
        MenuItemName        #RetailItemChannelFactBox
        DataSource          #InventTable
        DataSourceRelation  #SelfLink
        ElementPosition     #429496729
      ENDPROPERTIES
      
    ENDPARTREFERENCE
    
    PARTREFERENCE #EcoResProductVariantsPerCompanyFactBox
      PROPERTIES
        Name                #EcoResProductVariantsPerCompanyFactBox
        MenuItemName        #EcoResProductVariantsPerCompanyPart
        DataSource          #InventTable
        DataSourceRelation  #InventDimCombination.InventTable
        ElementPosition     #858993458
      ENDPROPERTIES
      
    ENDPARTREFERENCE
    
    PARTREFERENCE #EngChgCaseReleasedProductDetailsPart
      PROPERTIES
        Name                #EngChgCaseReleasedProductDetailsPart
        MenuItemName        #EngChgCaseReleasedProductDetailsPart
        DataSource          #InventTable
        DataSourceRelation  #InventTable.EcoResProduct
        ElementPosition     #1288490187
      ENDPROPERTIES
      
    ENDPARTREFERENCE
    
    PARTREFERENCE #RetailItemAssortmentFactBox
      PROPERTIES
        Name                #RetailItemAssortmentFactBox
        MenuItemName        #RetailItemAssortmentFactBox
        DataSource          #InventTable
        DataSourceRelation  #SelfLink
        ElementPosition     #1717986916
      ENDPROPERTIES
      
    ENDPARTREFERENCE
    
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@SYS303714
      TitleDatasource     #EcoResProduct
      DataSource          #InventTable
      Style               #DetailsFormMaster
    ENDPROPERTIES
    
    CONTAINER
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #ActionPane
          ElementPosition     #715827882
          DataSource          #InventTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #ActionStripForeignTrade
          ElementPosition     #1073741822
          HierarchyParent     #TabPageForeignTrade
          Style               #Strip
          DataSource          #InventTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #ActionStripForeignTrade
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTabDefine
          AutoDeclaration     #Yes
          ElementPosition     #390451572
          HierarchyParent     #ActionPane
          Caption             #@SYS133852
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTabEngineer
          AutoDeclaration     #Yes
          ElementPosition     #1171354716
          HierarchyParent     #ActionPane
          Caption             #@SYS118401
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTabGeneral
          ElementPosition     #1950859758
          HierarchyParent     #ActionPane
          Caption             #@SYS19924
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTabManageCosts
          ElementPosition     #1757032074
          HierarchyParent     #ActionPane
          Caption             #@SYS310450
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTabManageInventory
          AutoDeclaration     #Yes
          ElementPosition     #976128930
          HierarchyParent     #ActionPane
          Caption             #@SYS118394
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTabManageProjects
          AutoDeclaration     #Yes
          ElementPosition     #1561806288
          HierarchyParent     #ActionPane
          Caption             #@SYS114879
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTabPlan
          AutoDeclaration     #Yes
          ElementPosition     #1366580502
          HierarchyParent     #ActionPane
          Caption             #@SYS14433
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTabPlanSMB
          Visible             #No
          ConfigurationKey    #Retail
          ElementPosition     #1464193395
          HierarchyParent     #ActionPane
          Caption             #@SYS14433
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTabPurchase
          AutoDeclaration     #Yes
          ElementPosition     #585677358
          HierarchyParent     #ActionPane
          Caption             #@SYS28381
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTabRetail
          AutoDeclaration     #Yes
          ConfigurationKey    #RetailHeadquarters
          ElementPosition     #1854644967
          HierarchyParent     #ActionPane
          Caption             #@RET3066
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTabSell
          AutoDeclaration     #Yes
          ElementPosition     #780903144
          HierarchyParent     #ActionPane
          Caption             #@SYS114644
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #MCRActionPaneTabMCRFunctions
          ElementPosition     #2144687443
          HierarchyParent     #ActionPane
          Caption             #@SYS12687
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          ElementPosition     #1431655764
          HierarchyParent     #ActionPaneTab
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupDefineAttachments
          ElementPosition     #1932735276
          HierarchyParent     #ActionPaneTabDefine
          Caption             #@SYS316708
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupDefineLanguages
          ElementPosition     #1288490184
          HierarchyParent     #ActionPaneTabDefine
          Caption             #@SYS15819
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupDefineList
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #1717986912
          HierarchyParent     #ActionPaneTabDefine
          Caption             #@SYS118440
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupDefineModify
          AutoDeclaration     #Yes
          ElementPosition     #429496728
          HierarchyParent     #ActionPaneTabDefine
          Caption             #@SYS316703
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupDefineNew
          ElementPosition     #644245092
          HierarchyParent     #ActionPaneTabDefine
          Caption             #@SYS2055
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupDefineProductMaster
          ElementPosition     #858993456
          HierarchyParent     #ActionPaneTabDefine
          Caption             #@SYS303254
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupDefineSetup
          ElementPosition     #1503238548
          HierarchyParent     #ActionPaneTabDefine
          Caption             #@SYS342635
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupEngineerBOM
          AutoDeclaration     #Yes
          ElementPosition     #1073741823
          HierarchyParent     #ActionPaneTabEngineer
          Caption             #@SYS7916
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupEngineerBOMReport
          AutoDeclaration     #Yes
          ElementPosition     #1789569705
          HierarchyParent     #ActionPaneTabEngineer
          Caption             #@SYS114631
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupEngineerConfiguration
          AutoDeclaration     #Yes
          ElementPosition     #1431655764
          HierarchyParent     #ActionPaneTabEngineer
          Caption             #@SYS53395
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupEngineerView
          ElementPosition     #715827882
          HierarchyParent     #ActionPaneTabEngineer
          Caption             #@SYS5252
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupFunctions
          ElementPosition     #1288490187
          HierarchyParent     #ActionPaneTabRetail
          Caption             #@SYS81103
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupGeneralAIF
          ElementPosition     #1288490187
          HierarchyParent     #ActionPaneTabGeneral
          Caption             #@SYS339360
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupGeneralEnterprisePortal
          ElementPosition     #1717986916
          HierarchyParent     #ActionPaneTabGeneral
          Caption             #@SYS191502
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupGeneralManageCases
          ElementPosition     #858993458
          HierarchyParent     #ActionPaneTabGeneral
          Caption             #@SYS310451
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupInquiries
          ElementPosition     #1717986916
          HierarchyParent     #ActionPaneTabRetail
          Caption             #@SYS3850
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupManageCostsSetup
          ElementPosition     #1431655764
          HierarchyParent     #ActionPaneTabManageCosts
          Caption             #@SYS342635
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupManageInventoryModify
          ElementPosition     #1946157054
          HierarchyParent     #ActionPaneTabManageInventory
          Caption             #@SYS300202
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupManageInventoryOrderSettings
          AutoDeclaration     #Yes
          ElementPosition     #1073741823
          HierarchyParent     #ActionPaneTabManageInventory
          Caption             #@SYS118398
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupManageInventoryQuality
          AutoDeclaration     #Yes
          ElementPosition     #1789569705
          HierarchyParent     #ActionPaneTabManageInventory
          Caption             #@SYS73185
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupManageInventoryView
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #ActionPaneTabManageInventory
          Caption             #@SYS118396
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupManageInventoryWarehouse
          AutoDeclaration     #Yes
          ElementPosition     #1431655764
          HierarchyParent     #ActionPaneTabManageInventory
          Caption             #@SYS6437
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupManageProjectsCosts
          ElementPosition     #1610612733
          HierarchyParent     #ActionPaneTabManageProjects
          Caption             #@SYS40781
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupManageProjectsProject
          ElementPosition     #1073741822
          HierarchyParent     #ActionPaneTabManageProjects
          Caption             #@SYS114724
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupPdsApprovedVendorList
          ElementPosition     #1687308579
          HierarchyParent     #ActionPaneTabPurchase
          Caption             #@PRO2878
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupPdsApprovedVendorListSMB
          ElementPosition     #1288490187
          HierarchyParent     #ActionPaneTabPlanSMB
          Caption             #@PRO2878
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupPlanCoverage
          AutoDeclaration     #Yes
          ElementPosition     #1227133512
          HierarchyParent     #ActionPaneTabPlan
          Caption             #@SYS26726
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupPlanForecast
          ElementPosition     #920350134
          HierarchyParent     #ActionPaneTabPlan
          Caption             #@SYS102639
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupPlanPlanOrderSettings
          ElementPosition     #1533916890
          HierarchyParent     #ActionPaneTabPlan
          Caption             #@SYS118398
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupPlanRequirement
          AutoDeclaration     #Yes
          ElementPosition     #1840700268
          HierarchyParent     #ActionPaneTabPlan
          Caption             #@SYS11856
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupPlanView
          ElementPosition     #613566756
          HierarchyParent     #ActionPaneTabPlan
          Caption             #@SYS5252
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupPlanViewSMB
          ElementPosition     #1717986916
          HierarchyParent     #ActionPaneTabPlanSMB
          Caption             #@SYS5252
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupPurchaseInvoiceMatching
          AutoDeclaration     #Yes
          ConfigurationKey    #PurchInvoiceMatching
          ElementPosition     #2013265918
          HierarchyParent     #ActionPaneTabPurchase
          Caption             #@SYS131099
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupPurchaseOrders
          ElementPosition     #1879048190
          HierarchyParent     #ActionPaneTabPurchase
          Caption             #@SYS114676
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupPurchaseOrdersSMB
          ElementPosition     #858993458
          HierarchyParent     #ActionPaneTabPlanSMB
          Caption             #@SYS114676
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupPurchaseRelatedInformation
          ElementPosition     #2080374782
          HierarchyParent     #ActionPaneTabPurchase
          Caption             #@SYS111665
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupPurchaseTradeAgreements
          ElementPosition     #920350134
          HierarchyParent     #ActionPaneTabPurchase
          Caption             #@SYS115266
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupPurchaseView
          ElementPosition     #613566756
          HierarchyParent     #ActionPaneTabPurchase
          Caption             #@SYS5252
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupRetailKit
          ConfigurationKey    #Retail
          ElementPosition     #1825361094
          HierarchyParent     #ActionPaneTabDefine
          Caption             #@REX1066
          DataSource          #InventTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupSellOrders
          ElementPosition     #1431655764
          HierarchyParent     #ActionPaneTabSell
          Caption             #@SYS114628
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupSellRelatedInformation
          ElementPosition     #1789569705
          HierarchyParent     #ActionPaneTabSell
          Caption             #@SYS111665
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupSellTradeAgreements
          ElementPosition     #1073741823
          HierarchyParent     #ActionPaneTabSell
          Caption             #@SYS115266
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupSellView
          ElementPosition     #715827882
          HierarchyParent     #ActionPaneTabSell
          Caption             #@SYS5252
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupSequencing
          ElementPosition     #1994091957
          HierarchyParent     #ActionPaneTabPlan
          Caption             #@PSC247
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupSetup
          ElementPosition     #858993458
          HierarchyParent     #ActionPaneTabRetail
          Caption             #@RET260627
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #EngineeringChangeGroup
          ConfigurationKey    #EngChgCase
          ElementPosition     #1767200083
          HierarchyParent     #ActionPaneTabEngineer
          Caption             #@SYS4009248
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #MCRModifyCategory
          AutoDeclaration     #Yes
          Visible             #No
          ConfigurationKey    #MCRCallCenter
          ElementPosition     #536870910
          HierarchyParent     #ActionPaneTabDefine
          Caption             #@MCR39486
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #MCRSetup
          ElementPosition     #858993458
          HierarchyParent     #MCRActionPaneTabMCRFunctions
          Caption             #@SYS12687
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #PdsButtonGroupManageInventoryBatchAttrib
          AutoDeclaration     #Yes
          ConfigurationKey    #PdsBatchAttrib
          ElementPosition     #2035635539
          HierarchyParent     #ActionPaneTabManageInventory
          Caption             #@PRO1588
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #PdsButtonGroupManageInventoryRegulatory
          AutoDeclaration     #Yes
          ElementPosition     #2125114024
          HierarchyParent     #ActionPaneTabManageInventory
          Caption             #@PDS1378
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #PmfButtonGroupEngineerFormula
          AutoDeclaration     #Yes
          ConfigurationKey    #PMF
          ElementPosition     #1744830462
          HierarchyParent     #ActionPaneTabEngineer
          Caption             #@PRO1115
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #FixedLocationsGrid
          ElementPosition     #1431655764
          HierarchyParent     #WHSFixedLocations
          DataSource          #WHSInventFixedLocation
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #HeaderGrid
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #GridGroup
          DataSource          #InventTable
          DefaultAction       #EditDetailsButton
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #ProductVariantFixedLocationsGrid
          ElementPosition     #1431655764
          HierarchyParent     #WHSProductVariantFixedLocations
          DataSource          #WHSProductVariantFixedLocation
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Activation
          ElementPosition     #1073741823
          HierarchyParent     #BarcodeActiTempConcession
          DataSource          #RetailInventTable
          DataGroup           #Activation
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #AlcoholDeclaration_RU
          ElementPosition     #1431655764
          HierarchyParent     #TabPageAlcoholDeclaration_RU
          DataSource          #InventTable
          DataGroup           #AlcoholDeclaration_RU
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Barcode
          ElementPosition     #715827882
          HierarchyParent     #BarcodeActiTempConcession
          DataSource          #RetailInventTable
          DataGroup           #Barcode
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #BarcodeActiTempConcession
          ElementPosition     #1288490187
          HierarchyParent     #TabPageRetail
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Blocking
          ElementPosition     #1670265056
          HierarchyParent     #CompPriceBlocking
          DataSource          #RetailInventTable
          DataGroup           #Blocking
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #CategoryHierarchyLookup
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #954437176
          HierarchyParent     #CategoryTree
          Style               #DetailTitleContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #CategoryTree
          AutoDeclaration     #Yes
          Visible             #No
          Height              #Column height
          ElementPosition     #858993458
          HierarchyParent     #MainGroup
          FrameType           #Edged 3D Line
          Style               #BorderlessGridContainer
          RightMargin         #0
          ViewEditMode        #Edit
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ComparisonPrice
          ElementPosition     #1193046468
          HierarchyParent     #CompPriceBlocking
          Caption             #@RET3150
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #CompPriceBlocking
          ElementPosition     #858993458
          HierarchyParent     #TabPageRetail
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #concession
          Visible             #No
          ElementPosition     #1610612734
          HierarchyParent     #BarcodeActiTempConcession
          DataSource          #RetailInventTable
          DataGroup           #concession
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #CostABC
          ElementPosition     #1908874352
          HierarchyParent     #TabPageCost
          DataSource          #InventTable
          DataGroup           #ABC
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #CostBasePrice
          AutoDeclaration     #Yes
          ElementPosition     #1431655764
          HierarchyParent     #TabPageCost
          DataSource          #Invent
          DataGroup           #CostBasePrice
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #CostCosting
          ElementPosition     #715827882
          HierarchyParent     #TabPageCost
          DataSource          #InventTable
          DataGroup           #Costing
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #CostFiscalLIFO
          ElementPosition     #954437176
          HierarchyParent     #TabPageCost
          DataSource          #InventTable
          DataGroup           #FiscalLIFO
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #CostMiscellaneousChargesInvent
          ElementPosition     #1670265058
          HierarchyParent     #TabPageCost
          DataSource          #Invent
          DataGroup           #MiscellaneousChargesInvent
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #CostPosting
          ElementPosition     #477218588
          HierarchyParent     #TabPageCost
          DataSource          #InventItemGroupItem
          DataGroup           #Posting
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #CostPriceUpdate
          ElementPosition     #1193046470
          HierarchyParent     #TabPageCost
          Caption             #@SYS25118
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #CostPriceUpdateInvent
          ElementPosition     #1610612734
          HierarchyParent     #CostPriceUpdate
          FrameType           #None
          DataSource          #Invent
          DataGroup           #PriceUpdate
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #CostPriceUpdateInventTable
          ElementPosition     #1073741823
          HierarchyParent     #CostPriceUpdate
          FrameType           #None
          DataSource          #InventTable
          DataGroup           #InventPriceUpdate
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #CustomsTariff_IN
          AutoDeclaration     #Yes
          ElementPosition     #1789569704
          HierarchyParent     #TabPageForeignTrade
          DataSource          #InventTable
          DataGroup           #CustomsTariff_IN
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #DefaultProductDimensions
          AutoDeclaration     #Yes
          ElementPosition     #1342177275
          HierarchyParent     #TabPageGeneral
          DataSource          #InventTable
          DataGroup           #DefaultProductDimensions
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #EngineerBOM
          ElementPosition     #429496728
          HierarchyParent     #TabPageEngineer
          DataSource          #InventTable
          DataGroup           #BOM
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #EngineerBOMCalculation
          ElementPosition     #858993456
          HierarchyParent     #TabPageEngineer
          DataSource          #InventTable
          DataGroup           #BOMCalculation
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #EngineerMeasurement
          ElementPosition     #644245092
          HierarchyParent     #TabPageEngineer
          DataSource          #InventTable
          DataGroup           #Measurement
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #EngineerProductBuilder
          ElementPosition     #1288490184
          HierarchyParent     #TabPageEngineer
          DataSource          #InventTable
          DataGroup           #ProductBuilder
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #EngineerProduction
          ElementPosition     #1073741820
          HierarchyParent     #TabPageEngineer
          DataSource          #InventTable
          DataGroup           #Production
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ExciseTariffcode_IN
          AutoDeclaration     #Yes
          ElementPosition     #2001335453
          HierarchyParent     #TabPageGeneral
          Caption             #@GLS5005
          DataSource          #InventTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #EximIncentiveSchemes_IN
          AutoDeclaration     #Yes
          ElementPosition     #1968526675
          HierarchyParent     #TabPageForeignTrade
          DataSource          #InventTable
          DataGroup           #EximIncentiveSchemes_IN
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #FiscalInformation_BR
          ElementPosition     #1431655764
          HierarchyParent     #TabFiscalInformation_BR
          DataSource          #InventTable
          DataGroup           #FiscalInformation_BR
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ForeignTradeIntrastat
          ElementPosition     #536870910
          HierarchyParent     #Group
          DataSource          #InventTable
          DataGroup           #Intrastat
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ForeignTradeOrigin
          ElementPosition     #805306365
          HierarchyParent     #Group
          DataSource          #InventTable
          DataGroup           #Origin
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GeneralAdministration
          AutoDeclaration     #Yes
          ElementPosition     #1624034504
          HierarchyParent     #TabPageGeneral
          Caption             #@SYS40777
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GeneralFixedAsset_RU
          CountryRegionCodes  #RU
          ElementPosition     #1905891733
          HierarchyParent     #TabPageGeneral
          Caption             #@GLS106645
          DataSource          #InventTable
          DataGroup           #FixedAssets_RU
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GeneralFurtherIdentificationFormGroup
          ElementPosition     #872415228
          HierarchyParent     #TabPageGeneral
          Caption             #@SYS300198
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GeneralIdentification
          ElementPosition     #477218588
          HierarchyParent     #TabPageGeneral
          Caption             #@SYS5711
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GeneralTMS
          ElementPosition     #1431655764
          HierarchyParent     #TabTMS
          Caption             #@TRX1425
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GridGroup
          ElementPosition     #1431655764
          HierarchyParent     #EditableGrid
          Style               #BorderlessGridContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Group
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612734
          HierarchyParent     #TabPageForeignTrade
          FrameType           #None
          Columns             #Auto
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GroupGeneralProductVariants
          AutoDeclaration     #Yes
          ElementPosition     #1073741820
          HierarchyParent     #TabPageGeneral
          Caption             #@SYS133901
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GroupProductImage
          ElementPosition     #1908874352
          HierarchyParent     #TabPageGeneral
          Caption             #@SYS301516
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GroupTitlePane
          Width               #Column width
          ElementPosition     #1073741822
          HierarchyParent     #Details
          Style               #DetailTitleContainer
          ViewEditMode        #View
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #GroupTitlePaneMain
          Width               #Column width
          ElementPosition     #1610612734
          HierarchyParent     #GroupTitlePane
          FrameType           #None
          Style               #MarginlessContainer
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Intracompany_RU
          ElementPosition     #2120640100
          HierarchyParent     #TabPageGeneral
          DataSource          #InventTable
          DataGroup           #intracompany_RU
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Inventory
          ElementPosition     #1366580502
          HierarchyParent     #TabPageInventory
          Caption             #@SYS981
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #InventoryCounting
          ElementPosition     #1073741822
          HierarchyParent     #Inventory
          FrameType           #None
          DataSource          #InventItemLocation
          DataGroup           #InventCounting
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #InventoryDeliveryPercent
          ElementPosition     #1171354716
          HierarchyParent     #TabPageInventory
          Caption             #@SYS78286
          DataSource          #Invent
          DataGroup           #DeliveryPercent
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #InventoryHandling
          ElementPosition     #1757032074
          HierarchyParent     #TabPageInventory
          DataSource          #InventTable
          DataGroup           #Handling
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #InventoryPackaging
          ElementPosition     #1952257860
          HierarchyParent     #TabPageInventory
          DataSource          #InventTable
          DataGroup           #Packaging
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #InventoryPhysicalDimensions
          ElementPosition     #585677358
          HierarchyParent     #TabPageInventory
          DataSource          #InventTable
          DataGroup           #PhysicalDimensions
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #InventoryQuantity
          ElementPosition     #1610612733
          HierarchyParent     #Inventory
          FrameType           #None
          DataSource          #Invent
          DataGroup           #Quantity
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #InventoryRFIDTagging
          ElementPosition     #976128930
          HierarchyParent     #TabPageInventory
          DataSource          #InventTable
          DataGroup           #RFIDTagging
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #InventoryShippingAndReceiving
          ElementPosition     #1561806288
          HierarchyParent     #TabPageInventory
          DataSource          #InventTable
          DataGroup           #ShippingAndReceiving
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #InventoryTracking
          ElementPosition     #780903144
          HierarchyParent     #TabPageInventory
          DataSource          #InventTable
          DataGroup           #Tracking
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #InventoryWeightMeasurements
          ElementPosition     #390451572
          HierarchyParent     #TabPageInventory
          DataSource          #InventTable
          DataGroup           #WeightMeasurements
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ItemCyclePOSTerminal
          ElementPosition     #1717986916
          HierarchyParent     #TabPageRetail
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ItemLifeCycle
          ElementPosition     #1073741822
          HierarchyParent     #ItemCyclePOSTerminal
          DataSource          #RetailInventTable
          DataGroup           #ItemLifeCycle
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #LabelAttributes
          ElementPosition     #1431655764
          HierarchyParent     #LabelReports
          DataSource          #RetailInventTable
          DataGroup           #LabelAttributes
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #LabelReports
          ElementPosition     #1932735281
          HierarchyParent     #TabPageRetail
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #MainGroup
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          FrameType           #Edged 3D
          Style               #MarginlessContainer
          Columns             #3
          Columnspace         #0
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #MarkupCode_RU
          ElementPosition     #671088637
          HierarchyParent     #TabPageGeneral
          DataSource          #InventTable
          DataGroup           #MarkupCode_RU
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #MCRAllowPriceAdjust
          ElementPosition     #1610612730
          HierarchyParent     #TabPageSales
          Caption             #@MCR34329
          DataSource          #MCRInventTable
          DataGroup           #AllowPriceAdjust
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #MCRContinuity
          ConfigurationKey    #MCRContinuity
          ElementPosition     #1823962994
          HierarchyParent     #TabPageSales
          Caption             #@MCR12291
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #MCRCoupon
          ElementPosition     #1431655764
          HierarchyParent     #MCRPromote
          DataSource          #MCRInventTable
          DataGroup           #Coupon
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #MCRDropShipmentGroup
          ElementPosition     #954437176
          HierarchyParent     #MCRTabPageDeliver
          Caption             #@SYS78211
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #MCRFTCExempt
          ConfigurationKey    #MCROrderStatusNotification
          ElementPosition     #1503238548
          HierarchyParent     #TabPageSales
          Caption             #@MCR31311
          DataSource          #MCRInventTable
          DataGroup           #FTCExempt
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #MCRInstallments
          ConfigurationKey    #MCRInstallmentBilling
          ElementPosition     #1181116002
          HierarchyParent     #TabPageSales
          Caption             #@MCR30662
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #MCRPackingBox
          ConfigurationKey    #LogisticsBasic
          ElementPosition     #1252698793
          HierarchyParent     #MCRTabPageDeliver
          DataSource          #MCRInventTable
          DataGroup           #PackingBox
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #MCRSellStartEndDates
          ElementPosition     #2037313258
          HierarchyParent     #TabPageSales
          DataSource          #MCRInventTable
          DataGroup           #SellStartEndDates
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #MCRShipAlone
          ElementPosition     #636291450
          HierarchyParent     #MCRTabPageDeliver
          DataSource          #MCRInventTable
          DataGroup           #ShipAlone
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #MCRShipDates
          ElementPosition     #1849222028
          HierarchyParent     #MCRTabPageDeliver
          DataSource          #MCRInventTable
          DataGroup           #ShipDates
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #NaturalTax_LV
          ElementPosition     #2147221502
          HierarchyParent     #TabPageInventory
          DataSource          #InventTable
          DataGroup           #NaturalTax_LV
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PdsAVL
          ElementPosition     #2028178999
          HierarchyParent     #TabPagePurchase
          Caption             #@PRO2878
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PdsCatchWeight
          ConfigurationKey    #PdsCatchWeight
          ElementPosition     #2146435070
          HierarchyParent     #TabPageInventory
          Caption             #@PRO446
          DataSource          #InventTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PdsItemCustomData
          ElementPosition     #2144687442
          HierarchyParent     #TabPageSales
          DataSource          #InventTable
          DataGroup           #pdsItemCustomData
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PdsItemRebateGroup
          ElementPosition     #2141891240
          HierarchyParent     #TabPageSales
          DataSource          #InventTable
          DataGroup           #PdsItemRebateGroup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PdsMRCRegulatoryRequirement
          ConfigurationKey    #PdsMRC
          ElementPosition     #2146959358
          HierarchyParent     #TabPageInventory
          Caption             #@PDS916
          DataSource          #InventTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PDSPotency
          ConfigurationKey    #PDSPotency
          ElementPosition     #1854644967
          HierarchyParent     #TabPageInventory
          DataSource          #InventTable
          DataGroup           #PDSPotency
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PDSPotencyPrecision
          ConfigurationKey    #PDSPotency
          ElementPosition     #1511192195
          HierarchyParent     #TabPagePurchase
          FrameType           #None
          DataSource          #Purch
          DataGroup           #PDSPotency
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PDSPotencyPrecisionSales
          ConfigurationKey    #PDSPotency
          ElementPosition     #1395864366
          HierarchyParent     #TabPageSales
          FrameType           #None
          DataSource          #Sales
          DataGroup           #PDSPotency
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PdsShelf
          ElementPosition     #2048822177
          HierarchyParent     #TabPageInventory
          DataSource          #InventTable
          DataGroup           #PdsItemData
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PlanCoverage
          ElementPosition     #1431655764
          HierarchyParent     #TabPagePlan
          FrameType           #None
          DataSource          #InventTable
          DataGroup           #Coverage
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PmfFormulaPlanning
          AutoDeclaration     #Yes
          ElementPosition     #2102744403
          HierarchyParent     #TabPageEngineer
          DataSource          #InventTable
          DataGroup           #PmfFormulaPlanning
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PmfYield
          ElementPosition     #2145386494
          HierarchyParent     #TabPageInventory
          DataSource          #InventTable
          DataGroup           #PmfYield
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #POSTerminal
          ElementPosition     #1610612733
          HierarchyParent     #ItemCyclePOSTerminal
          DataSource          #RetailInventTable
          DataGroup           #POSTerminal
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ProductDimensions
          ElementPosition     #858993458
          HierarchyParent     #ProductVariantFixedLocationsGrid
          BackgroundColor     #Window background
          DataSource          #InventDim
          DataGroup           #ProductDimensions
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ProjectAdministration
          ElementPosition     #1431655764
          HierarchyParent     #TabPageProject
          FrameType           #None
          DataSource          #InventTable
          DataGroup           #ProjAdministration
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PurchaseAdministration
          ElementPosition     #536870910
          HierarchyParent     #TabPagePurchase
          DataSource          #InventTable
          DataGroup           #PurchaseAdministration
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PurchaseBasePrice
          ElementPosition     #1073741820
          HierarchyParent     #TabPagePurchase
          DataSource          #Purch
          DataGroup           #BasePrice
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PurchaseDiscount
          ElementPosition     #1431655760
          HierarchyParent     #TabPagePurchase
          DataSource          #Purch
          DataGroup           #Discount
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PurchaseMiscellaneousCharges
          ElementPosition     #1252698790
          HierarchyParent     #TabPagePurchase
          DataSource          #Purch
          DataGroup           #MiscellaneousCharges
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PurchasePriceUpdateInventTable
          ElementPosition     #1073741822
          HierarchyParent     #PurchasePriseUpdate
          FrameType           #None
          DataSource          #InventTable
          DataGroup           #PurchasePriceUpdate
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PurchasePriceUpdatePurch
          ElementPosition     #1610612733
          HierarchyParent     #PurchasePriseUpdate
          FrameType           #None
          DataSource          #Purch
          DataGroup           #PriceUpdate
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PurchasePriseUpdate
          ElementPosition     #894784850
          HierarchyParent     #TabPagePurchase
          Caption             #@SYS25118
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PurchaseSetup
          ElementPosition     #357913940
          HierarchyParent     #TabPagePurchase
          Caption             #@SYS25545
          DataSource          #Purch
          DataGroup           #SetupModule
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #PurchaseTaxation
          ElementPosition     #715827880
          HierarchyParent     #TabPagePurchase
          DataSource          #Purch
          DataGroup           #Taxation
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Return
          ElementPosition     #1879048189
          HierarchyParent     #ItemCyclePOSTerminal
          DataSource          #RetailInventTable
          DataGroup           #Return
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #SAD_PL
          ElementPosition     #2134061873
          HierarchyParent     #TabPageGeneral
          DataSource          #InventTable
          DataGroup           #SAD
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #SalesAdministration
          ElementPosition     #322122546
          HierarchyParent     #TabPageSales
          DataSource          #InventTable
          DataGroup           #SalesAdministration
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #SalesAlternativeProduct
          ElementPosition     #966367638
          HierarchyParent     #TabPageSales
          DataSource          #InventTable
          DataGroup           #AlternativeProduct
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #SalesBasePrice
          ElementPosition     #644245092
          HierarchyParent     #TabPageSales
          Caption             #@SYS111224
          DataSource          #Sales
          DataGroup           #BasePrice
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #SalesDiscount
          ElementPosition     #858993456
          HierarchyParent     #TabPageSales
          DataSource          #Sales
          DataGroup           #Discount
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #SalesMiscellaneousCharges
          ElementPosition     #751619274
          HierarchyParent     #TabPageSales
          DataSource          #Sales
          DataGroup           #MiscellaneousCharges
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #SalesPriceUpdateInvent
          ElementPosition     #536870910
          HierarchyParent     #TabPageSales
          Caption             #@SYS25118
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #SalesPriceUpdateInventTable
          ElementPosition     #1073741822
          HierarchyParent     #SalesPriceUpdateInvent
          FrameType           #None
          DataSource          #InventTable
          DataGroup           #SalesPriceUpdate
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #SalesPriceUpdateSales
          ElementPosition     #1610612733
          HierarchyParent     #SalesPriceUpdateInvent
          FrameType           #None
          DataSource          #Sales
          DataGroup           #PriceUpdate
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #SalesSetup
          ElementPosition     #214748364
          HierarchyParent     #TabPageSales
          Caption             #@SYS7443
          DataSource          #Sales
          DataGroup           #SetupModule
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #SalesTaxation
          ElementPosition     #429496728
          HierarchyParent     #TabPageSales
          DataSource          #Sales
          DataGroup           #Taxation
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #SecondaryCost_RU
          AutoDeclaration     #Yes
          ElementPosition     #2139095038
          HierarchyParent     #TabPageCost
          DataSource          #Invent
          DataGroup           #SecondaryCost_RU
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #ServiceCode_IN
          AutoDeclaration     #Yes
          ElementPosition     #2093796554
          HierarchyParent     #TabPageGeneral
          DataSource          #InventTable
          DataGroup           #ServiceCode_IN
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #TAMVendRebate
          ElementPosition     #1908874349
          HierarchyParent     #TabPagePurchase
          DataSource          #MCRInventTable
          DataGroup           #VendorRebateItemGroup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Variants
          ElementPosition     #795364312
          HierarchyParent     #CompPriceBlocking
          Caption             #@RET3715
          DataSource          #RetailInventTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #VerticalSplitter
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #1288490187
          HierarchyParent     #MainGroup
          BackgroundColor     #Window background
          Style               #SplitterVerticalContainer
          LeftMargin          #0
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #WHSAdditionalCodes
          AutoDeclaration     #Yes
          ElementPosition     #1840700268
          HierarchyParent     #WHSColumn2
          Caption             #@WAX1480
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #WHSColumn1
          ElementPosition     #1073741822
          HierarchyParent     #TabWHS
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #WHSColumn2
          ElementPosition     #1610612733
          HierarchyParent     #TabWHS
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #WHSDescription
          AutoDeclaration     #Yes
          ElementPosition     #1073741823
          HierarchyParent     #WHSColumn1
          Caption             #@SYS80470
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #WHSEcoResProductTrnsCodes_NMFC
          AutoDeclaration     #Yes
          ElementPosition     #1533916890
          HierarchyParent     #WHSColumn2
          Caption             #@WAX1642
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #WHSFilterCode1
          AutoDeclaration     #Yes
          ElementPosition     #613566756
          HierarchyParent     #WHSColumn2
          DataSource          #WHSInventTable
          DataGroup           #WHSFilterCode
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #WHSFilterGroup1
          AutoDeclaration     #Yes
          ElementPosition     #920350134
          HierarchyParent     #WHSColumn2
          DataSource          #WHSInventTable
          DataGroup           #WHSFilterGroup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #WHSFixedLocations
          AutoDeclaration     #Yes
          ElementPosition     #1431655764
          HierarchyParent     #WHSColumn1
          Caption             #@SYP4980013
          DataSource          #WHSInventFixedLocation
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #WHSPhysDim
          AutoDeclaration     #Yes
          ElementPosition     #715827882
          HierarchyParent     #WHSColumn1
          DataSource          #WHSInventTable
          DataGroup           #WHSPhysDim
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #WHSProduction
          AutoDeclaration     #Yes
          ElementPosition     #1227133512
          HierarchyParent     #WHSColumn2
          Caption             #@WAX1223
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #WHSProductVariantFixedLocations
          AutoDeclaration     #Yes
          ElementPosition     #1789569705
          HierarchyParent     #WHSColumn1
          Caption             #@SYP4980019
          DataSource          #WHSProductVariantFixedLocation
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUBUTTON
        PROPERTIES
          Name                #MenuButtonCreateTemplates
          HelpText            #@SYS330686
          ElementPosition     #1610612734
          HierarchyParent     #ButtonGroupDefineNew
          Text                #@SYS53423
          NormalImage         #12226
          ImageLocation       #EmbeddedResource
          Big                 #Yes
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #CategoryHierarchyReferenceGroup
          AutoDeclaration     #Yes
          Width               #Column width
          ElementPosition     #1431655764
          HierarchyParent     #CategoryHierarchyLookup
          ReplacementFieldGroup #Name
          ExtendedDataType    #EcoResCategoryHierarchyId
          LabelPosition       #Above
          ViewEditMode        #Edit
        ENDPROPERTIES
        
        METHODS
          SOURCE #lookup
            #public void lookup()
            #{
            #    EcoResCategoryHierarchy::lookupProductHierarchies(this);
            #}
          ENDSOURCE
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #
            #    ret = super();
            #
            #    if (mHierarchyTree)
            #    {
            #        element.initializeCategoryTree();
            #    }
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #EcoResProductDimensionGroupProduct_ProductDimensionGroup
          ElementPosition     #715827882
          HierarchyParent     #GeneralAdministration
          DataSource          #EcoResProductDimensionGroupProduct
          ReferenceField      #ProductDimensionGroup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #EcoResProductDimensionGroupProductGrid
          ElementPosition     #1879048188
          HierarchyParent     #HeaderGrid
          DataSource          #EcoResProductDimensionGroupProduct
          ReferenceField      #ProductDimensionGroup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #EcoResStorageDimensionGroupItem_StorageDimensionGroup
          ElementPosition     #1073741823
          HierarchyParent     #GeneralAdministration
          DataSource          #EcoResStorageDimensionGroupItem
          ReferenceField      #StorageDimensionGroup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #EcoResTrackingDimensionGroupItem_TrackingDimensionGroup
          ElementPosition     #1431655764
          HierarchyParent     #GeneralAdministration
          DataSource          #EcoResTrackingDimensionGroupItem
          ReferenceField      #TrackingDimensionGroup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #InventTable_ExciseTariffCodes_IN
          AutoDeclaration     #Yes
          ElementPosition     #715827882
          HierarchyParent     #ExciseTariffcode_IN
          DataSource          #InventTable
          ReferenceField      #ExciseTariffCodes_IN
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #InventTable_Product
          ElementPosition     #1610612734
          HierarchyParent     #GeneralIdentification
          DataSource          #InventTable
          ReferenceField      #Product
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #LabelAttributes_LabelAttribute1
          ElementPosition     #613566756
          HierarchyParent     #LabelAttributes
          DataSource          #RetailInventTable
          ReferenceField      #LabelAttribute1
        ENDPROPERTIES
        
        METHODS
          SOURCE #lookupReference
            #public Common lookupReference()
            #{
            #    //<GEERU>
            #    return RetailInventTable::lookupReferenceAttribute(this, inventTable.Product);
            #    //</GEERU>
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #LabelAttributes_LabelAttribute2
          ElementPosition     #920350134
          HierarchyParent     #LabelAttributes
          DataSource          #RetailInventTable
          ReferenceField      #LabelAttribute2
        ENDPROPERTIES
        
        METHODS
          SOURCE #lookupReference
            #public Common lookupReference()
            #{
            #    //<GEERU>
            #    return RetailInventTable::lookupReferenceAttribute(this, inventTable.Product);
            #    //</GEERU>
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #LabelAttributes_LabelAttribute3
          ElementPosition     #1227133512
          HierarchyParent     #LabelAttributes
          DataSource          #RetailInventTable
          ReferenceField      #LabelAttribute3
        ENDPROPERTIES
        
        METHODS
          SOURCE #lookupReference
            #public Common lookupReference()
            #{
            #    //<GEERU>
            #    return RetailInventTable::lookupReferenceAttribute(this, inventTable.Product);
            #    //</GEERU>
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #LabelAttributes_LabelAttribute4
          ElementPosition     #1533916890
          HierarchyParent     #LabelAttributes
          DataSource          #RetailInventTable
          ReferenceField      #LabelAttribute4
        ENDPROPERTIES
        
        METHODS
          SOURCE #lookupReference
            #public Common lookupReference()
            #{
            #    //<GEERU>
            #    return RetailInventTable::lookupReferenceAttribute(this, inventTable.Product);
            #    //</GEERU>
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #LabelAttributes_LabelAttribute5
          ElementPosition     #1840700268
          HierarchyParent     #LabelAttributes
          DataSource          #RetailInventTable
          ReferenceField      #LabelAttribute5
        ENDPROPERTIES
        
        METHODS
          SOURCE #lookupReference
            #public Common lookupReference()
            #{
            #    //<GEERU>
            #    return RetailInventTable::lookupReferenceAttribute(this, inventTable.Product);
            #    //</GEERU>
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TAB
        PROPERTIES
          Name                #Tab
          Width               #Column width
          Height              #Column height
          ElementPosition     #1717986916
          HierarchyParent     #MainGroup
          ShowTabs            #No
        ENDPROPERTIES
        
        METHODS
          SOURCE #tabChanged
            #public void tabChanged(int _fromTab, int _toTab)
            #{
            #    super(_fromTab, _toTab);
            #
            #    element.lock();
            #
            #    // Buttons to show in Grid View
            #    editDetailsButton.visible(editableGrid.isActivePage());
            #    buttonGroupDefineList.visible(editableGrid.isActivePage());
            #
            #    // Buttons to show in Details View
            #    editRecord.visible(!editableGrid.isActivePage());
            #
            #    element.unLock();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TAB
        PROPERTIES
          Name                #TabHeader
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612734
          HierarchyParent     #Details
          Style               #FastTabs
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #Details
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #Tab
          Style               #DetailsFormDetails
          PanelStyle          #Details
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #EditableGrid
          AutoDeclaration     #Yes
          ElementPosition     #1610612734
          HierarchyParent     #Tab
          ViewEditMode        #Edit
          Style               #DetailsFormGrid
          PanelStyle          #Grid
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #MCRPromote
          ConfigurationKey    #MCRCallCenter
          ElementPosition     #585677352
          HierarchyParent     #TabHeader
          Caption             #@MCR35952
          Columns             #Auto
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #MCRTabPageDeliver
          ElementPosition     #683290244
          HierarchyParent     #TabHeader
          Caption             #@SYS117475
          Columns             #3
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TabFinancialDimensions
          AutoDeclaration     #Yes
          NeededPermission    #Manual
          ElementPosition     #1929379834
          HierarchyParent     #TabHeader
          Caption             #@SYS138491
          Columns             #Auto
          HideIfEmpty         #No
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TabFiscalInformation_BR
          AutoDeclaration     #Yes
          CountryRegionCodes  #BR
          ElementPosition     #2013265916
          HierarchyParent     #TabHeader
          BackgroundColor     #Window background
          Caption             #@GLS56
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TabPageAlcoholDeclaration_RU
          AutoDeclaration     #Yes
          CountryRegionCodes  #RU
          ElementPosition     #2058005159
          HierarchyParent     #TabHeader
          Caption             #@SYS4002797
          Columns             #Auto
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TabPageCost
          ElementPosition     #1438646263
          HierarchyParent     #TabHeader
          Caption             #@SYS300192
          Columns             #Auto
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TabPageEngineer
          AutoDeclaration     #Yes
          ElementPosition     #1252698790
          HierarchyParent     #TabHeader
          BackgroundColor     #Window background
          Caption             #@SYS300194
          Columns             #Auto
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TabPageForeignTrade
          AutoDeclaration     #Yes
          ElementPosition     #894784850
          HierarchyParent     #TabHeader
          Caption             #@SYS27650
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TabPageGeneral
          ElementPosition     #357913940
          HierarchyParent     #TabHeader
          Caption             #@SYS2952
          Columns             #Auto
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TabPageInventory
          AutoDeclaration     #Yes
          ElementPosition     #1073741820
          HierarchyParent     #TabHeader
          BackgroundColor     #Window background
          Caption             #@SYS118394
          Columns             #Auto
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TabPagePlan
          AutoDeclaration     #Yes
          ElementPosition     #1431655760
          HierarchyParent     #TabHeader
          Caption             #@SYS300193
          Columns             #Auto
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TabPageProject
          AutoDeclaration     #Yes
          ElementPosition     #1610612730
          HierarchyParent     #TabHeader
          Caption             #@SYS114879
          Columns             #Auto
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TabPagePurchase
          AutoDeclaration     #Yes
          ElementPosition     #536870910
          HierarchyParent     #TabHeader
          Caption             #@SYS9283
          Columns             #Auto
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TabPageRetail
          AutoDeclaration     #Yes
          ConfigurationKey    #RetailHeadquarters
          ElementPosition     #2102744402
          HierarchyParent     #TabHeader
          Caption             #@RET3014
          DataSource          #RetailInventTable
          Columns             #3
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TabPageSales
          AutoDeclaration     #Yes
          ElementPosition     #715827880
          HierarchyParent     #TabHeader
          BackgroundColor     #Window background
          Caption             #@SYS114644
          Columns             #3
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TabTMS
          ConfigurationKey    #WHSandTMS
          ElementPosition     #2125114024
          HierarchyParent     #TabHeader
          Caption             #@TRX1
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #TabWHS
          ConfigurationKey    #WHSandTMS
          ElementPosition     #2080374780
          HierarchyParent     #TabHeader
          Caption             #@WAX13
          Columns             #Auto
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #MCRCategoryProductDelete
          HelpText            #@SYS314794
          ElementPosition     #1610612733
          HierarchyParent     #MCRModifyCategory
          Text                #@RET4040023
          ButtonDisplay       #Text & Image left
          NormalImage         #11438
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          SaveRecord          #No
          MultiSelect         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    InventTable             inventTableLocal;
            #    EcoResProductCategory   ecoResProductCategoryLocal;
            #    boolean                 wasDeleted = false;
            #
            #    for (inventTableLocal = inventTable_ds.getFirst(true) ? inventTable_ds.getFirst(true): inventTable_ds.cursor();  inventTableLocal;  inventTableLocal = inventTable_ds.getNext())
            #    {
            #        ecoResProductCategoryLocal = EcoResProductCategory::findByProductIdAndCategoryId(inventTableLocal.Product, ecoResCategory.RecId, true);
            #        if (ecoResProductCategoryLocal)
            #        {
            #            ttsbegin;
            #            ecoResProductCategoryLocal.delete();
            #            ttscommit;
            #            wasDeleted = true;
            #        }
            #    }
            #    if (wasDeleted)
            #    {
            #        inventTable_ds.executeQuery();
            #    }
            #    else if (ecoResProduct)
            #    {
            #        info("@MCR39485");
            #    }
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #General_EcoResProductMasterModelingPolicy_IsAutomaticVariantGenerationEnabled
          ElementPosition     #1431655764
          HierarchyParent     #GroupGeneralProductVariants
          DataSource          #EcoResProductMasterModelingPolicy
          DataField           #IsVariantGenerationEnabled
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #General_EcoResProductMasterModelingPolicy_IsReuseExistingConfigurationEnabled
          ElementPosition     #1073741823
          HierarchyParent     #GroupGeneralProductVariants
          DataSource          #EcoResProductMasterModelingPolicy
          DataField           #IsReuseConfigurationEnabled
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #InventTable_DSA_IN
          AutoDeclaration     #Yes
          ElementPosition     #1789569705
          HierarchyParent     #ExciseTariffcode_IN
          DataSource          #InventTable
          DataField           #DSA_IN
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #MCRInventTable_DropShipment
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #MCRDropShipmentGroup
          DataSource          #MCRInventTable
          DataField           #DropShipment
        ENDPROPERTIES
        
        METHODS
          SOURCE #validate
            #public boolean validate()
            #{
            #    boolean ret = super();
            #
            #    if (ret
            #        && this.value()
            #        && !purchaseAdministration_PrimaryVendorId.text())
            #    {
            #        ret = checkFailed("@MCR12178");
            #    }
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #MCRInventTable_InstallmentEligible
          ElementPosition     #1431655764
          HierarchyParent     #MCRInstallments
          DataSource          #MCRInventTable
          DataField           #InstallmentEligible
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #PdsCWItem
          AutoDeclaration     #Yes
          AllowEdit           #No
          HelpText            #@PRO976
          ElementPosition     #613566756
          HierarchyParent     #PdsCatchWeight
          Label               #@pro975
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #PdsMRCRegulated
          ElementPosition     #1073741822
          HierarchyParent     #PdsMRCRegulatoryRequirement
          Label               #@PDS918
          DataSource          #InventTable
          DataMethod          #pdsMRCRegulatedMaterial
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #PdsMRCRestricted
          ElementPosition     #1610612733
          HierarchyParent     #PdsMRCRegulatoryRequirement
          Label               #@PDS2008
          DataSource          #InventTable
          DataMethod          #pdsMRCRestrictedMaterial
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #TMSInventEnabled_Enabled
          AutoDeclaration     #Yes
          ElementPosition     #1431655764
          HierarchyParent     #GeneralTMS
          DataSource          #InventTable
          DataMethod          #editTMSInventEnabled
          CacheDataMethod     #Yes
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #Variants_PrintVariantsShelfLabels
          ElementPosition     #1789569705
          HierarchyParent     #Variants
          DataSource          #RetailInventTable
          DataField           #PrintVariantsShelfLabels
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #WHSInventTable_PickWCNeg
          ElementPosition     #1610612733
          HierarchyParent     #WHSProduction
          DataSource          #WHSInventTable
          DataField           #PickWCNeg
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #EcoResProduct_M_productSubtype
          AllowEdit           #No
          ElementPosition     #1610612730
          HierarchyParent     #HeaderGrid
          DataSource          #EcoResProduct
          DataMethod          #productSubtype
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #EcoResProduct_M_productSubtypeTitle
          AllowEdit           #No
          Skip                #Yes
          ElementPosition     #1610612733
          HierarchyParent     #GroupTitlePaneMain
          DataSource          #EcoResProduct
          DataMethod          #productSubtype
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #EcoResProduct_ProductType
          ElementPosition     #1342177275
          HierarchyParent     #HeaderGrid
          DataSource          #EcoResProduct
          DataField           #ProductType
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #EcoResProduct_ProductTypeTitle
          Skip                #Yes
          ElementPosition     #1073741822
          HierarchyParent     #GroupTitlePaneMain
          DataSource          #EcoResProduct
          DataField           #ProductType
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #ExciseManufacture_IN
          AutoDeclaration     #Yes
          ElementPosition     #1073741823
          HierarchyParent     #ExciseTariffcode_IN
          DataSource          #InventTable
          DataMethod          #exciseManufacture_IN
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #General_EcoResProductMaster_VariantConfigurationTechnology
          ElementPosition     #715827882
          HierarchyParent     #GroupGeneralProductVariants
          DataSource          #EcoResProduct_EcoResProductMaster
          DataField           #VariantConfigurationTechnology
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #InventTable_PdsVendorCheckItem
          ElementPosition     #1431655764
          HierarchyParent     #PdsAVL
          DataSource          #InventTable
          DataField           #PdsVendorCheckItem
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #PmfFormulaPlanning_PmfProductType
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #PmfFormulaPlanning
          DataSource          #InventTable
          DataField           #PmfProductType
        ENDPROPERTIES
        
        METHODS
          SOURCE #leave
            #public boolean leave()
            #{
            #    boolean ret;
            #
            #    ret = super();
            #
            #    inventTable_ds.validateWrite();
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #WHSInventTable_AllowMaterialOverPick
          ElementPosition     #1879048189
          HierarchyParent     #WHSProduction
          DataSource          #WHSInventTable
          DataField           #AllowMaterialOverPick
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #DeleteRecord
          ElementPosition     #1227133512
          HierarchyParent     #ButtonGroupDefineModify
          Text                #@SYS14425
          NormalImage         #10121
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          SaveRecord          #No
          MultiSelect         #Yes
          Primary             #Yes
          NeedsRecord         #Yes
          Command             #2832
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #DocumentHandling
          HelpText            #@SYS339394
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroupDefineAttachments
          Text                #@SYS316708
          NormalImage         #10442
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          Big                 #Yes
          NeedsRecord         #Yes
          Command             #2853
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #EditRecord
          AutoDeclaration     #Yes
          ElementPosition     #613566756
          HierarchyParent     #ButtonGroupDefineModify
          Text                #@SYS317438
          NormalImage         #10040
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          MultiSelect         #Yes
          Big                 #Yes
          Primary             #Yes
          NeedsRecord         #Yes
          Command             #4471
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #ExportToExcel
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupDefineList
          NormalImage         #10156
          ImageLocation       #EmbeddedResource
          MultiSelect         #Yes
          Big                 #Yes
          Command             #4436
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #Refresh
          HelpText            #@SYS315818
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupDefineList
          NormalImage         #11437
          ImageLocation       #EmbeddedResource
          MultiSelect         #Yes
          Big                 #Yes
          Command             #2875
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL DROPDIALOGBUTTON
        PROPERTIES
          Name                #buttonWHSInventTableReservationHierarchy
          AutoDeclaration     #Yes
          ElementPosition     #671088637
          HierarchyParent     #ButtonGroupDefineSetup
          ButtonDisplay       #Text & Image above
          NormalImage         #11232
          ImageLocation       #EmbeddedResource
          MultiSelect         #No
          Big                 #Yes
          NeedsRecord         #Yes
          DataSource          #InventTable
          MenuItemName        #WHSInventtableReservationHierarchy
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL DROPDIALOGBUTTON
        PROPERTIES
          Name                #DimensionGroups
          ElementPosition     #536870910
          HierarchyParent     #ButtonGroupDefineSetup
          ButtonDisplay       #Text & Image below
          NormalImage         #10448
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          NeedsRecord         #Yes
          MenuItemName        #InventTableInventoryDimensionGroups
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL DROPDIALOGBUTTON
        PROPERTIES
          Name                #EngineeringChangeGroupAddToLog
          AutoDeclaration     #Yes
          ElementPosition     #1932735281
          HierarchyParent     #EngineeringChangeGroup
          ShowShortCut        #No
          NeedsRecord         #Yes
          MenuItemName        #EngChgCaseAddToLogReleasedProduct
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL DROPDIALOGBUTTON
        PROPERTIES
          Name                #EngineeringChangeGroupAssociateCase
          AutoDeclaration     #Yes
          ElementPosition     #1717986916
          HierarchyParent     #EngineeringChangeGroup
          ShowShortCut        #No
          MultiSelect         #Yes
          NeedsRecord         #Yes
          MenuItemName        #EngChgCaseAssociateREleasedProduct
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #Group1_PDSPricingPrecision
          ElementPosition     #1431655764
          HierarchyParent     #PDSPotencyPrecision
          Alignment           #Right
          DataSource          #Purch
          DataField           #PDSPricingPrecision
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #MCRInventTable_ContEventDuration
          ElementPosition     #1610612734
          HierarchyParent     #MCRContinuity
          DataSource          #MCRInventTable
          DataField           #ContEventDuration
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #PdsShelf_PdsBestBefore
          AutoDeclaration     #Yes
          ElementPosition     #1717986916
          HierarchyParent     #PdsShelf
          ShowZero            #No
          DataSource          #InventTable
          DataField           #PdsBestBefore
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #PdsShelf_PdsShelfAdvice
          AutoDeclaration     #Yes
          ElementPosition     #858993458
          HierarchyParent     #PdsShelf
          ShowZero            #No
          DataSource          #InventTable
          DataField           #PdsShelfAdvice
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #PdsShelf_PdsShelfLife
          AutoDeclaration     #Yes
          ElementPosition     #1288490187
          HierarchyParent     #PdsShelf
          ShowZero            #No
          DataSource          #InventTable
          DataField           #PdsShelfLife
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #AxdItemDocumentFilter
          ElementPosition     #1879048189
          HierarchyParent     #ButtonGroupGeneralAIF
          ShowShortCut        #No
          MenuItemType        #Action
          MenuItemName        #AxdItemDocumentFilter
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #AxdSendItemAction
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupGeneralAIF
          MenuItemType        #Action
          MenuItemName        #AxdSendItemAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #BOMConfigRouteAction
          AutoDeclaration     #Yes
          ElementPosition     #858993458
          HierarchyParent     #ButtonGroupEngineerConfiguration
          NormalImage         #10507
          ImageLocation       #EmbeddedResource
          MenuItemName        #BOMConfigRouteAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #BOMConsistOfAction
          AutoDeclaration     #Yes
          ElementPosition     #858993458
          HierarchyParent     #ButtonGroupEngineerBOM
          NormalImage         #10632
          ImageLocation       #EmbeddedResource
          MenuItemName        #BOMConsistOfAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #BOMDesignerAction
          AutoDeclaration     #Yes
          ElementPosition     #1288490187
          HierarchyParent     #ButtonGroupEngineerBOM
          NormalImage         #10551
          ImageLocation       #EmbeddedResource
          MenuItemName        #BOMDesignerAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #BOMPartOfAction
          AutoDeclaration     #Yes
          ElementPosition     #1717986916
          HierarchyParent     #ButtonGroupEngineerBOM
          NormalImage         #10862
          ImageLocation       #EmbeddedResource
          MenuItemName        #BOMPartOfAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #BOMReportFinishedAction
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupEngineerBOMReport
          NormalImage         #10746
          ImageLocation       #EmbeddedResource
          MenuItemType        #Action
          MenuItemName        #BOMReportFinishedAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #BOMReportFinishMaxAction
          AutoDeclaration     #Yes
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupEngineerBOMReport
          NormalImage         #10643
          ImageLocation       #EmbeddedResource
          MenuItemName        #BOMReportFinishMaxAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ButtonFci_BR
          AutoDeclaration     #Yes
          CountryRegionCodes  #BR
          HelpText            #@SYS4004308
          ElementPosition     #1994091957
          HierarchyParent     #ButtonGroupDefineModify
          Text                #@SYS4004311
          NormalImage         #10043
          ImageLocation       #EmbeddedResource
          MenuItemName        #ImportedContentPerItem_BR
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #buttonFiscalDocumenText_BR
          AllowEdit           #No
          CountryRegionCodes  #BR
          HelpText            #@GLS63736
          ElementPosition     #1789569705
          HierarchyParent     #ButtonGroupDefineAttachments
          NormalImage         #10099
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          Big                 #Yes
          NeedsRecord         #Yes
          MenuItemName        #FiscalDocumentText_BR
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #CaseDetailAction
          ElementPosition     #1610612734
          HierarchyParent     #ButtonGroupGeneralManageCases
          NormalImage         #12198
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #CaseListPage
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #CaseDetailNewGeneralAction
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupGeneralManageCases
          NormalImage         #10608
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #CaseDetailNewGeneralAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #CommissionCalcAction
          ElementPosition     #1717986916
          HierarchyParent     #ButtonGroupSellRelatedInformation
          NormalImage         #10501
          ImageLocation       #EmbeddedResource
          MenuItemName        #CommissionCalcAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ConfigHierarchyAction
          AutoDeclaration     #Yes
          ElementPosition     #1288490187
          HierarchyParent     #ButtonGroupEngineerConfiguration
          NormalImage         #10508
          ImageLocation       #EmbeddedResource
          MenuItemName        #ConfigHierarchyAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #CostControlCommittedCostAction
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroupManageProjectsCosts
          NormalImage         #11032
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #CostControlCommittedCostAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #CustExternalItemAction
          ElementPosition     #858993458
          HierarchyParent     #ButtonGroupSellRelatedInformation
          NormalImage         #10541
          ImageLocation       #EmbeddedResource
          MenuItemName        #CustExternalItemAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EcoResDimensionBasedConfiguration
          AutoDeclaration     #Yes
          ElementPosition     #1717986916
          HierarchyParent     #ButtonGroupEngineerConfiguration
          MenuItemName        #EcoResDimensionBasedConfiguration
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EcoResProductCreate
          AutoDeclaration     #Yes
          ElementPosition     #805306366
          HierarchyParent     #ButtonGroupDefineNew
          MultiSelect         #Yes
          Big                 #Yes
          Primary             #Yes
          OpenMode            #New
          MenuItemName        #EcoResProductCreateRelease
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EcoResProductImage
          ElementPosition     #1073741820
          HierarchyParent     #ButtonGroupDefineSetup
          Big                 #Yes
          NeedsRecord         #Yes
          DataSource          #EcoResProduct
          MenuItemName        #EcoResProductImage
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EcoResProductMasterDimensionPerCompany
          AutoDeclaration     #Yes
          ElementPosition     #1610612734
          HierarchyParent     #ButtonGroupDefineProductMaster
          Big                 #Yes
          NeedsRecord         #Yes
          DataSource          #EcoResProduct_EcoResProductMaster
          MenuItemName        #EcoResProductMasterDimensionPerCompany
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EcoResProductTemplateApply
          AutoDeclaration     #Yes
          ElementPosition     #1533916890
          HierarchyParent     #ButtonGroupDefineModify
          NeedsRecord         #Yes
          MenuItemType        #Action
          MenuItemName        #EcoResProductTemplateApply
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EcoResProductTemplateCreateCompany
          ElementPosition     #1610612733
          HierarchyParent     #MenuButtonCreateTemplates
          NeedsRecord         #Yes
          MenuItemType        #Action
          MenuItemName        #EcoResProductTemplateCreateCompany
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    element.setApplyTemplateMenuItem();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EcoResProductTemplateCreateUser
          ElementPosition     #1073741822
          HierarchyParent     #MenuButtonCreateTemplates
          NeedsRecord         #Yes
          MenuItemType        #Action
          MenuItemName        #EcoResProductTemplateCreateUser
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    super();
            #    element.setApplyTemplateMenuItem();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EcoResProductTranslationAction
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroupDefineLanguages
          Big                 #Yes
          NeedsRecord         #Yes
          DataSource          #EcoResProduct
          MenuItemName        #EcoResProductTranslation
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EcoResProductVariantsAction
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupDefineProductMaster
          Big                 #Yes
          NeedsRecord         #Yes
          DataSource          #EcoResProduct_EcoResProductMaster
          MenuItemName        #EcoResProductVariantsPerCompany
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ECPPresentationAction
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroupGeneralEnterprisePortal
          Big                 #Yes
          MenuItemName        #ECPPresentationAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EditDetailsButton
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #920350134
          HierarchyParent     #ButtonGroupDefineModify
          Text                #@SYS317438
          NormalImage         #10040
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          Primary             #Yes
          OpenMode            #Edit
          CopyCallerQuery     #Yes
          MenuItemName        #EcoResProductDetailsExtended
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    if (fromReleasedProductsByCategory)
            #    {
            #        editDetailsButton.copyCallerQuery(0);
            #    }
            #    super();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EngineeringChangeGroupAllCases
          ElementPosition     #1288490187
          HierarchyParent     #EngineeringChangeGroup
          ShowShortCut        #No
          NeedsRecord         #Yes
          MenuItemName        #EngChgCaseDetailGridReleasedProduct
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EngineeringChangeGroupCreateCase
          AutoDeclaration     #Yes
          ElementPosition     #858993458
          HierarchyParent     #EngineeringChangeGroup
          ShowShortCut        #No
          MultiSelect         #Yes
          Big                 #Yes
          NeedsRecord         #Yes
          MenuItemName        #EngChgCaseNewReleasedProduct
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ExtCodeValueTableAction
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupGeneralAIF
          NormalImage         #10570
          ImageLocation       #EmbeddedResource
          MenuItemName        #ExtCodeValueTableAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #FEACCInventTable_RU
          ElementPosition     #2035635537
          HierarchyParent     #ButtonGroupDefineSetup
          Text                #@GLS115056
          NormalImage         #12065
          ImageLocation       #EmbeddedResource
          MultiSelect         #Yes
          NeedsRecord         #Yes
          DataSource          #InventTable
          MenuItemName        #FEACCInventTable_RU
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #FEACCItemRelation_RU
          ElementPosition     #1957341861
          HierarchyParent     #ButtonGroupDefineSetup
          MultiSelect         #Yes
          NeedsRecord         #Yes
          DataSource          #InventTable
          MenuItemType        #Action
          MenuItemName        #FEACCItemRelation_RU
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ForecastInventAction
          AutoDeclaration     #Yes
          ElementPosition     #1717986916
          HierarchyParent     #ButtonGroupPlanForecast
          NormalImage         #10857
          ImageLocation       #EmbeddedResource
          MenuItemName        #ForecastInventAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ForecastPurchItemAction
          ElementPosition     #1288490187
          HierarchyParent     #ButtonGroupPlanForecast
          NormalImage         #10723
          ImageLocation       #EmbeddedResource
          MenuItemName        #ForecastPurchItemAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ForecastSalesItemAction
          ElementPosition     #858993458
          HierarchyParent     #ButtonGroupPlanForecast
          NormalImage         #10766
          ImageLocation       #EmbeddedResource
          MenuItemName        #ForecastSalesItemAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventBatchAction
          ElementPosition     #1789569705
          HierarchyParent     #ButtonGroupManageInventoryView
          MenuItemName        #InventBatchAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventItemBarcodeAction
          ElementPosition     #1288490187
          HierarchyParent     #ButtonGroupManageInventoryWarehouse
          NormalImage         #10452
          ImageLocation       #EmbeddedResource
          MenuItemName        #InventItemBarcodeAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventItemGTINAction
          ElementPosition     #1717986916
          HierarchyParent     #ButtonGroupManageInventoryWarehouse
          NormalImage         #10590
          ImageLocation       #EmbeddedResource
          MenuItemName        #InventItemGTINAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventItemLocationAction
          AutoDeclaration     #Yes
          ElementPosition     #858993458
          HierarchyParent     #ButtonGroupManageInventoryWarehouse
          NormalImage         #10652
          ImageLocation       #EmbeddedResource
          MenuItemName        #InventItemLocationAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventItemOrderSetupAction
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupManageInventoryOrderSettings
          NormalImage         #10547
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #InventItemOrderSetupAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventItemOrderSetupActionPlan
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupPlanPlanOrderSettings
          NormalImage         #10547
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #InventItemOrderSetupAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventItemOrderSetupDimAction
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupManageInventoryOrderSettings
          NormalImage         #10800
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #InventItemOrderSetupDimAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventItemOrderSetupDimActionPlan
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupPlanPlanOrderSettings
          NormalImage         #10800
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #InventItemOrderSetupDimAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventItemPriceAction
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupManageCostsSetup
          Big                 #Yes
          MenuItemName        #InventItemPriceAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventLotItemAction
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroupManageInventoryView
          MenuItemName        #InventLotItemAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventNonConformanceTableAction
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupManageInventoryQuality
          Big                 #Yes
          MenuItemName        #InventNonConformanceTableAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventOnhandItemAction
          ElementPosition     #715827882
          HierarchyParent     #ButtonGroupManageInventoryView
          NormalImage         #10654
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #InventOnhandItemAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventPostingAction
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupManageCostsSetup
          NormalImage         #10608
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #InventPostingAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventProdcomSetup
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroup
          NeedsRecord         #Yes
          MenuItemType        #Action
          MenuItemName        #InventProdcomSetup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventSupplyAction
          ElementPosition     #858993458
          HierarchyParent     #ButtonGroupPurchaseOrders
          Big                 #Yes
          MenuItemName        #InventSupply
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventSupplyActionSMB
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupPurchaseOrdersSMB
          Big                 #Yes
          MenuItemName        #InventSupply
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventTestItemQualityGroupAction
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupManageInventoryQuality
          MenuItemName        #InventTestItemQualityGroupAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventTransAction
          ElementPosition     #1073741823
          HierarchyParent     #ButtonGroupManageInventoryView
          NormalImage         #10836
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #InventTransAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #MCREcoResCategoryAddProduct
          HelpText            #@SYS314792
          ElementPosition     #1073741822
          HierarchyParent     #MCRModifyCategory
          Text                #@SYS132109
          ButtonDisplay       #Text & Image left
          NormalImage         #12489
          ImageLocation       #EmbeddedResource
          MultiSelect         #Yes
          AutoRefreshData     #Yes
          DataSource          #EcoResCategory
          MenuItemName        #EcoResCategoryAddProduct
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #MCRInstallmentSetup
          AutoDeclaration     #Yes
          ConfigurationKey    #MCRInstallmentBilling
          ElementPosition     #1861152490
          HierarchyParent     #MCRSetup
          ButtonDisplay       #Text & Image left
          NormalImage         #10542
          ImageLocation       #EmbeddedResource
          DataSource          #InventTable
          MenuItemName        #MCRInstallmentSetup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #MCRItemMessageAssociation
          ConfigurationKey    #LogisticsBasic
          ElementPosition     #1771674004
          HierarchyParent     #MCRSetup
          ButtonDisplay       #Text & Image left
          NormalImage         #3061
          ImageLocation       #EmbeddedResource
          DataSource          #InventTable
          MenuItemName        #MCRItemMessageAssociation
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #MCRRoyaltyTable
          ElementPosition     #1968526675
          HierarchyParent     #ButtonGroupPurchaseTradeAgreements
          Text                #@MCR33559
          ButtonDisplay       #Text & Image left
          NormalImage         #10466
          ImageLocation       #EmbeddedResource
          MenuItemName        #MCRRoyaltyTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #MCRUpSellItem_Item
          ElementPosition     #1073741820
          HierarchyParent     #MCRSetup
          ButtonDisplay       #Text & Image left
          NormalImage         #10562
          ImageLocation       #EmbeddedResource
          MenuItemName        #MCRUpSellItem_Item
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PdsApprovedVendorList
          ElementPosition     #751619276
          HierarchyParent     #ButtonGroupPdsApprovedVendorList
          Text                #@SYS2186
          Big                 #Yes
          MenuItemName        #PdsApprovedVendorList
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PdsApprovedVendorListExpiration
          ElementPosition     #1503238552
          HierarchyParent     #ButtonGroupPdsApprovedVendorList
          Text                #@PRO2879
          MenuItemName        #PdsInventInquiryApprovedVendorExpiration
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PdsApprovedVendorListExpirationSMB
          ElementPosition     #1717986916
          HierarchyParent     #ButtonGroupPdsApprovedVendorListSMB
          Text                #@PRO2879
          MenuItemName        #PdsInventInquiryApprovedVendorExpiration
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PdsApprovedVendorListItem
          ElementPosition     #1127428914
          HierarchyParent     #ButtonGroupPdsApprovedVendorList
          Text                #@PRO1541
          MenuItemName        #pdsinventinquiryApprovedVendorListByitem
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PdsApprovedVendorListItemSMB
          ElementPosition     #1288490187
          HierarchyParent     #ButtonGroupPdsApprovedVendorListSMB
          Text                #@PRO1541
          MenuItemName        #pdsinventinquiryApprovedVendorListByitem
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PdsApprovedVendorListSMB
          ElementPosition     #858993458
          HierarchyParent     #ButtonGroupPdsApprovedVendorListSMB
          Text                #@SYS2186
          Big                 #Yes
          MenuItemName        #PdsApprovedVendorList
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PdsBatchAttribByItem
          ElementPosition     #1073741822
          HierarchyParent     #PdsButtonGroupManageInventoryBatchAttrib
          Text                #@PRO1605
          ShowShortCut        #No
          MenuItemName        #PdsBatchAttribByItem
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PdsBatchAttribByItemCustomer
          AutoDeclaration     #Yes
          ElementPosition     #1610612733
          HierarchyParent     #PdsButtonGroupManageInventoryBatchAttrib
          Text                #@PRO1823
          ShowShortCut        #No
          MenuItemName        #PdsBatchAttribByItemCustomer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PdsBatchAttribInventOnhand
          ElementPosition     #1879048189
          HierarchyParent     #PdsButtonGroupManageInventoryBatchAttrib
          Text                #@PDS1983
          ShowShortCut        #No
          DataSource          #InventTable
          MenuItemName        #PdsBatchAttribInventOnhand
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PDSBatchAttribTransfer
          ElementPosition     #644245092
          HierarchyParent     #PdsButtonGroupManageInventoryBatchAttrib
          NormalImage         #10576
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          DataSource          #InventTable
          MenuItemName        #PDSBatchAttribTransfer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PdsMRCItemDetails
          ElementPosition     #1840700268
          HierarchyParent     #PdsButtonGroupManageInventoryRegulatory
          MenuItemName        #PdsMRCItemDetails
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PdsMRCMSDSDocument
          ElementPosition     #920350134
          HierarchyParent     #PdsButtonGroupManageInventoryRegulatory
          MenuItemName        #PdsMRCDocument
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PdsMRCRegulatoryReportingDetail
          ElementPosition     #1227133512
          HierarchyParent     #PdsButtonGroupManageInventoryRegulatory
          MenuItemName        #PdsMRCRestrictedCountryStateByItem
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PdsMRCReportingCountry
          ElementPosition     #613566756
          HierarchyParent     #PdsButtonGroupManageInventoryRegulatory
          Big                 #Yes
          MenuItemName        #PdsMRCReportingCountry
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PlInventSumExternal
          ElementPosition     #894784852
          HierarchyParent     #ButtonGroupManageInventoryView
          NormalImage         #10654
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #PlInventSumExternal
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PmfBulkItemConv
          AutoDeclaration     #Yes
          ElementPosition     #1610612734
          HierarchyParent     #ButtonGroupManageInventoryModify
          DataSource          #InventTable
          MenuItemName        #PmfBulkItemConv
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PmfFormulaConsistOfAction
          AutoDeclaration     #Yes
          ElementPosition     #858993458
          HierarchyParent     #PmfButtonGroupEngineerFormula
          NormalImage         #10632
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          DataSource          #InventTable
          MenuItemName        #PmfFormulaConsistOf
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PmfFormulaDesignerAction
          AutoDeclaration     #Yes
          ElementPosition     #1288490187
          HierarchyParent     #PmfButtonGroupEngineerFormula
          NormalImage         #10551
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          DataSource          #InventTable
          MenuItemName        #PmfFormulaDesigner
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PmfFormulaPartOfAction
          AutoDeclaration     #Yes
          ElementPosition     #1717986916
          HierarchyParent     #PmfButtonGroupEngineerFormula
          NormalImage         #10862
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          DataSource          #InventTable
          MenuItemName        #PmfFormulaPartOf
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PmfMultiDimProcessInventory
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupManageInventoryModify
          NormalImage         #10654
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          DataSource          #InventTable
          MenuItemName        #PmfMultiDimProcessInventory
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PmfPackOnHand
          AutoDeclaration     #Yes
          ElementPosition     #1879048190
          HierarchyParent     #ButtonGroupManageInventoryModify
          DataSource          #InventTable
          MenuItemName        #PmfPackOnHand
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PmfProdProcessBatch
          AutoDeclaration     #Yes
          ElementPosition     #1342177278
          HierarchyParent     #ButtonGroupEngineerView
          ShowShortCut        #No
          Big                 #Yes
          DataSource          #InventTable
          MenuItemName        #PmfProdProcessBatch
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PMFSequenceItemTable
          ConfigurationKey    #PMFSequencing
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroupSequencing
          NormalImage         #10779
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          Big                 #Yes
          DataSource          #InventTable
          MenuItemName        #PMFSequenceItemTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PriceDiscTable_EndDiscPurchAction
          ElementPosition     #1789569705
          HierarchyParent     #ButtonGroupPurchaseView
          NormalImage         #10831
          ImageLocation       #EmbeddedResource
          MenuItemName        #PriceDiscTable_EndDiscPurchAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PriceDiscTable_EndDiscSalesAction
          ElementPosition     #1789569705
          HierarchyParent     #ButtonGroupSellView
          NormalImage         #10831
          ImageLocation       #EmbeddedResource
          MenuItemName        #PriceDiscTable_EndDiscSalesAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PriceDiscTable_LineDiscPurchAction
          ElementPosition     #1073741823
          HierarchyParent     #ButtonGroupPurchaseView
          NormalImage         #10630
          ImageLocation       #EmbeddedResource
          MenuItemName        #PriceDiscTable_LineDiscPurchAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PriceDiscTable_LineDiscSalesAction
          ElementPosition     #1073741823
          HierarchyParent     #ButtonGroupSellView
          NormalImage         #10630
          ImageLocation       #EmbeddedResource
          MenuItemName        #PriceDiscTable_LineDiscSalesAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PriceDiscTable_MultiLineDiscPurchAction
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroupPurchaseView
          NormalImage         #10647
          ImageLocation       #EmbeddedResource
          MenuItemName        #PriceDiscTable_MultiLineDiscPurchAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PriceDiscTable_MultiLineDiscSalesAction
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroupSellView
          NormalImage         #10647
          ImageLocation       #EmbeddedResource
          MenuItemName        #PriceDiscTable_MultiLineDiscSalesAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PriceDiscTable_PricePurchAction
          ElementPosition     #715827882
          HierarchyParent     #ButtonGroupPurchaseView
          NormalImage         #10726
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #PriceDiscTable_PricePurchAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PriceDiscTable_PriceSalesAction
          ElementPosition     #715827882
          HierarchyParent     #ButtonGroupSellView
          NormalImage         #10726
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #PriceDiscTable_PriceSalesAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PriceDiscTable_PurchAction
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupPurchaseTradeAgreements
          Big                 #Yes
          MenuItemName        #PriceDiscTable_PurchAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PriceDiscTable_SalesAction
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupSellTradeAgreements
          Big                 #Yes
          MenuItemName        #PriceDiscTable_SalesAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ProdTableAction
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupEngineerView
          NormalImage         #10888
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #ProdTableaction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ProductAttributes
          ElementPosition     #805306365
          HierarchyParent     #ButtonGroupDefineSetup
          Big                 #Yes
          NeedsRecord         #Yes
          DataSource          #EcoResProduct
          MenuItemName        #EcoResAttributeValue
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ProductCategory
          ElementPosition     #1342177275
          HierarchyParent     #ButtonGroupDefineSetup
          NeedsRecord         #Yes
          DataSource          #EcoResProduct
          MenuItemName        #EcoResProductCategory
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ProductRelationMIBtn
          ElementPosition     #1610612730
          HierarchyParent     #ButtonGroupDefineSetup
          NeedsRecord         #Yes
          DataSource          #EcoResProduct
          MenuItemName        #EcoResProductRelation
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ProjCashFlowAction
          ElementPosition     #1789569705
          HierarchyParent     #ButtonGroupManageProjectsProject
          NormalImage         #10473
          ImageLocation       #EmbeddedResource
          MenuItemName        #ProjCashFlowAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ProjCostControlAction
          AutoDeclaration     #Yes
          ElementPosition     #1073741823
          HierarchyParent     #ButtonGroupManageProjectsProject
          NormalImage         #10524
          ImageLocation       #EmbeddedResource
          MenuItemName        #ProjCostControlAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #projInvoiceControlAction
          AutoDeclaration     #Yes
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroupManageProjectsProject
          NormalImage         #11056
          ImageLocation       #EmbeddedResource
          MenuItemName        #projInvoiceControlAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ProjStatisticAction
          ElementPosition     #715827882
          HierarchyParent     #ButtonGroupManageProjectsProject
          NormalImage         #10717
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #ProjStatisticAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PurchaseInventStatistics
          ElementPosition     #1717986916
          HierarchyParent     #ButtonGroupPurchaseOrders
          Text                #@SYS115285
          NormalImage         #10679
          ImageLocation       #EmbeddedResource
          MenuItemName        #InventStatistics
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PurchasePriceDiscAdmTableCreateAction
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupPurchaseTradeAgreements
          Big                 #Yes
          MenuItemName        #PriceDiscAdmTableCreateAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PurchLineMatchingPolicyAction
          AutoDeclaration     #Yes
          HelpText            #@SYS131100
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupPurchaseInvoiceMatching
          NormalImage         #11226
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #PurchLineMatchingPolicyAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PurchLineOpenOrderAction
          ElementPosition     #1288490187
          HierarchyParent     #ButtonGroupPurchaseOrders
          NormalImage         #11081
          ImageLocation       #EmbeddedResource
          MenuItemName        #PurchLineOpenOrderAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PurchLineOpenOrderActionSMB
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupPurchaseOrdersSMB
          NormalImage         #11081
          ImageLocation       #EmbeddedResource
          MenuItemName        #PurchLineOpenOrderAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PurchPriceToleranceAction
          AutoDeclaration     #Yes
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupPurchaseInvoiceMatching
          NormalImage         #11227
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #PurchPriceToleranceAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ReqItemTableAction
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroupPlanCoverage
          NormalImage         #10618
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #ReqItemTableAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ReqSupplyDemandScheduleAction
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroupPlanView
          MultiSelect         #No
          Big                 #Yes
          MenuItemName        #ReqSupplyDemandSchedule
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ReqSupplyDemandScheduleActionSMB
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroupPlanViewSMB
          MultiSelect         #No
          Big                 #Yes
          MenuItemName        #ReqSupplyDemandSchedule
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ReqTransGrossAction
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupPlanRequirement
          NormalImage         #10588
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #ReqTransGrossAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ReqTransNetAction
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupPlanRequirement
          NormalImage         #10648
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #ReqTransNetAction_blankParameter
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailBuyersPush
          ElementPosition     #1840700268
          HierarchyParent     #ButtonGroupFunctions
          NormalImage         #12499
          ImageLocation       #EmbeddedResource
          DataSource          #InventTable
          MenuItemName        #RetailBuyersPush
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailCompetitorPriceTable
          ElementPosition     #715827882
          HierarchyParent     #ButtonGroupInquiries
          NormalImage         #Retail_CompetitorPrices_ico
          ImageLocation       #AOTResource
          DataSource          #InventTable
          MenuItemName        #RetailCompetitorPriceTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailInfocodeTableSpecific_Item
          ElementPosition     #536870910
          HierarchyParent     #ButtonGroupSetup
          NormalImage         #Retail_ReasonCodes_ico
          ImageLocation       #AOTResource
          Big                 #Yes
          DataSource          #InventTable
          MenuItemName        #RetailInfocodeTableSpecific_Item
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailInventItemLabelSetup_Item
          ElementPosition     #1073741820
          HierarchyParent     #ButtonGroupSetup
          NormalImage         #10617
          ImageLocation       #EmbeddedResource
          DataSource          #InventTable
          MenuItemName        #RetailInventItemLabelSetup_Item
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailInventItemLabelSetup_Shelf
          ElementPosition     #805306365
          HierarchyParent     #ButtonGroupSetup
          NormalImage         #Retail_DAX2_304_Rack_ico
          ImageLocation       #AOTResource
          DataSource          #InventTable
          MenuItemName        #RetailInventItemLabelSetup_Shelf
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailInventItemSectionLocation
          ElementPosition     #1879048185
          HierarchyParent     #ButtonGroupSetup
          NormalImage         #12053
          ImageLocation       #EmbeddedResource
          DataSource          #InventTable
          MenuItemName        #RetailInventItemSectionLocation
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailInventLinkedItem
          ElementPosition     #1342177275
          HierarchyParent     #ButtonGroupSetup
          NormalImage         #807
          ImageLocation       #EmbeddedResource
          DataSource          #InventTable
          MenuItemName        #RetailInventLinkedItem
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailInventWhereLinkedItem
          ElementPosition     #1610612730
          HierarchyParent     #ButtonGroupSetup
          NormalImage         #Retail_linked_ico
          ImageLocation       #AOTResource
          DataSource          #InventTable
          MenuItemName        #RetailInventWhereLinkedItem
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailKitMenuItem
          AutoDeclaration     #Yes
          HelpText            #@REX1094
          ConfigurationKey    #Retail
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroupRetailKit
          Text                #@SYS25986
          ShowShortCut        #No
          MultiSelect         #No
          Big                 #Yes
          Primary             #Yes
          NeedsRecord         #Yes
          DataSource          #InventTable
          OpenMode            #Edit
          CopyCallerQuery     #No
          FormViewOption      #Details
          MenuItemName        #RetailKitConfigure
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailMandatoryCheck
          ElementPosition     #1227133512
          HierarchyParent     #ButtonGroupFunctions
          NormalImage         #Retail_MandatorySetupList_ico
          ImageLocation       #AOTResource
          DataSource          #InventTable
          MenuItemName        #RetailMandatoryCheck
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailMandatoryCheckManagement
          ElementPosition     #1533916890
          HierarchyParent     #ButtonGroupFunctions
          NormalImage         #11125
          ImageLocation       #EmbeddedResource
          DataSource          #InventTable
          MenuItemType        #Action
          MenuItemName        #RetailMandatoryCheckManagement
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailPrintSpecificItemLabel
          AutoDeclaration     #Yes
          HelpText            #@RET5641
          ElementPosition     #920350134
          HierarchyParent     #ButtonGroupFunctions
          Text                #@RET3836
          NormalImage         #1083
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          MultiSelect         #Yes
          DataSource          #InventTable
          MenuItemName        #RetailCreateMultipleItemsLabel
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailPrintSpecificShelfLabel
          AutoDeclaration     #Yes
          HelpText            #@RET5646
          ElementPosition     #613566756
          HierarchyParent     #ButtonGroupFunctions
          Text                #@RET3837
          NormalImage         #1083
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          MultiSelect         #Yes
          DataSource          #InventTable
          MenuItemName        #RetailCreateMultipleShelfsLabel
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailStorePriceList
          ElementPosition     #1789569705
          HierarchyParent     #ButtonGroupInquiries
          NormalImage         #Retail_PriceList_ico
          ImageLocation       #AOTResource
          MultiSelect         #No
          DataSource          #InventTable
          MenuItemName        #RetailPriceList
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailTransactionSalesTrans
          ElementPosition     #1073741823
          HierarchyParent     #ButtonGroupInquiries
          NormalImage         #11038
          ImageLocation       #EmbeddedResource
          DataSource          #InventTable
          MenuItemName        #RetailTransactionSalesTrans
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RouteInventProdAction
          AutoDeclaration     #Yes
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupEngineerView
          NormalImage         #10762
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #RouteInventProdAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SalesATP
          ElementPosition     #858993458
          HierarchyParent     #ButtonGroupSellOrders
          Big                 #Yes
          MenuItemName        #SalesATP
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SalesLineOpenOrder
          ElementPosition     #1288490187
          HierarchyParent     #ButtonGroupSellOrders
          NormalImage         #11081
          ImageLocation       #EmbeddedResource
          MenuItemName        #SalesLineOpenOrder
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SellInventStatistics
          ElementPosition     #1717986916
          HierarchyParent     #ButtonGroupSellOrders
          Text                #@SYS115285
          NormalImage         #10679
          ImageLocation       #EmbeddedResource
          MenuItemName        #InventStatistics
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SellPriceDiscAdmTableCreateAction
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupSellTradeAgreements
          Big                 #Yes
          MenuItemName        #PriceDiscAdmTableCreateAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SuppItemTable_PurchAction
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupPurchaseRelatedInformation
          NormalImage         #10821
          ImageLocation       #EmbeddedResource
          MenuItemName        #SuppItemTable_PurchAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SuppItemTable_SalesAction
          ElementPosition     #1288490187
          HierarchyParent     #ButtonGroupSellRelatedInformation
          NormalImage         #10822
          ImageLocation       #EmbeddedResource
          MenuItemName        #SuppItemTable_SalesAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #TaxInventVATCommodityCode_IN
          ElementPosition     #2091559591
          HierarchyParent     #ButtonGroupDefineSetup
          DataSource          #InventTable
          MenuItemName        #TaxInventVATCommodityCode_IN
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #TransferPrice_IN
          AutoDeclaration     #Yes
          CountryRegionCodes  #IN
          ElementPosition     #1879048189
          HierarchyParent     #ButtonGroupManageCostsSetup
          Text                #@GLS234
          NormalImage         #10771
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          Big                 #Yes
          MenuItemName        #TransferPrice_IN
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #UnitOfMeasureConversion
          ElementPosition     #1879048185
          HierarchyParent     #ButtonGroupDefineSetup
          NeedsRecord         #Yes
          DataSource          #EcoResProduct
          MenuItemName        #UnitOfMeasureConversion
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #Validate
          ElementPosition     #1840700268
          HierarchyParent     #ButtonGroupDefineModify
          NeedsRecord         #Yes
          MenuItemType        #Action
          MenuItemName        #EcoResProductValidatonService
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #VendExternalItemAction
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupPurchaseRelatedInformation
          NormalImage         #10851
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #VendExternalItemAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #WHSPhysDimUOMButton
          ElementPosition     #1932735281
          HierarchyParent     #ButtonGroupManageInventoryWarehouse
          ButtonDisplay       #Text & Image above
          NormalImage         #12232
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #whsphysdimuom
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #CostBasePrice_MaximumRetailPrice_IN
          ElementPosition     #715827882
          HierarchyParent     #CostBasePrice
          DataSource          #Invent
          DataField           #MaximumRetailPrice_IN
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #CostBasePrice_Price
          ElementPosition     #1610612734
          HierarchyParent     #CostBasePrice
          DataSource          #Invent
          DataField           #Price
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #CostBasePrice_PriceQty
          ElementPosition     #954437176
          HierarchyParent     #CostBasePrice
          DataSource          #Invent
          DataField           #PriceQty
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #CostBasePrice_PriceUnit
          ElementPosition     #835132529
          HierarchyParent     #CostBasePrice
          DataSource          #Invent
          DataField           #PriceUnit
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #getComparisonPrice
          AllowEdit           #No
          ElementPosition     #1610612733
          HierarchyParent     #ComparisonPrice
          Label               #@RET3150
          DataMethod          #getComparisonPrice
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #PdsCatchWeightItem_PdsCWMax
          AutoDeclaration     #Yes
          ElementPosition     #1840700268
          HierarchyParent     #PdsCatchWeight
          DataSource          #PdsCatchWeightItem
          DataField           #PdsCWMax
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #PdsCatchWeightItem_PdsCWMin
          AutoDeclaration     #Yes
          ElementPosition     #1533916890
          HierarchyParent     #PdsCatchWeight
          DataSource          #PdsCatchWeightItem
          DataField           #PdsCWMin
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #PdsNominalQty
          AutoDeclaration     #Yes
          ElementPosition     #1227133512
          HierarchyParent     #PdsCatchWeight
          DataSource          #PdsCatchWeightItem
          DataMethod          #nominalQty
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #PmfYield_PmfYieldPct
          AutoDeclaration     #Yes
          ElementPosition     #1431655764
          HierarchyParent     #PmfYield
          DataSource          #InventTable
          DataField           #PmfYieldPct
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #SalesBasePrice_Price
          AutoDeclaration     #Yes
          ElementPosition     #715827882
          HierarchyParent     #SalesBasePrice
          DataSource          #Sales
          DataField           #Price
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #WHSInventTable_ProdQty
          ElementPosition     #1073741822
          HierarchyParent     #WHSProduction
          DataSource          #WHSInventTable
          DataField           #ProdQty
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL SEPARATOR
        PROPERTIES
          Name                #Separator
          ElementPosition     #966367638
          HierarchyParent     #PdsButtonGroupManageInventoryBatchAttrib
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #BarcodeConfiguration
          ElementPosition     #1503238551
          HierarchyParent     #GeneralFurtherIdentificationFormGroup
          DataSource          #InventTable
          DataField           #BarcodeConfigId
        ENDPROPERTIES
        
        METHODS
          SOURCE #lookup
            #public void lookup()
            #{
            #    SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(AZ_BatchConfig), this);
            #    QueryBuildDataSource qb;
            #    QueryBuildRange qbr;
            #    Query q=new Query();
            #
            #    ;
            #    //Add the fields to be shown in the lookup form
            #    sysTableLookup.addLookupfield(fieldnum(AZ_BatchConfig,BarcodeConfigId), true);
            #
            #
            #    //create the query datasource
            #    qb = q.addDataSource(tablenum(AZ_BatchConfig));
            #    qbr= qb.addRange(fieldnum(AZ_BatchConfig,BarcodeConfigId));
            #    //qbr.value(enum2str(NoYes::Yes)); //Example of Enum value or you can specify any range
            #
            #    //add the query to the lookup form
            #    sysTableLookup.parmQuery(q);
            #
            #    // Perform lookup
            #    sysTableLookup.performFormLookup();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #CostBasePrice_UnitId
          AllowEdit           #No
          HelpText            #@SYS311323
          ElementPosition     #1073741823
          HierarchyParent     #CostBasePrice
          DataSource          #Invent
          DataField           #UnitId
          FastTabSummary      #No
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #EcoResProduct_EcoResProductMaster_RetailColorGroupId
          ElementPosition     #715827882
          HierarchyParent     #Variants
          DataSource          #EcoResProduct_EcoResProductMaster
          DataField           #RetailColorGroupId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #EcoResProduct_EcoResProductMaster_RetailSizeGroupId
          ElementPosition     #1073741823
          HierarchyParent     #Variants
          DataSource          #EcoResProduct_EcoResProductMaster
          DataField           #RetailSizeGroupId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #EcoResProduct_EcoResProductMaster_RetailStyleGroupId
          ElementPosition     #1431655764
          HierarchyParent     #Variants
          DataSource          #EcoResProduct_EcoResProductMaster
          DataField           #RetailStyleGroupId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #EcoResProduct_SearchName
          ElementPosition     #1288490187
          HierarchyParent     #GeneralFurtherIdentificationFormGroup
          DataSource          #InventTable
          DataField           #NameAlias
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #EcoResProduct_SearchNameGrid
          ElementPosition     #1073741820
          HierarchyParent     #HeaderGrid
          DataSource          #InventTable
          DataField           #NameAlias
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #EcoResProductTranslation_Description
          ElementPosition     #1717986916
          HierarchyParent     #GeneralFurtherIdentificationFormGroup
          DisplayLength       #30
          MultiLine           #Yes
          DataSource          #EcoResProductTranslation
          DataField           #Description
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #EcoResProductTranslation_Name
          ElementPosition     #858993458
          HierarchyParent     #GeneralFurtherIdentificationFormGroup
          DataSource          #EcoResProductTranslation
          DataField           #Name
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #EcoResProductTranslation_NameGrid
          ElementPosition     #805306365
          HierarchyParent     #HeaderGrid
          DataSource          #EcoResProductTranslation
          DataField           #Name
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #InventModelGroupItem_ModelGroupId
          ElementPosition     #1789569705
          HierarchyParent     #GeneralAdministration
          DataSource          #InventModelGroupItem
          DataField           #ModelGroupId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #InventoryQuantity_UnitId
          HelpText            #@SYS311324
          ElementPosition     #1073741823
          HierarchyParent     #InventoryQuantity
          DataSource          #Invent
          DataField           #UnitId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #InventTable_AssetGroupId_RU
          ElementPosition     #1073741822
          HierarchyParent     #GeneralFixedAsset_RU
          DataSource          #InventTable
          DataField           #AssetGroupId_RU
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #InventTable_ItemId
          ElementPosition     #1073741822
          HierarchyParent     #GeneralIdentification
          DataSource          #InventTable
          DataField           #ItemId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #InventTable_ItemIdGrid
          ElementPosition     #536870910
          HierarchyParent     #HeaderGrid
          DataSource          #InventTable
          DataField           #ItemId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #InventTable_PBAInventItemGroupId
          ElementPosition     #2013265918
          HierarchyParent     #GroupGeneralProductVariants
          DataSource          #InventTable
          DataField           #PBAInventItemGroupId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #InventTable_VendProdCode
          ElementPosition     #1610612733
          HierarchyParent     #GeneralFurtherIdentificationFormGroup
          DataSource          #InventTable
          DataField           #VendProdCode
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #InventTable_whsReservationHierarchyName
          ElementPosition     #1968526675
          HierarchyParent     #GeneralAdministration
          Label               #@WAX4705
          DataSource          #InventTable
          DataMethod          #whsReservationHierarchyName
        ENDPROPERTIES
        
        METHODS
          SOURCE #jumpRef
            #public void jumpRef()
            #{
            #    WHSReservationHierarchy::jumpRef(inventTable.whsReservationHierarchy());
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #MCRInventTable_ContinuityScheduleID3
          ElementPosition     #1073741822
          HierarchyParent     #MCRContinuity
          Label               #@MCR12491
          DataSource          #MCRInventTable
          DataField           #ContinuityScheduleId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #MCRInventTable_DefaultDropShipmentWarehouse
          ElementPosition     #1610612733
          HierarchyParent     #MCRDropShipmentGroup
          DataSource          #MCRInventTable
          DataField           #DefaultDropShipmentWarehouse
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #PdsCatchWeightItem_PdsCWUnitId
          AutoDeclaration     #Yes
          ElementPosition     #920350134
          HierarchyParent     #PdsCatchWeight
          DataSource          #PdsCatchWeightItem
          DataField           #PdsCWUnitId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #PmfFormulaPlanning_PmfPlanningItemId
          AutoDeclaration     #Yes
          ElementPosition     #1610612733
          HierarchyParent     #PmfFormulaPlanning
          DataSource          #InventTable
          DataField           #PmfPlanningItemId
        ENDPROPERTIES
        
        METHODS
          SOURCE #lookup
            #public void lookup()
            #{
            #    //
            #    // we need to see ALL formula items to ensure a simple co-product setup.
            #    //
            #    InventTable::lookupFormulaItemId(this);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #PurchaseAdministration_PrimaryVendorId
          AutoDeclaration     #Yes
          ElementPosition     #1717986916
          HierarchyParent     #PurchaseAdministration
          DataSource          #InventTable
          DataField           #PrimaryVendorId
        ENDPROPERTIES
        
        METHODS
          SOURCE #validate
            #public boolean validate()
            #{
            #    boolean ret = super();
            #
            #    if (ret && !this.text())
            #    {
            #        if (mcrInventTable_DropShipment.value())
            #        {
            #            ret = checkFailed("@MCR12178");
            #        }
            #    }
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #PurchaseSetup_UnitId
          HelpText            #@SYS311326
          ElementPosition     #477218588
          HierarchyParent     #PurchaseSetup
          DataSource          #Purch
          DataField           #UnitId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #RBOInventTable_baseComparisonUnitCode
          ElementPosition     #1073741822
          HierarchyParent     #ComparisonPrice
          DataSource          #RetailInventTable
          DataField           #baseComparisonUnitCode
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #SAD_SADRateCode_PL
          ElementPosition     #1431655764
          HierarchyParent     #SAD_PL
          DataSource          #InventTable
          DataField           #SADRateCode_PL
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #SalesSetup_UnitId
          HelpText            #@SYS311325
          ElementPosition     #715827882
          HierarchyParent     #SalesSetup
          DataSource          #Sales
          DataField           #UnitId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #StringTitle
          Skip                #Yes
          ElementPosition     #1073741822
          HierarchyParent     #GroupTitlePane
          DataSource          #InventTable
          DataMethod          #title
          Style               #TitleField
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #WHSEcoResProductTrnsCodes_HarmonizedCode
          ElementPosition     #1288490187
          HierarchyParent     #WHSAdditionalCodes
          DataSource          #WHSInventTable
          DataMethod          #displayHarmonizedCode
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #WHSEcoResProductTrnsCodes_NMFCCode
          ElementPosition     #1431655764
          HierarchyParent     #WHSEcoResProductTrnsCodes_NMFC
          DataSource          #WHSInventTable
          DataMethod          #displayNMFCCode
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #WHSEcoResProductTrnsCodes_STCCCode
          ElementPosition     #858993458
          HierarchyParent     #WHSAdditionalCodes
          DataSource          #WHSInventTable
          DataMethod          #displaySTCCCode
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #WHSInventFixedLocation_InventLocationId
          ElementPosition     #858993458
          HierarchyParent     #FixedLocationsGrid
          DataSource          #WHSInventFixedLocation
          DataField           #InventLocationId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #WHSInventFixedLocation_InventSiteId
          ElementPosition     #1288490187
          HierarchyParent     #FixedLocationsGrid
          DataSource          #WHSInventFixedLocation
          DataField           #InventSiteId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #WHSInventFixedLocation_WMSLocationId
          ElementPosition     #1717986916
          HierarchyParent     #FixedLocationsGrid
          DataSource          #WHSInventFixedLocation
          DataField           #WMSLocationId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #WHSInventTable_PackageClassId
          ElementPosition     #1717986916
          HierarchyParent     #WHSAdditionalCodes
          DataSource          #WHSInventTable
          DataField           #PackageClassId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #WHSInventTable_RFDescription1
          ElementPosition     #1073741822
          HierarchyParent     #WHSDescription
          DataSource          #WHSInventTable
          DataField           #RFDescription1
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #WHSInventTable_RFDescription2
          ElementPosition     #1610612733
          HierarchyParent     #WHSDescription
          DataSource          #WHSInventTable
          DataField           #RFDescription2
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #WHSProductVariantFixedLocation_InventLocationId
          ElementPosition     #1288490187
          HierarchyParent     #ProductVariantFixedLocationsGrid
          DataSource          #WHSProductVariantFixedLocation
          DataField           #InventLocationId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #WHSProductVariantFixedLocation_WMSLocationId
          ElementPosition     #1717986916
          HierarchyParent     #ProductVariantFixedLocationsGrid
          DataSource          #WHSProductVariantFixedLocation
          DataField           #WMSLocationId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TREE
        PROPERTIES
          Name                #HierarchyTreeCtrl
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #CategoryTree
        ENDPROPERTIES
        
        METHODS
          SOURCE #expanded
            #public void expanded(int _idx, FormTreeExpand _action, anytype _data)
            #{
            #    super(_idx, _action, _data);
            #
            #    if ((FormTreeExpand::Expand == _action) && mHierarchyTree)
            #    {
            #        mHierarchyTree.updateTree(_idx);
            #    }
            #}
          ENDSOURCE
          SOURCE #expanding
            #public boolean expanding(int _idx, FormTreeExpand _action, anytype _data)
            #{
            #    boolean ret;
            #
            #    ret = super(_idx, _action, _data);
            #
            #    if (mHierarchyTree)
            #    {
            #        mHierarchyTree.expanding(_idx, _action, _data);
            #    }
            #
            #    return ret;
            #}
          ENDSOURCE
          SOURCE #selectionChanged
            #public void selectionChanged(FormTreeItem _oldItem, FormTreeItem _newItem, FormTreeSelect _how)
            #{
            #    int root = this.getRoot();
            #
            #    super(_oldItem, _newItem, _how);
            #
            #    element.lockWindowUpdate(true);
            #    if (mHierarchyTree)
            #    {
            #        mHierarchyTree.selectionChanged(_oldItem, _newItem);
            #    }
            #
            #    element.lockWindowUpdate(false);
            #}
          ENDSOURCE
          SOURCE #selectionChanging
            #public boolean selectionChanging(FormTreeItem _oldItem, FormTreeItem _newItem, FormTreeSelect _how)
            #{
            #    boolean ret;
            #
            #    ret = super(_oldItem, _newItem, _how);
            #
            #    if (!ret && mHierarchyTree)
            #    {
            #        ret = mHierarchyTree.selectionChanging(_oldItem, _newItem, _how);
            #    }
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL WINDOW
        PROPERTIES
          Name                #ProductImage
          AutoDeclaration     #Yes
          AlignControl        #No
          ElementPosition     #1431655764
          HierarchyParent     #GroupProductImage
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
        CONTROL #TabFinancialDimensions
          PROPERTIES
            Control             #TabFinancialDimensions
            EffectiveAccess     #Update
          ENDPROPERTIES
          
        ENDCONTROL
        
    ENDFORM
    
  TABLES #Tables
    TABLE #InventModelGroup
      PROPERTIES
        Table               #InventModelGroup
        EffectiveAccess     #Read
        ManagedBy           #Manual
      ENDPROPERTIES
      
    ENDTABLE
    
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
    CONTROL #TabFinancialDimensions
      PROPERTIES
        Control             #TabFinancialDimensions
        EffectiveAccess     #Update
      ENDPROPERTIES
      
    ENDCONTROL
    
ENDFORM

TABLES #Tables
  TABLE #InventModelGroup
    PROPERTIES
      Table               #InventModelGroup
      EffectiveAccess     #Read
      ManagedBy           #Manual
    ENDPROPERTIES
    
  ENDTABLE
  
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
    CONTROL #TabFinancialDimensions
      PROPERTIES
        Control             #TabFinancialDimensions
        EffectiveAccess     #Update
      ENDPROPERTIES
      
    ENDCONTROL
    
ENDFORM

TABLES #Tables
  TABLE #InventModelGroup
    PROPERTIES
      Table               #InventModelGroup
      EffectiveAccess     #Read
      ManagedBy           #Manual
    ENDPROPERTIES
    
  ENDTABLE
  
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
    CONTROL #TabFinancialDimensions
      PROPERTIES
        Control             #TabFinancialDimensions
        EffectiveAccess     #Update
      ENDPROPERTIES
      
    ENDCONTROL
    
ENDFORM

TABLES #Tables
  TABLE #InventModelGroup
    PROPERTIES
      Table               #InventModelGroup
      EffectiveAccess     #Read
      ManagedBy           #Manual
    ENDPROPERTIES
    
  ENDTABLE
  
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #EcoResProductPerCompanyListPage
  PROPERTIES
    Name                #EcoResProductPerCompanyListPage
    FormTemplate        #ListPage
    InteractionClass    #EcoResProductPerCompanyLPInteraction
    Origin              #{DDD8283C-8565-4B77-9FA6-3DDC2F2DBE8B}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
      Query               #EcoResProductPerCompanyListPage
      Version             #523
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #InventTable
          Table               #InventTable
          Index               #ItemIdx
          AllowEdit           #No
          AllowCreate         #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
      LINKTYPES
        DATASOURCE
          PROPERTIES
            Name                #InventTable
            ParentDataSource    #EcoResStorageDimensionGroupItem
          ENDPROPERTIES
          
        DATASOURCE
          PROPERTIES
            Name                #InventTable
            ParentDataSource    #EcoResProductTranslation
          ENDPROPERTIES
          
        DATASOURCE
          PROPERTIES
            Name                #InventTable
            ParentDataSource    #EcoResProductDimensionGroupProduct
          ENDPROPERTIES
          
        DATASOURCE
          PROPERTIES
            Name                #InventTable
            ParentDataSource    #InventModelGroupItem
          ENDPROPERTIES
          
        DATASOURCE
          PROPERTIES
            Name                #InventTable
            ParentDataSource    #InventItemGroupItem
          ENDPROPERTIES
          
        DATASOURCE
          PROPERTIES
            Name                #InventTable
            ParentDataSource    #EcoResProduct
          ENDPROPERTIES
          
      ENDLINKTYPES
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #EcoResProduct
          Table               #EcoResProduct
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          InsertIfEmpty       #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
      LINKTYPES
        DATASOURCE
          PROPERTIES
            Name                #EcoResProduct
            ParentDataSource    #WHSInventTable
          ENDPROPERTIES
          
        DATASOURCE
          PROPERTIES
            Name                #EcoResProduct
            ParentDataSource    #EcoResTrackingDimensionGroupItem
          ENDPROPERTIES
          
        DATASOURCE
          PROPERTIES
            Name                #EcoResProduct
            ParentDataSource    #InventTable
          ENDPROPERTIES
          
      ENDLINKTYPES
    ENDDATASOURCE
    DERIVEDDATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #EcoResProduct_EcoResProductMaster
          Table               #EcoResProductMaster
          AllowEdit           #No
          AllowCreate         #No
          Extends             #EcoResProduct
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
      LINKTYPES
      ENDLINKTYPES
    ENDDERIVEDDATASOURCE
    DERIVEDDATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #EcoResProduct_EcoResDistinctProduct
          Table               #EcoResDistinctProduct
          AllowEdit           #No
          AllowCreate         #No
          InsertIfEmpty       #No
          Extends             #EcoResProduct
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
      LINKTYPES
      ENDLINKTYPES
    ENDDERIVEDDATASOURCE
    DERIVEDDATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #EcoResProduct_EcoResDistinctProductVariant
          Table               #EcoResDistinctProductVariant
          AllowEdit           #No
          AllowCreate         #No
          Extends             #EcoResProduct_EcoResDistinctProduct
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
      LINKTYPES
      ENDLINKTYPES
    ENDDERIVEDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #EcoResProductDimensionGroupProduct
          Table               #EcoResProductDimensionGroupProduct
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          OnlyFetchActive     #Yes
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
      LINKTYPES
        DATASOURCE
          PROPERTIES
            Name                #EcoResProductDimensionGroupProduct
            ParentDataSource    #EcoResStorageDimensionGroupItem
          ENDPROPERTIES
          
      ENDLINKTYPES
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #EcoResProductTranslation
          Table               #EcoResProductTranslation
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
          OnlyFetchActive     #Yes
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
      LINKTYPES
        DATASOURCE
          PROPERTIES
            Name                #EcoResProductTranslation
            ParentDataSource    #EcoResStorageDimensionGroupItem
          ENDPROPERTIES
          
      ENDLINKTYPES
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #InventItemGroupItem
          Table               #InventItemGroupItem
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
      LINKTYPES
        DATASOURCE
          PROPERTIES
            Name                #InventItemGroupItem
            ParentDataSource    #InventTable
          ENDPROPERTIES
          
      ENDLINKTYPES
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #InventModelGroupItem
          Table               #InventModelGroupItem
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
      LINKTYPES
        DATASOURCE
          PROPERTIES
            Name                #InventModelGroupItem
            ParentDataSource    #InventTable
          ENDPROPERTIES
          
      ENDLINKTYPES
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #EcoResStorageDimensionGroupItem
          Table               #EcoResStorageDimensionGroupItem
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
      LINKTYPES
        DATASOURCE
          PROPERTIES
            Name                #EcoResStorageDimensionGroupItem
            ParentDataSource    #InventTable
          ENDPROPERTIES
          
      ENDLINKTYPES
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #EcoResTrackingDimensionGroupItem
          Table               #EcoResTrackingDimensionGroupItem
          AllowEdit           #No
          AllowCreate         #No
          AllowDelete         #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
      LINKTYPES
        DATASOURCE
          PROPERTIES
            Name                #EcoResTrackingDimensionGroupItem
            ParentDataSource    #InventTable
          ENDPROPERTIES
          
      ENDLINKTYPES
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #WHSInventTable
          Table               #WHSInventTable
          AllowCheck          #No
          AllowEdit           #No
          AllowCreate         #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
      LINKTYPES
        DATASOURCE
          PROPERTIES
            Name                #WHSInventTable
            ParentDataSource    #InventTable
          ENDPROPERTIES
          
      ENDLINKTYPES
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
    PARTREFERENCE #EcoResProductVariantsPerCompanyFactBox
      PROPERTIES
        Name                #EcoResProductVariantsPerCompanyFactBox
        MenuItemName        #EcoResProductVariantsPerCompanyPart
        DataSource          #InventTable
        DataSourceRelation  #InventDimCombination.InventTable
        ElementPosition     #238609294
      ENDPROPERTIES
      
    ENDPARTREFERENCE
    
    PARTREFERENCE #ProductPreviewPane
      PROPERTIES
        Name                #ProductPreviewPane
        MenuItemName        #EcoResProductPerCompanyPreviewPart
        PartLocation        #PreviewPane
        DataSource          #InventTable
        DataSourceRelation  #SelfLink
        IsLinked            #Yes
        ElementPosition     #477218588
      ENDPROPERTIES
      
    ENDPARTREFERENCE
    
    PARTREFERENCE #RetailItemChannelFactBox
      PROPERTIES
        Name                #RetailItemChannelFactBox
        MenuItemName        #RetailItemChannelFactBox
        DataSource          #InventTable
        DataSourceRelation  #SelfLink
        ElementPosition     #715827882
      ENDPROPERTIES
      
    ENDPARTREFERENCE
    
    PARTREFERENCE #InventTableIdentification
      PROPERTIES
        Name                #InventTableIdentification
        MenuItemName        #InventTableIdentification
        DisplayTarget       #EP
        DataSource          #InventTable
        DataSourceRelation  #SelfLink
        IsLinked            #Yes
        ElementPosition     #954437176
      ENDPROPERTIES
      
    ENDPARTREFERENCE
    
    PARTREFERENCE #EngChgCaseReleasedProductPart
      PROPERTIES
        Name                #EngChgCaseReleasedProductPart
        MenuItemName        #EngChgCaseReleasedProductPart
        DataSource          #InventTable
        DataSourceRelation  #InventTable.EcoResProduct
        ElementPosition     #1193046470
      ENDPROPERTIES
      
    ENDPARTREFERENCE
    
    PARTREFERENCE #InventTablePrices
      PROPERTIES
        Name                #InventTablePrices
        MenuItemName        #InventTablePrices
        DisplayTarget       #EP
        DataSource          #InventTable
        DataSourceRelation  #selfLink
        IsLinked            #Yes
        ElementPosition     #1431655764
      ENDPROPERTIES
      
    ENDPARTREFERENCE
    
    PARTREFERENCE #RetailItemAssortmentFactBox
      PROPERTIES
        Name                #RetailItemAssortmentFactBox
        MenuItemName        #RetailItemAssortmentFactBox
        DataSource          #InventTable
        DataSourceRelation  #SelfLink
        ElementPosition     #1670265058
      ENDPROPERTIES
      
    ENDPARTREFERENCE
    
    PARTREFERENCE #InventTableMeasurements
      PROPERTIES
        Name                #InventTableMeasurements
        MenuItemName        #InventTableMeasurements
        DisplayTarget       #EP
        DataSource          #InventTable
        DataSourceRelation  #selfLink
        IsLinked            #Yes
        ElementPosition     #1908874352
      ENDPROPERTIES
      
    ENDPARTREFERENCE
    
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #@SYS191446
      UseCaptionFromMenuItem  #Yes
      TitleDatasource     #InventTable
      WindowType          #ContentPage
      DataSource          #InventTable
      Style               #ListPage
      NewRecordAction     #EcoResProductCreate
    ENDPROPERTIES
    
    CONTAINER
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #ActionPane
          VerticalSpacing     #0
          ElementPosition     #536870911
          DataSource          #InventTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTabDefine
          ElementPosition     #390451572
          HierarchyParent     #ActionPane
          Caption             #@SYS133852
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTabEngineer
          ElementPosition     #1171354716
          HierarchyParent     #ActionPane
          Caption             #@SYS118401
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTabGeneral
          ElementPosition     #1952257860
          HierarchyParent     #ActionPane
          Caption             #@SYS19924
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTabManageCosts
          ElementPosition     #1708225627
          HierarchyParent     #ActionPane
          Caption             #@SYS310450
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTabManageInventory
          ElementPosition     #976128930
          HierarchyParent     #ActionPane
          Caption             #@SYS118394
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTabManageProjects
          ElementPosition     #1561806288
          HierarchyParent     #ActionPane
          Caption             #@SYS114879
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTabPlan
          ElementPosition     #1366580502
          HierarchyParent     #ActionPane
          Caption             #@SYS14433
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTabProcurement
          ElementPosition     #585677358
          HierarchyParent     #ActionPane
          Caption             #@SYS28381
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTabRetail
          ConfigurationKey    #RetailHeadquarters
          ElementPosition     #1854644967
          HierarchyParent     #ActionPane
          Caption             #@RET3014
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTabSell
          ElementPosition     #780903144
          HierarchyParent     #ActionPane
          Caption             #@SYS114644
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #MCRActionPaneTabMCRFunctions
          ElementPosition     #2049870753
          HierarchyParent     #ActionPane
          Caption             #@SYS12687
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupDefineAttachments
          ElementPosition     #1952257860
          HierarchyParent     #ActionPaneTabDefine
          Caption             #@SYS316708
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupDefineLanguages
          ElementPosition     #1171354716
          HierarchyParent     #ActionPaneTabDefine
          Caption             #@SYS15819
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupDefineList
          ElementPosition     #1757032074
          HierarchyParent     #ActionPaneTabDefine
          Caption             #@SYS118440
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupDefineModify
          ElementPosition     #585677358
          HierarchyParent     #ActionPaneTabDefine
          Caption             #@SYS316703
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupDefineNew
          ElementPosition     #390451572
          HierarchyParent     #ActionPaneTabDefine
          Caption             #@SYS2055
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupDefineProductMaster
          ElementPosition     #780903144
          HierarchyParent     #ActionPaneTabDefine
          Caption             #@SYS303254
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupDefineSetup
          ElementPosition     #1366580502
          HierarchyParent     #ActionPaneTabDefine
          Caption             #@SYS342635
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupDefineTemplates
          ElementPosition     #1561806288
          HierarchyParent     #ActionPaneTabDefine
          Caption             #@SYS70597
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupEngineerBOM
          AutoDeclaration     #Yes
          ElementPosition     #805306365
          HierarchyParent     #ActionPaneTabEngineer
          Caption             #@SYS7916
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupEngineerBOMReport
          AutoDeclaration     #Yes
          ElementPosition     #1879048185
          HierarchyParent     #ActionPaneTabEngineer
          Caption             #@SYS114631
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupEngineerConfiguration
          AutoDeclaration     #Yes
          ElementPosition     #1073741820
          HierarchyParent     #ActionPaneTabEngineer
          Caption             #@SYS53395
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupEngineerView
          ElementPosition     #536870910
          HierarchyParent     #ActionPaneTabEngineer
          Caption             #@SYS5252
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupGeneralAIF
          ElementPosition     #1288490187
          HierarchyParent     #ActionPaneTabGeneral
          Caption             #@SYS339360
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupGeneralEnterprisePortal
          ElementPosition     #1717986916
          HierarchyParent     #ActionPaneTabGeneral
          Caption             #@SYS191502
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupGeneralManageCases
          ElementPosition     #858993458
          HierarchyParent     #ActionPaneTabGeneral
          Caption             #@SYS310451
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupManageCostsSetup
          ElementPosition     #1431655764
          HierarchyParent     #ActionPaneTabManageCosts
          Caption             #@SYS342635
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupManageInventoryModify
          ElementPosition     #1934972243
          HierarchyParent     #ActionPaneTabManageInventory
          Caption             #@SYS300202
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupManageInventoryOrderSettings
          ElementPosition     #1073741823
          HierarchyParent     #ActionPaneTabManageInventory
          Caption             #@SYS118398
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupManageInventoryQuality
          AutoDeclaration     #Yes
          ElementPosition     #1789569705
          HierarchyParent     #ActionPaneTabManageInventory
          Caption             #@SYS73185
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupManageInventoryView
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #ActionPaneTabManageInventory
          Caption             #@SYS118396
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupManageInventoryWarehouse
          AutoDeclaration     #Yes
          ElementPosition     #1431655764
          HierarchyParent     #ActionPaneTabManageInventory
          Caption             #@SYS6437
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupManageProjectsCosts
          ElementPosition     #1610612733
          HierarchyParent     #ActionPaneTabManageProjects
          Caption             #@SYS40781
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupManageProjectsProject
          ElementPosition     #1073741822
          HierarchyParent     #ActionPaneTabManageProjects
          Caption             #@SYS114724
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupPdsApprovedVendorList
          ElementPosition     #1994091957
          HierarchyParent     #ActionPaneTabProcurement
          Caption             #@PRO2878
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupPlanCoverage
          AutoDeclaration     #Yes
          ElementPosition     #1227133512
          HierarchyParent     #ActionPaneTabPlan
          Caption             #@SYS26726
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupPlanForecast
          ElementPosition     #920350134
          HierarchyParent     #ActionPaneTabPlan
          Caption             #@SYS102639
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupPlanPlanOrderSettings
          ElementPosition     #1533916890
          HierarchyParent     #ActionPaneTabPlan
          Caption             #@SYS118398
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupPlanRequirement
          AutoDeclaration     #Yes
          ElementPosition     #1840700268
          HierarchyParent     #ActionPaneTabPlan
          Caption             #@SYS118437
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupPlanView
          ElementPosition     #613566756
          HierarchyParent     #ActionPaneTabPlan
          Caption             #@SYS5252
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupPurchaseInvoiceMatching
          AutoDeclaration     #Yes
          ConfigurationKey    #PurchInvoiceMatching
          ElementPosition     #1533916890
          HierarchyParent     #ActionPaneTabProcurement
          Caption             #@SYS131099
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupPurchaseOrders
          ElementPosition     #1227133512
          HierarchyParent     #ActionPaneTabProcurement
          Caption             #@SYS114676
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupPurchaseRelatedInformation
          ElementPosition     #1840700268
          HierarchyParent     #ActionPaneTabProcurement
          Caption             #@SYS111665
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupPurchaseTradeAgreements
          ElementPosition     #920350134
          HierarchyParent     #ActionPaneTabProcurement
          Caption             #@SYS115266
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupPurchaseView
          ElementPosition     #613566756
          HierarchyParent     #ActionPaneTabProcurement
          Caption             #@SYS5252
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupRetailKit
          ConfigurationKey    #Retail
          ElementPosition     #1854644967
          HierarchyParent     #ActionPaneTabDefine
          Caption             #@REX1066
          DataSource          #InventTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupSellOrders
          ElementPosition     #1227133512
          HierarchyParent     #ActionPaneTabSell
          Caption             #@SYS114628
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupSellRelatedInformation
          ElementPosition     #1533916890
          HierarchyParent     #ActionPaneTabSell
          Caption             #@SYS111665
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupSellTradeAgreements
          ElementPosition     #920350134
          HierarchyParent     #ActionPaneTabSell
          Caption             #@SYS115266
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupSellView
          ElementPosition     #613566756
          HierarchyParent     #ActionPaneTabSell
          Caption             #@SYS5252
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroupSequencing
          AutoDeclaration     #Yes
          ElementPosition     #1994091957
          HierarchyParent     #ActionPaneTabPlan
          Caption             #@PSC247
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #EngineeringChangeGroup
          ConfigurationKey    #EngChgCase
          DisplayTarget       #Client
          ElementPosition     #1610612730
          HierarchyParent     #ActionPaneTabEngineer
          Caption             #@SYS4009248
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #MCRSetup
          ElementPosition     #1073741822
          HierarchyParent     #MCRActionPaneTabMCRFunctions
          Caption             #@SYS12687
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #PdsBatchAttrib
          HelpText            #@PDS1377
          ConfigurationKey    #PdsBatchAttrib
          ElementPosition     #2080374782
          HierarchyParent     #ActionPaneTabManageInventory
          Caption             #@PRO1588
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #PdsButtonGroupDefineRegulatory
          AutoDeclaration     #Yes
          ElementPosition     #2113929214
          HierarchyParent     #ActionPaneTabManageInventory
          Caption             #@PDS1378
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #PmfButtonGroupEngineerFormula
          ConfigurationKey    #PMF
          ElementPosition     #1342177275
          HierarchyParent     #ActionPaneTabEngineer
          Caption             #@PRO1115
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #Reporting
          AutoDeclaration     #Yes
          ElementPosition     #1610612733
          HierarchyParent     #ActionPaneTabManageCosts
          Caption             #@sys4000774
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #RetailButtonGroupFunctions
          ElementPosition     #1288490187
          HierarchyParent     #ActionPaneTabRetail
          Caption             #@SYS81103
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #RetailButtonGroupInquiries
          ElementPosition     #1717986916
          HierarchyParent     #ActionPaneTabRetail
          Caption             #@SYS3850
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #RetailButtonGroupSetup
          ElementPosition     #858993458
          HierarchyParent     #ActionPaneTabRetail
          Caption             #@RET260627
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #ListPageGrid
          AllowEdit           #No
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612734
          DataSource          #InventTable
          DefaultAction       #EcoResProductDetailsExtendedDblClick
          DefaultActionLabel  #@SYS122402
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #EPExternalItem
          DisplayTarget       #EP
          ElementPosition     #1824312519
          HierarchyParent     #ListPageGrid
          BackgroundColor     #Window background
          DataSource          #InventTable
          DataGroup           #EPExternalItem
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Filter
          Visible             #No
          ElementPosition     #1073741822
          Style               #CustomFilter
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Setup
          ElementPosition     #1645705074
          HierarchyParent     #ListPageGrid
          BackgroundColor     #Window background
          DataSource          #EcoResProductDimensionGroupProduct
          DataGroup           #Setup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #WHSFilterCode
          ElementPosition     #1905105300
          HierarchyParent     #ListPageGrid
          BackgroundColor     #Window background
          DataSource          #WHSInventTable
          DataGroup           #WHSFilterCode
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #WHSFilterGroup
          ElementPosition     #1985898081
          HierarchyParent     #ListPageGrid
          BackgroundColor     #Window background
          DataSource          #WHSInventTable
          DataGroup           #WHSFilterGroup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTON
        PROPERTIES
          Name                #EngineeringChangeGroupAllCases
          HelpText            #@SYS337240
          ConfigurationKey    #EngChgCase
          DisplayTarget       #Client
          ElementPosition     #1288490187
          HierarchyParent     #EngineeringChangeGroup
          Text                #@SYS336157
          NormalImage         #12198
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          NeedsRecord         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    MenuFunction menuFunction;
            #    Args args = new Args();
            #
            #    args.caller(this);
            #    args.record(InventTable);
            #
            #    menuFunction = new MenuFunction(menuitemDisplayStr(CaseListPage), MenuItemType::Display);
            #    menuFunction.enumParameter(enum2int(enumStr(CaseListFilter)));
            #    menuFunction.enumParameter(CaseListFilter::EngineeringChangeCases);
            #
            #    menuFunction.run(args);
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #EcoResProduct_M_productSubtype
          AllowEdit           #No
          ElementPosition     #1467097629
          HierarchyParent     #ListPageGrid
          DataSource          #EcoResProduct
          DataMethod          #productSubtype
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #EcoResProduct_ProductType
          ElementPosition     #1257512250
          HierarchyParent     #ListPageGrid
          DataSource          #EcoResProduct
          DataField           #ProductType
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #InventTable_PmfProductType
          ElementPosition     #2066690862
          HierarchyParent     #ListPageGrid
          DataSource          #InventTable
          DataField           #PmfProductType
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #DeleteRecord
          DisplayTarget       #Client
          ElementPosition     #1503238548
          HierarchyParent     #ButtonGroupDefineModify
          Text                #@SYS14425
          NormalImage         #10121
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          SaveRecord          #No
          MultiSelect         #Yes
          Primary             #Yes
          NeedsRecord         #Yes
          Command             #2832
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #DocumentHandling
          HelpText            #@SYS339394
          DisplayTarget       #Client
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupDefineAttachments
          Text                #@SYS316708
          NormalImage         #10442
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          Big                 #Yes
          NeedsRecord         #Yes
          Command             #2853
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #ExportToExcel
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupDefineList
          NormalImage         #10156
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          MultiSelect         #Yes
          Big                 #Yes
          Command             #4436
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #Refresh
          HelpText            #@SYS315818
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupDefineList
          NormalImage         #11437
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          MultiSelect         #Yes
          Big                 #Yes
          Command             #2875
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL DROPDIALOGBUTTON
        PROPERTIES
          Name                #buttonWHSInventTableReservationHierarchy
          AutoDeclaration     #Yes
          ElementPosition     #637534206
          HierarchyParent     #ButtonGroupDefineSetup
          ButtonDisplay       #Text & Image above
          NormalImage         #11232
          ImageLocation       #EmbeddedResource
          MultiSelect         #No
          Big                 #Yes
          NeedsRecord         #Yes
          DataSource          #InventTable
          MenuItemName        #WHSInventtableReservationHierarchy
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL DROPDIALOGBUTTON
        PROPERTIES
          Name                #DimensionGroups
          ElementPosition     #536870910
          HierarchyParent     #ButtonGroupDefineSetup
          ButtonDisplay       #Text & Image below
          NormalImage         #10448
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          NeedsRecord         #Yes
          MenuItemName        #InventTableInventoryDimensionGroups
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL DROPDIALOGBUTTON
        PROPERTIES
          Name                #EngineeringChangeGroupAddToLog
          AutoDeclaration     #Yes
          ElementPosition     #1932735281
          HierarchyParent     #EngineeringChangeGroup
          ShowShortCut        #No
          NeedsRecord         #Yes
          MenuItemName        #EngChgCaseAddToLogReleasedProduct
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL DROPDIALOGBUTTON
        PROPERTIES
          Name                #EngineeringChangeGroupAssociateCase
          AutoDeclaration     #Yes
          ElementPosition     #1717986916
          HierarchyParent     #EngineeringChangeGroup
          ShowShortCut        #No
          MultiSelect         #Yes
          NeedsRecord         #Yes
          MenuItemName        #EngChgCaseAssociateReleasedProduct
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #AxdItemDocumentFilter
          DisplayTarget       #Client
          ElementPosition     #1717986916
          HierarchyParent     #ButtonGroupGeneralAIF
          ShowShortCut        #No
          MenuItemType        #Action
          MenuItemName        #AxdItemDocumentFilter
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #AxdSendItemAction
          DisplayTarget       #Client
          ElementPosition     #1288490187
          HierarchyParent     #ButtonGroupGeneralAIF
          MenuItemType        #Action
          MenuItemName        #AxdSendItemAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #BOMConfigRouteAction
          AutoDeclaration     #Yes
          ElementPosition     #858993458
          HierarchyParent     #ButtonGroupEngineerConfiguration
          NormalImage         #10507
          ImageLocation       #EmbeddedResource
          MenuItemName        #BOMConfigRouteAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #BOMConsistOfAction
          AutoDeclaration     #Yes
          ElementPosition     #858993458
          HierarchyParent     #ButtonGroupEngineerBOM
          NormalImage         #10632
          ImageLocation       #EmbeddedResource
          MenuItemName        #BOMConsistOfAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #BOMDesignerAction
          AutoDeclaration     #Yes
          ElementPosition     #1288490187
          HierarchyParent     #ButtonGroupEngineerBOM
          NormalImage         #10551
          ImageLocation       #EmbeddedResource
          MenuItemName        #BOMDesignerAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #BOMPartOfAction
          AutoDeclaration     #Yes
          ElementPosition     #1717986916
          HierarchyParent     #ButtonGroupEngineerBOM
          NormalImage         #10862
          ImageLocation       #EmbeddedResource
          MenuItemName        #BOMPartOfAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #BOMReportFinishedAction
          AutoDeclaration     #Yes
          DisplayTarget       #Client
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupEngineerBOMReport
          NormalImage         #10746
          ImageLocation       #EmbeddedResource
          MenuItemType        #Action
          MenuItemName        #BOMReportFinishedAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #BOMReportFinishMaxAction
          AutoDeclaration     #Yes
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupEngineerBOMReport
          NormalImage         #10643
          ImageLocation       #EmbeddedResource
          MenuItemName        #BOMReportFinishMaxAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ButtonFci_BR
          AutoDeclaration     #Yes
          CountryRegionCodes  #BR
          HelpText            #@SYS4004308
          ElementPosition     #2040109461
          HierarchyParent     #ButtonGroupDefineModify
          Text                #@SYS4004311
          ButtonDisplay       #Text & Image left
          NormalImage         #10043
          ImageLocation       #EmbeddedResource
          NeedsRecord         #Yes
          MenuItemName        #ImportedContentPerItem_BR
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #buttonFiscalDocumenText_BR
          AllowEdit           #No
          CountryRegionCodes  #BR
          HelpText            #@GLS63736
          ElementPosition     #1342177277
          HierarchyParent     #ButtonGroupDefineAttachments
          NormalImage         #10099
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          Big                 #Yes
          NeedsRecord         #Yes
          MenuItemName        #FiscalDocumentText_BR
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #CaseDetailAction
          ElementPosition     #1610612734
          HierarchyParent     #ButtonGroupGeneralManageCases
          NormalImage         #12198
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #CaseListPage
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #CaseDetailNewGeneralAction
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupGeneralManageCases
          NormalImage         #10608
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #CaseDetailNewGeneralAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #CommissionCalcAction
          ElementPosition     #1717986916
          HierarchyParent     #ButtonGroupSellRelatedInformation
          NormalImage         #10501
          ImageLocation       #EmbeddedResource
          MenuItemName        #CommissionCalcAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ConfigHierarchyAction
          AutoDeclaration     #Yes
          ElementPosition     #1288490187
          HierarchyParent     #ButtonGroupEngineerConfiguration
          NormalImage         #10508
          ImageLocation       #EmbeddedResource
          MenuItemName        #ConfigHierarchyAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #CostControlCommittedCostAction
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroupManageProjectsCosts
          NormalImage         #11032
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #CostControlCommittedCostAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #CustExternalItemAction
          ElementPosition     #858993458
          HierarchyParent     #ButtonGroupSellRelatedInformation
          NormalImage         #10541
          ImageLocation       #EmbeddedResource
          MenuItemName        #CustExternalItemAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EcoResDimensionBasedConfiguration
          AutoDeclaration     #Yes
          ElementPosition     #1717986916
          HierarchyParent     #ButtonGroupEngineerConfiguration
          MenuItemName        #EcoResDimensionBasedConfiguration
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EcoResProductCreate
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupDefineNew
          Big                 #Yes
          Primary             #Yes
          OpenMode            #New
          MenuItemName        #EcoResProductCreateRelease
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EcoResProductDetailsExtended
          AutoDeclaration     #Yes
          DisplayTarget       #Client
          ElementPosition     #429496728
          HierarchyParent     #ButtonGroupDefineModify
          Text                #@SYS317438
          NormalImage         #10040
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          MultiSelect         #Yes
          Big                 #Yes
          Primary             #Yes
          NeedsRecord         #Yes
          OpenMode            #Edit
          CopyCallerQuery     #Yes
          MenuItemName        #EcoResProductDetailsExtended
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EcoResProductDetailsExtendedDblClick
          Visible             #No
          DisplayTarget       #Client
          ElementPosition     #644245092
          HierarchyParent     #ButtonGroupDefineModify
          Text                #@SYS453
          NormalImage         #10040
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          Big                 #Yes
          NeedsRecord         #Yes
          CopyCallerQuery     #Yes
          MenuItemName        #EcoResProductDetailsExtended
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EcoResProductDetailsExtendedList
          DisplayTarget       #Client
          ElementPosition     #858993456
          HierarchyParent     #ButtonGroupDefineModify
          Text                #@SYS319303
          NormalImage         #10011
          ImageLocation       #EmbeddedResource
          MultiSelect         #Yes
          Primary             #Yes
          NeedsRecord         #Yes
          OpenMode            #Edit
          CopyCallerQuery     #Yes
          FormViewOption      #Grid
          MenuItemName        #EcoResProductDetailsExtended
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EcoResProductDetailsExtendedVendor
          AutoDeclaration     #Yes
          DisplayTarget       #EP
          ElementPosition     #1288490184
          HierarchyParent     #ButtonGroupDefineModify
          Text                #@SYS53394
          NormalImage         #11002
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          Primary             #Yes
          NeedsRecord         #Yes
          OpenMode            #View
          CopyCallerQuery     #Yes
          MenuItemName        #EcoResProductDetailsExtendedVendor
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EcoResProductDetailsExtendedView
          AutoDeclaration     #Yes
          DisplayTarget       #EP
          ElementPosition     #1073741820
          HierarchyParent     #ButtonGroupDefineModify
          Text                #@SYS53394
          NormalImage         #11002
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          Primary             #Yes
          NeedsRecord         #Yes
          OpenMode            #View
          CopyCallerQuery     #Yes
          MenuItemName        #EcoResProductDetailsExtended
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EcoResProductImage
          ElementPosition     #939524094
          HierarchyParent     #ButtonGroupDefineSetup
          Big                 #Yes
          NeedsRecord         #Yes
          DataSource          #EcoResProduct
          MenuItemName        #EcoResProductImage
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EcoResProductMasterDimensionPerCompany
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupDefineProductMaster
          Big                 #Yes
          NeedsRecord         #Yes
          DataSource          #EcoResProduct_EcoResProductMaster
          MenuItemName        #EcoResProductMasterDimensionPerCompany
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EcoResProductTemplateApply
          AutoDeclaration     #Yes
          DisplayTarget       #Client
          ElementPosition     #1717986912
          HierarchyParent     #ButtonGroupDefineModify
          NeedsRecord         #Yes
          MenuItemType        #Action
          MenuItemName        #EcoResProductTemplateApply
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EcoResProductTranslationAction
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroupDefineLanguages
          Big                 #Yes
          NeedsRecord         #Yes
          DataSource          #EcoResProduct
          MenuItemName        #EcoResProductTranslation
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EcoResProductVariantsAction
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupDefineProductMaster
          Big                 #Yes
          NeedsRecord         #Yes
          DataSource          #EcoResProduct_EcoResProductMaster
          MenuItemName        #EcoResProductVariantsPerCompany
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ECPPresentationAction
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroupGeneralEnterprisePortal
          Big                 #Yes
          MenuItemName        #ECPPresentationAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EngineeringChangeGroupCreateCase
          AutoDeclaration     #Yes
          ElementPosition     #858993458
          HierarchyParent     #EngineeringChangeGroup
          ShowShortCut        #No
          MultiSelect         #Yes
          Big                 #Yes
          NeedsRecord         #Yes
          MenuItemName        #EngChgCaseNewReleasedProduct
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #EPAttachments
          AutoDeclaration     #Yes
          HelpText            #@SYS339394
          DisplayTarget       #EP
          ElementPosition     #1744830461
          HierarchyParent     #ButtonGroupDefineAttachments
          NormalImage         #10442
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          Big                 #Yes
          NeedsRecord         #Yes
          MenuItemName        #EPDocuList
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ExtCodeValueTableAction
          AutoDeclaration     #Yes
          ElementPosition     #858993458
          HierarchyParent     #ButtonGroupGeneralAIF
          NormalImage         #10570
          ImageLocation       #EmbeddedResource
          MenuItemName        #ExtCodeValueTableAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #FEACCInventTable_RU
          ElementPosition     #1946157054
          HierarchyParent     #ButtonGroupDefineSetup
          Text                #@GLS115056
          NormalImage         #12065
          ImageLocation       #EmbeddedResource
          NeedsRecord         #Yes
          DataSource          #InventTable
          MenuItemName        #FEACCInventTable_RU
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #FEACCItemRelation_RU
          AutoDeclaration     #Yes
          ElementPosition     #1744830462
          HierarchyParent     #ButtonGroupDefineSetup
          MultiSelect         #Yes
          NeedsRecord         #Yes
          DataSource          #InventTable
          MenuItemType        #Action
          MenuItemName        #FEACCItemRelation_RU
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ForecastInventAction
          AutoDeclaration     #Yes
          ElementPosition     #1717986916
          HierarchyParent     #ButtonGroupPlanForecast
          NormalImage         #10857
          ImageLocation       #EmbeddedResource
          MenuItemName        #ForecastInventAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ForecastPurchItemAction
          ElementPosition     #1288490187
          HierarchyParent     #ButtonGroupPlanForecast
          NormalImage         #10723
          ImageLocation       #EmbeddedResource
          MenuItemName        #ForecastPurchItemAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ForecastSalesItemAction
          ElementPosition     #858993458
          HierarchyParent     #ButtonGroupPlanForecast
          NormalImage         #10766
          ImageLocation       #EmbeddedResource
          MenuItemName        #ForecastSalesItemAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventBatchAction
          ElementPosition     #1789569705
          HierarchyParent     #ButtonGroupManageInventoryView
          MenuItemName        #InventBatchAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventItemBarcodeAction
          ElementPosition     #1288490187
          HierarchyParent     #ButtonGroupManageInventoryWarehouse
          NormalImage         #10452
          ImageLocation       #EmbeddedResource
          MenuItemName        #InventItemBarcodeAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventItemGTINAction
          ElementPosition     #1717986916
          HierarchyParent     #ButtonGroupManageInventoryWarehouse
          NormalImage         #10590
          ImageLocation       #EmbeddedResource
          MenuItemName        #InventItemGTINAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventItemLocationAction
          ElementPosition     #858993458
          HierarchyParent     #ButtonGroupManageInventoryWarehouse
          NormalImage         #10652
          ImageLocation       #EmbeddedResource
          MenuItemName        #InventItemLocationAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventItemOrderSetupAction
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupManageInventoryOrderSettings
          NormalImage         #10547
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #InventItemOrderSetupAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventItemOrderSetupActionPlan
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupPlanPlanOrderSettings
          NormalImage         #10547
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #InventItemOrderSetupAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventItemOrderSetupDimAction
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupManageInventoryOrderSettings
          NormalImage         #10800
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #InventItemOrderSetupDimAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventItemOrderSetupDimActionPlan
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupPlanPlanOrderSettings
          NormalImage         #10800
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #InventItemOrderSetupDimAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventItemPriceAction
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupManageCostsSetup
          Big                 #Yes
          MenuItemName        #InventItemPriceAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventLotItemAction
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroupManageInventoryView
          MenuItemName        #InventLotItemAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventNonConformanceTableAction
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupManageInventoryQuality
          Big                 #Yes
          MenuItemName        #InventNonConformanceTableAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventOnhandItemAction
          AutoDeclaration     #Yes
          ElementPosition     #596523234
          HierarchyParent     #ButtonGroupManageInventoryView
          NormalImage         #10654
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #InventOnhandItemAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventPostingAction
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupManageCostsSetup
          NormalImage         #10608
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #InventPostingAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventSupplyAction
          ElementPosition     #858993458
          HierarchyParent     #ButtonGroupPurchaseOrders
          Big                 #Yes
          MenuItemName        #InventSupply
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventTestItemQualityGroupAction
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupManageInventoryQuality
          MenuItemName        #InventTestItemQualityGroupAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventTransAction
          ElementPosition     #1073741823
          HierarchyParent     #ButtonGroupManageInventoryView
          NormalImage         #10836
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #InventTransAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #InventValueCubePowerView
          ElementPosition     #1431655764
          HierarchyParent     #Reporting
          Big                 #Yes
          MenuItemName        #InventValueCubePowerView
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #MCRInstallmentSetup
          AutoDeclaration     #Yes
          ConfigurationKey    #MCRInstallmentBilling
          ElementPosition     #1879048186
          HierarchyParent     #MCRSetup
          ButtonDisplay       #Text & Image left
          NormalImage         #10542
          ImageLocation       #EmbeddedResource
          DataSource          #InventTable
          MenuItemName        #MCRInstallmentSetup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #MCRItemMessageAssociation
          ConfigurationKey    #LogisticsBasic
          ElementPosition     #1798517549
          HierarchyParent     #MCRSetup
          ButtonDisplay       #Text & Image left
          NormalImage         #3061
          ImageLocation       #EmbeddedResource
          DataSource          #InventTable
          MenuItemName        #MCRItemMessageAssociation
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #MCROrderNotes
          ElementPosition     #1717986912
          HierarchyParent     #MCRSetup
          Text                #@MCR12145
          ButtonDisplay       #Text & Image left
          NormalImage         #3061
          ImageLocation       #EmbeddedResource
          DataSource          #InventTable
          MenuItemName        #MCROrderNotes
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #MCRRoyaltyTable
          ElementPosition     #1968526675
          HierarchyParent     #ButtonGroupPurchaseTradeAgreements
          Text                #@MCR33559
          ButtonDisplay       #Text & Image left
          NormalImage         #10466
          ImageLocation       #EmbeddedResource
          MenuItemName        #MCRRoyaltyTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #MCRUpSellItem_Item
          ElementPosition     #1073741820
          HierarchyParent     #MCRSetup
          ButtonDisplay       #Text & Image left
          NormalImage         #10562
          ImageLocation       #EmbeddedResource
          MenuItemName        #MCRUpSellItem_Item
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PdsApprovedVendorList
          ElementPosition     #818728140
          HierarchyParent     #ButtonGroupPdsApprovedVendorList
          Text                #@SYS2186
          Big                 #Yes
          MenuItemName        #PdsApprovedVendorList
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PdsApprovedVendorListExpiration
          ElementPosition     #1637456280
          HierarchyParent     #ButtonGroupPdsApprovedVendorList
          Text                #@PRO2879
          MenuItemName        #PdsInventInquiryApprovedVendorExpiration
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PdsApprovedVendorListItem
          ElementPosition     #1228092210
          HierarchyParent     #ButtonGroupPdsApprovedVendorList
          Text                #@PRO1541
          MenuItemName        #PdsInventInquiryApprovedVendorlistByitem
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PdsBatchAttribByItem
          AutoDeclaration     #Yes
          ElementPosition     #858993458
          HierarchyParent     #PdsBatchAttrib
          Text                #@PRO1605
          ShowShortCut        #No
          MenuItemName        #PdsBatchAttribByItem
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PdsBatchAttribByItemCustomer
          AutoDeclaration     #Yes
          ElementPosition     #1288490187
          HierarchyParent     #PdsBatchAttrib
          Text                #@PRO1823
          ShowShortCut        #No
          MenuItemName        #PdsBatchAttribByItemCustomer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PdsBatchAttribInventOnhand
          AutoDeclaration     #Yes
          ElementPosition     #1717986916
          HierarchyParent     #PdsBatchAttrib
          Text                #@PDS1983
          ShowShortCut        #No
          DataSource          #InventTable
          MenuItemName        #PdsBatchAttribInventOnhand
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PDSBatchAttribTransfer
          ElementPosition     #572662304
          HierarchyParent     #PdsBatchAttrib
          NormalImage         #10576
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          DataSource          #InventTable
          MenuItemName        #PDSBatchAttribTransfer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PdsMRCItemDetails
          ElementPosition     #1840700268
          HierarchyParent     #PdsButtonGroupDefineRegulatory
          MenuItemName        #PdsMRCItemDetails
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PdsMRCMSDSDocument
          ElementPosition     #920350134
          HierarchyParent     #PdsButtonGroupDefineRegulatory
          MenuItemName        #PdsMRCDocument
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PdsMRCRegulatoryReportingDetail
          ElementPosition     #1227133512
          HierarchyParent     #PdsButtonGroupDefineRegulatory
          MenuItemName        #PdsMRCRestrictedCountryStateByItem
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PdsMRCReportingCountry
          ElementPosition     #613566756
          HierarchyParent     #PdsButtonGroupDefineRegulatory
          Big                 #Yes
          MenuItemName        #PdsMRCReportingCountry
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PlInventSumExternal
          ElementPosition     #894784852
          HierarchyParent     #ButtonGroupManageInventoryView
          NormalImage         #10654
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #PlInventSumExternal
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PmfBulkItemConv
          AutoDeclaration     #Yes
          ElementPosition     #1288490187
          HierarchyParent     #ButtonGroupManageInventoryModify
          DataSource          #InventTable
          MenuItemName        #PmfBulkItemConv
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PmfFormulaConsistOfAction
          AutoDeclaration     #Yes
          ElementPosition     #858993458
          HierarchyParent     #PmfButtonGroupEngineerFormula
          NormalImage         #10632
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          DataSource          #InventTable
          MenuItemName        #PmfFormulaConsistOf
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PmfFormulaDesignerAction
          AutoDeclaration     #Yes
          ElementPosition     #1288490187
          HierarchyParent     #PmfButtonGroupEngineerFormula
          NormalImage         #10551
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          DataSource          #InventTable
          MenuItemName        #PmfFormulaDesigner
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PmfFormulaPartOfAction
          AutoDeclaration     #Yes
          ElementPosition     #1717986916
          HierarchyParent     #PmfButtonGroupEngineerFormula
          NormalImage         #10862
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          DataSource          #InventTable
          MenuItemName        #PmfFormulaPartOf
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PmfMultiDimProcessInventory
          AutoDeclaration     #Yes
          ElementPosition     #858993458
          HierarchyParent     #ButtonGroupManageInventoryModify
          NormalImage         #10654
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          Big                 #Yes
          MenuItemName        #PmfMultiDimProcessInventory
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PmfPackOnHand
          AutoDeclaration     #Yes
          ElementPosition     #1717986916
          HierarchyParent     #ButtonGroupManageInventoryModify
          ShowShortCut        #No
          DataSource          #InventTable
          MenuItemName        #PmfPackOnHand
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PmfProdProcessBatchAction
          AutoDeclaration     #Yes
          ElementPosition     #1342177277
          HierarchyParent     #ButtonGroupEngineerView
          ShowShortCut        #No
          Big                 #Yes
          DataSource          #InventTable
          MenuItemName        #PmfProdProcessBatch
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PMFSequenceItemTable
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroupSequencing
          NormalImage         #10779
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          Big                 #Yes
          DataSource          #InventTable
          MenuItemName        #PMFSequenceItemTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PriceDiscTable_EndDiscPurchAction
          ElementPosition     #1789569705
          HierarchyParent     #ButtonGroupPurchaseView
          NormalImage         #10831
          ImageLocation       #EmbeddedResource
          MenuItemName        #PriceDiscTable_EndDiscPurchAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PriceDiscTable_EndDiscSalesAction
          ElementPosition     #1789569705
          HierarchyParent     #ButtonGroupSellView
          NormalImage         #10831
          ImageLocation       #EmbeddedResource
          MenuItemName        #PriceDiscTable_EndDiscSalesAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PriceDiscTable_LineDiscPurchAction
          ElementPosition     #1073741823
          HierarchyParent     #ButtonGroupPurchaseView
          NormalImage         #10630
          ImageLocation       #EmbeddedResource
          MenuItemName        #PriceDiscTable_LineDiscPurchAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PriceDiscTable_LineDiscSalesAction
          ElementPosition     #1073741823
          HierarchyParent     #ButtonGroupSellView
          NormalImage         #10630
          ImageLocation       #EmbeddedResource
          MenuItemName        #PriceDiscTable_LineDiscSalesAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PriceDiscTable_MultiLineDiscPurchAction
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroupPurchaseView
          NormalImage         #10647
          ImageLocation       #EmbeddedResource
          MenuItemName        #PriceDiscTable_MultiLineDiscPurchAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PriceDiscTable_MultiLineDiscSalesAction
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroupSellView
          NormalImage         #10647
          ImageLocation       #EmbeddedResource
          MenuItemName        #PriceDiscTable_MultiLineDiscSalesAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PriceDiscTable_PricePurchAction
          ElementPosition     #715827882
          HierarchyParent     #ButtonGroupPurchaseView
          NormalImage         #10726
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #PriceDiscTable_PricePurchAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PriceDiscTable_PriceSalesAction
          ElementPosition     #715827882
          HierarchyParent     #ButtonGroupSellView
          NormalImage         #10726
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #PriceDiscTable_PriceSalesAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PriceDiscTable_PurchAction
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupPurchaseTradeAgreements
          Big                 #Yes
          MenuItemName        #PriceDiscTable_PurchAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PriceDiscTable_SalesAction
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupSellTradeAgreements
          Big                 #Yes
          MenuItemName        #PriceDiscTable_SalesAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ProdTableAction
          AutoDeclaration     #Yes
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupEngineerView
          NormalImage         #10888
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #ProdTableaction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ProductAttributes
          ElementPosition     #738197502
          HierarchyParent     #ButtonGroupDefineSetup
          Big                 #Yes
          NeedsRecord         #Yes
          DataSource          #EcoResProduct
          MenuItemName        #EcoResAttributeValue
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ProductCategory
          ElementPosition     #1140850686
          HierarchyParent     #ButtonGroupDefineSetup
          NeedsRecord         #Yes
          DataSource          #EcoResProduct
          MenuItemName        #EcoResProductCategory
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ProductRelationMIBtn
          ElementPosition     #1342177278
          HierarchyParent     #ButtonGroupDefineSetup
          NeedsRecord         #Yes
          DataSource          #EcoResProduct
          MenuItemName        #EcoResProductRelation
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ProjCashFlowAction
          ElementPosition     #1789569705
          HierarchyParent     #ButtonGroupManageProjectsProject
          NormalImage         #10473
          ImageLocation       #EmbeddedResource
          MenuItemName        #ProjCashFlowAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ProjCostControlAction
          AutoDeclaration     #Yes
          ElementPosition     #1073741823
          HierarchyParent     #ButtonGroupManageProjectsProject
          NormalImage         #10524
          ImageLocation       #EmbeddedResource
          MenuItemName        #ProjCostControlAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #projInvoiceControlAction
          AutoDeclaration     #Yes
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroupManageProjectsProject
          NormalImage         #11056
          ImageLocation       #EmbeddedResource
          MenuItemName        #projInvoiceControlAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ProjStatisticAction
          ElementPosition     #715827882
          HierarchyParent     #ButtonGroupManageProjectsProject
          NormalImage         #10717
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #ProjStatisticAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PurchaseInventStatistics
          ElementPosition     #1717986916
          HierarchyParent     #ButtonGroupPurchaseOrders
          Text                #@SYS115285
          NormalImage         #10679
          ImageLocation       #EmbeddedResource
          MenuItemName        #InventStatistics
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PurchasePriceDiscAdmTableCreateAction
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupPurchaseTradeAgreements
          Big                 #Yes
          MenuItemName        #PriceDiscAdmTableCreateAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PurchLineMatchingPolicyAction
          HelpText            #@SYS131100
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupPurchaseInvoiceMatching
          NormalImage         #11226
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #PurchLineMatchingPolicyAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PurchLineOpenOrderAction
          ElementPosition     #1288490187
          HierarchyParent     #ButtonGroupPurchaseOrders
          NormalImage         #11081
          ImageLocation       #EmbeddedResource
          MenuItemName        #PurchLineOpenOrderAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #PurchPriceToleranceAction
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupPurchaseInvoiceMatching
          NormalImage         #11227
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #PurchPriceToleranceAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ReqItemTableAction
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroupPlanCoverage
          NormalImage         #10618
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #ReqItemTableAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ReqSupplyDemandScheduleAction
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroupPlanView
          MultiSelect         #No
          Big                 #Yes
          MenuItemName        #ReqSupplyDemandSchedule
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ReqTransGrossAction
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupPlanRequirement
          NormalImage         #10588
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #ReqTransGrossAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ReqTransNetAction
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupPlanRequirement
          NormalImage         #10648
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #ReqTransNetAction_blankParameter
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailBuyersPush
          HelpText            #@RET801
          ElementPosition     #1840700268
          HierarchyParent     #RetailButtonGroupFunctions
          NormalImage         #12499
          ImageLocation       #EmbeddedResource
          DataSource          #InventTable
          MenuItemName        #RetailBuyersPush
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailCompetitorPriceTable
          HelpText            #@RET3057
          ElementPosition     #858993458
          HierarchyParent     #RetailButtonGroupInquiries
          NormalImage         #Retail_CompetitorPrices_ico
          ImageLocation       #AOTResource
          DataSource          #InventTable
          MenuItemName        #RetailCompetitorPriceTable
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailInfocodeTableSpecific_Item
          ElementPosition     #536870910
          HierarchyParent     #RetailButtonGroupSetup
          NormalImage         #Retail_ReasonCodes_ico
          ImageLocation       #AOTResource
          Big                 #Yes
          DataSource          #InventTable
          MenuItemName        #RetailInfocodeTableSpecific_Item
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailInventItemLabelSetup_Item
          ElementPosition     #1073741820
          HierarchyParent     #RetailButtonGroupSetup
          NormalImage         #10617
          ImageLocation       #EmbeddedResource
          DataSource          #InventTable
          MenuItemName        #RetailInventItemLabelSetup_Item
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailInventItemLabelSetup_Shelf
          ElementPosition     #805306365
          HierarchyParent     #RetailButtonGroupSetup
          NormalImage         #Retail_DAX2_304_Rack_ico
          ImageLocation       #AOTResource
          DataSource          #InventTable
          MenuItemName        #RetailInventItemLabelSetup_Shelf
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailInventItemSectionLocation
          ElementPosition     #1879048185
          HierarchyParent     #RetailButtonGroupSetup
          NormalImage         #12053
          ImageLocation       #EmbeddedResource
          DataSource          #InventTable
          MenuItemName        #RetailInventItemSectionLocation
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailInventLinkedItem
          ElementPosition     #1342177275
          HierarchyParent     #RetailButtonGroupSetup
          NormalImage         #807
          ImageLocation       #EmbeddedResource
          DataSource          #InventTable
          MenuItemName        #RetailInventLinkedItem
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailInventWhereLinkedItem
          ElementPosition     #1610612730
          HierarchyParent     #RetailButtonGroupSetup
          NormalImage         #Retail_linked_ico
          ImageLocation       #AOTResource
          DataSource          #InventTable
          MenuItemName        #RetailInventWhereLinkedItem
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailKitMenuItem
          AutoDeclaration     #Yes
          HelpText            #@REX1094
          ConfigurationKey    #Retail
          ElementPosition     #1431655764
          HierarchyParent     #ButtonGroupRetailKit
          Text                #@SYS25986
          ShowShortCut        #No
          MultiSelect         #No
          Big                 #Yes
          Primary             #Yes
          NeedsRecord         #Yes
          DataSource          #InventTable
          OpenMode            #Edit
          CopyCallerQuery     #No
          FormViewOption      #Details
          MenuItemName        #RetailKitConfigure
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailMandatoryCheck
          ElementPosition     #1227133512
          HierarchyParent     #RetailButtonGroupFunctions
          NormalImage         #Retail_MandatorySetupList_ico
          ImageLocation       #AOTResource
          DataSource          #InventTable
          MenuItemName        #RetailMandatoryCheck
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailMandatoryCheckManagement
          ElementPosition     #1533916890
          HierarchyParent     #RetailButtonGroupFunctions
          NormalImage         #11125
          ImageLocation       #EmbeddedResource
          DataSource          #InventTable
          MenuItemType        #Action
          MenuItemName        #RetailMandatoryCheckManagement
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailPriceList
          ElementPosition     #1717986916
          HierarchyParent     #RetailButtonGroupInquiries
          NormalImage         #Retail_PriceList_ico
          ImageLocation       #AOTResource
          MultiSelect         #No
          DataSource          #InventTable
          MenuItemName        #RetailPriceList
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailPrintSpecificItemLabel
          AutoDeclaration     #Yes
          HelpText            #@RET3836
          ElementPosition     #920350134
          HierarchyParent     #RetailButtonGroupFunctions
          Text                #@RET3836
          NormalImage         #1083
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          MultiSelect         #Yes
          DataSource          #InventTable
          MenuItemName        #RetailCreateMultipleItemsLabel
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailPrintSpecificShelfLabel
          AutoDeclaration     #Yes
          HelpText            #@RET3837
          ElementPosition     #613566756
          HierarchyParent     #RetailButtonGroupFunctions
          Text                #@RET3837
          NormalImage         #1083
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          MultiSelect         #Yes
          DataSource          #InventTable
          MenuItemName        #RetailCreateMultipleShelfsLabel
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RetailTransactionSalesTrans
          ElementPosition     #1288490187
          HierarchyParent     #RetailButtonGroupInquiries
          NormalImage         #11038
          ImageLocation       #EmbeddedResource
          DataSource          #InventTable
          MenuItemName        #RetailTransactionSalesTrans
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #RouteInventProdAction
          AutoDeclaration     #Yes
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupEngineerView
          NormalImage         #10762
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #RouteInventProdAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SalesATP
          ElementPosition     #858993458
          HierarchyParent     #ButtonGroupSellOrders
          Big                 #Yes
          MenuItemName        #SalesATP
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SalesLineOpenOrder
          ElementPosition     #1288490187
          HierarchyParent     #ButtonGroupSellOrders
          NormalImage         #11081
          ImageLocation       #EmbeddedResource
          MenuItemName        #SalesLineOpenOrder
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SellInventStatistics
          ElementPosition     #1717986916
          HierarchyParent     #ButtonGroupSellOrders
          Text                #@SYS115285
          NormalImage         #10679
          ImageLocation       #EmbeddedResource
          MenuItemName        #InventStatistics
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SellPriceDiscAdmTableCreateAction
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupSellTradeAgreements
          Big                 #Yes
          MenuItemName        #PriceDiscAdmTableCreateAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SuppItemTable_PurchAction
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroupPurchaseRelatedInformation
          NormalImage         #10821
          ImageLocation       #EmbeddedResource
          MenuItemName        #SuppItemTable_PurchAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #SuppItemTable_SalesAction
          ElementPosition     #1288490187
          HierarchyParent     #ButtonGroupSellRelatedInformation
          NormalImage         #10822
          ImageLocation       #EmbeddedResource
          MenuItemName        #SuppItemTable_SalesAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #TransferPrice_IN
          AutoDeclaration     #Yes
          CountryRegionCodes  #IN
          ElementPosition     #1879048189
          HierarchyParent     #ButtonGroupManageCostsSetup
          Text                #@GLS234
          NormalImage         #10771
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          Big                 #Yes
          MenuItemName        #TransferPrice_IN
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #UnitOfMeasureConversion
          ElementPosition     #1543503870
          HierarchyParent     #ButtonGroupDefineSetup
          NeedsRecord         #Yes
          DataSource          #EcoResProduct
          MenuItemName        #UnitOfMeasureConversion
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #Validate
          DisplayTarget       #Client
          ElementPosition     #1932735276
          HierarchyParent     #ButtonGroupDefineModify
          NeedsRecord         #Yes
          MenuItemType        #Action
          MenuItemName        #EcoResProductValidatonService
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #VendExternalItemAction
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroupPurchaseRelatedInformation
          NormalImage         #10851
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #VendExternalItemAction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #WHSPhysDimUOMButton
          ElementPosition     #1932735281
          HierarchyParent     #ButtonGroupManageInventoryWarehouse
          ButtonDisplay       #Text & Image above
          NormalImage         #12232
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #whsphysdimuom
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL SEPARATOR
        PROPERTIES
          Name                #Separator
          ElementPosition     #920350134
          HierarchyParent     #PdsBatchAttrib
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #BarcodeConfigID
          AutoDeclaration     #Yes
          HyperLinkMenuItem   #EcoResProductDetailsExtended
          HyperLinkDataSource #InventTable
          ElementPosition     #1556401351
          HierarchyParent     #ListPageGrid
          DataSource          #InventTable
          DataField           #BarcodeConfigId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #EcoResProduct_SearchName
          ElementPosition     #1047926875
          HierarchyParent     #ListPageGrid
          DataSource          #InventTable
          DataField           #NameAlias
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #EcoResProductTranslation_Name
          ElementPosition     #838341500
          HierarchyParent     #ListPageGrid
          DataSource          #EcoResProductTranslation
          DataField           #Name
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #EPExternalItem_M_defaultExternalItemDescription
          AutoDeclaration     #Yes
          AllowEdit           #No
          DisplayTarget       #EP
          ElementPosition     #1610612734
          HierarchyParent     #EPExternalItem
          DataSource          #InventTable
          DataMethod          #defaultExternalItemDescription
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #EPExternalItem_M_defaultExternalItemId
          AutoDeclaration     #Yes
          AllowEdit           #No
          DisplayTarget       #EP
          ElementPosition     #1073741822
          HierarchyParent     #EPExternalItem
          DataSource          #InventTable
          DataMethod          #defaultExternalItemId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #InventTable_ItemId
          AutoDeclaration     #Yes
          HyperLinkMenuItem   #EcoResProductDetailsExtended
          HyperLinkDataSource #InventTable
          ElementPosition     #419170750
          HierarchyParent     #ListPageGrid
          DataSource          #InventTable
          DataField           #ItemId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #InventTable_ItemIdVend
          AutoDeclaration     #Yes
          Visible             #No
          DisplayTarget       #EP
          HyperLinkMenuItem   #EcoResProductDetailsExtendedVendor
          HyperLinkDataSource #InventTable
          ElementPosition     #628756125
          HierarchyParent     #ListPageGrid
          DataSource          #InventTable
          DataField           #ItemId
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
      TABLE #InventModelGroup
        PROPERTIES
          Table               #InventModelGroup
          EffectiveAccess     #Read
          ManagedBy           #Manual
        ENDPROPERTIES
        
      ENDTABLE
      
  ENDTABLES
  
SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
  TABLE #InventModelGroup
    PROPERTIES
      Table               #InventModelGroup
      EffectiveAccess     #Read
      ManagedBy           #Manual
    ENDPROPERTIES
    
  ENDTABLE
  
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
  TABLE #InventModelGroup
    PROPERTIES
      Table               #InventModelGroup
      EffectiveAccess     #Read
      ManagedBy           #Manual
    ENDPROPERTIES
    
  ENDTABLE
  
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
  TABLE #InventModelGroup
    PROPERTIES
      Table               #InventModelGroup
      EffectiveAccess     #Read
      ManagedBy           #Manual
    ENDPROPERTIES
    
  ENDTABLE
  
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: CLS

; Microsoft Dynamics AX Class: WHSPutLocationChangeCheck unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #WHSPutLocationChangeCheck
    PROPERTIES
      Name                #WHSPutLocationChangeCheck
      Origin              #{E6F26333-1EF9-4E83-9C70-6ED51F1F74A7}
    ENDPROPERTIES
    
    METHODS
      SOURCE #allowMixedItems
        #/// <summary>
        #///  Check if the location allows mixed items.
        #/// </summary>
        #/// <returns>
        #///  true if the location alllows mixed items. Otherwise , false.
        #/// </returns>
        #protected boolean allowMixedItems()
        #{
        #    return WMSLocation::find(locationId, warehouseId).whsLocationProfile().AllowMixedItems;
        #}
      ENDSOURCE
      SOURCE #checkLocation
        #/// <summary>
        #/// Performs the location validation.
        #/// </summary>
        #/// <returns>
        #/// true if the location is valid; otherwise, false
        #/// </returns>
        #public boolean checkLocation()
        #{
        #    return this.locationExists()
        #        && this.matchesPutLocationType()
        #        && (this.isFixedLocationForThis() || (this.allowMixedItems() || !this.isFixedLocationForOther()));
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #/// <summary>
        #/// The <c>WHSPutLocationChangeCheck</c> class is responsible for validating that a new location
        #/// is valid when the location is changed during put.
        #/// </summary>
        #class whsPutLocationChangeCheck
        #{
        #    InventLocationId    warehouseId;
        #    WMSLocationId       locationId;
        #    ItemId              itemId;
        #    WHSWorkLine         workLine;
        #    InventSiteId        inventSiteId;
        #    InventDim           productDims;
        #}
      ENDSOURCE
      SOURCE #inventSiteId
        #private InventSiteId inventSiteId()
        #{
        #    if (!inventSiteId)
        #    {
        #        inventSiteId = InventLocation::find(warehouseId).InventSiteId;
        #    }
        #
        #    return inventSiteId;
        #}
      ENDSOURCE
      SOURCE #isFixedLocationForOther
        #/// <summary>
        #/// Checks if the location is a fixed location for a product or variant other than the current one.
        #/// </summary>
        #/// <returns>
        #/// true if the location is a fixed one for another product or variant; otherwise, false
        #/// </returns>
        #protected boolean isFixedLocationForOther()
        #{
        #    return this.isFixedLocationForOtherProduct() || this.isFixedLocationForOtherVariant();
        #}
      ENDSOURCE
      SOURCE #isFixedLocationForOtherProduct
        #private boolean isFixedLocationForOtherProduct()
        #{
        #    WHSInventFixedLocation  fixedProductLocation;
        #
        #    select firstonly RecId from fixedProductLocation
        #        where   fixedProductLocation.InventSiteId        == this.inventSiteId() &&
        #                fixedProductLocation.InventLocationId    == warehouseId         &&
        #                fixedProductLocation.wmsLocationId       == locationId          &&
        #                fixedProductLocation.ItemId              != itemId;
        #
        #    return fixedProductLocation.RecId != 0;
        #}
      ENDSOURCE
      SOURCE #isFixedLocationForOtherVariant
        #private boolean isFixedLocationForOtherVariant()
        #{
        #    WHSProductVariantFixedLocation  fixedVariantLocation;
        #    boolean                         ret = false;
        #
        #    if (workLine)
        #    {
        #        // check if the location is fixed either for another variant of this product,
        #        // or a variant of another product
        #        select firstonly RecId from fixedVariantLocation
        #            where   fixedVariantLocation.InventLocationId  == warehouseId
        #                &&  fixedVariantLocation.wmsLocationId     == locationId
        #                &&  (   fixedVariantLocation.ItemId                     != itemId
        #                    ||  fixedVariantLocation.ProductVariantInventDimId  != this.workLineProductDims().InventDimId);
        #
        #        ret = fixedVariantLocation.RecId != 0;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isFixedLocationForThis
        #private boolean isFixedLocationForThis()
        #{
        #    return this.isFixedLocationForThisVariant() || this.isFixedLocationForThisProduct();
        #}
      ENDSOURCE
      SOURCE #isFixedLocationForThisProduct
        #/// <summary>
        #/// Checks if the location is the fixed location for the current product.
        #/// </summary>
        #/// <returns>
        #/// true if the location is a fixed one for the product; otherwise, false
        #/// </returns>
        #protected boolean isFixedLocationForThisProduct()
        #{
        #    return WHSInventFixedLocation::exist(itemId, warehouseId, this.inventSiteId(), locationId);
        #}
      ENDSOURCE
      SOURCE #isFixedLocationForThisVariant
        #/// <summary>
        #/// Checks if the location is the fixed location for the current product variant.
        #/// </summary>
        #/// <returns>
        #/// true if the location is a fixed one for the variant; otherwise, false
        #/// </returns>
        #protected boolean isFixedLocationForThisVariant()
        #{
        #    boolean                 ret = false;
        #
        #    if (this.workLineProductDims())
        #    {
        #        ret = WHSProductVariantFixedLocation::exist(
        #            itemId,
        #            this.workLineProductDims().InventDimId,
        #            warehouseId,
        #            locationId);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #locationExists
        #/// <summary>
        #/// Checks if the location exists in the warehouse.
        #/// </summary>
        #/// <returns>
        #/// true if the location exists; otherwise, false
        #/// </returns>
        #protected boolean locationExists()
        #{
        #    return locationId != '';
        #}
      ENDSOURCE
      SOURCE #matchesPutLocationType
        #/// <summary>
        #/// If the work line is a put, checks to see that it matches the work class's put location type.
        #/// </summary>
        #/// <returns>
        #/// true if the location type matches or does not need to match; otherwise, false
        #/// </returns>
        #protected boolean matchesPutLocationType()
        #{
        #    boolean ret = true;
        #
        #    if (workLine &&
        #        workLine.WorkType == WHSWorkType::Put &&
        #        WHSWorkClassValidLocType::workClassHasSpecifiedLocType(workLine.WorkClassId) &&
        #        !WHSWorkClassValidLocType::find(workLine.WorkClassId, WHSLocationProfile::find(WMSLocation::find(locationId, warehouseId).LocProfileId).LocType))
        #    {
        #
        #        ret = checkFailed("@WAX3026");
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #/// <summary>
        #/// Creates a new instance of the <c>WHSPutLocationChangeCheck</c> class from the specified parameters.
        #/// </summary>
        #/// <param name="_inventLocationId">
        #/// Warehouse ID of the current warehouse.
        #/// </param>
        #/// <param name="_locationId">
        #/// Location ID of the location to which the item is attempted to be put.
        #/// </param>
        #/// <param name="_itemId">
        #/// Item ID of the item that the work is executed for.
        #/// </param>
        #/// <param name="_workLine">
        #/// Current work line.
        #/// </param>
        #protected void new(
        #    InventLocationId    _inventLocationId,
        #    WMSLocationId       _locationId,
        #    ItemId              _itemId,
        #    WHSWorkLine         _workLine)
        #{
        #    warehouseId = _inventLocationId;
        #    locationId  = WMSLocation::whsGetLocationId(_locationId, warehouseId);
        #    itemId      = _itemId;
        #    workLine    = _workLine;
        #}
      ENDSOURCE
      SOURCE #workLineProductDims
        #private InventDim workLineProductDims()
        #{
        #    if (!productDims && workLine && workLine.inventDim().anyProductDimensionSpecified())
        #    {
        #        productDims.initFromInventDim(workLine.inventDim(), InventDim::dimProductDimensionEnabledFieldList());
        #        productDims = InventDim::findOrCreate(productDims);
        #    }
        #
        #    return productDims;
        #}
      ENDSOURCE
      SOURCE #newFromParameters
        #/// <summary>
        #/// Creates a new instance of the <c>WHSPutLocationChangeCheck</c> class from the specified parameters.
        #/// </summary>
        #/// <param name="_inventLocationId">
        #/// Warehouse ID of the current warehouse.
        #/// </param>
        #/// <param name="_locationId">
        #/// Location ID of the location to which the item is attempted to be put.
        #/// </param>
        #/// <param name="_itemId">
        #/// Item ID of the item that the work is executed for.
        #/// </param>
        #/// <param name="_workLine">
        #/// Current work line.
        #/// </param>
        #/// <returns>
        #/// A new instance of the <c>WHSPutLocationChangeCheck</c> class.
        #/// </returns>
        #public static WHSPutLocationChangeCheck newFromParameters(
        #    InventLocationId    _inventLocationId,
        #    WMSLocationId       _locationId,
        #    ItemId              _itemId,
        #    WHSWorkLine         _workLine)
        #{
        #    return new WHSPutLocationChangeCheck(_inventLocationId, _locationId, _itemId, _workLine);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: WHSRFControlData unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #WHSRFControlData
    PROPERTIES
      Name                #WHSRFControlData
      Origin              #{8AE2B9BC-2A48-40CA-A367-FE32D7E86E3D}
      LegacyId            #20052
    ENDPROPERTIES
    
    METHODS
      SOURCE #addProductDimensions
        #/// <summary>
        #/// Adds in the <c>WHSRFPassthrough</c> object the product dimension values ofor current item
        #/// if there are any specified.
        #/// </summary>
        #/// <param name="_fieldValues">
        #/// The current <c>WHSRFPassthrough</c>
        #/// </param>
        #/// <param name="_itemId">
        #/// The current item id.
        #/// </param>
        #/// <param name="_itemInventDim">
        #/// The <c>InventDim</c> record to iterate through.
        #/// </param>
        #private void addProductDimensions(
        #                        WHSRFPassthrough _fieldValues,
        #                        ItemId          _itemId,
        #                        InventDim       _itemInventDim)
        #{
        #    ListEnumerator                  productDimEnumerator;
        #
        #    if (_itemInventDim.anyProductDimensionSpecified())
        #    {
        #        productDimEnumerator = InventDimGroupSetup::newItemIdProductDimensionsOnly(_itemId).activeFields().getEnumerator();
        #
        #        while (productDimEnumerator.moveNext())
        #        {
        #            _fieldValues.insert(fieldId2name(tableNum(InventDim), productDimEnumerator.current()), _itemInventDim.(productDimEnumerator.current()));
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #allowMixedBatch
        #/// <summary>
        #///    Checks if the current location has physical inventory for a batch that is not the given batch.
        #/// </summary>
        #/// <param name="_batchId">
        #///    The batch number to check against.
        #/// </param>
        #/// <returns>
        #///    true if the current location can be used for the given batch; otherwise, false.
        #/// </returns>
        #protected boolean allowMixedBatch(InventBatchId _batchId)
        #{
        #    InventDim   inventDim;
        #    InventSum   inventSum;
        #
        #    if (!WHSLocationProfile::find(WMSLocation::find(locationId, inventLocationId).LocProfileId).AllowMixedBatches)
        #    {
        #        select firstonly RecId from inventSum
        #            where inventSum.PhysicalInvent != 0
        #            exists join inventDim
        #                where inventDim.InventDimId      == inventSum.InventDimId
        #                   && inventDim.InventSiteId     == inventSiteId
        #                   && inventDim.InventLocationId == inventLocationId
        #                   && inventDim.wmsLocationId    == locationId
        #                   && inventDim.InventBatchId    != ''
        #                   && inventDim.InventBatchId    != _batchId;
        #    }
        #
        #    return inventSum.RecId == 0;
        #}
      ENDSOURCE
      SOURCE #allowMixedItem
        #/// <summary>
        #///    Checks if the current location has physical inventory for an item that is not the given item.
        #/// </summary>
        #/// <param name="_itemId">
        #///    The item ID to check against.
        #/// </param>
        #/// <returns>
        #///    true if the current location can be used for the given item; otherwise, false.
        #/// </returns>
        #protected boolean allowMixedItem(ItemId _itemId)
        #{
        #    InventDim       inventDim;
        #    InventSum       inventSum;
        #
        #    if (!WHSLocationProfile::find(WMSLocation::find(locationId, inventLocationId).LocProfileId).AllowMixedItems)
        #    {
        #        select firstonly RecId from inventSum
        #            where inventSum.ItemId         != _itemId
        #               && inventSum.PhysicalInvent != 0
        #            exists join inventDim
        #                where inventDim.InventDimId      == inventSum.InventDimId
        #                   && inventDim.InventSiteId     == inventSiteId
        #                   && inventDim.InventLocationId == inventLocationId
        #                   && inventDim.wmsLocationId    == locationId;
        #    }
        #
        #    return inventSum.RecId == 0;
        #}
      ENDSOURCE
      SOURCE #batchExistInLocation
        #boolean batchExistInLocation(InventBatchId      _inventBatchId)
        #{
        #    InventDim   inventDim;
        #    boolean     ret;
        #
        #    if (pass.exists(#InventSiteId))
        #    {
        #        inventDim.InventSiteId = pass.lookup(#InventSiteId);
        #    }
        #    else if (inventSiteId)
        #    {
        #        inventDim.InventSiteId = inventSiteId;
        #    }
        #
        #    if (pass.exists(#InventLocationId))
        #    {
        #        inventDim.InventLocationId = pass.lookup(#InventLocationId);
        #    }
        #    else if (inventLocationId)
        #    {
        #        inventDim.InventLocationId = inventLocationId;
        #    }
        #
        #    if (pass.exists(#WMSLocationId))
        #    {
        #        inventDim.wmsLocationId = pass.lookup(#WMSLocationId);
        #    }
        #    else if (locationId)
        #    {
        #        inventDim.wmsLocationId = locationId;
        #    }
        #
        #    if (licensePlateId)
        #    {
        #        inventDim.LicensePlateId = licensePlateId;
        #    }
        #    else if (pass.exists(#LicensePlateId))
        #    {
        #        inventDim.LicensePlateId = pass.lookup(#LicensePlateId);
        #    }
        #
        #    inventDim.initFromInventDim(workLine.inventDim(), InventDim::dimProductDimensionEnabledFieldList());
        #    this.initInventDimProductDimFromMembers(inventDim);
        #
        #    if (pass.exists(#SerialId))
        #    {
        #        inventDim.InventSerialId = pass.lookup(#SerialId);
        #    }
        #
        #    if (workLine.inventDim().InventStatusId)
        #    {
        #        inventDim.InventStatusId = workLine.inventDim().InventStatusId;
        #    }
        #
        #    if (mode == WHSWorkExecuteMode::MovementByTemplate && pass.exists(#SelectedFromValue))
        #    {
        #        if (pass.lookup(#SelectedFromValue) != '')
        #        {
        #            if (WHSInventStatus::find(pass.lookup(#SelectedFromValue)))
        #            {
        #                inventDim.InventStatusId = pass.lookup(#SelectedFromValue);
        #            }
        #            else
        #            {
        #                inventDim.InventStatusId = WHSInventStatus::findByName(pass.lookup(#SelectedFromValue)).InventStatusId;
        #            }
        #        }
        #        else
        #        {
        #            inventDim.InventStatusId = fromInventStatusId;
        #        }
        #    }
        #    else if (mode != WHSWorkExecuteMode::AdjustmentOut && pass.exists(#SelectedValue))
        #    {
        #        if (pass.lookup(#SelectedValue) != '')
        #        {
        #            if (WHSInventStatus::find(pass.lookup(#SelectedValue)))
        #            {
        #                inventDim.InventStatusId = pass.lookup(#SelectedValue);
        #            }
        #            else
        #            {
        #                inventDim.InventStatusId = WHSInventStatus::findByName(pass.lookup(#SelectedValue)).InventStatusId;
        #            }
        #        }
        #        else
        #        {
        #            inventDim.InventStatusId = fromInventStatusId;
        #        }
        #    }
        #
        #    if (mode == WHSWorkExecuteMode::AdjustmentOut && pass.exists(#InventoryStatus))
        #    {
        #        if (pass.lookup(#InventoryStatus) != '')
        #        {
        #            inventDim.InventStatusId = pass.lookup(#InventoryStatus);
        #        }
        #        else
        #        {
        #            inventDim.InventStatusId = fromInventStatusId;
        #        }
        #    }
        #
        #    inventDim.InventBatchId = _inventBatchId;
        #
        #    inventDim = InventDim::findOrCreate(inventDim);
        #
        #    if (WHSInventOnHand::getWorkPhysicalInvent(itemId ? itemId : workLine.ItemId, inventDim.InventDimId) > 0)
        #    {
        #        ret = true;
        #    }
        #
        #    if (!ret && InventTable::find(itemId).whsAllowPhysNeg() && inventDim.wmsLocation().whsLocationProfile().AllowNegative)
        #    {
        #        ret = true;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #batchExpiryDate
        #private InventBatchExpDate batchExpiryDate()
        #{
        #    InventBatchExpDate batchExpDate = dateNull();
        #
        #    if (workLine.LoadLineRefRecId)
        #    {
        #        batchExpDate = InventMovement::construct(
        #                            WHSLoadLine::findbyRecId(workLine.LoadLineRefRecId).getOrderCommonFromLoadLine()).minAllowedExpiryDate();
        #    }
        #
        #    return batchExpDate;
        #}
      ENDSOURCE
      SOURCE #checkBatchSellableDays
        #/// <summary>
        #/// Verify that the batch number assigned to the work has a valid expiration date.
        #/// </summary>
        #/// <param name="_workLine">
        #/// The work line to check against.
        #/// </param>
        #/// <param name="_licensePlateId">
        #/// The license plate associated with the work.
        #/// </param>
        #/// <param name="_batchId">
        #/// The batch Id to verify.
        #/// </param>
        #/// <returns>
        #/// True if the batch expiration date is valid; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// This method will always return false if neither license plate nor batch are passed in.
        #/// </remarks>
        #private boolean checkBatchSellableDays(
        #    WHSWorkLine        _workLine,
        #    WHSLicensePlateId  _licensePlateId = '',
        #    inventBatchId      _batchId = '')
        #{
        #    #InventDimDevelop
        #    InventDim            inventDim;
        #    InventBatch          inventBatch;
        #    inventDim            productInventDim;
        #    boolean              ret = false;
        #    Qty                  validQty;
        #    Query                batchesQuery = new Query();
        #    QueryRun             batchesQR;
        #    QueryBuildDataSource inventDimDS, inventBatchDS;
        #    InventModelGroup     inventModelGroup;
        #    InventModelGroupItem inventModelGroupItem;
        #    date                 curDate = systemDateGet();
        #    CustAccount          custAccount = SalesTable::find(_workLine.whsWorkTable().OrderNum).CustAccount;
        #
        #    productInventDim.clearNotProductDim(InventDimGroupSetup::newItemId(_workLine.ItemId));
        #    productInventDim = inventDim::findOrCreate(productInventDim);
        #
        #    if (_batchId)
        #    {
        #        ret = InventBatch::pdsCheckExpiryDate(_batchId,
        #                                              _workLine.ItemId,
        #                                              curDate,
        #                                              false,
        #                                              custAccount,
        #                                              false,
        #                                              productInventDim);
        #    }
        #    else if (_licensePlateId)
        #    {
        #
        #        // Determine batch sort based on item model's pick criteria.
        #        select firstOnly PdsCheck, PdsPickCriteria from inventModelGroup
        #            exists join inventModelGroupItem
        #                where inventModelGroup.ModelGroupId == inventModelGroupItem.ModelGroupId
        #                    && inventModelGroupItem.ItemId == workLine.ItemId;
        #
        #        if (inventModelGroup.PdsCheck)
        #        {
        #            // Iterate over batches on the license plate to determine valid quantity.
        #            inventBatchDS = batchesQuery.addDataSource(tableNum(InventBatch));
        #            inventBatchDS.addSelectionField(fieldNum(InventBatch, inventBatchId));
        #            inventDimDS = inventBatchDS.addDataSource(tableNum(InventDim));
        #            inventDimDS.addLink(fieldNum(InventBatch, inventBatchId), fieldNum(inventDim, InventBatchId));
        #            inventDimDS.joinMode(JoinMode::InnerJoin);
        #            inventDimDS.fetchMode(QueryFetchMode::One2One);
        #            inventDimDS.addRange(fieldNum(inventDim, InventSizeId)).value(productInventDim.InventSizeId);
        #            inventDimDS.addRange(fieldNum(inventDim, InventColorId)).value(productInventDim.InventColorId);
        #            inventDimDS.addRange(fieldNum(inventDim, InventStyleId)).value(productInventDim.InventStyleId);
        #            inventDimDS.addRange(fieldNum(inventDim, ConfigId)).value(productInventDim.ConfigId);
        #            inventDimDS.addRange(fieldNum(inventDim, InventSiteId)).value(_workLine.whsWorkTable().InventSiteId);
        #            inventDimDS.addRange(fieldNum(inventDim, InventLocationId)).value(_workLine.whsWorkTable().InventLocationId);
        #            inventDimDS.addRange(fieldNum(inventDim, wmsLocationId)).value(_workLine.WmsLocationId);
        #            inventDimDS.addRange(fieldNum(inventDim, LicensePlateId)).value(_licensePlateId);
        #            inventDimDS.addRange(fieldNum(inventDim, inventBatchId)).value(SysQuery::valueNotEmptyString());
        #
        #            if (inventModelGroup.PdsCheck)
        #            {
        #                if (inventModelGroup.PdsPickCriteria == PdsPickCriteria::BestBeforeDate)
        #                {
        #                    inventBatchDS.addSortField(fieldNum(InventBatch, PdsBestBeforeDate), SortOrder::Descending);
        #                }
        #                if (inventModelGroup.PdsPickCriteria == PdsPickCriteria::ExpiryDate)
        #                {
        #                    inventBatchDS.addSortField(fieldNum(InventBatch, expDate), SortOrder::Descending);
        #                }
        #            }
        #
        #            batchesQR = new QueryRun(batchesQuery);
        #
        #            while (batchesQR.next())
        #            {
        #                inventBatch = batchesQR.get(tableNum(InventBatch));
        #                inventDim = batchesQR.get(tableNum(InventDim));
        #                if (InventBatch::pdsCheckExpiryDate(inventBatch.inventBatchId,
        #                                                    _workLine.ItemId,
        #                                                    curDate,
        #                                                    false,
        #                                                    custAccount,
        #                                                    false,
        #                                                    productInventDim))
        #                {
        #                    validQty += InventSum::findSum(_workLine.ItemId, inventDim, inventDim.toDimParm()).PhysicalInvent;
        #
        #                    if (validQty >= _workLine.InventQtyWork)
        #                    {
        #                        ret = true;
        #                        break;
        #                    }
        #                }
        #            }
        #        }
        #        else
        #        {
        #            ret = true;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkDecimals
        #/// <summary>
        #/// Determines if the number of decimals does not exceeed the allowed number of decimals for the item.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The current item id.
        #/// </param>
        #/// <param name="_qty">
        #/// The current qty.
        #/// </param>
        #/// <returns>
        #/// if exceed return false otherwise return true.
        #/// </returns>
        #public boolean checkDecimals(ItemId _itemId, Qty _qty)
        #{
        #    if (numOfDec(_qty) > InventTable::inventDecimals(_itemId))
        #    {
        #        return false;
        #    }
        #    else
        #    {
        #        return true;
        #    }
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #class WhsrfControlData
        #{
        #    #WHSRF
        #    #WHSWorkExecuteControlElements
        #    #WHSWorkExecuteDisplayCases
        #    #define.SortVerification(4)
        #
        #    WHSRFColorText                  colorText;
        #    ItemId                          itemId;
        #    Qty                             qty;
        #    Qty                             currentQty;
        #    WMSLocationId                   locationId;
        #    WHSLicensePlateId               licensePlateId;
        #    WHSLicensePlateId               targetLicensePlateId;
        #    UnitOfMeasureSymbol             uom;
        #    WHSWorkId                       workId;
        #    ProdId                          prodId;
        #    KanbanId                        kanbanId;
        #    KanbanCardId                    kanbanCardId;
        #    WMSCheckText                    checkDigit;
        #    WHSInventStatusId               fromInventStatusId;
        #    InventBatchId                   inventBatchId;
        #    InventSerialId                  inventSerialId;
        #    InventProfileId_RU              inventProfileId;
        #    InventOwnerId_RU                inventOwnerId;
        #    InventGTDId_RU                  inventGtdId;
        #    InventSiteId                    inventSiteId;
        #    InventLocationId                inventLocationId;
        #    EcoResItemColorName             inventColorId;
        #    EcoResItemSizeName              inventSizeId;
        #    EcoResItemStyleName             inventStyleId;
        #    EcoResItemConfigurationName     inventConfigId;
        #    WHSRFPassthrough                pass;
        #    WHSRFPassthrough                fieldValues;
        #    WHSWorkLine                     workLine;
        #    WHSWorkExecuteMode              mode;
        #    int                             step;
        #    str                             errorMessage;
        #    PurchId                         purchId;
        #    InventTransferId                transferId;
        #    TradeLineNumber                 poLineNum;
        #    LineNumber                      toLineNum;
        #    NoYes                           defaulting;
        #    WHSMenuItemName                 menuItemName;
        #    Qty                             cycleCountQty1;
        #    Qty                             cycleCountQty2;
        #    Qty                             cycleCountQty3;
        #    Qty                             cycleCountQty4;
        #    Qty                             batchQty;
        #    Qty                             qtyToScrap;
        #    boolean                         saveUOMValue;
        #}
      ENDSOURCE
      SOURCE #findCarrierByName
        #TMSCarrier findCarrierByName(TMSName _name)
        #{
        #    TMSCarrier  carrier;
        #
        #    select carrier
        #        where carrier.Name == _name;
        #
        #    return carrier;
        #}
      ENDSOURCE
      SOURCE #findInventDimId
        #InventDimId findInventDimId(boolean _overrideLoc = false)
        #{
        #    InventDim       inventDim;
        #
        #    this.initInventDimProductDimFromMembers(inventDim);
        #    this.initInventDimStorageDimFromMembers(inventDim);
        #    this.initInventDimTrackingDimFromMembers(inventDim);
        #
        #    if (!inventDim.wmsLocationId
        #    ||  _overrideLoc)
        #    {
        #        inventDim.wmsLocationId = this.findLocationByLicensePlate(licensePlateId);
        #    }
        #
        #    inventDim = InventDim::findOrCreate(inventDim);
        #
        #    return inventDim.InventDimId;
        #}
      ENDSOURCE
      SOURCE #findInventDimIdProduct
        #private InventDimId findInventDimIdProduct()
        #{
        #    InventDim   inventDimProduct;
        #
        #    // take the product dimensions from the pass...
        #    inventDimProduct = this.initInventDimProductFromPass();
        #    // ... and if anything is missing, get it from what is present on the screen
        #    this.initInventDimProductDimFromMembers(inventDimProduct);
        #
        #    inventDimProduct = InventDim::findOrCreate(inventDimProduct);
        #
        #    return inventDimProduct.InventDimId;
        #}
      ENDSOURCE
      SOURCE #findLocationByLicensePlate
        #/// <summary>
        #/// Finds location of license plate
        #/// </summary>
        #/// <param name="_licensePlateId">
        #/// License plate ID.
        #/// </param>
        #/// <returns>
        #/// The warehouse location ID.
        #/// </returns>
        #WMSLocationId findLocationByLicensePlate(WHSLicensePlateId  _licensePlateId)
        #{
        #    InventDim       inventDim;
        #    InventSum       inventSum;
        #
        #    select firstonly wmsLocationId from inventDim
        #        join InventDimId, PhysicalInvent from inventSum
        #        where inventDim.InventDimId         == inventSum.InventDimId    &&
        #              inventDim.InventLocationId    == inventLocationId         &&
        #              inventDim.InventSiteId        == inventSiteId             &&
        #              inventDim.LicensePlateId   == _licensePlateId          &&
        #              inventSum.PhysicalInvent       > 0;
        #
        #    return inventDim.wmsLocationId;
        #}
      ENDSOURCE
      SOURCE #findLocationByNestedPlate
        #/// <summary>
        #/// Finds location of nested license plate
        #/// </summary>
        #/// <param name="_licensePlateId">
        #/// License plate ID.
        #/// </param>
        #/// <returns>
        #/// The warehouse location ID.
        #/// </returns>
        #WMSLocationId findLocationByNestedPlate(WHSLicensePlateId   _licensePlateId)
        #{
        #    WHSLicensePlate childLicensePlate;
        #    InventDim       inventDim;
        #    InventSum       inventSum;
        #    WMSLocationId   ret;
        #
        #    ttsbegin;
        #
        #    while select LicensePlateId from childLicensePlate
        #        where childLicensePlate.LicensePlateParent   == _licensePlateId
        #    {
        #        select firstonly wmsLocationId from inventDim
        #            join InventDimId, PhysicalInvent from inventSum
        #            where inventDim.InventDimId         == inventSum.InventDimId                &&
        #                  inventDim.LicensePlateId      == childLicensePlate.LicensePlateId  &&
        #                  inventSum.PhysicalInvent       > 0;
        #
        #        if (inventDim.wmsLocationId)
        #        {
        #            ret = inventDim.wmsLocationId;
        #            break;
        #        }
        #        else
        #        {
        #            ret = this.findLocationByNestedPlate(childLicensePlate.LicensePlateId);
        #
        #            if (ret)
        #            {
        #                break;
        #            }
        #        }
        #    }
        #
        #    ttscommit;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getBatchId
        #private str getBatchId()
        #{
        #    return this.getValueFromInventDimField(fieldNum(InventDim, InventBatchId));
        #}
      ENDSOURCE
      SOURCE #getCheckDigit
        #private str getCheckDigit()
        #{
        #    str     ret;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getClusterPickQty
        #private Qty getClusterPickQty()
        #{
        #    #WHSBuildQty
        #    WHSWorkClusterLine  workClusterLine;
        #    WHSWorkLine         pickWorkLine;
        #    InventDim           inventDim;
        #    InventDimParm       inventDimParm;
        #    ItemId              currentItemId;
        #    Qty                 clusterPickQty;
        #    container           buildQty;
        #    int                 i;
        #
        #    currentItemId = pass.lookupStr(#ItemId);
        #    inventDimParm = WHSReservationHierarchyInventDimUtil::initInventDimParmAboveLocation(InventTable::find(currentItemId));
        #
        #    select sum(InventQtyRemain) from pickWorkLine
        #        exists join workClusterLine
        #        where pickWorkLine.WorkId           == workClusterLine.WorkId
        #        &&    pickWorkLine.WorkType         == WHSWorkType::Pick
        #        &&    pickWorkLine.wmsLocationId    == pass.lookupStr(#WMSLocationId)
        #        &&    pickWorkLine.ItemId           == currentItemId
        #        &&    workClusterLine.ClusterId     == pass.lookupStr(#ClusterId)
        #        #InventDimExistsJoin(pickWorkLine.InventDimId, inventDim, pass.createInventDimFromPass(), inventDimParm);
        #
        #    buildQty = WHSInventTable::buildQty(currentItemId, pickWorkLine.InventQtyRemain, InventTableModule::find(currentItemId, ModuleInventPurchSales::Invent).UnitId);
        #    for (i = conLen(buildQty); i > 0; --i)
        #    {
        #        clusterPickQty = conPeek(conPeek(buildQty, i), #BuildQtyQty);
        #
        #        if(!frac(clusterPickQty))
        #        {
        #            break;
        #        }
        #    }
        #
        #    return clusterPickQty;
        #}
      ENDSOURCE
      SOURCE #getColorId
        #private str getColorId()
        #{
        #    return this.getValueFromInventDimField(fieldNum(InventDim, InventColorId));
        #}
      ENDSOURCE
      SOURCE #getConfigId
        #private str getConfigId()
        #{
        #    return this.getValueFromInventDimField(fieldNum(InventDim, ConfigId));
        #}
      ENDSOURCE
      SOURCE #getCurrentQty
        #private Qty getCurrentQty()
        #{
        #    Qty     ret;
        #
        #    if (itemId && (locationId || licensePlateId))
        #    {
        #        ret = WHSInventOnHand::onHandQty(itemId, this.findInventDimId());
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getDefaultValue
        #private WHSDefaultDataValue getDefaultValue(WHSDefaultDataField _defaultDataField)
        #{
        #    WHSDefaultDataValue defaultDataValue = '';
        #
        #    if (defaulting)
        #    {
        #        defaultDataValue = WHSRFDefaultData::getDefaultValue(menuItemName,
        #                                                            _defaultDataField,
        #                                                            pass.lookup(#UserId),
        #                                                            inventLocationId,
        #                                                            locationId);
        #    }
        #
        #    return defaultDataValue;
        #}
      ENDSOURCE
      SOURCE #getGtdId
        #private str getGtdId()
        #{
        #    return this.getValueFromInventDimField(fieldNum(InventDim, InventGtdId_RU));
        #}
      ENDSOURCE
      SOURCE #getInventStatusId
        #private WHSInventStatusId getInventStatusId()
        #{
        #    InventDim           inventDim;
        #    InventSum           inventSum;
        #    InventDim           inventDimCriteria;
        #    InventDimParm       inventDimParm;
        #    WHSDefaultDataValue defaultDataValue;
        #
        #    inventDimParm.setAllProductDimensions();
        #    this.initInventDimProductDimFromMembers(inventDimCriteria);
        #
        #    ttsbegin;
        #
        #    if (pass.lookupStr(#FromInventoryStatus) == '')
        #    {
        #        defaultDataValue = this.getDefaultValue(WHSDefaultDataField::FromInventStatus);
        #        if (defaultDataValue)
        #        {
        #            inventDimCriteria.InventStatusId = WHSInventStatus::find(defaultDataValue).Name;
        #            inventDimParm.InventStatusFlag = NoYes::Yes;
        #        }
        #    }
        #
        #    if (licensePlateId)
        #    {
        #        #InventDimSelect(inventDim, inventDimCriteria, inventDimParm) &&
        #            inventDim.LicensePlateId       == licensePlateId          &&
        #            inventDim.InventSiteId         == inventSiteId            &&
        #            inventDim.InventLocationId     == inventLocationId
        #            exists join inventSum
        #            where inventSum.InventDimId    == inventDim.InventDimId   &&
        #                  inventSum.PhysicalInvent  > 0;
        #    }
        #    else if (locationId)
        #    {
        #        inventDimParm.setAllTrackingDimensions();
        #        this.initInventDimTrackingDimFromMembers(inventDimCriteria);
        #
        #        #InventDimSelect(inventDim, inventDimCriteria, inventDimParm) &&
        #            inventDim.wmsLocationId        == locationId              &&
        #            inventDim.InventSiteId         == inventSiteId            &&
        #            inventDim.InventLocationId     == inventLocationId
        #            exists join inventSum
        #            where inventSum.InventDimId    == inventDim.InventDimId   &&
        #                  inventSum.PhysicalInvent  > 0                       &&
        #                  inventSum.ItemId         == itemId;
        #    }
        #
        #    ttscommit;
        #
        #    return inventDim.InventStatusId;
        #}
      ENDSOURCE
      SOURCE #getItemId
        #private ItemId getItemId()
        #{
        #    InventDim           inventDim;
        #    InventSum           inventSum;
        #    ItemId              tmpItemId;
        #    str                 ret;
        #
        #    ttsbegin;
        #
        #    if (licensePlateId)
        #    {
        #        select inventSum
        #            join inventDim
        #            where inventSum.InventDimId         == inventDim.InventDimId    &&
        #                  inventDim.LicensePlateId      == licensePlateId           &&
        #                  inventDim.InventSiteId        == inventSiteId             &&
        #                  inventDim.InventLocationId    == inventLocationId         &&
        #                  inventSum.PhysicalInvent       > 0;
        #    }
        #    else if (locationId)
        #    {
        #        select inventSum
        #            join InventDimId, wmsLocationId, InventSiteId, InventLocationId from  inventDim
        #            where inventSum.InventDimId         == inventDim.InventDimId    &&
        #                  inventDim.wmsLocationId       == locationId               &&
        #                  inventDim.InventSiteId        == inventSiteId             &&
        #                  inventDim.InventLocationId    == inventLocationId         &&
        #                  inventSum.PhysicalInvent       > 0;
        #    }
        #
        #    while (inventSum)
        #    {
        #        if (tmpItemId != '' && tmpItemId != inventSum.ItemId)
        #        {
        #            ret = '';
        #            break;
        #        }
        #        else
        #        {
        #            ret = inventSum.ItemId;
        #        }
        #
        #        tmpItemId = inventSum.ItemId;
        #        next inventSum;
        #    }
        #
        #    ttscommit;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getKanbanItemId
        #/// <summary>
        #///    Retrieves the item ID of the kanban.
        #/// </summary>
        #/// <returns>
        #///    The item ID od the kanban.
        #/// </returns>
        #private ItemId getKanbanItemId()
        #{
        #    ItemId  kanbanItemId;
        #
        #    if (kanbanId)
        #    {
        #        kanbanItemId = Kanban::findKanbanId(kanbanId).ItemId;
        #    }
        #
        #    return kanbanItemId;
        #}
      ENDSOURCE
      SOURCE #getKanbanQty
        #/// <summary>
        #///    Retrieves the process quantity of the kanban.
        #/// </summary>
        #/// <returns>
        #///    The process quantity of the kanban.
        #/// </returns>
        #private InventQty getKanbanQty()
        #{
        #    Kanban      kanban;
        #    KanbanJob   kanbanJob;
        #    InventQty   inventQty;
        #
        #    if (kanbanId)
        #    {
        #        kanban    = Kanban::findKanbanId(kanbanId);
        #        kanbanJob = kanban.lastKanbanJob();
        #        inventQty = kanbanJob.QuantityOrdered;
        #    }
        #
        #    return inventQty;
        #}
      ENDSOURCE
      SOURCE #getKanbanUOM
        #/// <summary>
        #///    Retrieves the inventory unit of measure for the kanban item.
        #/// </summary>
        #/// <returns>
        #///    The inventory unit of measure for the kanban item.
        #/// </returns>
        #private str getKanbanUOM()
        #{
        #    InventUnitId    unitId;
        #    ItemId          kanbanItemId;
        #
        #    if (   itemId
        #        || kanbanId)
        #    {
        #        kanbanItemId = itemId ? itemId : Kanban::findKanbanId(kanbanId).ItemId;
        #        unitId       = InventTableModule::find(kanbanItemId,ModuleInventPurchSales::Invent).UnitId;
        #    }
        #
        #    return unitId;
        #}
      ENDSOURCE
      SOURCE #getLicensePlateId
        #private str getLicensePlateId()
        #{
        #    WHSLicensePlateId   tmpLicensePlateId;
        #    InventDim           inventDim;
        #    InventSum           inventSum;
        #    str                 ret;
        #
        #    if (locationId && itemId)
        #    {
        #        while select  inventDim
        #            join inventSum
        #            where inventDim.InventDimId         == inventSum.InventDimId    &&
        #                  inventDim.wmsLocationId       == locationId               &&
        #                  inventDim.InventSiteId        == inventSiteId             &&
        #                  inventDim.InventLocationId    == inventLocationId         &&
        #                  inventSum.ItemId              == itemId                   &&
        #                  inventSum.PhysicalInvent       > 0                        &&
        #                 inventDim.LicensePlateId      != ''
        #        {
        #            if (tmpLicensePlateId != '' && tmpLicensePlateId != inventDim.LicensePlateId)
        #            {
        #                ret = '';
        #                break;
        #            }
        #            else
        #            {
        #                ret = inventDim.LicensePlateId;
        #            }
        #
        #            tmpLicensePlateId = inventDim.LicensePlateId;
        #        }
        #    }
        #    else if (locationId)
        #    {
        #        while select LicensePlateId from inventDim
        #            join InventDimId, PhysicalInvent from inventSum
        #            where inventSum.InventDimId         == inventDim.InventDimId    &&
        #                  inventDim.wmsLocationId       == locationId               &&
        #                  inventDim.InventSiteId        == inventSiteId             &&
        #                  inventDim.InventLocationId    == inventLocationId         &&
        #                  inventSum.PhysicalInvent       > 0                        &&
        #                  inventDim.LicensePlateId   != ''
        #        {
        #            if (tmpLicensePlateId != '' && tmpLicensePlateId != inventDim.LicensePlateId)
        #            {
        #                ret = '';
        #                break;
        #            }
        #            else
        #            {
        #                ret = inventDim.LicensePlateId;
        #            }
        #
        #            tmpLicensePlateId = inventDim.LicensePlateId;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getLineNumByItem
        #/// <summary>
        #///    Returns the line number tied to a purchase order line depending on ordered or registered qty
        #/// </summary>
        #/// <param name="_purchId">
        #///    Purchase order number used to return line number
        #/// </param>
        #/// <param name="_itemId">
        #///    Item id used to return line number
        #/// </param>
        #/// <param name="_itemInventDim">
        #///    InventDim record to compare the product variants
        #/// </param>
        #/// <returns>
        #///    Purchase order line number
        #/// </returns>
        #public TradeLineNumber getLineNumByItem(PurchId    _purchId,
        #                                        ItemId     _itemId,
        #                                        InventDim  _itemInventDim = null)
        #{
        #    PurchLine           purchLine;
        #    InventTrans         inventTrans;
        #    InventTransOrigin   inventTransOrigin;
        #    InventQty           purchaseQty;
        #    TradeLineNumber     ret;
        #    InventDim           inventDim;
        #    InventDimParm       inventDimParm;
        #    EcoResReleasedProductUnitConverter  unitConverter;
        #
        #    unitConverter = EcoResReleasedProductUnitConverter::construct();
        #
        #    if (_itemInventDim.anyProductDimensionSpecified())
        #    {
        #        inventDimParm.initProductDimensionsAllGroups();
        #
        #        select firstonly LineNumber from purchLine
        #            where purchLine.PurchId                 == _purchId
        #                && purchLine.ItemId                 == _itemId
        #        exists join inventTransOrigin
        #            where inventTransOrigin.InventTransId   == purchLine.InventTransId
        #        exists join inventTrans
        #            where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
        #                && inventTrans.StatusReceipt        == StatusReceipt::Ordered
        #                && inventTrans.Qty                  >  0
        #        #InventDimExistsJoinNoField(purchLine.InventDimId, inventDim, _itemInventDim, inventDimParm);
        #
        #        ret = purchLine.LineNumber;
        #
        #        if (!ret)
        #        {
        #            while select LineNumber, PurchQty, OverDeliveryPct, PurchUnit from purchLine
        #                group by LineNumber, PurchQty, OverDeliveryPct, PurchUnit
        #                where purchLine.PurchId                 == _purchId
        #                    && purchLine.ItemId                 == _itemId
        #            exists join inventTransOrigin
        #                where inventTransOrigin.InventTransId   == purchLine.InventTransId
        #            join InventTransOrigin, ItemId, sum(Qty) from inventTrans
        #                group by InventTransOrigin, ItemId
        #                where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
        #                    && inventTrans.StatusReceipt        == StatusReceipt::Registered
        #                    && inventTrans.Qty                  >  0
        #                #InventDimExistsJoinNoField(purchLine.InventDimId, inventDim, _itemInventDim, inventDimParm)
        #            {
        #                purchaseQty = unitConverter.convert(inventTrans.Qty,
        #                                                UnitOfMeasure::findBySymbol(inventTrans.inventUnit()).RecId,
        #                                                UnitOfMeasure::findBySymbol(purchLine.PurchUnit).RecId,
        #                                                NoYes::No,
        #                                                inventTrans.ItemId,
        #                                                inventTrans.inventDimId,
        #                                                NoYes::No);
        #
        #                if (purchaseQty < (purchLine.PurchQty * purchLine.OverDeliveryPct / 100 + purchLine.PurchQty))
        #                {
        #                    ret = purchLine.LineNumber;
        #                    break;
        #                }
        #            }
        #        }
        #    }
        #    else
        #    {
        #        select firstonly LineNumber from purchLine
        #            where purchLine.PurchId                 == _purchId
        #                && purchLine.ItemId                 == _itemId
        #        exists join inventTransOrigin
        #            where inventTransOrigin.InventTransId   == purchLine.InventTransId
        #        exists join inventTrans
        #            where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
        #                && inventTrans.StatusReceipt        == StatusReceipt::Ordered
        #                && inventTrans.Qty                  >  0;
        #
        #        ret = purchLine.LineNumber;
        #
        #        if (!ret)
        #        {
        #            while select LineNumber, PurchQty, OverDeliveryPct, PurchUnit from purchLine
        #                group by LineNumber, PurchQty, OverDeliveryPct, PurchUnit
        #                where purchLine.PurchId                 == _purchId
        #                    && purchLine.ItemId                 == _itemId
        #            exists join inventTransOrigin
        #                where inventTransOrigin.InventTransId   == purchLine.InventTransId
        #            join InventTransOrigin, ItemId, sum(Qty) from inventTrans
        #                group by InventTransOrigin, ItemId
        #                where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
        #                    && inventTrans.StatusReceipt        == StatusReceipt::Registered
        #                    && inventTrans.Qty                  >  0
        #            {
        #                purchaseQty = unitConverter.convert(inventTrans.Qty,
        #                                                UnitOfMeasure::findBySymbol(inventTrans.inventUnit()).RecId,
        #                                                UnitOfMeasure::findBySymbol(purchLine.PurchUnit).RecId,
        #                                                NoYes::No,
        #                                                inventTrans.ItemId,
        #                                                inventTrans.inventDimId,
        #                                                NoYes::No);
        #
        #                if (purchaseQty < (purchLine.PurchQty * purchLine.OverDeliveryPct / 100 + purchLine.PurchQty))
        #                {
        #                    ret = purchLine.LineNumber;
        #                    break;
        #                }
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #getLocationId
        #private str getLocationId()
        #{
        #    str     ret;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getOrigInventBatchId
        #/// <summary>
        #///     Retrieves the originally selected inventory batch ID.
        #/// </summary>
        #/// <returns>
        #///     Returns the originally selected inventory batch ID.
        #/// </returns>
        #protected InventBatchId getOrigInventBatchId()
        #{
        #    InventBatchId   origInventBatchId;
        #
        #    if (pass.hasValue(#SessionBatchId))
        #    {
        #        origInventBatchId = pass.lookup(#SessionBatchId);
        #    }
        #    else if (pass.hasValue(#BatchId))
        #    {
        #        origInventBatchId = pass.lookup(#BatchId);
        #    }
        #    else
        #    {
        #        switch (mode)
        #        {
        #            case WHSWorkExecuteMode::PurchaseOrderItemReceiving:
        #            case WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate:
        #            case WHSWorkExecuteMode::PurchaseOrderLineReceiving:
        #            case WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate:
        #            case WHSWorkExecuteMode::LoadItemReceiving:
        #            case WHSWorkExecuteMode::LoadItemReceivingAndLocate:
        #                origInventBatchId = PurchLine::find(pass.lookup(#PONum), pass.lookup(#POLineNum)).inventDim().InventBatchId;
        #                break;
        #            case WHSWorkExecuteMode::ReportAsFinished:
        #            case WHSWorkExecuteMode::ReportAsFinishedAndLocate:
        #                origInventBatchId = ProdTable::find(pass.lookup(#ProdId)).inventDim().InventBatchId;
        #                break;
        #            default:
        #                break;
        #        }
        #    }
        #
        #    return origInventBatchId;
        #}
      ENDSOURCE
      SOURCE #getOwnerId
        #private str getOwnerId()
        #{
        #    return this.getValueFromInventDimField(fieldNum(InventDim, InventOwnerId_RU));
        #}
      ENDSOURCE
      SOURCE #getPhysicalInventQty
        #private InventQty getPhysicalInventQty()
        #{
        #    InventQty   ret;
        #
        #    if (this.isLPControlWithLPOrNotLPControlWithoutLP())
        #    {
        #        ret = InventOnhandQty::newParameters(itemId, InventDim::find(this.findInventDimId())).physicalInvent();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getProdId
        #private str getProdId()
        #{
        #    str     ret;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getProdItemId
        #private ItemId getProdItemId()
        #{
        #    return ProdTable::find(prodId).ItemId;
        #}
      ENDSOURCE
      SOURCE #getProdUOM
        #private str getProdUOM()
        #{
        #    return InventTableModule::find(itemId, ModuleInventPurchSales::Invent).UnitId;
        #}
      ENDSOURCE
      SOURCE #getProfileId
        #private str getProfileId()
        #{
        #    return this.getValueFromInventDimField(fieldNum(InventDim, InventProfileId_RU));
        #}
      ENDSOURCE
      SOURCE #getPurchItemId
        #[SysObsoleteAttribute('', true)]
        #private ItemId getPurchItemId()
        #{
        #    throw error(Error::wrongUseOfFunction(funcName()));
        #}
      ENDSOURCE
      SOURCE #getPurchQty
        #[SysObsoleteAttribute('', true)]
        #private PurchQty getPurchQty()
        #{
        #    throw error(Error::wrongUseOfFunction(funcName()));
        #}
      ENDSOURCE
      SOURCE #getPurchUOM
        #private str getPurchUOM()
        #{
        #    str     ret;
        #
        #    if (defaulting)
        #    {
        #        ret = WHSRFDefaultData::getDefaultValue(menuItemName,
        #                                                WHSDefaultDataField::UOM,
        #                                                pass.lookup(#UserId),
        #                                                inventLocationId,
        #                                                locationId);
        #
        #        this.processControl(#UOM, uom);
        #        fieldValues.insert(#SelectedValueUOM, ret);
        #    }
        #    else
        #    {
        #        ret = PurchLine::find(purchId, poLineNum).PurchUnit;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getQty
        #private InventQty getQty()
        #{
        #    InventQty   ret;
        #
        #    if (this.isLPControlWithLPOrNotLPControlWithoutLP())
        #    {
        #        ret = WHSInventOnHand::getPhysicalAvailQty(itemId, InventDim::find(this.findInventDimId()), true, true);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getSerialId
        #private str getSerialId()
        #{
        #    return this.getValueFromInventDimField(fieldNum(InventDim, InventSerialId));
        #}
      ENDSOURCE
      SOURCE #getSizeId
        #private str getSizeId()
        #{
        #    return this.getValueFromInventDimField(fieldNum(InventDim, InventSizeId));
        #}
      ENDSOURCE
      SOURCE #getStyleId
        #private str getStyleId()
        #{
        #    return this.getValueFromInventDimField(fieldNum(InventDim, InventStyleId));
        #}
      ENDSOURCE
      SOURCE #getTOLineNumByItem
        #LineNum getTOLineNumByItem(InventTransferId _transferId,
        #                           ItemId           _itemId)
        #{
        #    InventTransferLine  transferLine;
        #    InventTrans         inventTrans;
        #    InventTransOrigin   inventTransOrigin;
        #
        #    select firstonly LineNum from transferLine
        #        join ReferenceId, InventTransId, ReferenceCategory, RecId from inventTransOrigin
        #        join InventTransOrigin, StatusReceipt, Qty from inventTrans
        #        where transferLine.TransferId               ==  inventTransOrigin.ReferenceId           &&
        #              transferLine.InventTransIdReceive     ==  inventTransOrigin.InventTransId         &&
        #              transferLine.TransferId               ==  _transferId                             &&
        #              transferLine.ItemId                   ==  _itemId                                 &&
        #              inventTransOrigin.ReferenceCategory   ==  InventTransType::TransferOrderReceive   &&
        #              inventTransOrigin.RecId               == inventTrans.InventTransOrigin            &&
        #              inventTrans.StatusReceipt             ==  StatusReceipt::Ordered                  &&
        #              inventTrans.Qty                        >   0;
        #
        #
        #    return transferLine.LineNum;
        #}
      ENDSOURCE
      SOURCE #getTransferUOM
        #private str getTransferUOM()
        #{
        #    str  ret;
        #
        #    ret = InventTransferLine::find(transferId, toLineNum).UnitId;
        #
        #    if (defaulting)
        #    {
        #        ret = WHSRFDefaultData::getDefaultValue(menuItemName,
        #                                                WHSDefaultDataField::UOM,
        #                                                pass.lookup(#UserId),
        #                                                inventLocationId,
        #                                                locationId);
        #
        #        this.processControl(#UOM, uom);
        #        fieldValues.insert(#SelectedValueUOM, ret);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getUOM
        #private str getUOM()
        #{
        #    return workLine.UnitId ? workLine.UnitId : InventTableModule::find(itemId, ModuleInventPurchSales::Invent).UnitId;
        #}
      ENDSOURCE
      SOURCE #getValueFromInventDimField
        #/// <summary>
        #///     Gets a value from inventDim field.
        #/// </summary>
        #/// <param name="_dimFieldId">
        #///     Field ID.
        #/// </param>
        #/// <returns>
        #///     Field value.
        #/// </returns>
        #protected str getValueFromInventDimField(FieldId _dimFieldId)
        #{
        #    InventDim               inventDimReturnValue;
        #    Query                   query;
        #    QueryRun                queryRun;
        #    QueryBuildDataSource    qbdsInventDim;
        #    QueryBuildDataSource    qbdsInventSum;
        #    Counter                 counter;
        #    Common                  queryResult;
        #    str                     dimFieldName;
        #
        #    if (itemId && (locationId || licensePlateId))
        #    {
        #        query = new Query();
        #
        #        qbdsInventDim = query.addDataSource(tableNum(InventDim));
        #        qbdsInventDim.addGroupByField(_dimFieldId);
        #        qbdsInventDim.addSelectionField(_dimFieldId);
        #
        #        if (locationId)
        #        {
        #            qbdsInventDim.addRange(fieldNum(InventDim, wmsLocationId)).value(queryValue(locationId));
        #        }
        #        qbdsInventDim.addRange(_dimFieldId).value(SysQuery::valueNotEmptyString());
        #        qbdsInventDim.addRange(fieldNum(InventDim, LicensePlateId)).value(queryValue(licensePlateId));
        #        qbdsInventDim.addRange(fieldNum(InventDim, InventSiteId)).value(queryValue(inventSiteId));
        #        qbdsInventDim.addRange(fieldNum(InventDim, InventLocationId)).value(queryValue(inventLocationId));
        #
        #        qbdsInventSum = qbdsInventDim.addDataSource(tableNum(InventSum));
        #        qbdsInventSum.joinMode(JoinMode::ExistsJoin);
        #        qbdsInventSum.relations(true);
        #
        #        qbdsInventSum.addRange(fieldNum(InventSum, ItemId)).value(queryValue(itemId));
        #        qbdsInventSum.addRange(fieldNum(InventSum, PhysicalInvent)).value('>0');
        #
        #        queryRun = new QueryRun(query);
        #        while (queryRun.next() && counter < 2)
        #        {
        #            queryResult  = queryRun.get(tableNum(InventDim));
        #            dimFieldName = fieldId2name(tableNum(InventDim), _dimFieldId);
        #            inventDimReturnValue.(_dimFieldId) = queryResult.getFieldValue(dimFieldName);
        #            counter++;
        #            if (counter == 2)
        #            {
        #                inventDimReturnValue.clear();
        #            }
        #        }
        #    }
        #
        #    return inventDimReturnValue.(_dimFieldId);
        #}
      ENDSOURCE
      SOURCE #getWorkId
        #private WHSWorkId getWorkId()
        #{
        #    return workLine.WorkId;
        #}
      ENDSOURCE
      SOURCE #initInventDimFromDimensionsList
        #private void initInventDimFromDimensionsList(InventDim _inventDim, List _dimensions)
        #{
        #    ListEnumerator enumerator = _dimensions.getEnumerator();
        #    str            fieldName;
        #    str            fieldValue;
        #
        #    while (enumerator.moveNext())
        #    {
        #        fieldName  = conPeek(enumerator.current(), 1);
        #        fieldValue = conPeek(enumerator.current(), 2);
        #        if (!_inventDim.getFieldValue(fieldName))
        #        {
        #            _inventDim.setFieldValue(fieldName, fieldValue);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #initInventDimProductDimFromMembers
        #private void initInventDimProductDimFromMembers(InventDim _inventDim)
        #{
        #    #InventDimDevelop()
        #
        #    List dimensions = new List(Types::Container);
        #
        #    dimensions.addEnd([#ColorId,  inventColorId]);
        #    dimensions.addEnd([#ConfigId, inventConfigId]);
        #    dimensions.addEnd([#SizeId,   inventSizeId]);
        #    dimensions.addEnd([#StyleId,  inventStyleId]);
        #
        #    this.initInventDimFromDimensionsList(_inventDim, dimensions);
        #}
      ENDSOURCE
      SOURCE #initInventDimProductFromPass
        #private InventDim initInventDimProductFromPass()
        #{
        #    InventDim   inventDimProduct;
        #
        #    #InventDimDevelop
        #
        #    if (pass.exists(#ColorId))
        #    {
        #        inventDimProduct.InventColorId = pass.lookup(#ColorId);
        #    }
        #    if (pass.exists(#SizeId))
        #    {
        #        inventDimProduct.InventSizeId = pass.lookup(#SizeId);
        #    }
        #    if (pass.exists(#ConfigId))
        #    {
        #        inventDimProduct.configId = pass.lookup(#ConfigId);
        #    }
        #    if (pass.exists(#StyleId))
        #    {
        #        inventDimProduct.InventStyleId = pass.lookup(#StyleId);
        #    }
        #
        #    return inventDimProduct;
        #}
      ENDSOURCE
      SOURCE #initInventDimStorageDimFromMembers
        #private void initInventDimStorageDimFromMembers(InventDim _inventDim)
        #{
        #    #InventDimDevelop()
        #
        #    List dimensions = new List(Types::Container);
        #
        #    dimensions.addEnd([#InventSiteId,     inventSiteId]);
        #    dimensions.addEnd([#InventLocationId, inventLocationId]);
        #    dimensions.addEnd([#WMSLocationId,    locationId]);
        #    dimensions.addEnd([#LicensePlateId,   licensePlateId]);
        #    dimensions.addEnd([#InventoryStatus,  fromInventStatusId]);
        #
        #    this.initInventDimFromDimensionsList(_inventDim, dimensions);
        #}
      ENDSOURCE
      SOURCE #initInventDimTrackingDimFromMembers
        #private void initInventDimTrackingDimFromMembers(InventDim _inventDim)
        #{
        #    #InventDimDevelop()
        #
        #    List dimensions = new List(Types::Container);
        #
        #    dimensions.addEnd([#BatchId,      inventBatchId]);
        #    dimensions.addEnd([#SerialId,     inventSerialId]);
        #    dimensions.addEnd([#ProfileId_RU, inventProfileId]);
        #    dimensions.addEnd([#OwnerId_RU,   inventOwnerId]);
        #    dimensions.addEnd([#GtdId_RU,     inventGtdId]);
        #
        #    this.initInventDimFromDimensionsList(_inventDim, dimensions);
        #}
      ENDSOURCE
      SOURCE #isLPControlWithLPOrNotLPControlWithoutLP
        #private boolean isLPControlWithLPOrNotLPControlWithoutLP()
        #{
        #    boolean ret = false;
        #    boolean lpControlled;
        #
        #    if (itemId && locationId)
        #    {
        #        lpControlled = WMSLocation::find(locationId, inventLocationId).whsLocationIsLPControlled();
        #
        #        if ((!lpControlled && !licensePlateId) || (lpControlled && licensePlateId))
        #        {
        #            ret = true;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isPurchaseOrderLineOnMoreThanOneLoad
        #private boolean isPurchaseOrderLineOnMoreThanOneLoad(InventTransId _purchLineInventTransId)
        #{
        #    WHSLoadLine loadLine;
        #
        #    select count(RecId) from loadLine
        #        where loadLine.InventTransId == _purchLineInventTransId
        #            && loadLine.InventTransType == InventTransType::Purch;
        #
        #    return (loadLine.RecId > 1);
        #}
      ENDSOURCE
      SOURCE #loadItemReceivingPurchLineProvider
        #private WHSLoadItemReceivingPurchLineProvider loadItemReceivingPurchLineProvider(
        #    WHSLoadId   _loadId,
        #    ItemId      _itemId,
        #    InventDim   _productInventDim = null,
        #    PurchId     _purchId = '')
        #{
        #    return WHSLoadItemReceivingPurchLineProvider::newFromParameters(
        #                                                    _loadId,
        #                                                    _itemId,
        #                                                    _productInventDim,
        #                                                    _purchId);
        #}
      ENDSOURCE
      SOURCE #new
        #void new()
        #{
        #    fieldValues = new WHSRFPassthrough(Types::String, Types::String);
        #    colorText = WHSRFColorText::Error;
        #}
      ENDSOURCE
      SOURCE #parmDefaulting
        #NoYes parmDefaulting(NoYes _defaulting = defaulting)
        #{
        #    defaulting = _defaulting;
        #
        #    return defaulting;
        #}
      ENDSOURCE
      SOURCE #parmFieldValues
        #WHSRFPassthrough parmFieldValues(WHSRFPassthrough _fieldValues = null)
        #{
        #    if (_fieldValues)
        #    {
        #        fieldValues = _fieldValues;
        #    }
        #
        #    return fieldValues;
        #}
      ENDSOURCE
      SOURCE #parmInventLocationId
        #InventLocationId parmInventLocationId(InventLocationId _inventLocationId)
        #{
        #    inventLocationId = _inventLocationId;
        #
        #    fieldValues.insert(#InventLocationId, inventLocationId);
        #
        #    return inventLocationId;
        #}
      ENDSOURCE
      SOURCE #parmInventoryStatusSelectedOnControl
        #[SysObsoleteAttribute('This method is not used any more', true)]
        #private WHSInventStatusId parmInventoryStatusSelectedOnControl(WHSInventStatusId _inventoryStatusSelectedOnControl)
        #{
        #    return _inventoryStatusSelectedOnControl;
        #}
      ENDSOURCE
      SOURCE #parmInventSiteId
        #InventSiteId parmInventSiteId(InventSiteId  _inventSiteId)
        #{
        #    inventSiteId = _inventSiteId;
        #
        #    fieldValues.insert(#InventSiteId, inventSiteId);
        #
        #    return inventSiteId;
        #}
      ENDSOURCE
      SOURCE #parmMenuItemName
        #WHSMenuItemName parmMenuItemName(WHSMenuItemName _menuItemName = menuItemName)
        #{
        #    menuItemName = _menuItemName;
        #
        #    return menuItemName;
        #}
      ENDSOURCE
      SOURCE #parmMode
        #WHSWorkExecuteMode parmMode(WHSWorkExecuteMode _mode)
        #{
        #    mode = _mode;
        #
        #    return mode;
        #}
      ENDSOURCE
      SOURCE #parmPass
        #WHSRFPassthrough parmPass(WHSRFPassthrough _pass = null)
        #{
        #    if (_pass)
        #    {
        #        pass = _pass;
        #    }
        #
        #    return pass;
        #}
      ENDSOURCE
      SOURCE #parmStep
        #public int parmStep(int _step)
        #{
        #    step = _step;
        #
        #    return step;
        #}
      ENDSOURCE
      SOURCE #parmWorkLine
        #WHSWorkLine parmWorkLine(WHSWorkLine    _workLine = null)
        #{
        #    if (_workLine)
        #    {
        #        workLine = _workLine;
        #    }
        #
        #    return workLine;
        #}
      ENDSOURCE
      SOURCE #populateData
        #void populateData(str _name)
        #{
        #    WHSDefaultDataValue localDefaultValue;
        #    InventBatchExpDate  expDate;
        #
        #    if (mode == WHSWorkExecuteMode::AdjustmentOut)
        #    {
        #        pass.insert(#Initiation, 1);
        #    }
        #
        #    switch (_name)
        #    {
        #        case #ItemId:
        #            if (workLine.WorkType == WHSWorkType::Count)
        #            {
        #                fieldValues.insert(#ItemId, '');
        #                break;
        #            }
        #            else if (mode != WHSWorkExecuteMode::AdjustmentIn                           &&
        #                     mode != WHSWorkExecuteMode::ReportAsFinished                       &&
        #                     mode != WHSWorkExecuteMode::ReportAsFinishedAndLocate              &&
        #                     mode != WHSWorkExecuteMode::KanbanPut                              &&
        #                     mode != WHSWorkExecuteMode::KanbanPutAndLocate                     &&
        #                     mode != WHSWorkExecuteMode::PurchaseOrderLineReceiving             &&
        #                     mode != WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate    &&
        #                     mode != WHSWorkExecuteMode::LoadItemReceiving                      &&
        #                     mode != WHSWorkExecuteMode::LoadItemReceivingAndLocate             &&
        #                     mode != WHSWorkExecuteMode::LicensePlateLoading                    &&
        #                     mode != WHSWorkExecuteMode::TransferOrderItemReceiving             &&
        #                     mode != WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate    &&
        #                     mode != WHSWorkExecuteMode::TransferOrderLineReceiving             &&
        #                     mode != WHSWorkExecuteMode::TransferOrderLineReceivingAndLocate    &&
        #                     WHSRFMenuItemTable::getWHSWorkExecuteMode(WHSRFMenuItemTable::find(menuItemName)) != WHSWorkExecuteMode::AdjustmentIn)
        #            {
        #                itemId = this.getItemId();
        #                fieldValues.insert(#ItemId, itemId);
        #                if (itemId)
        #                {
        #                    #InventDimDevelop
        #                    this.populateData(#ColorId);
        #                    this.populateData(#SizeId);
        #                    this.populateData(#StyleId);
        #                    this.populateData(#ConfigId);
        #                    this.populateData(#BatchId);
        #                    this.populateData(#SerialId);
        #                    this.populateData(#ProfileId_RU);
        #                    this.populateData(#OwnerId_RU);
        #                    this.populateData(#GtdId_RU);
        #                    break;
        #                }
        #            }
        #            if (defaulting                                                      &&
        #                mode != WHSWorkExecuteMode::LoadItemReceiving                   &&
        #                mode != WHSWorkExecuteMode::LoadItemReceivingAndLocate          &&
        #                mode != WHSWorkExecuteMode::PurchaseOrderLineReceiving          &&
        #                mode != WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate &&
        #                mode != WHSWorkExecuteMode::PurchaseOrderItemReceiving          &&
        #                mode != WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate &&
        #                mode != WHSWorkExecuteMode::TransferOrderItemReceiving          &&
        #                mode != WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate &&
        #                mode != WHSWorkExecuteMode::TransferOrderLineReceiving          &&
        #                mode != WHSWorkExecuteMode::TransferOrderLineReceivingAndLocate)
        #            {
        #                itemId = WHSRFDefaultData::getDefaultValue(menuItemName,
        #                                                           WHSDefaultDataField::Item,
        #                                                           pass.lookup(#UserId),
        #                                                           inventLocationId,
        #                                                           locationId);
        #                if (itemId)
        #                {
        #                    this.processControl(#ItemId, itemId);
        #                }
        #            }
        #            break;
        #
        #        case #Qty:
        #            if (mode != WHSWorkExecuteMode::ReportAsFinished                    &&
        #                mode != WHSWorkExecuteMode::ReportAsFinishedAndLocate           &&
        #                mode != WHSWorkExecuteMode::KanbanPut                           &&
        #                mode != WHSWorkExecuteMode::KanbanPutAndLocate                  &&
        #                mode != WHSWorkExecuteMode::PurchaseOrderLineReceiving          &&
        #                mode != WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate &&
        #                mode != WHSWorkExecuteMode::LoadItemReceiving                   &&
        #                mode != WHSWorkExecuteMode::LoadItemReceivingAndLocate          &&
        #                WHSRFMenuItemTable::getWHSWorkExecuteMode(WHSRFMenuItemTable::find(menuItemName)) != WHSWorkExecuteMode::AdjustmentIn)
        #            {
        #                if (!InventTable::find(itemId).whsBatchActive() || inventBatchId)
        #                {
        #                    if (InventTable::find(itemId).whsSerialActive())
        #                    {
        #                        if (!WMSLocation::whsLocationHasSerial(locationId, itemId) || inventSerialId || mode == WHSWorkExecuteMode::Quarantine)
        #                        {
        #                            qty = this.getQty();
        #                        }
        #                    }
        #                    else
        #                    {
        #                        qty = this.getQty();
        #                    }
        #                }
        #
        #
        #                if (qty)
        #                {
        #                    fieldValues.insert(#Qty, qty);
        #                }
        #                else
        #                {
        #                    fieldValues.insert(#Qty, '');
        #                }
        #            }
        #            else
        #            {
        #                fieldValues.insert(#Qty, '');
        #            }
        #            if (defaulting)
        #            {
        #                qty = WHSWorkExecuteDisplay::str2numDisplay(WHSRFDefaultData::getDefaultValue(menuItemName,
        #                                                                                              WHSDefaultDataField::Qty,
        #                                                                                              pass.lookup(#UserId),
        #                                                                                              inventLocationId,
        #                                                                                              locationId));
        #                if (qty)
        #                {
        #                    this.processControl(#Qty, WHSRFDefaultData::getDefaultValue(menuItemName,
        #                                                                                WHSDefaultDataField::Qty,
        #                                                                                pass.lookup(#UserId),
        #                                                                                inventLocationId,
        #                                                                                locationId));
        #                }
        #            }
        #            break;
        #
        #        case #CycleCountQty1:
        #            fieldValues.insert(#CycleCountQty1, '');
        #            break;
        #
        #        case #CycleCountQty2:
        #            fieldValues.insert(#CycleCountQty2, '');
        #            break;
        #
        #        case #CycleCountQty3:
        #            fieldValues.insert(#CycleCountQty3, '');
        #            break;
        #
        #        case #CycleCountQty4:
        #            fieldValues.insert(#CycleCountQty4, '');
        #            break;
        #
        #        case #CycleCountUOM1:
        #            fieldValues.insert(#CycleCountUOM1, '');
        #
        #        case #CurrentQty:
        #            currentQty = this.getCurrentQty();
        #            fieldValues.insert(#CurrentQty, currentQty);
        #            break;
        #
        #        case #WMSLocationId:
        #            if (mode != WHSWorkExecuteMode::AdjustmentIn    &&
        #                WHSRFMenuItemTable::getWHSWorkExecuteMode(WHSRFMenuItemTable::find(menuItemName)) != WHSWorkExecuteMode::AdjustmentIn)
        #            {
        #                locationId = this.getLocationId();
        #                fieldValues.insert(#WMSLocationId, locationId);
        #            }
        #            if (defaulting)
        #            {
        #                locationId = WHSRFDefaultData::getDefaultValue(menuItemName,
        #                                                               WHSDefaultDataField::ToLocation,
        #                                                               pass.lookup(#UserId),
        #                                                               inventLocationId,
        #                                                               locationId);
        #                if (locationId)
        #                {
        #                    this.processControl(#WMSLocationId, locationId);
        #                }
        #
        #                if (fieldValues.exists(#WMSLocationId) && fieldValues.lookup(#WMSLocationId) != '')
        #                {
        #                    pass.insert(#SystemPopulated, 1);
        #                }
        #            }
        #            break;
        #
        #        case #LicensePlateId:
        #            if (mode == WHSWorkExecuteMode::AdjustmentOut)
        #            {
        #                licensePlateId = this.getLicensePlateId();
        #                fieldValues.insert(#LicensePlateId, licensePlateId);
        #                if (!locationId)
        #                {
        #                    locationId = this.findLocationByLicensePlate(licensePlateId);
        #                    fieldValues.insert(#WMSLocationId, locationId);
        #
        #                    if (pass.lookup(#WMSLocationId) != '')
        #                    {
        #                        pass.insert(#SystemPopulated, 1);
        #                    }
        #                }
        #            }
        #            else if (step == #ShortPick)
        #            {
        #                // Short pick does not require License Plate to be specified if picking zero.
        #                if (pass.exists(#QtyToPick) && pass.lookupNum(#QtyToPick) == 0)
        #                {
        #                    fieldValues.remove(#LicensePlateId);
        #                }
        #                else
        #                {
        #                    fieldValues.insert(#LicensePlateId, '');
        #                }
        #            }
        #            else
        #            {
        #                fieldValues.insert(#LicensePlateId, '');
        #            }
        #            break;
        #
        #        case #UOM:
        #            fieldValues.insert(#UOM, '');
        #
        #            // Only blank selected UOM if it was automatically set with the scanned item.
        #            if (!saveUOMValue)
        #            {
        #                fieldValues.insert(#SelectedValueUOM, '');
        #            }
        #
        #            if ((defaulting && ((pass.exists(#ItemId) && pass.lookup(#ItemId) != '') || itemId))  ||
        #                (defaulting                                                         &&
        #                 (mode == WHSWorkExecuteMode::PurchaseOrderItemReceiving            ||
        #                  mode == WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate   ||
        #                  mode == WHSWorkExecuteMode::PurchaseOrderLineReceiving            ||
        #                  mode == WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate   ||
        #                  mode == WHSWorkExecuteMode::LoadItemReceiving                     ||
        #                  mode == WHSWorkExecuteMode::LoadItemReceivingAndLocate)))
        #            {
        #                uom = WHSRFDefaultData::getDefaultValue(menuItemName,
        #                                                        WHSDefaultDataField::UOM,
        #                                                        pass.lookup(#UserId),
        #                                                        inventLocationId,
        #                                                        locationId);
        #                if (uom)
        #                {
        #                    this.processControl(#UOM, uom);
        #                    fieldValues.insert(#SelectedValueUOM, uom);
        #                }
        #            }
        #            break;
        #
        #        case #LocOrLP:
        #            if (defaulting)
        #            {
        #                locationId = WHSRFDefaultData::getDefaultValue(menuItemName,
        #                                                               WHSDefaultDataField::FromLocation,
        #                                                               pass.lookup(#UserId),
        #                                                               inventLocationId,
        #                                                               locationId);
        #                if (locationId)
        #                {
        #                    this.processControl(#LocOrLP, locationId);
        #                }
        #            }
        #            else
        #            {
        #                fieldValues.insert(#LocOrLP, '');
        #            }
        #            break;
        #
        #        case #WorkId:
        #            workId = this.getWorkId();
        #            fieldValues.insert(#WorkId, workId);
        #            break;
        #
        #        case #ProdId:
        #            prodId = this.getProdId();
        #            fieldValues.insert(#ProdId, prodId);
        #            break;
        #
        #        case #CheckDigit:
        #            checkDigit = this.getCheckDigit();
        #            fieldValues.insert(#CheckDigit, checkDigit);
        #            break;
        #
        #        case #LocVerification:
        #            fieldValues.insert(#LocVerification, '');
        #            break;
        #
        #        case #QtyVerification:
        #            fieldValues.insert(#QtyVerification, '');
        #            break;
        #
        #        case #ProductConfirmation:
        #            fieldValues.insert(#ProductConfirmation, '');
        #
        #        case #ClusterPickQtyVerification:
        #            fieldValues.insert(#ClusterPickQtyVerification, '');
        #            break;
        #
        #        case #BatchId:
        #            if (mode == WHSWorkExecuteMode::AdjustmentIn)
        #            {
        #                if (licensePlateId)
        #                {
        #                    if (WHSLicensePlate::exist(#LicensePlateId))
        #                    {
        #                        inventBatchId = this.getBatchId();
        #                    }
        #                }
        #            }
        #            else if (workLine.WorkType != WHSWorkType::Count)
        #            {
        #                inventBatchId = this.getBatchId();
        #            }
        #            fieldValues.insert(#BatchId, inventBatchId);
        #            break;
        #
        #        case #SerialId:
        #            if (mode == WHSWorkExecuteMode::AdjustmentIn)
        #            {
        #                if (licensePlateId)
        #                {
        #                    if (WHSLicensePlate::exist(#LicensePlateId))
        #                    {
        #                        inventSerialId = this.getSerialId();
        #                    }
        #                }
        #                else
        #                {
        #                    inventSerialId = this.getSerialId();
        #                }
        #            }
        #            else if (workLine.WorkType != WHSWorkType::Count)
        #            {
        #                inventSerialId = this.getSerialId();
        #            }
        #            fieldValues.insert(#SerialId, inventSerialId);
        #            break;
        #
        #        case #ProfileId_RU:
        #            if (mode == WHSWorkExecuteMode::AdjustmentIn)
        #            {
        #                if (licensePlateId)
        #                {
        #                    if (WHSLicensePlate::exist(#LicensePlateId))
        #                    {
        #                        inventProfileId = this.getProfileId();
        #                    }
        #                }
        #                else
        #                {
        #                    inventProfileId = this.getProfileId();
        #                }
        #            }
        #            else if (workLine.WorkType != WHSWorkType::Count)
        #            {
        #                inventProfileId = this.getProfileId();
        #            }
        #            fieldValues.insert(#ProfileId_RU, inventProfileId);
        #            break;
        #
        #        case #OwnerId_RU:
        #            if (mode == WHSWorkExecuteMode::AdjustmentIn)
        #            {
        #                if (licensePlateId)
        #                {
        #                    if (WHSLicensePlate::exist(#LicensePlateId))
        #                    {
        #                        inventOwnerId = this.getOwnerId();
        #                    }
        #                }
        #                else
        #                {
        #                    inventOwnerId = this.getOwnerId();
        #                }
        #            }
        #            else if (workLine.WorkType != WHSWorkType::Count)
        #            {
        #                inventOwnerId = this.getOwnerId();
        #            }
        #            fieldValues.insert(#OwnerId_RU, inventOwnerId);
        #            break;
        #
        #        case #GtdId_RU:
        #            if (mode == WHSWorkExecuteMode::AdjustmentIn)
        #            {
        #                if (licensePlateId)
        #                {
        #                    if (WHSLicensePlate::exist(#LicensePlateId))
        #                    {
        #                        inventGtdId = this.getGtdId();
        #                    }
        #                }
        #                else
        #                {
        #                    inventGtdId = this.getGtdId();
        #                }
        #            }
        #            else if (workLine.WorkType != WHSWorkType::Count)
        #            {
        #                inventGtdId = this.getGtdId();
        #            }
        #            fieldValues.insert(#GtdId_RU, inventGtdId);
        #            break;
        #
        #        case #SizeId:
        #            if (workLine.WorkType == WHSWorkType::Count)
        #            {
        #                fieldValues.insert(#SizeId, '');
        #                break;
        #            }
        #            else
        #            {
        #                if (mode    != WHSWorkExecuteMode::AdjustmentIn &&
        #                    mode    != WHSWorkExecuteMode::LicensePlateLoading)
        #                {
        #                    inventSizeId = this.getSizeId();
        #                }
        #
        #                fieldValues.insert(#SizeId, inventSizeId);
        #                if (defaulting)
        #                {
        #                    inventSizeId = WHSRFDefaultData::getDefaultValue(menuItemName,
        #                                                                     WHSDefaultDataField::Size,
        #                                                                     pass.lookup(#UserId),
        #                                                                     inventLocationId,
        #                                                                     locationId);
        #                    if (inventSizeId)
        #                    {
        #                        this.processControl(#SizeId, inventSizeId);
        #                    }
        #
        #                    if (fieldValues.exists(#SizeId))
        #                    {
        #                        inventSizeId = fieldValues.lookup(#SizeId);
        #                    }
        #                }
        #                break;
        #            }
        #
        #        case #StyleId:
        #            if (workLine.WorkType == WHSWorkType::Count)
        #            {
        #                fieldValues.insert(#StyleId, '');
        #                break;
        #            }
        #            else
        #            {
        #                if (mode    != WHSWorkExecuteMode::AdjustmentIn &&
        #                    mode    != WHSWorkExecuteMode::LicensePlateLoading)
        #                {
        #                    inventStyleId = this.getStyleId();
        #                }
        #
        #                fieldValues.insert(#StyleId, inventStyleId);
        #                if (defaulting)
        #                {
        #                    inventStyleId = WHSRFDefaultData::getDefaultValue(menuItemName,
        #                                                                      WHSDefaultDataField::Style,
        #                                                                      pass.lookup(#UserId),
        #                                                                      inventLocationId,
        #                                                                      locationId);
        #                    if (inventStyleId)
        #                    {
        #                        this.processControl(#StyleId, inventStyleId);
        #                    }
        #
        #                    if (fieldValues.exists(#StyleId))
        #                    {
        #                        inventStyleId = fieldValues.lookup(#StyleId);
        #                    }
        #                }
        #                break;
        #            }
        #
        #        case #ColorId:
        #            if (workLine.WorkType == WHSWorkType::Count)
        #            {
        #                fieldValues.insert(#ColorId, '');
        #                break;
        #            }
        #            else
        #            {
        #                if (mode    != WHSWorkExecuteMode::AdjustmentIn &&
        #                    mode    != WHSWorkExecuteMode::LicensePlateLoading)
        #                {
        #                    inventColorId = this.getColorId();
        #                }
        #
        #                fieldValues.insert(#ColorId, inventColorId);
        #                if (defaulting)
        #                {
        #                    inventColorId = WHSRFDefaultData::getDefaultValue(menuItemName,
        #                                                                      WHSDefaultDataField::Color,
        #                                                                      pass.lookup(#UserId),
        #                                                                      inventLocationId,
        #                                                                      locationId);
        #                    if (inventColorId)
        #                    {
        #                        this.processControl(#ColorId, inventColorId);
        #                    }
        #
        #                    if (fieldValues.exists(#ColorId))
        #                    {
        #                        inventColorId = fieldValues.lookup(#ColorId);
        #                    }
        #                }
        #                break;
        #            }
        #
        #        case #ConfigId:
        #            if (workLine.WorkType == WHSWorkType::Count)
        #            {
        #                fieldValues.insert(#ConfigId, '');
        #                break;
        #            }
        #            else
        #            {
        #                if (mode    != WHSWorkExecuteMode::AdjustmentIn &&
        #                    mode    != WHSWorkExecuteMode::LicensePlateLoading)
        #                {
        #                    inventConfigId = this.getConfigId();
        #                }
        #
        #                fieldValues.insert(#ConfigId, inventConfigId);
        #                if (defaulting)
        #                {
        #                    inventConfigId = WHSRFDefaultData::getDefaultValue(menuItemName,
        #                                                                       WHSDefaultDataField::Config,
        #                                                                       pass.lookup(#UserId),
        #                                                                       inventLocationId,
        #                                                                       locationId);
        #                    if (inventConfigId)
        #                    {
        #                        this.processControl(#ConfigId, inventConfigId);
        #                    }
        #
        #                    if (fieldValues.exists(#ConfigId))
        #                    {
        #                        inventConfigId = fieldValues.lookup(#ConfigId);
        #                    }
        #                }
        #                break;
        #            }
        #
        #        case #PONum:
        #            fieldValues.insert(#PONum, '');
        #            break;
        #
        #        case #POLineNum:
        #            fieldValues.insert(#POLineNum, '');
        #            break;
        #
        #        case #AdjustmentType:
        #            fieldValues.insert(#AdjustmentType, '');
        #            fieldValues.insert(#SelectedAdjustmentType, WHSRFMenuItemTable::getDefaultAdjustmentTypeCode(pass.lookup(#MenuItem)));
        #            break;
        #
        #        case #InventoryStatus:
        #            if (mode                    != WHSWorkExecuteMode::Quarantine           &&
        #                mode                    != WHSWorkExecuteMode::MovementByTemplate   &&
        #                mode                    != WHSWorkExecuteMode::AdjustmentIn         &&
        #                mode                    != WHSWorkExecuteMode::LicensePlateLoading  &&
        #                mode                    != WHSWorkExecuteMode::ReturnOrder          &&
        #                mode                    != WHSWorkExecuteMode::ReturnOrderAndLocate &&
        #                workLine.WorkType    != WHSWorkType::Count)
        #            {
        #                if ((locationId && itemId && !WMSLocation::find(locationId, inventLocationId).whsLocationIsLPControlled()) || (licensePlateId && WMSLocation::find(locationId, inventLocationId).whsLocationIsLPControlled()))
        #                {
        #                    fromInventStatusId = this.getInventStatusId();
        #                    fieldValues.insert(#InventoryStatus, fromInventStatusId);
        #                    fieldValues.insert(#SelectedValue, WHSInventStatus::find(fieldValues.lookup(#InventoryStatus)).Name);
        #                    if (fromInventStatusId != '')
        #                    {
        #                        if (!InventTable::find(itemId).whsBatchActive() || inventBatchId)
        #                        {
        #                            if (!fieldValues.exists(#Qty) || fieldValues.lookup(#Qty) == '')
        #                            {
        #                                qty = this.getQty();
        #                                fieldValues.insert(#Qty, qty);
        #                            }
        #                        }
        #                    }
        #                }
        #            }
        #            else
        #            {
        #                fieldValues.insert(#InventoryStatus, '');
        #                fieldValues.insert(#SelectedValue, '');
        #            }
        #
        #            if (defaulting && mode != WHSWorkExecuteMode::Quarantine && mode != WHSWorkExecuteMode::MovementByTemplate)
        #            {
        #                fieldValues.insert(#SelectedValue, WHSInventStatus::find(WHSRFDefaultData::getDefaultValue(menuItemName,
        #                                                                                                           WHSDefaultDataField::FromInventStatus,
        #                                                                                                           pass.lookup(#UserId),
        #                                                                                                           inventLocationId,
        #                                                                                                           locationId)).Name);
        #
        #                if (fieldValues.lookup(#SelectedValue) == '' && fromInventStatusId)
        #                {
        #                    fieldValues.insert(#SelectedValue, WHSInventStatus::find(fromInventStatusId).Name);
        #                }
        #            }
        #            else if (defaulting)
        #            {
        #                fieldValues.insert(#SelectedValue, WHSInventStatus::find(WHSRFDefaultData::getDefaultValue(menuItemName,
        #                                                                                                           WHSDefaultDataField::ToInventStatus,
        #                                                                                                           pass.lookup(#UserId),
        #                                                                                                           inventLocationId,
        #                                                                                                           locationId)).Name);
        #            }
        #            break;
        #
        #        case #FromInventoryStatus:
        #            if ((locationId && itemId && !WMSLocation::find(locationId, inventLocationId).whsLocationIsLPControlled()) || (licensePlateId && WMSLocation::find(locationId, inventLocationId).whsLocationIsLPControlled()))
        #            {
        #                fromInventStatusId = this.getInventStatusId();
        #                fieldValues.insert(#FromInventoryStatus, fromInventStatusId);
        #
        #                //When doing quarantine for a license plate, all the items on this LP need to be quarantined. The quantity must be defaulted to the sum of
        #                //the physical inventory quantity (including different tracking and product dimensions). In the other cases, the dimensions need to be specified first.
        #                if (((mode == WHSWorkExecuteMode::Quarantine && licensePlateId) || fromInventStatusId != '')
        #                    && !fieldValues.lookupStr(#Qty))
        #                {
        #                    qty = this.getPhysicalInventQty();
        #                    fieldValues.insert(#Qty, qty);
        #                }
        #
        #                fieldValues.insert(#SelectedFromValue, WHSInventStatus::find(fromInventStatusId).Name);
        #            }
        #            else
        #            {
        #                fieldValues.insert(#FromInventoryStatus, '');
        #            }
        #
        #            if (!fieldValues.lookupStr(#SelectedFromValue))
        #            {
        #                localDefaultValue = this.getDefaultValue(WHSDefaultDataField::FromInventStatus);
        #                if (localDefaultValue)
        #                {
        #                    fieldValues.insert(#SelectedFromValue, WHSInventStatus::find(localDefaultValue).Name);
        #                }
        #            }
        #            break;
        #
        #        case #ExpDate:
        #
        #            expDate = WHSWorkExecuteDisplay::getBatchExpDate(itemId, inventBatchId, pass.lookupStr(#ReceiptId));
        #
        #            if (defaulting && !expDate)
        #            {
        #                fieldValues.insert(#ExpDate, strFmt('%1', WHSRFDefaultData::getDefaultValue(menuItemName,
        #                                                                                            WHSDefaultDataField::ExpDate,
        #                                                                                            pass.lookup(#UserId),
        #                                                                                            inventLocationId,
        #                                                                                            locationId)));
        #            }
        #            else
        #            {
        #                fieldValues.insert(#ExpDate, strFmt('%1', expDate));
        #            }
        #
        #            if (fieldValues.lookup(#ExpDate) != '')
        #            {
        #                pass.insert(#DisplayBatch, 1);
        #            }
        #            break;
        #
        #        case #BatchUOM:
        #            fieldValues.insert(#BatchUOM, '');
        #            break;
        #
        #        case #Disposition:
        #            fieldValues.insert(#Disposition, '');
        #            break;
        #
        #        case #BatchQty:
        #            fieldValues.insert(#BatchQty, '');
        #            break;
        #
        #        case #QtyToPick:
        #            fieldValues.insert(#QtyToPick, '');
        #            break;
        #
        #        case #FullQty:
        #            fieldValues.insert(#FullQty, '');
        #            break;
        #
        #        case #ShortPickReason:
        #            fieldValues.insert(#ShortPickReason, '');
        #            fieldValues.insert(#SelectedValue, '');
        #            break;
        #
        #        case #TargetLicensePlateId:
        #            if (step == #ShortPick)
        #            {
        #                // Short pick does not require Target License Plate to be specified if picking zero.
        #                if (pass.exists(#QtyToPick) && pass.lookupNum(#QtyToPick) == 0)
        #                {
        #                    fieldValues.remove(#TargetLicensePlateId);
        #                }
        #                else
        #                {
        #                    fieldValues.insert(#TargetLicensePlateId, '');
        #                }
        #            }
        #            else
        #            {
        #                fieldValues.insert(#TargetLicensePlateId, '');
        #            }
        #            break;
        #
        #        case #QtyToScrap:
        #            fieldValues.insert(#QtyToScrap, '');
        #            break;
        #
        #        case #RMANum:
        #            fieldValues.insert(#RMANum, '');
        #            break;
        #
        #        case #ClusterId:
        #            fieldValues.insert(#ClusterId, '');
        #            break;
        #
        #        case #LoadId:
        #            fieldValues.insert(#LoadId, '');
        #            break;
        #
        #        case #TONum:
        #            fieldValues.insert(#TONum, '');
        #            break;
        #
        #        case #TOLineNum:
        #            fieldValues.insert(#TOLineNum, '');
        #            break;
        #
        #        case #ParentLP:
        #            fieldValues.insert(#ParentLP, '');
        #            break;
        #
        #        case #ChildLP:
        #            fieldValues.insert(#ChildLP, '');
        #            break;
        #
        #        case #StartLocationId:
        #            fieldValues.insert(#StartLocationId, '');
        #            break;
        #
        #        case #ZoneId:
        #            fieldValues.insert(#ZoneId, '');
        #            break;
        #
        #        case #WorkPoolId:
        #            fieldValues.insert(#WorkPoolId, '');
        #            fieldValues.insert(#SelectedWorkPoolId, '');
        #            break;
        #
        #        case #CheckInOutId:
        #            fieldValues.insert(#CheckInOutId, '');
        #            break;
        #
        #        case #VendBatchDate:
        #            fieldValues.insert(#VendBatchDate, '');
        #            break;
        #
        #        case #UseVendBatchDate:
        #            fieldValues.insert(#UseVendBatchDate, '');
        #            break;
        #
        #        case #VendExpDate:
        #            fieldValues.insert(#VendExpDate, '');
        #            break;
        #
        #        case #UseVendExpDate:
        #            fieldValues.insert(#UseVendExpDate, '');
        #            break;
        #
        #        case #CountryOfOrigin1:
        #            fieldValues.insert(#CountryOfOrigin1, '');
        #            break;
        #
        #        case #CountryOfOrigin2:
        #            fieldValues.insert(#CountryOfOrigin2, '');
        #            break;
        #
        #        case #VendBatchId:
        #            fieldValues.insert(#VendBatchId, '');
        #            break;
        #
        #        case #Potency:
        #            // If a session batch ID exists, the value will be defaulted when the RF control is built.
        #            if (pass.exists(#SessionBatchId))
        #            {
        #                fieldValues.insert(#Potency, '');
        #            }
        #            else
        #            {
        #                if (InventBatch::exist(itemId, inventBatchId))
        #                {
        #                    fieldValues.insert(#Potency, PdsBatchAttributes::find(itemId, inventBatchId, InventTable::find(itemId).pdsBaseAttributeId).PdsBatchAttribValue);
        #                }
        #                else
        #                {
        #                    fieldValues.insert(#Potency, WHSInventBatchReceiptDetails::find(pass.lookupStr(#ReceiptId), itemId, inventBatchId).PdsPotencyBaseValue);
        #                }
        #            }
        #
        #            if (fieldValues.lookup(#Potency) != '')
        #            {
        #                pass.insert(#DisplayBatch, 1);
        #            }
        #            break;
        #
        #        case #DimUOM:
        #            fieldValues.insert(#BatchUOM, '');
        #            break;
        #
        #        case #DimQty:
        #            fieldValues.insert(#BatchQty, '');
        #            break;
        #
        #        case #BatchDisposition:
        #            fieldValues.insert(#BatchDisposition, '');
        #            break;
        #
        #        case #FromBatchDisposition:
        #            fieldValues.insert(#FromBatchDisposition, '');
        #            break;
        #
        #        case #QtyToPut:
        #            fieldValues.insert(#QtyToPut, '');
        #            break;
        #
        #        default:
        #            if (InventDim::isFieldIdDimensional(fieldName2id(tableNum(InventDim), _name)))
        #            {
        #                fieldValues.insert(_name, '');
        #            }
        #            break;
        #    }
        #}
      ENDSOURCE
      SOURCE #processControl
        #/// <summary>
        #///     Processes each RF control.
        #/// </summary>
        #/// <param name="_name">
        #///     The name of the control.
        #/// </param>
        #/// <param name="_data">
        #///     The data contained within the control.
        #/// </param>
        #/// <param name="_enabled">
        #///     A Boolean value indicating whether the control is enabled for edit.
        #/// </param>
        #/// <param name="_selected">
        #///     The currently selected value.
        #/// </param>
        #/// <returns>
        #///     Returns a Boolean value indicating whether the data is invalid.
        #/// </returns>
        #boolean processControl(
        #    str _name,
        #    str _data,
        #    int _enabled = 1,
        #    str _selected = '')
        #{
        #    WHSWorkExecute                  workExecute = new WHSWorkExecute();
        #    boolean                         hasError = false;
        #    InventBatch                     inventBatch;
        #    str                             dimError;
        #    WHSWorkLine                     tmpWorkLine;
        #    ProdBOM                         prodBOM;
        #    Kanban                          kanban;
        #    KanbanJob                       kanbanJob;
        #    Dictionary                      dict;
        #    DictType                        dictType;
        #    str                             data = _data;
        #    WHSWorkLineCycleCount           workLineCycleCount;
        #    InventDim                       cycleCountInventDim;
        #    WMSLocationId                   cycleCountLocationId;
        #    Qty                             fullQty;
        #    Qty                             dimQty;
        #    Qty                             scannedQtyLimit = WHSParameters::find().ScannedQtyLimit;
        #    Qty                             clusterPickQty;
        #    Qty                             qtyOnLicensePlate;
        #    Qty                             qtyToPut;
        #    WHSWorkTable                    clusterWorkTable;
        #    WHSWorkLine                     clusterWorkLine;
        #    PurchTable                      purchTable;
        #    PurchLine                       purchLine;
        #    InventBatchId                   origInventBatchId;
        #    boolean                         skipSerialExistInInventoryCheck;
        #    InventInventItemSearch          localInventItemSearch;
        #    InventInventItemSearchResult    localInventItemSearchResult;
        #    EcoResProductDimGroupSetup      productDimGroupSetup;
        #    InventDim                       workLineInventDim;
        #    InventDim                       itemInventDim;
        #    InventDim                       inventDim;
        #    TradeLineNumber                 purchLineNum;
        #    InventDimId                     inventDimIdProduct;
        #    WHSInventStatusId               localInventStatusId;
        #    Set                             oldestBatchSet = new Set(Types::String);
        #    SetEnumerator                   oldestBatchEnumerator;
        #    UnitOfMeasureSymbol             inventUOM;
        #    InventQty                       origQtyToPick;
        #    WHSQtyRemain                    multiplePutsQty;
        #    WHSQtyRemain                    expectedQty;
        #    boolean                         batchSellableDaysCheck;
        #    InventBatchExpDate              batchExpDate = dateNull();
        #
        #    EcoResReleasedProductUnitConverter      unitConverter;
        #    WHSLoadItemReceivingPurchLineProvider   purchLineProvider;
        #
        #    switch (_name)
        #    {
        #        case #LocOrLP:
        #            dict = new Dictionary();
        #            dictType = dict.typeObject(dict.typeName2Id(extendedTypeStr(WMSLocationId)));
        #
        #            if (WHSLicensePlate::exist(_data))
        #            {
        #                licensePlateId = _data;
        #                fieldValues.insert(#LicensePlateId, _data);
        #                if (!locationId)
        #                {
        #                    locationId = this.findLocationByLicensePlate(licensePlateId);
        #
        #                    if (!locationId && mode == WHSWorkExecuteMode::Movement)
        #                    {
        #                        locationId = this.findLocationByNestedPlate(licensePlateId);
        #
        #                        if (locationId)
        #                        {
        #                            pass.insert(#MoveNest, 1);
        #                        }
        #                    }
        #
        #                    if (!WMSLocation::exist(locationId, inventLocationId))
        #                    {
        #                        if (pass.exists(#MoveNest))
        #                        {
        #                            pass.remove(#MoveNest);
        #                        }
        #                        fieldValues.remove(#LicensePlateId);
        #                        errorMessage = "@WAX1159";
        #                        hasError = true;
        #                        break;
        #                    }
        #                    else if (mode == WHSWorkExecuteMode::Quarantine &&
        #                             !this.validateStatusMixingQuarantine(locationId))
        #                    {
        #                        fieldValues.remove(#LicensePlateId);
        #                        errorMessage = "@WAX3389";
        #                        hasError = true;
        #                        break;
        #                    }
        #
        #                    fieldValues.insert(#WMSLocationId, locationId);
        #
        #                    if (fieldValues.lookup(#WMSLocationId) != '')
        #                    {
        #                        pass.insert(#SystemPopulated, 1);
        #                    }
        #                }
        #            }
        #            else if (WMSLocation::whsGetLocationId(_data, inventLocationId) &&
        #                     dictType.stringLen() >= strLen(WMSLocation::whsGetLocationId(_data, inventLocationId)))
        #            {
        #                locationId = WMSLocation::whsGetLocationId(_data, inventLocationId);
        #
        #                if (mode == WHSWorkExecuteMode::Quarantine &&
        #                    !this.validateStatusMixingQuarantine(locationId))
        #                {
        #                    errorMessage = "@WAX3389";
        #                    hasError = true;
        #                    break;
        #                }
        #
        #                fieldValues.insert(#WMSLocationId, locationId);
        #                if (!licensePlateId)
        #                {
        #                    licensePlateId = this.getLicensePlateId();
        #                    fieldValues.insert(#LicensePlateId, licensePlateId);
        #                }
        #            }
        #            else
        #            {
        #                errorMessage = "@WAX1159";
        #                hasError = true;
        #                break;
        #            }
        #
        #            if (_data)
        #            {
        #                fieldValues.insert(#LocOrLP, locationId);
        #            }
        #            break;
        #
        #        case #ItemId:
        #            if (_data != "@WAX402")
        #            {
        #                localInventItemSearch = InventInventItemSearch::construct();
        #                localInventItemSearchResult = localInventItemSearch.search(_data);
        #
        #                if (localInventItemSearchResult)
        #                {
        #                    itemId = localInventItemSearchResult.parmItemId();
        #                    itemInventDim = InventDim::find(localInventItemSearchResult.parmInventDimId());
        #                    uom = localInventItemSearchResult.parmUnitOfMeasureSymbol();
        #
        #                    // If a uom was found default the selected UOM to it.
        #                    if (uom)
        #                    {
        #                        if (!WHSUOMSeqGroupLine::existByItemId(itemId, uom))
        #                        {
        #                            errorMessage = strFmt("@SYP4862140", uom);
        #                            hasError = true;
        #                            break;
        #                        }
        #
        #                        fieldValues.insert(#SelectedValueUOM, uom);
        #                        pass.insert(#SelectedValueUOM, uom);
        #                        saveUOMValue = true;
        #                    }
        #                }
        #                else
        #                {
        #                    errorMessage = "@SYP5070015";
        #                    hasError = true;
        #                    break;
        #                }
        #
        #                if (!WHSInventEnabled::exist(itemId)
        #                ||  (mode == WHSWorkExecuteMode::ChangeBatchDisposition
        #                    &&   !InventTable::find(itemId).whsBatchActive()))
        #                {
        #                    errorMessage = "@WAX774";
        #                    hasError = true;
        #                    break;
        #                }
        #                else if (!WHSInventTable::find(itemId).uomSeqGroupId)
        #                {
        #                    errorMessage = "@WAX3609";
        #                    hasError = true;
        #                    break;
        #                }
        #                else
        #                {
        #                    if (mode                    != WHSWorkExecuteMode::AdjustmentIn                         &&
        #                        workLine.WorkType       != WHSWorkType::Put                                         &&
        #                        workLine.WorkType       != WHSWorkType::Count                                       &&
        #                        mode                    != WHSWorkExecuteMode::ReportAsFinished                     &&
        #                        mode                    != WHSWorkExecuteMode::ReportAsFinishedAndLocate            &&
        #                        mode                    != WHSWorkExecuteMode::KanbanPut                            &&
        #                        mode                    != WHSWorkExecuteMode::KanbanPutAndLocate                   &&
        #                        mode                    != WHSWorkExecuteMode::PurchaseOrderLineReceiving           &&
        #                        mode                    != WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate  &&
        #                        mode                    != WHSWorkExecuteMode::PurchaseOrderItemReceiving           &&
        #                        mode                    != WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate  &&
        #                        mode                    != WHSWorkExecuteMode::LoadItemReceiving                    &&
        #                        mode                    != WHSWorkExecuteMode::LoadItemReceivingAndLocate           &&
        #                        mode                    != WHSWorkExecuteMode::PickPack                             &&
        #                        mode                    != WHSWorkExecuteMode::UserGrouping                         &&
        #                        mode                    != WHSWorkExecuteMode::Movement                             &&
        #                        mode                    != WHSWorkExecuteMode::MovementByTemplate                   &&
        #                        mode                    != WHSWorkExecuteMode::Quarantine                           &&
        #                        mode                    != WHSWorkExecuteMode::ProductionScrap                      &&
        #                        mode                    != WHSWorkExecuteMode::LicensePlateLoading                  &&
        #                        mode                    != WHSWorkExecuteMode::ReturnOrder                          &&
        #                        mode                    != WHSWorkExecuteMode::ReturnOrderAndLocate                 &&
        #                        mode                    != WHSWorkExecuteMode::ClusterPicking                       &&
        #                        mode                    != WHSWorkExecuteMode::TransferOrderItemReceiving           &&
        #                        mode                    != WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate  &&
        #                        mode                    != WHSWorkExecuteMode::TransferOrderLineReceiving           &&
        #                        mode                    != WHSWorkExecuteMode::TransferOrderLineReceivingAndLocate  &&
        #                        mode                    != WHSWorkExecuteMode::ChangeBatchDisposition               &&
        #                        WHSRFMenuItemTable::getWHSWorkExecuteMode(WHSRFMenuItemTable::find(menuItemName)) != WHSWorkExecuteMode::AdjustmentIn)
        #                    {
        #                        if (!this.validateItemInLocation(itemId) &&
        #                           (!InventTable::find(itemId).whsAllowPhysNeg() ||
        #                            !WMSLocation::find(locationId, inventLocationId).whsLocationProfile().AllowNegative))
        #                        {
        #                            errorMessage = "@WAX774";
        #                            hasError = true;
        #                            itemId = '';
        #                            break;
        #                        }
        #                    }
        #                    else if ((mode == WHSWorkExecuteMode::AdjustmentIn          ||
        #                              mode == WHSWorkExecuteMode::LicensePlateLoading)  &&
        #                              !this.allowMixedItem(itemId))
        #                    {
        #                        errorMessage = "@WAX1855";
        #                        hasError = true;
        #                        itemId = '';
        #                        break;
        #                    }
        #                }
        #                if (workLine.WorkType == WHSWorkType::Count)
        #                {
        #                    if (pass.exists(#RFAddLP))
        #                    {
        #                        if (!WHSLocationProfile::find(WMSLocation::find(workLine.wmsLocationId, workLine.whsWorkTable().InventLocationId).LocProfileId).AllowMixedItems)
        #                        {
        #                            itemId = _data;
        #
        #                            select firstonly workLineCycleCount
        #                                where workLineCycleCount.ItemId     != itemId
        #                                   &&  workLineCycleCount.WorkId     == workLine.WorkId
        #                                   &&  workLineCycleCount.LineNum    == workLine.LineNum;
        #
        #                            if (workLineCycleCount.RecId != 0)
        #                            {
        #                                itemId = '';
        #                                errorMessage = "@WAX1855";
        #                                hasError = true;
        #                                break;
        #                            }
        #                        }
        #                        fieldValues.insert(#ItemId, itemId);
        #                        this.addProductDimensions(fieldValues, itemId, itemInventDim);
        #                        break;
        #                    }
        #                    if (!this.validateItemInLocation(itemId, itemInventDim))
        #                    {
        #                        pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) + 1);
        #                        pass.insert(#RFAddLP, 1);
        #                        errorMessage = "@SYP5070016";
        #                        itemId = '';
        #                        hasError = true;
        #                        break;
        #                    }
        #                }
        #                if (mode == WHSWorkExecuteMode::PurchaseOrderItemReceiving || mode == WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate)
        #                {
        #                    if (!this.validateItemOnPurchLine(itemId, itemInventDim))
        #                    {
        #                        errorMessage = "@SYP4980009";
        #                        itemId = '';
        #                        hasError = true;
        #                        break;
        #                    }
        #                    if (pass.exists(#PONum))
        #                    {
        #                        purchLineNum = this.getLineNumByItem(pass.lookup(#PONum), itemId, itemInventDim);
        #
        #                        if (purchLineNum == 0 && !workLine)
        #                        {
        #                            errorMessage = strFmt("%1\n%2", "@SYP4980046", "@SYP4980047");
        #                            itemId = '';
        #                            hasError = true;
        #                            break;
        #                        }
        #                        if (purchLineNum != 0)
        #                        {
        #                            purchLine = PurchLine::find(pass.lookup(#PONum), purchLineNum);
        #                            if (this.isPurchaseOrderLineOnMoreThanOneLoad(purchLine.InventTransId))
        #                            {
        #                                errorMessage = strFmt("%1\n%2", "@SYP4881102", "@SYP4881106");
        #                                itemId = '';
        #                                hasError = true;
        #                                break;
        #                            }
        #                        }
        #                    }
        #                }
        #                else if (mode == WHSWorkExecuteMode::LoadItemReceiving || mode == WHSWorkExecuteMode::LoadItemReceivingAndLocate)
        #                {
        #                    if (itemInventDim.anyProductDimensionSpecified())
        #                    {
        #                        pass.insert(#ItemInventDimId, itemInventDim.inventDimId);
        #                    }
        #                    if (_enabled && !workLine) // !workLine means that we haven't reached the putaway step yet.
        #                    {
        #                        purchLineProvider = this.loadItemReceivingPurchLineProvider(pass.lookup(#LoadId), itemId, itemInventDim);
        #
        #                        if (!purchLineProvider.itemExistsOnLoad() || !purchLineProvider.isReceiptPossible())
        #                        {
        #                            errorMessage = "@WAX3627";
        #                            itemId = '';
        #                            hasError = true;
        #                            break;
        #                        }
        #
        #                        purchId = purchLineProvider.suggestedPurchLine().PurchId;
        #                    }
        #                }
        #                else if (mode == WHSWorkExecuteMode::TransferOrderItemReceiving || mode == WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate)
        #                {
        #                    if (!this.validateItemOnTOLine(itemId, itemInventDim))
        #                    {
        #                        errorMessage = "@SYP4980009";
        #                        itemId = '';
        #                        hasError = true;
        #                        break;
        #                    }
        #                    else if (pass.exists(#TONum) && InventTransferLine::getLineNumberByItemOrdered(pass.lookup(#TONum), itemId, itemInventDim) == 0 && !workLine)
        #                    {
        #                        errorMessage = "@WAX3860";
        #                        itemId = '';
        #                        hasError = true;
        #                        break;
        #                    }
        #                    if (itemInventDim.anyProductDimensionSpecified())
        #                    {
        #                        pass.insert(#ItemInventDimId, itemInventDim.inventDimId);
        #                    }
        #                }
        #
        #                if (mode == WHSWorkExecuteMode::ReturnOrder || mode == WHSWorkExecuteMode::ReturnOrderAndLocate)
        #                {
        #                    if (!this.validateItemOnReturnOrder(itemId))
        #                    {
        #                        errorMessage = "@WAX3272";
        #                        itemId = '';
        #                        hasError = true;
        #                        break;
        #                    }
        #                }
        #                if (mode == WHSWorkExecuteMode::ProductionScrap)
        #                {
        #                    itemId = _data;
        #
        #                    select firstonly prodBOM
        #                        where prodBOM.ProdId    == prodId   &&
        #                              prodBOM.ItemId    == itemId;
        #
        #                    if (!prodBOM)
        #                    {
        #                        errorMessage = "@WAX774";
        #                        itemId = '';
        #                        hasError = true;
        #                        break;
        #                    }
        #                    else
        #                    {
        #                        fieldValues.insert(#ItemId, itemId);
        #                        break;
        #                    }
        #                }
        #            }
        #            else
        #            {
        #                fieldValues.insert(#ItemId, _data);
        #                break;
        #            }
        #            fieldValues.insert(#ItemId, itemId);
        #            this.addProductDimensions(fieldValues, itemId, itemInventDim);
        #            break;
        #
        #        case #Qty:
        #            qty = WHSWorkExecuteDisplay::str2numDisplay(data);
        #            if (qty <= 0)
        #            {
        #                errorMessage = "@WAX1172";
        #                hasError = true;
        #                break;
        #            }
        #
        #            fromInventStatusId = this.getInventStatusId();
        #
        #            if (mode   == WHSWorkExecuteMode::Movement              &&
        #                qty      > this.getQty()                            &&
        #                (!InventTable::find(itemId).whsAllowPhysNeg()       ||
        #                !WMSLocation::find(locationId, inventLocationId).whsLocationProfile().AllowNegative))
        #            {
        #                errorMessage = "@WAX1172";
        #                hasError = true;
        #                break;
        #            }
        #            if (mode == WHSWorkExecuteMode::AdjustmentIn    &&
        #                scannedQtyLimit                             &&
        #                qty > scannedQtyLimit)
        #            {
        #                errorMessage = "@WAX2770";
        #                hasError = true;
        #                break;
        #            }
        #
        #            fieldValues.insert(#Qty, qty ? data : '');
        #            break;
        #
        #        case #CycleCountQty1:
        #            cycleCountQty1 = WHSWorkExecuteDisplay::str2numDisplay(data);
        #            if (cycleCountQty1 < 0)
        #            {
        #                errorMessage = "@WAX1172";
        #                hasError = true;
        #                break;
        #            }
        #            fieldValues.insert(#CycleCountQty1, cycleCountQty1);
        #            break;
        #
        #
        #        case #CycleCountQty2:
        #            cycleCountQty2 = WHSWorkExecuteDisplay::str2numDisplay(data);
        #            if (cycleCountQty2 < 0)
        #            {
        #                errorMessage = "@WAX1172";
        #                hasError = true;
        #                break;
        #            }
        #            fieldValues.insert(#CycleCountQty2, cycleCountQty2);
        #            break;
        #
        #        case #CycleCountQty3:
        #            cycleCountQty3 = WHSWorkExecuteDisplay::str2numDisplay(data);
        #            if (cycleCountQty3 < 0)
        #            {
        #                errorMessage = "@WAX1172";
        #                hasError = true;
        #                break;
        #            }
        #            fieldValues.insert(#CycleCountQty3, cycleCountQty3);
        #            break;
        #
        #        case #CycleCountQty4:
        #            cycleCountQty4 = WHSWorkExecuteDisplay::str2numDisplay(data);
        #            if (cycleCountQty4 < 0)
        #            {
        #                errorMessage = "@WAX1172";
        #                hasError = true;
        #                break;
        #            }
        #            fieldValues.insert(#CycleCountQty4, cycleCountQty4);
        #            break;
        #
        #        case #CurrentQty:
        #            if (mode != WHSWorkExecuteMode::PurchaseOrderLineReceiving          &&
        #                mode != WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate &&
        #                mode != WHSWorkExecuteMode::PurchaseOrderItemReceiving          &&
        #                mode != WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate &&
        #                mode != WHSWorkExecuteMode::LoadItemReceiving                   &&
        #                mode != WHSWorkExecuteMode::LoadItemReceivingAndLocate          &&
        #                mode != WHSWorkExecuteMode::TransferOrderItemReceiving          &&
        #                mode != WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate &&
        #                mode != WHSWorkExecuteMode::TransferOrderLineReceiving          &&
        #                mode != WHSWorkExecuteMode::TransferOrderLineReceivingAndLocate &&
        #                mode != WHSWorkExecuteMode::LicensePlateLoading)
        #            {
        #                currentQty = this.getCurrentQty();
        #                fieldValues.insert(#CurrentQty, currentQty);
        #            }
        #            break;
        #
        #        case #WMSLocationId:
        #            if (!WMSLocation::whsGetLocationId(_data, inventLocationId))
        #            {
        #                errorMessage = "@WAX1160";
        #                hasError = true;
        #                break;
        #            }
        #            locationId = WMSLocation::whsGetLocationId(_data, inventLocationId);
        #            fieldValues.insert(#WMSLocationId, locationId);
        #            break;
        #
        #        case #LocVerification:
        #            if (_data == locationId)
        #            {
        #                fieldValues.insert(#LocVerification, _data);
        #            }
        #            else
        #            {
        #                errorMessage = "@WAX1160";
        #                hasError = true;
        #                break;
        #            }
        #            break;
        #
        #        case #QtyVerification:
        #            if (workLine.WorkType == WHSWorkType::Put
        #                && !WHSWorkLine::getNextOppositeWorkLine(workLine.WorkId, workLine.LineNum, workLine.WorkType))
        #            {
        #                multiplePutsQty = WHSWorkTable::multipleFinalPutsWithLocAndUnitsEqualQty(workLine.WorkId);
        #                expectedQty = multiplePutsQty ? multiplePutsQty : workLine.QtyRemain;
        #            }
        #            else if (workLine.WorkType == WHSWorkType::Pick
        #                    && (workLine.whsWorkTable().WorkTransType == WHSWorkTransType::Sales
        #                    || workLine.whsWorkTable().WorkTransType == WHSWorkTransType::TransferIssue)
        #                    && WMSLocation::find(locationId, inventLocationId).checkLocationIsInWhsWhAndLPControlled())
        #            {
        #                if (!licensePlateId)
        #                {
        #                    licensePlateId = pass.lookupStr(#LicensePlateId);
        #                }
        #
        #                if (licensePlateId)
        #                {
        #                    unitConverter = EcoResReleasedProductUnitConverter::construct();
        #                    inventUOM = InventTableModule::find(itemId, ModuleInventPurchSales::Invent).UnitId;
        #
        #                    qtyOnLicensePlate = WHSInvent::getQtyOnLicensePlate(licensePlateId, itemId, this.findInventDimId(), locationId);
        #
        #                    if (unitConverter.canBeConverted(UnitOfMeasure::unitOfMeasureIdBySymbol(inventUOM),
        #                                                     UnitOfMeasure::unitOfMeasureIdBySymbol(workLine.UnitId),
        #                                                     itemId,
        #                                                     workLine.InventDimId))
        #                    {
        #                        qtyOnLicensePlate = unitConverter.convert(qtyOnLicensePlate,
        #                                                                  UnitOfMeasure::unitOfMeasureIdBySymbol(inventUOM),
        #                                                                  UnitOfMeasure::unitOfMeasureIdBySymbol(workLine.UnitId),
        #                                                                  NoYes::No,
        #                                                                  itemId,
        #                                                                  workLine.InventDimId,
        #                                                                  NoYes::No);
        #                    }
        #
        #                    expectedQty = min(workLine.QtyRemain, qtyOnLicensePlate);
        #                }
        #                else
        #                {
        #                    errorMessage = "@WAX1159";
        #                    hasError = true;
        #                    break;
        #                }
        #            }
        #            else
        #            {
        #                expectedQty = workLine.QtyRemain;
        #            }
        #
        #            if (WHSWorkExecuteDisplay::str2numDisplay(_data) == expectedQty)
        #            {
        #                fieldValues.insert(#QtyVerification, expectedQty);
        #            }
        #            else
        #            {
        #                errorMessage = "@WAX1172";
        #                hasError = true;
        #                break;
        #            }
        #            break;
        #
        #        case #ClusterPickQtyVerification:
        #            clusterPickQty = this.GetClusterPickQty();
        #            if (WHSWorkExecuteDisplay::str2numDisplay(_data) == clusterPickQty)
        #            {
        #                fieldValues.insert(#QtyVerification, clusterPickQty);
        #            }
        #            else
        #            {
        #                errorMessage = "@WAX1172";
        #                hasError = true;
        #                break;
        #            }
        #            break;
        #
        #        case #ProductConfirmation:
        #            if (_data == workLine.ItemId)
        #            {
        #                workLineInventDim = InventDim::find(workLine.InventDimId);
        #
        #                if (WHSWorkLine::isInventDimIdBlank(workLineInventDim.inventDimId)
        #                    || !workLineInventDim.anyProductDimensionSpecified())
        #                {
        #                    fieldValues.insert(#ProductConfirmation, _data);
        #                    break;
        #                }
        #            }
        #            else
        #            {
        #                workLineInventDim           = InventDim::find(workLine.InventDimId);
        #                localInventItemSearch       = InventInventItemSearch::construct();
        #                localInventItemSearchResult = localInventItemSearch.search(_data);
        #
        #                if (localInventItemSearchResult
        #                    && localInventItemSearchResult.parmItemId() == workLine.ItemId)
        #                {
        #                    itemInventDim = InventDim::find(localInventItemSearchResult.parmInventDimId());
        #                    if (itemInventDim.anyProductDimensionSpecified() || workLineInventDim.anyProductDimensionSpecified())
        #                    {
        #                        productDimGroupSetup = EcoResProductDimGroupSetup::newInventTable(InventTable::find(workLine.ItemId));
        #
        #                        if (InventDim::isInventDimEqualProductDim(productDimGroupSetup, workLineInventDim, itemInventDim))
        #                        {
        #                            fieldValues.insert(#ProductConfirmation, _data);
        #                            break;
        #                        }
        #                    }
        #                    else
        #                    {
        #                        fieldValues.insert(#ProductConfirmation, _data);
        #                        break;
        #                    }
        #                }
        #            }
        #            errorMessage = "@SYP4980009";
        #            hasError = true;
        #            break;
        #
        #        case #LicensePlateId:
        #            if (workLine.WorkType == WHSWorkType::Count)
        #            {
        #                licensePlateId = _data;
        #
        #                select firstonly workLineCycleCount
        #                    join cycleCountInventDim
        #                    where workLineCycleCount.InventDimId                == cycleCountInventDim.InventDimId  &&
        #                          workLineCycleCount.WorkId                  == workLine.WorkId               &&
        #                          cycleCountInventDim.LicensePlateId         == licensePlateId                   &&
        #                          (workLineCycleCount.CycleCountCounted      == NoYes::Yes                       ||
        #                           workLineCycleCount.CycleCountReconcile    == NoYes::Yes);
        #
        #                if (workLineCycleCount.RecId != 0)
        #                {
        #                    workLineCycleCount.clear();
        #
        #                    select firstonly RecId from workLineCycleCount
        #                        join cycleCountInventDim
        #                        where workLineCycleCount.InventDimId            == cycleCountInventDim.InventDimId  &&
        #                              workLineCycleCount.WorkId              == workLine.WorkId               &&
        #                              cycleCountInventDim.LicensePlateId     == licensePlateId                   &&
        #                              workLineCycleCount.CycleCountCounted   == NoYes::No                        &&
        #                              workLineCycleCount.CycleCountReconcile == NoYes::No;
        #
        #                    if (workLineCycleCount.RecId == 0)
        #                    {
        #                        errorMessage = "@WAX3346";
        #                        hasError = true;
        #                        break;
        #                    }
        #                }
        #
        #                licensePlateId = '';
        #
        #                if (!this.validateLicensePlateInLocation(_data))
        #                {
        #                    if (!WHSInvent::validateLicensePlateInLocation(_data, pass.lookup(#WMSLocationId), pass.lookup(#InventLocationId)))
        #                    {
        #                        if (InventLocation::find(inventLocationId).CycleCountAllowPalletMove)
        #                        {
        #                            licensePlateId = _data;
        #
        #                            cycleCountLocationId = this.findLocationByLicensePlate(licensePlateId);
        #
        #                            cycleCountInventDim.InventSiteId = inventSiteId;
        #                            cycleCountInventDim.InventLocationId = inventLocationId;
        #
        #                            WHSWorkCreateMovementBasic::createBasicMovementWork(pass.lookup(#UserId),
        #                                                                                '',
        #                                                                                0,
        #                                                                                '',
        #                                                                                cycleCountInventDim,
        #                                                                                licensePlateId,
        #                                                                                cycleCountLocationId,
        #                                                                                locationId,
        #                                                                                licensePlateId,
        #                                                                                this.getInventStatusId(),
        #                                                                                this.getInventStatusId());
        #
        #                            WHSRFControlData::createCycleCountWorkLineLP(licensePlateId, locationId, workLine.WorkId);
        #
        #                            if (pass.exists(#RFAddLP))
        #                            {
        #                                pass.remove(#RFAddLP);
        #                            }
        #
        #                            fieldValues.insert(#LicensePlateId, _data);
        #                        }
        #                        else
        #                        {
        #                            errorMessage = "@WAX1677";
        #                            hasError = true;
        #                        }
        #                        break;
        #                    }
        #                    if (pass.exists(#RFAddLP))
        #                    {
        #                        fieldValues.insert(#LicensePlateId, _data);
        #                        break;
        #                    }
        #                    pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) + 1);
        #
        #                    if (pass.exists(#NewLicensePlateId) &&
        #                        str2int(pass.lookup(#RetryCounter)) == WHSRFMenuItemCycleCount::find(pass.lookup(#MenuItem)).NumRetries  &&
        #                        pass.lookup(#NewLicensePlateId) != _data)
        #                    {
        #                        pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) - 1);
        #                    }
        #
        #                    pass.insert(#RFAddLP, 1);
        #                    errorMessage = "@WAX1168";
        #                    pass.insert(#NewLicensePlateId, _data);
        #                    fieldValues.insert(#LicensePlateId, '');
        #                    hasError = true;
        #                    break;
        #                }
        #
        #                licensePlateId = _data;
        #
        #                if (!this.validateItemInLocation(itemId))
        #                {
        #                    errorMessage = "@WAX1168";
        #                    hasError = true;
        #                    licensePlateId = '';
        #                    break;
        #                }
        #                fieldValues.insert(#LicensePlateId, _data);
        #                break;
        #            }
        #            else if (mode != WHSWorkExecuteMode::AdjustmentIn                           &&
        #                     mode != WHSWorkExecuteMode::ReportAsFinished                       &&
        #                     mode != WHSWorkExecuteMode::ReportAsFinishedAndLocate              &&
        #                     mode != WHSWorkExecuteMode::KanbanPut                              &&
        #                     mode != WHSWorkExecuteMode::KanbanPutAndLocate                     &&
        #                     mode != WHSWorkExecuteMode::PurchaseOrderLineReceiving             &&
        #                     mode != WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate    &&
        #                     mode != WHSWorkExecuteMode::PurchaseOrderItemReceiving             &&
        #                     mode != WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate    &&
        #                     mode != WHSWorkExecuteMode::LoadItemReceiving                      &&
        #                     mode != WHSWorkExecuteMode::LoadItemReceivingAndLocate             &&
        #                     mode != WHSWorkExecuteMode::ReturnOrder                            &&
        #                     mode != WHSWorkExecuteMode::ReturnOrderAndLocate                   &&
        #                     mode != WHSWorkExecuteMode::TransferOrderItemReceiving             &&
        #                     mode != WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate    &&
        #                     mode != WHSWorkExecuteMode::TransferOrderLineReceiving             &&
        #                     mode != WHSWorkExecuteMode::TransferOrderLineReceivingAndLocate    &&
        #                     mode != WHSWorkExecuteMode::LicensePlateLoading)
        #            {
        #                if (!WHSLicensePlate::exist(_data))
        #                {
        #                    if (workLine.WorkType != WHSWorkType::Put)
        #                    {
        #                        errorMessage = "@WAX1168";
        #                        hasError = true;
        #                        break;
        #                    }
        #                    else
        #                    {
        #                        WHSLicensePlate::createLicensePlate(_data);
        #                    }
        #                }
        #                else
        #                {
        #                    licensePlateId = _data;
        #                    if (mode != WHSWorkExecuteMode::UserDirected    &&
        #                        mode != WHSWorkExecuteMode::SystemDirected  &&
        #                        mode != WHSWorkExecuteMode::UserGrouping    &&
        #                        mode != WHSWorkExecuteMode::SystemGrouping  &&
        #                        mode != WHSWorkExecuteMode::PickPack        &&
        #                        mode != WHSWorkExecuteMode::ClusterPicking  &&
        #                        mode != WHSWorkExecuteMode::ValidatedUserDirected)
        #                    {
        #                        if (!this.validateLicensePlateInLocation(_data))
        #                        {
        #                            if (mode == WHSWorkExecuteMode::Movement && locationId == this.findLocationByNestedPlate(_data))
        #                            {
        #                                licensePlateId = _data;
        #                                fieldValues.insert(#LicensePlateId, _data);
        #                                pass.insert(#MoveNest, 1);
        #                                break;
        #                            }
        #
        #                            errorMessage = "@WAX1168";
        #                            licensePlateId = '';
        #                            hasError = true;
        #                            break;
        #                        }
        #                    }
        #                    else if (mode == WHSWorkExecuteMode::ClusterPicking)
        #                    {
        #                        if (!this.validateLicensePlateInLocation(_data, false, true) || !this.validateItemInLocation(pass.lookup(#ItemId)))
        #                        {
        #                            errorMessage = "@WAX1168";
        #                            licensePlateId = '';
        #                            hasError = true;
        #                            break;
        #                        }
        #                    }
        #                    else if (workLine.WorkType != WHSWorkType::Put && (!this.validateLicensePlateInLocation(_data, false, true) ||
        #                                                                          !this.validateItemInLocation(workLine.ItemId)))
        #                    {
        #                        errorMessage = "@WAX1168";
        #                        licensePlateId = '';
        #                        hasError = true;
        #                        break;
        #                    }
        #                    else if (InventTable::find(workLine.ItemId).whsBatchActive()    &&
        #                             workLine.inventDim().InventBatchId                     &&
        #                             workLine.WorkType   == WHSWorkType::Pick            &&
        #                             !this.batchExistInLocation(workLine.inventDim().InventBatchId))
        #                    {
        #                        errorMessage = "@WAX1168";
        #                        licensePlateId = '';
        #                        hasError = true;
        #                        break;
        #                    }
        #                    else if (workLine.WorkType == WHSWorkType::Pick                          &&
        #                            workLine.whsWorkTable().WorkTransType == WHSWorkTransType::Sales &&
        #                            InventTable::find(workLine.ItemId).whsBatchActive()              &&
        #                            !WHSWorkLine::isPutBefore(workLine.WorkId, workLine.LineNum)     &&
        #                            !this.checkBatchSellableDays(workLine, _data))
        #                    {
        #                        errorMessage = "@SYP4882702";
        #                        licensePlateId = '';
        #                        hasError = true;
        #                        break;
        #                    }
        #                    else if (InventTable::find(workLine.ItemId).whsBatchActive()
        #                    &&  workLine.WorkType == WHSWorkType::Pick
        #                    &&  WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).PickOldestBatch != WHSPickOldestBatch::None
        #                    &&  (!pass.exists(#FEFOWarnLP)
        #                    ||  pass.lookup(#FEFOWarnLP)           != licensePlateId)
        #                    &&  workLine.inventDim().InventBatchId == ''
        #                    &&  !this.validateOldestBatch(
        #                            licensePlateId,
        #                            workLine.wmsLocationId,
        #                            inventLocationId,
        #                            workLine.ItemId,
        #                            workLine.inventDim()))
        #                    {
        #                        oldestBatchSet  = WHSRFControlData::getOldestBatchInLoc(inventLocationId,
        #                                                                                workLine.wmsLocationId,
        #                                                                                workLine.ItemId,
        #                                                                                workLine.inventDim());
        #                        oldestBatchEnumerator = oldestBatchSet.getEnumerator();
        #                        oldestBatchEnumerator.moveNext();
        #                        errorMessage = strFmt("@WAX4165", oldestBatchEnumerator.current());
        #
        #                        if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).PickOldestBatch == WHSPickOldestBatch::Warn)
        #                        {
        #                            pass.insert(#FEFOWarnLP, licensePlateId);
        #                            colorText = WHSRFColorText::Warning;
        #                        }
        #
        #                        licensePlateId = '';
        #                        hasError = true;
        #                        break;
        #                    }
        #
        #                    if (pass.exists(#FEFOWarnLP))
        #                    {
        #                        pass.remove(#FEFOWarnLP);
        #                    }
        #                }
        #            }
        #            else if (mode == WHSWorkExecuteMode::AdjustmentIn || mode == WHSWorkExecuteMode::LicensePlateLoading)
        #            {
        #                if (!WHSLicensePlate::exist(_data))
        #                {
        #                    if (!this.validateLicensePlateQty(_data) || WMSLocation::exist(_data, inventLocationId))
        #                    {
        #                        errorMessage = "@WAX1168";
        #                        hasError = true;
        #                        break;
        #                    }
        #                    else
        #                    {
        #                        licensePlateId = _data;
        #                        fieldValues.insert(#LicensePlateId, _data);
        #                        break;
        #                    }
        #                }
        #                else
        #                {
        #                    if (WHSLicensePlate::isParentLicensePlate(_data))
        #                    {
        #                        errorMessage = "@WAX3934";
        #                        hasError = true;
        #                        break;
        #                    }
        #
        #                    if (!this.validateLicensePlateInLocation(_data, true))
        #                    {
        #                        if (!this.validateLicensePlateQty(_data))
        #                        {
        #                            errorMessage = "@WAX1168";
        #                            hasError = true;
        #                            break;
        #                        }
        #                        else
        #                        {
        #                            licensePlateId = _data;
        #                            fieldValues.insert(#LicensePlateId, _data);
        #                        }
        #                    }
        #                    else
        #                    {
        #                        licensePlateId = _data;
        #
        #                        if (!this.validateLicensePlateQty(_data))
        #                        {
        #                            if (mode == WHSWorkExecuteMode::LicensePlateLoading)
        #                            {
        #                                errorMessage = "@WAX1168";
        #                                hasError = true;
        #                                break;
        #                            }
        #                        }
        #
        #                        itemId = this.getItemId();
        #
        #                        if (itemId)
        #                        {
        #                            fieldValues.insert(#ItemId, itemId);
        #                        }
        #
        #                        fieldValues.insert(#LicensePlateId, _data);
        #                        break;
        #                    }
        #                }
        #            }
        #            else if (workLine.WorkType != WHSWorkType::Put && !this.validateLicensePlateQty(_data))
        #            {
        #                if(   workLine.WorkType == WHSWorkType::Pick
        #                   && (mode             == WHSWorkExecuteMode::ReportAsFinished
        #                   ||  mode             == WHSWorkExecuteMode::ReportAsFinishedAndLocate
        #                   ||  mode             == WHSWorkExecuteMode::KanbanPut
        #                   ||  mode             == WHSWorkExecuteMode::KanbanPutAndLocate))
        #                {
        #                    if (!this.validateLicensePlateInLocation(_data))
        #                    {
        #                        errorMessage = "@WAX1168";
        #                        hasError = true;
        #                        break;
        #                    }
        #                }
        #                else if (workLine.WorkType == WHSWorkType::Print)
        #                {
        #                    licensePlateId = _data;
        #                    fieldValues.insert(#LicensePlateId, _data);
        #                    break;
        #                }
        #                else
        #                {
        #                    errorMessage = "@WAX1168";
        #                    hasError = true;
        #                    break;
        #                }
        #            }
        #            licensePlateId = _data;
        #            fieldValues.insert(#LicensePlateId, _data);
        #            break;
        #
        #        case #UOM:
        #            if (!itemId || itemId == '')
        #            {
        #                fieldValues.remove(#UOM);
        #            }
        #            else
        #            {
        #                if (mode == WHSWorkExecuteMode::ProductionScrap && !WHSRFControlData::validateQtyToScrap(qtyToScrap, _data, itemId, prodId))
        #                {
        #                    errorMessage = "@WAX1172";
        #                    hasError = true;
        #                    break;
        #                }
        #                else if (mode == WHSWorkExecuteMode::Movement)
        #                {
        #                    inventDimIdProduct = this.findInventDimIdProduct();
        #                    // Validate against negative inventory rules
        #                    if (InventTableModule::unitConvert(itemId, ModuleInventPurchSales::Invent, _data, qty, inventDimIdProduct) > this.getQty()  &&
        #                        (!InventTable::find(itemId).whsAllowPhysNeg()                                                       ||
        #                         !WMSLocation::find(locationId, inventLocationId).whsLocationProfile().AllowNegative))
        #                    {
        #                        errorMessage = "@WAX1172";
        #                        hasError = true;
        #                        break;
        #                    }
        #                }
        #                else if (step == #ShortPick)
        #                {
        #                    inventUOM = InventTableModule::find(fieldValues.lookupStr(#Itemid), ModuleInventPurchSales::Invent).UnitId;
        #
        #                    if (mode != WHSWorkExecuteMode::ClusterPicking)
        #                    {
        #                        origQtyToPick = workLine.InventQtyRemain;
        #
        #                    }
        #                    else // Cluster Picking
        #                    {
        #                        origQtyToPick = pass.lookup(#Qty);
        #                    }
        #
        #                    if (_data == inventUOM)
        #                    {
        #                        fieldValues.insert(#QtyShort, origQtyToPick - any2real(fieldValues.lookup(#QtytoPick)));
        #                    }
        #                    else
        #                    {
        #                        inventDimIdProduct = this.findInventDimIdProduct();
        #                        unitConverter = EcoResReleasedProductUnitConverter::construct();
        #
        #                        if (unitConverter.canBeConverted(UnitOfMeasure::findBySymbol(inventUOM).RecId,
        #                                                         UnitOfMeasure::findBySymbol(_data).RecId,
        #                                                         itemId,
        #                                                         inventDimIdProduct))
        #
        #                        {
        #                            fieldValues.insert(#QtyShort, (unitConverter.convert(origQtyToPick,
        #                                                                                 UnitOfMeasure::findBySymbol(inventUOM).RecId,
        #                                                                                 UnitOfMeasure::findBySymbol(_data).RecId,
        #                                                                                 NoYes::No,
        #                                                                                 itemId,
        #                                                                                 inventDimIdProduct) - any2real(fieldValues.lookup(#QtyToPick))));
        #                        }
        #                        else
        #                        {
        #                            errorMessage = strFmt("@SYS92102", inventUOM, _data);
        #                            hasError = true;
        #                            break;
        #                        }
        #                    }
        #                }
        #
        #                // If a new item was scanned with a different default UOM it was already set as the selected UOM.
        #                if (!saveUOMValue)
        #                {
        #                    fieldValues.insert(#UOM, _data);
        #                    fieldValues.insert(#SelectedValueUOM, _data);
        #                }
        #            }
        #            break;
        #
        #        case #CycleCountUOM1:
        #            fieldValues.insert(#CycleCountUOM1, _data);
        #            break;
        #
        #        case #CycleCountUOM2:
        #            fieldValues.insert(#CycleCountUOM2, _data);
        #            break;
        #
        #        case #CycleCountUOM3:
        #            fieldValues.insert(#CycleCountUOM3, _data);
        #            break;
        #
        #        case #CycleCountUOM4:
        #            fieldValues.insert(#CycleCountUOM4, _data);
        #            break;
        #
        #        case #WorkId:
        #            if (!WHSWorkTable::exist(_data))
        #            {
        #                errorMessage = "@WAX613";
        #                hasError = true;
        #                break;
        #            }
        #            if (mode == WHSWorkExecuteMode::ClusterPicking)
        #            {
        #                clusterWorkTable = WHSWorkTable::find(_data);
        #
        #                if (clusterWorkTable.WorkStatus       > WHSWorkStatus::InProcess     ||
        #                    clusterWorkTable.WorkTransType   == WHSWorkTransType::CycleCount ||
        #                    !this.validateWorkTableLocations(clusterWorkTable.WorkId))
        #                {
        #                    errorMessage = "@WAX613";
        #                    hasError = true;
        #                    break;
        #                }
        #                else if (clusterWorkTable.InventLocationId != pass.lookup(#InventLocationId))
        #                {
        #                    errorMessage = "@WAX1239";
        #                    hasError = true;
        #                    break;
        #                }
        #
        #                clusterWorkLine = workExecute.getFirstOpenLine(clusterWorkTable.WorkId, pass.lookup(#UserId));
        #
        #                if (!WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookup(#MenuItem), clusterWorkLine.WorkClassId))
        #                {
        #                    errorMessage = "@WAX1459";
        #                    hasError = true;
        #                    break;
        #                }
        #            }
        #            workId = _data;
        #            fieldValues.insert(#WorkId, _data);
        #            break;
        #
        #        case #ProdId:
        #            if (!ProdTable::exist(_data))
        #            {
        #                errorMessage = "@WAX1162";
        #                hasError = true;
        #                break;
        #            }
        #
        #            if (mode == WHSWorkExecuteMode::StartProdOrder && ProdTable::find(_data).inventDim().InventLocationId != inventLocationId)
        #            {
        #                errorMessage = "@WAX1239";
        #                hasError = true;
        #                break;
        #            }
        #
        #            if (!this.validateProdOrder(_data))
        #            {
        #                errorMessage = strFmt("@WAX5569", _data);
        #                hasError = true;
        #                break;
        #            }
        #
        #            prodId = _data;
        #            fieldValues.insert(#ProdId, _data);
        #
        #            if (mode == WHSWorkExecuteMode::ProdLastPallet)
        #            {
        #                if (ProdTable::find(prodId).ProdStatus != ProdStatus::StartedUp)
        #                {
        #                    errorMessage = "@WAX2578";
        #                    prodId = '';
        #                    fieldValues.remove(#ProdId);
        #                    hasError = true;
        #                    break;
        #                }
        #                else if (WHSProdTable::find(prodId).LastPallet)
        #                {
        #                    errorMessage = "@WAX2579";
        #                    prodId = '';
        #                    fieldValues.remove(#ProdId);
        #                    hasError = true;
        #                    break;
        #                }
        #            }
        #            else if (mode != WHSWorkExecuteMode::ProductionScrap)
        #            {
        #                if ((mode == WHSWorkExecuteMode::ReportAsFinished               ||
        #                     mode == WHSWorkExecuteMode::ReportAsFinishedAndLocate)     &&
        #                    ProdTable::find(prodId).ProdStatus != ProdStatus::StartedUp &&
        #                    ProdTable::find(prodId).ProdStatus != ProdStatus::ReportedFinished)
        #                {
        #                    errorMessage = strFmt("@WAX2508", ProdTable::find(prodId).ProdStatus);
        #                    prodId = '';
        #                    fieldValues.remove(#ProdId);
        #                    hasError = true;
        #                    break;
        #                }
        #
        #                if(ProdTable::find(prodId).ProdType == ProdType::Standard    ||
        #                    (ProdTable::find(prodId).ProdType == ProdType::Process   &&
        #                     !PmfProdCoBy::existProdId(prodId)                       &&
        #                     !ProdTable::find(prodId).PmfCoByVarAllow))
        #                {
        #                    itemId = this.getProdItemId();
        #
        #                }
        #                else
        #                {
        #                    itemId = '';
        #                }
        #
        #                fieldValues.insert(#ItemId, itemId);
        #
        #                uom = this.getProdUOM();
        #                fieldValues.insert(#UOM, uom);
        #                break;
        #            }
        #            else
        #            {
        #                if (ProdTable::find(prodId).ProdStatus < ProdStatus::StartedUp ||
        #                    ProdTable::find(prodId).ProdStatus == ProdStatus::Completed)
        #                {
        #                    errorMessage = "@WAX1162";
        #                    prodId = '';
        #                    fieldValues.remove(#ProdId);
        #                    hasError = true;
        #                    break;
        #                }
        #            }
        #            break;
        #
        #        case #KanbanOrCardId:
        #            // try as card ID first
        #            kanban       = Kanban::findKanbanCardId(_data);
        #            kanbanCardId = kanban.KanbanCardId;
        #            kanbanId     = kanban.KanbanId;
        #
        #            if (!kanban)
        #            {
        #                // try as kanban ID
        #                kanban   = Kanban::findKanbanId(_data);
        #                kanbanId = kanban.KanbanId;
        #            }
        #
        #            if (!kanban)
        #            {
        #                errorMessage = "@WAX4617";
        #                hasError     = true;
        #                break;
        #            }
        #
        #            kanbanJob = kanban.lastKanbanJob();
        #
        #            // has a value if kanban was identified by card or ID
        #            fieldValues.insert(#KanbanId,kanbanId);
        #
        #            // has a value if kanban was identified by card
        #            fieldValues.insert(#KanbanCardId,kanbanCardId);
        #
        #            if (   !kanbanJob
        #                || !kanbanJob.type().mustBeInventoryControlled())
        #            {
        #                errorMessage = "@WAX4618";
        #            }
        #
        #            if (   !errorMessage
        #                && !kanban.status().isStatusUpdateAllowed(LeanKanbanStatus::Received,true))
        #            {
        #                errorMessage = "@WAX4619";
        #            }
        #
        #            if (errorMessage)
        #            {
        #                hasError     = true;
        #                kanbanId     = '';
        #                kanbanCardId = '';
        #                fieldValues.remove(#KanbanId);
        #                fieldValues.remove(#KanbanCardId);
        #                break;
        #            }
        #
        #            itemId = this.getKanbanItemId();
        #            fieldValues.insert(#ItemId,itemId);
        #
        #            qty = this.getKanbanQty();
        #            fieldValues.insert(#Qty,qty);
        #
        #            uom = this.getKanbanUOM();
        #            fieldValues.insert(#UOM,uom);
        #            fieldValues.insert(#SelectedValueUOM,uom);
        #            break;
        #
        #        case #CheckDigit:
        #            if (WMSLocation::find(locationId, inventLocationId).CheckText != _data)
        #            {
        #                errorMessage = "@WAX623";
        #                hasError = true;
        #                break;
        #            }
        #            checkDigit = _data;
        #            fieldValues.insert(#CheckDigit, _data);
        #            break;
        #
        #        case #BatchId:
        #            if (workLine.WorkType == WHSWorkType::Count)
        #            {
        #                if (!this.validateBatchInLocationCycleCount(_data))
        #                {
        #                    if (pass.exists(#RFAddLP))
        #                    {
        #                        fieldValues.insert(#BatchId, _data);
        #                        break;
        #                    }
        #                    pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) + 1);
        #                    pass.insert(#RFAddLP, 1);
        #                    errorMessage = "@WAX1163";
        #                    hasError = true;
        #                    break;
        #                }
        #                else
        #                {
        #                    fieldValues.insert(#BatchId, _data);
        #                    break;
        #                }
        #            }
        #            else if (mode               == WHSWorkExecuteMode::AdjustmentIn
        #            ||       mode               == WHSWorkExecuteMode::PurchaseOrderItemReceiving
        #            ||       mode               == WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate
        #            ||       mode               == WHSWorkExecuteMode::PurchaseOrderLineReceiving
        #            ||       mode               == WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate
        #            ||       mode               == WHSWorkExecuteMode::LoadItemReceiving
        #            ||       mode               == WHSWorkExecuteMode::LoadItemReceivingAndLocate
        #            ||       mode               == WHSWorkExecuteMode::LicensePlateLoading
        #            ||       mode               == WHSWorkExecuteMode::ReportAsFinished
        #            ||       mode               == WHSWorkExecuteMode::ReportAsFinishedAndLocate
        #            ||       mode               == WHSWorkExecuteMode::KanbanPut
        #            ||       mode               == WHSWorkExecuteMode::KanbanPutAndLocate
        #            ||       workLine.WorkType  == WHSWorkType::Put)
        #            {
        #                switch (mode)
        #                {
        #                    case WHSWorkExecuteMode::PurchaseOrderItemReceiving:
        #                    case WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate:
        #                    case WHSWorkExecuteMode::PurchaseOrderLineReceiving:
        #                    case WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate:
        #                    case WHSWorkExecuteMode::LoadItemReceiving:
        #                    case WHSWorkExecuteMode::LoadItemReceivingAndLocate:
        #                    case WHSWorkExecuteMode::ReportAsFinished:
        #                    case WHSWorkExecuteMode::ReportAsFinishedAndLocate:
        #                    case WHSWorkExecuteMode::KanbanPut:
        #                    case WHSWorkExecuteMode::KanbanPutAndLocate:
        #                        break;
        #                    default:
        #                        if (!this.allowMixedBatch(_data))
        #                        {
        #                            errorMessage = "@WAX1700";
        #                            hasError = true;
        #                        }
        #                        break;
        #                }
        #
        #                if (hasError)
        #                {
        #                    break;
        #                }
        #            }
        #            else if (mode == WHSWorkExecuteMode::TransferOrderItemReceiving || mode == WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate ||
        #                     mode == WHSWorkExecuteMode::TransferOrderLineReceiving || mode == WHSWorkExecuteMode::TransferOrderLineReceivingAndLocate)
        #            {
        #                inventBatchId = _data;
        #
        #                if (!this.validateBatchIdOnTOItemReceiving(inventBatchId))
        #                {
        #                    inventBatchId = '';
        #                    errorMessage = "@WAX1163";
        #                    hasError     = true;
        #                    break;
        #                }
        #            }
        #            else if (mode == WHSWorkExecuteMode::ReturnOrder || mode == WHSWorkExecuteMode::ReturnOrderAndLocate)
        #            {
        #                if (!InventBatch::exist(itemId, _data))
        #                {
        #                    errorMessage = "@WAX1163";
        #                    hasError     = true;
        #                    break;
        #                }
        #            }
        #            else
        #            {
        #                if (!InventBatch::exist(itemId, _data))
        #                {
        #                    errorMessage = "@WAX1163";
        #                    hasError = true;
        #                    break;
        #                }
        #
        #                // Do not allow the user to scan a batch containing a disposition code that is unavailable for picking.
        #                if (workLine.WorkType == WHSWorkType::Pick
        #                &&  !InventBatch::find(_data, itemId).validateBatchDispCodeForPicking(workLine.whsWorkTable().WorkTransType))
        #                {
        #                    errorMessage = strFmt("@WAX5580", _data);
        #                    hasError     = true;
        #                    break;
        #                }
        #
        #                if (!pass.exists(#InventoryStatus) || pass.lookup(#InventoryStatus) == '')
        #                {
        #                    inventBatchId = _data;
        #                    fromInventStatusId = this.getInventStatusId();
        #                }
        #
        #                if (mode != WHSWorkExecuteMode::MovementByTemplate
        #                    && mode != WHSWorkExecuteMode::Quarantine
        #                    && !this.batchExistInLocation(_data))
        #                {
        #                    errorMessage = "@WAX1693";
        #                    inventBatchId = '';
        #                    hasError = true;
        #                    break;
        #                }
        #                else if (workLine.WorkType == WHSWorkType::Pick
        #                &&       InventTable::find(workLine.ItemId).whsBatchActive())
        #                {
        #                    if (workLine.whsWorkTable().WorkTransType == WHSWorkTransType::Sales)
        #                    {
        #                        batchSellableDaysCheck = this.checkBatchSellableDays(workLine, '', _data);
        #                    }
        #
        #                    if (workLine.whsWorkTable().WorkTransType == WHSWorkTransType::Sales  &&
        #                        !WHSWorkLine::isPutBefore(workLine.WorkId, workLine.LineNum)      &&
        #                        !batchSellableDaysCheck)
        #                    {
        #                        errorMessage = "@SYP4882702";
        #                        inventBatchId = '';
        #                        hasError = true;
        #                        break;
        #                    }
        #                    else if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).PickOldestBatch != WHSPickOldestBatch::None
        #                    &&       mode != WHSWorkExecuteMode::Quarantine
        #                    &&      (!pass.exists(#FEFOWarnBatch)
        #                    ||      pass.lookup(#FEFOWarnBatch)        != _data)
        #                    &&      workLine.inventDim().InventBatchId == '')
        #                    {
        #                        if (batchSellableDaysCheck)
        #                        {
        #                            batchExpDate = this.batchExpiryDate();
        #                        }
        #
        #                        oldestBatchSet = WHSRFControlData::getOldestBatchInLoc(inventLocationId,
        #                                                                               workLine.wmsLocationId,
        #                                                                               workLine.ItemId,
        #                                                                               workLine.inventDim(),
        #                                                                               batchExpDate);
        #                        if (!oldestBatchSet.in(_data))
        #                        {
        #                            oldestBatchEnumerator = oldestBatchSet.getEnumerator();
        #                            oldestBatchEnumerator.moveNext();
        #                            errorMessage = strFmt("@WAX4165", oldestBatchEnumerator.current());
        #
        #                            if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).PickOldestBatch == WHSPickOldestBatch::Warn)
        #                            {
        #                                pass.insert(#FEFOWarnBatch, _data);
        #                                colorText = WHSRFColorText::Warning;
        #                            }
        #
        #                            inventBatchId = '';
        #                            hasError = true;
        #                            break;
        #                        }
        #                    }
        #                }
        #
        #                if (pass.exists(#FEFOWarnBatch))
        #                {
        #                    pass.remove(#FEFOWarnBatch);
        #                }
        #
        #                if (!pass.exists(#BatchId) || pass.lookup(#BatchId) == '')
        #                {
        #                    fromInventStatusId = this.getInventStatusId();
        #                    qty = this.getQty();
        #                    fieldValues.insert(#Qty, qty);
        #                }
        #            }
        #            inventBatchId = _data;
        #            fieldValues.insert(#BatchId, _data);
        #            break;
        #
        #        case #SerialId:
        #            if (workLine.WorkType == WHSWorkType::Count)
        #            {
        #                if (!this.validateSerialInLocationCycleCount(_data))
        #                {
        #                    if (pass.exists(#RFAddLP))
        #                    {
        #                        fieldValues.insert(#SerialId, _data);
        #                        break;
        #                    }
        #                    pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) + 1);
        #                    pass.insert(#RFAddLP, 1);
        #                    errorMessage = "@WAX1164";
        #                    hasError = true;
        #                    break;
        #                }
        #                else
        #                {
        #                    inventSerialId = _data;
        #                    fieldValues.insert(#SerialId, _data);
        #                    break;
        #                }
        #            }
        #            else if (mode == WHSWorkExecuteMode::AdjustmentIn || pass.exists(#AssignSerial))
        #            {
        #                if (pass.exists(#SkipSerialValidate))
        #                {
        #                    pass.remove(#SkipSerialValidate);
        #                    inventSerialId = _data;
        #                    fieldValues.insert(#SerialId, _data);
        #                    break;
        #                }
        #                else if (!this.validateSerialQty(_data, itemId))
        #                {
        #                    errorMessage = "@WAX1164";
        #                    hasError = true;
        #                    break;
        #                }
        #                else if (pass.exists(#AssignSerial) && !this.validateAssignSerial(_data))
        #                {
        #                    errorMessage = "@WAX1164";
        #                    hasError = true;
        #                    break;
        #                }
        #                else if (_data
        #                     &&  WHSRFControlData::checkSerialSalesProcess(workLine.InventTransId, _data, pass.lookupStr(#ItemId), pass.lookupStr(#RMANum)))
        #                {
        #                    errorMessage = "@SYP4861711";
        #                    hasError = true;
        #                    break;
        #                }
        #                else if (InventTable::find(workLine.ItemId).salesProcessSerialActive()
        #                     &&  this.validateSalesSerialQuantity())
        #                {
        #                    errorMessage = "@SYP4861946";
        #                    hasError = true;
        #                    break;
        #                }
        #            }
        #            // If split put we need to only validate the serial Id exists on the user.
        #            else if (step != #SplitPutWork
        #                &&  (mode == WHSWorkExecuteMode::PurchaseOrderItemReceiving             ||
        #                     mode == WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate    ||
        #                     mode == WHSWorkExecuteMode::PurchaseOrderLineReceiving             ||
        #                     mode == WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate    ||
        #                     mode == WHSWorkExecuteMode::TransferOrderItemReceiving             ||
        #                     mode == WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate    ||
        #                     mode == WHSWorkExecuteMode::TransferOrderLineReceiving             ||
        #                     mode == WHSWorkExecuteMode::TransferOrderLineReceivingAndLocate    ||
        #                     mode == WHSWorkExecuteMode::LoadItemReceiving                      ||
        #                     mode == WHSWorkExecuteMode::LoadItemReceivingAndLocate             ||
        #                     mode == WHSWorkExecuteMode::ReturnOrder                            ||
        #                     mode == WHSWorkExecuteMode::ReturnOrderAndLocate))
        #            {
        #                skipSerialExistInInventoryCheck = false;
        #                // If the item is being removed or transfering, the validateSerialQty should not been called again. This validation
        #                // has already been done during the receival of the item and it is expected to be in the inventory during the removal.
        #                if ((workLine.WorkType  == WHSWorkType::Pick
        #                     && (mode == WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate
        #                        ||  mode == WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate))
        #                    || (!workLine
        #                     && (mode == WHSWorkExecuteMode::TransferOrderItemReceiving
        #                         || mode == WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate
        #                         || mode == WHSWorkExecuteMode::TransferOrderLineReceiving
        #                         || mode == WHSWorkExecuteMode::TransferOrderLineReceivingAndLocate)))
        #                {
        #                   skipSerialExistInInventoryCheck = true;
        #                }
        #                if (!skipSerialExistInInventoryCheck && !this.validateSerialQty(_data, itemId))
        #                {
        #                    errorMessage = "@WAX1164";
        #                    hasError = true;
        #                    break;
        #                }
        #                else if (pass.exists(#SerialList)                                                   &&
        #                         str2num(pass.lookup(#SerialCounter)) <= str2num(pass.lookup(#SerialQty))   &&
        #                         conFind(WHSParameters::str2con(pass.lookup(#SerialList), '|'), _data) != 0)
        #                {
        #                    errorMessage = "@WAX1164";
        #                    hasError = true;
        #                    break;
        #                }
        #            }
        #            else
        #            {
        #                inventSerialId = _data;
        #
        #                fromInventStatusId = this.getInventStatusId();
        #
        #                if (!this.serialExistInLocation(_data))
        #                {
        #                    errorMessage = "@WAX1694";
        #                    hasError = true;
        #                    inventSerialId = '';
        #                    break;
        #                }
        #            }
        #
        #            inventSerialId = _data;
        #            fieldValues.insert(#SerialId, _data);
        #            break;
        #
        #        case #ProfileId_RU:
        #            if (workLine.WorkType == WHSWorkType::Count && !this.validateProfileInLocationCycleCount(_data))
        #            {
        #                if (pass.exists(#RFAddLP))
        #                {
        #                    fieldValues.insert(#ProfileId_RU, _data);
        #                    break;
        #                }
        #                pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) + 1);
        #                pass.insert(#RFAddLP, 1);
        #                dimError = "@WAX5626";
        #                errorMessage = strFmt("@WAX1165", dimError);
        #                hasError = true;
        #                break;
        #            }
        #            inventProfileId = _data;
        #            fieldValues.insert(#ProfileId_RU, _data);
        #            break;
        #
        #        case #OwnerId_RU:
        #            if (workLine.WorkType == WHSWorkType::Count && !this.validateOwnerInLocationCycleCount(_data))
        #            {
        #                if (pass.exists(#RFAddLP))
        #                {
        #                    fieldValues.insert(#OwnerId_RU, _data);
        #                    break;
        #                }
        #                pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) + 1);
        #                pass.insert(#RFAddLP, 1);
        #                dimError = "@SYS77709";
        #                errorMessage = strFmt("@WAX1165", dimError);
        #                hasError = true;
        #                break;
        #            }
        #            inventOwnerId = _data;
        #            fieldValues.insert(#OwnerId_RU, _data);
        #            break;
        #
        #        case #GtdId_RU:
        #            if (workLine.WorkType == WHSWorkType::Count && !this.validateGtdInLocationCycleCount(_data))
        #            {
        #                if (pass.exists(#RFAddLP))
        #                {
        #                    fieldValues.insert(#GtdId_RU, _data);
        #                    break;
        #                }
        #                pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) + 1);
        #                pass.insert(#RFAddLP, 1);
        #                dimError = "@GLS114996";
        #                errorMessage = strFmt("@WAX1165", dimError);
        #                hasError = true;
        #                break;
        #            }
        #            inventGtdId = _data;
        #            fieldValues.insert(#GtdId_RU, _data);
        #            break;
        #
        #        case #SizeId:
        #            if (workLine.WorkType == WHSWorkType::Count && !this.validateSizeInLocationCycleCount(_data))
        #            {
        #                if (pass.exists(#RFAddLP))
        #                {
        #                    if (InventTable::checkSize(itemId, _data))
        #                    {
        #                        fieldValues.insert(#SizeId, _data);
        #                        break;
        #                    }
        #                }
        #                else
        #                {
        #                    pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) + 1);
        #                    pass.insert(#RFAddLP, 1);
        #                }
        #                dimError = "@SYS73727";
        #                errorMessage = strFmt("@WAX1165", dimError);
        #                hasError = true;
        #                break;
        #            }
        #            else if (itemId && !InventTable::checkSize(itemId, _data))
        #            {
        #                dimError = "@SYS73727";
        #                errorMessage = strFmt("@WAX1165", dimError);
        #                hasError = true;
        #                break;
        #            }
        #            inventSizeId = _data;
        #            if (!fieldValues.lookupStr(#SizeId))
        #            {
        #                fieldValues.insert(#SizeId, _data);
        #            }
        #            break;
        #
        #        case #StyleId:
        #            if (workLine.WorkType == WHSWorkType::Count && !this.validateStyleInLocationCycleCount(_data))
        #            {
        #                if (pass.exists(#RFAddLP))
        #                {
        #                    if (InventTable::checkStyle(itemId, _data))
        #                    {
        #                        fieldValues.insert(#StyleId, _data);
        #                        break;
        #                    }
        #                }
        #                else
        #                {
        #                    pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) + 1);
        #                    pass.insert(#RFAddLP, 1);
        #                }
        #                dimError = "@FPK270000";
        #                errorMessage = strFmt("@WAX1165", dimError);
        #                hasError = true;
        #                break;
        #            }
        #            else if (itemId && !InventTable::checkStyle(itemId, _data))
        #            {
        #                dimError = "@FPK270000";
        #                errorMessage = strFmt("@WAX1165", dimError);
        #                hasError = true;
        #                break;
        #            }
        #            inventStyleId = _data;
        #            if (!fieldValues.lookupStr(#StyleId))
        #            {
        #                fieldValues.insert(#StyleId, _data);
        #            }
        #            break;
        #
        #        case #ColorId:
        #            if (workLine.WorkType == WHSWorkType::Count && !this.validateColorInLocationCycleCount(_data))
        #            {
        #                if (pass.exists(#RFAddLP))
        #                {
        #                    if (InventTable::checkColor(itemId, _data))
        #                    {
        #                        fieldValues.insert(#ColorId, _data);
        #                        break;
        #                    }
        #                }
        #                else
        #                {
        #                    pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) + 1);
        #                    pass.insert(#RFAddLP, 1);
        #                }
        #                dimError = "@SYS73726";
        #                errorMessage = strFmt("@WAX1165", dimError);
        #                hasError = true;
        #                break;
        #            }
        #            else if (itemId && !InventTable::checkColor(itemId, _data))
        #            {
        #                dimError = "@SYS73726";
        #                errorMessage = strFmt("@WAX1165", dimError);
        #                hasError = true;
        #                break;
        #            }
        #            else if ((mode == WHSWorkExecuteMode::AdjustmentIn          ||
        #                      mode == WHSWorkExecuteMode::LicensePlateLoading)  &&
        #                     !this.validateColorIdMixing(_data))
        #            {
        #                dimError = "@SYS73726";
        #                errorMessage = strFmt("@WAX1165", dimError);
        #                hasError = true;
        #                break;
        #            }
        #            inventColorId = _data;
        #            if (!fieldValues.lookupStr(#ColorId))
        #            {
        #                fieldValues.insert(#ColorId, _data);
        #            }
        #            break;
        #
        #        case #ConfigId:
        #            if (workLine.WorkType == WHSWorkType::Count && !this.validateConfigInLocationCycleCount(_data))
        #            {
        #                if (pass.exists(#RFAddLP))
        #                {
        #                    if (InventTable::checkConfig(itemId, _data))
        #                    {
        #                        fieldValues.insert(#ConfigId, _data);
        #                        break;
        #                    }
        #                }
        #                else
        #                {
        #                    pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) + 1);
        #                    pass.insert(#RFAddLP, 1);
        #                }
        #                dimError = "@SYS14011";
        #                errorMessage = strFmt("@WAX1165", dimError);
        #                hasError = true;
        #                break;
        #            }
        #            else if (itemId && !InventTable::checkConfig(itemId, _data))
        #            {
        #                dimError = "@SYS14011";
        #                errorMessage = strFmt("@WAX1165", dimError);
        #                hasError = true;
        #                break;
        #            }
        #            inventConfigId = _data;
        #            if (!fieldValues.lookupStr(#ConfigId))
        #            {
        #                fieldValues.insert(#ConfigId, _data);
        #            }
        #            break;
        #
        #        case #TargetLicensePlateId:
        #            if (mode == WHSWorkExecuteMode::ClusterPicking)
        #            {
        #                if ((this.validateTargetLicensePlateNotOnWork(_data) && step < #SortVerification) ||
        #                    (this.validateAndUpdateWorkClusterLPScan(_data) && step >= #SortVerification))
        #                {
        #                    targetLicensePlateId = _data;
        #                    fieldValues.insert(#TargetLicensePlateId, _data);
        #                    break;
        #                }
        #                else
        #                {
        #                    errorMessage = "@WAX2194";
        #                    hasError = true;
        #                    break;
        #                }
        #            }
        #            else
        #            {
        #                if ((workLine.WorkType   == WHSWorkType::Pick  && workLine.AskForNewLicensePlate) ||
        #                    (workLine.WorkType   == WHSWorkType::Pick                                        &&
        #                     !WMSLocation::find(locationId, inventLocationId).whsLocationIsLPControlled()       &&
        #                     !workLine.whsWorkTable().TargetLicensePlateId)                                  ||
        #                    workLine.WorkType    == WHSWorkType::Put)
        #                {
        #                    if (pass.exists(#GroupPutaway))
        #                    {
        #                        targetLicensePlateId = _data;
        #                        fieldValues.insert(#TargetLicensePlateId, _data);
        #                        break;
        #                    }
        #
        #                    if (this.validateLicensePlateQty(_data)         &&
        #                        !WMSLocation::find(_data, inventLocationId) &&
        #                        !WHSLicensePlate::isParentLicensePlate(_data))
        #                    {
        #                        targetLicensePlateId = _data;
        #                        fieldValues.insert(#TargetLicensePlateId, _data);
        #
        #                        if (workLine.AskForNewLicensePlate)
        #                        {
        #                            ttsbegin;
        #                            tmpWorkLine = WHSWorkLine::find(workLine.WorkId, workLine.LineNum, true);
        #                            tmpWorkLine.AskForNewLicensePlate = NoYes::No;
        #                            tmpWorkLine.update();
        #                            ttscommit;
        #                        }
        #                    }
        #                    // If the user is putting to an existing license plate exists in the location
        #                    else if ((workLine.WorkType == WHSWorkType::Put
        #                         &&   this.validateLicensePlateInLocation(_data, true, true))
        #                         ||  (workLine.whsWorkTable().TargetLicensePlateId == _data))
        #                    {
        #                        targetLicensePlateId = _data;
        #                        fieldValues.insert(#TargetLicensePlateId, _data);
        #                        break;
        #                    }
        #                    else
        #                    {
        #                        if (mode == WHSWorkExecuteMode::PickPack    &&
        #                            pass.exists(#TargetWorkId)              &&
        #                            pass.lookup(#TargetWorkId) != workLine.WorkId)
        #                        {
        #                            targetLicensePlateId = _data;
        #                            fieldValues.insert(#TargetLicensePlateId, _data);
        #                        }
        #                        else
        #                        {
        #                            errorMessage = "@WAX2194";
        #                            hasError = true;
        #                        }
        #                    }
        #                    break;
        #                }
        #                else
        #                {
        #                    targetLicensePlateId = _data;
        #                    fieldValues.insert(#TargetLicensePlateId, _data);
        #                    break;
        #                }
        #            }
        #
        #        case #PONum:
        #            purchTable = PurchTable::find(_data);
        #
        #            if (!purchTable)
        #            {
        #                errorMessage = "@WAX1242";
        #                hasError = true;
        #                break;
        #            }
        #            else if (purchTable.PurchStatus > PurchStatus::Backorder)
        #            {
        #                errorMessage = "@WAX4809";
        #                hasError = true;
        #                break;
        #            }
        #
        #            if (mode == WHSWorkExecuteMode::LoadItemReceiving || mode == WHSWorkExecuteMode::LoadItemReceivingAndLocate)
        #            {
        #                if (_enabled && !workline) // !workLine means that we are not in the putaway step
        #                {
        #                    purchLineProvider = this.loadItemReceivingPurchLineProvider(pass.lookup(#LoadId), itemId, itemInventDim, _data);
        #                    if (!purchLineProvider.isReceiptPossible())
        #                    {
        #                        errorMessage = "@WAX1242";
        #                        hasError = true;
        #                        break;
        #                    }
        #                }
        #            }
        #
        #            purchId = _data;
        #            fieldValues.insert(#PONum, _data);
        #            break;
        #
        #        case #POLineNum:
        #            poLineNum = str2int64(_data);
        #
        #            purchLine = PurchLine::find(purchId, poLineNum);
        #            if (!purchLine)
        #            {
        #                errorMessage = "@WAX1243";
        #                hasError = true;
        #                break;
        #            }
        #
        #            if (mode == WHSWorkExecuteMode::PurchaseOrderLineReceiving
        #                || mode == WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate)
        #            {
        #                if (this.isPurchaseOrderLineOnMoreThanOneLoad(purchLine.InventTransId))
        #                {
        #                    errorMessage = strFmt("%1\n%2", "@SYP4881102", "@SYP4881106");
        #                    hasError = true;
        #                    break;
        #                }
        #            }
        #
        #            fieldValues.insert(#POLineNum, poLineNum);
        #
        #            if (mode == WHSWorkExecuteMode::PurchaseOrderLineReceiving          ||
        #                mode == WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate ||
        #                mode == WHSWorkExecuteMode::LoadItemReceiving                   ||
        #                mode == WHSWorkExecuteMode::LoadItemReceivingAndLocate)
        #            {
        #                fieldValues.insert(#ItemId, purchLine.ItemId);
        #                fieldValues.insert(#Qty, purchLine.PurchQty);
        #            }
        #
        #            uom = defaulting ? this.getPurchUOM() : purchLine.PurchUnit;
        #            fieldValues.insert(#UOM, uom);
        #            break;
        #
        #        case #AdjustmentType:
        #            fieldValues.insert(#AdjustmentType, _data);
        #            fieldValues.insert(#SelectedAdjustmentType, _data);
        #            break;
        #
        #        case #InventoryStatus:
        #            if (workLine.WorkType == WHSWorkType::Count)
        #            {
        #                if (!this.validateStatusInLocationCycleCount(WHSInventStatus::findByName(_data).InventStatusId)  &&
        #                    !WMSLocation::find(workLine.wmsLocationId, pass.lookup(#InventLocationId)).whsLocationIsLPControlled())
        #                {
        #                    if (pass.exists(#RFAddLP))
        #                    {
        #                        fieldValues.insert(#SelectedValue, _data);
        #                        fieldValues.insert(#InventoryStatus, WHSInventStatus::findByName(_data).InventStatusId);
        #                        break;
        #                    }
        #                    pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) + 1);
        #                    pass.insert(#RFAddLP, 1);
        #                    dimError = "@SYS80127";
        #                    errorMessage = strFmt("@WAX1165", dimError);
        #                    hasError = true;
        #                    break;
        #                }
        #                else
        #                {
        #                    fieldValues.insert(#InventoryStatus, WHSInventStatus::findByName(_data).InventStatusId);
        #                    fieldValues.insert(#SelectedValue, _data);
        #                    break;
        #                }
        #            }
        #            else
        #            {
        #                fieldValues.insert(#InventoryStatus, WHSInventStatus::findByName(_data).InventStatusId);
        #                fieldValues.insert(#SelectedValue, _data);
        #
        #                if (mode != WHSWorkExecuteMode::Quarantine && mode != WHSWorkExecuteMode::MovementByTemplate && mode != WHSWorkExecuteMode::AdjustmentIn && mode != WHSWorkExecuteMode::LicensePlateLoading)
        #                {
        #                    if (pass.exists(#InventoryStatus)       &&
        #                        pass.lookup(#InventoryStatus) != '' &&
        #                        pass.lookup(#InventoryStatus) != WHSInventStatus::findByName(_data).InventStatusId)
        #                    {
        #                        fromInventStatusId =  WHSInventStatus::findByName(_data).InventStatusId;
        #                        qty = this.getQty();
        #                        if (qty)
        #                        {
        #                            fieldValues.insert(#Qty, qty);
        #                        }
        #                        else
        #                        {
        #                            fieldValues.insert(#Qty, '');
        #                        }
        #                        pass.insert(#Initiation, 1);
        #                    }
        #                    else if ((!pass.exists(#InventoryStatus) || pass.lookup(#InventoryStatus) == '') && fromInventStatusId)
        #                    {
        #                        fieldValues.insert(#InventoryStatus, fromInventStatusId);
        #                        fieldValues.insert(#SelectedValue, WHSInventStatus::find(fromInventStatusId).Name);
        #                    }
        #                }
        #            }
        #            break;
        #
        #        case #FromInventoryStatus:
        #            localInventStatusId = WHSInventStatus::findByName(_data).InventStatusId;
        #
        #            if (mode == WHSWorkExecuteMode::Quarantine || mode == WHSWorkExecuteMode::MovementByTemplate)
        #            {
        #                fieldValues.insert(#FromInventoryStatus, localInventStatusId);
        #                fieldValues.insert(#SelectedFromValue, _data);
        #
        #                if (pass.exists(#FromInventoryStatus) && pass.lookup(#FromInventoryStatus) != localInventStatusId)
        #                {
        #                    fromInventStatusId =  localInventStatusId;
        #
        #                    qty = this.getPhysicalInventQty();
        #
        #                    if (qty)
        #                    {
        #                        fieldValues.insert(#Qty, qty);
        #                    }
        #                    else
        #                    {
        #                        fieldValues.insert(#Qty, '');
        #                    }
        #                    pass.insert(#Initiation, 1);
        #                }
        #            }
        #            else
        #            {
        #                fieldValues.insert(#FromInventoryStatus, localInventStatusId);
        #            }
        #            break;
        #
        #        case #QtyToPick:
        #            fieldValues.insert(#QtyToPick, _data);
        #            inventDimIdProduct = this.findInventDimIdProduct();
        #            qty = InventTableModule::unitConvert(workLine.ItemId, ModuleInventPurchSales::Invent, uom, WHSWorkExecuteDisplay::str2numDisplay(_data), inventDimIdProduct);
        #
        #            if (!qty &&
        #                ((fieldValues.exists(#ProductConfirmation) && !fieldValues.lookup(#ProductConfirmation))
        #                || (pass.exists(#ProductConfirmation )&& !pass.lookup(#ProductConfirmation))))
        #            {
        #                fieldValues.insert(#ProductConfirmation, workLine.ItemId);
        #            }
        #
        #            if (mode == WHSWorkExecuteMode::ClusterPicking)
        #            {
        #                if ((qty < 0) || (WHSWorkExecuteDisplay::str2numDisplay(pass.lookup(#Qty)) < qty))
        #                {
        #                    fieldValues.insert(#QtyToPick, '');
        #                    errorMessage = "@WAX1172";
        #                    hasError = true;
        #                    break;
        #                }
        #
        #                fieldValues.insert(#QtyShort, WHSWorkExecuteDisplay::str2numDisplay(pass.lookup(#Qty)) - qty);
        #            }
        #            else
        #            {
        #                if ((workLine.InventQtyRemain - qty < 0 && step != #OverpickStep) || (qty < 0))
        #                {
        #                    fieldValues.insert(#QtyToPick, '');
        #                    errorMessage = "@WAX1172";
        #                    hasError = true;
        #                    break;
        #                }
        #            }
        #
        #            break;
        #
        #        case #FullQty:
        #            fieldValues.insert(#FullQty, _data);
        #            fullQty = WHSWorkExecuteDisplay::str2numDisplay(_data);
        #            if ((workLine.InventQtyRemain - fullQty < 0) || (fullQty < 0))
        #            {
        #                fieldValues.insert(#FullQty, '');
        #                errorMessage = "@WAX1172";
        #                hasError = true;
        #                break;
        #            }
        #            else if (workLine.isFirstPick() && workLine.InventQtyWork == workLine.InventQtyRemain && fullQty == 0)
        #            {
        #                fieldValues.insert(#FullQty, '');
        #                errorMessage = "@WAX1172";
        #                hasError = true;
        #                break;
        #            }
        #            else if (!this.checkDecimals(workLine.ItemId, fullQty))
        #            {
        #                fieldValues.insert(#FullQty, '');
        #                errorMessage = strfmt("@SYS83631", InventTable::inventDecimals(workLine.ItemId));
        #                errorMessage += '\n';
        #                hasError = true;
        #                break;
        #            }
        #
        #            break;
        #
        #        case #ExpDate:
        #            fieldValues.insert(#ExpDate, _data);
        #            if (WHSRFControlData::convertDateFormatStr2Date(_data) == Global::dateNull())
        #            {
        #                fieldValues.insert(#ExpDate, '');
        #                errorMessage = "@WAX1891";
        #                hasError = true;
        #                break;
        #            }
        #            if ((mode == WHSWorkExecuteMode::AdjustmentIn           ||
        #                 mode == WHSWorkExecuteMode::LicensePlateLoading)   &&
        #                !InventBatch::exist(pass.lookup(#ItemId), inventBatchId))
        #            {
        #                ttsbegin;
        #                inventBatch.ItemId          = pass.lookup(#ItemId);
        #                inventBatch.InventBatchId   = inventBatchId;
        #                inventBatch.ExpDate         = WHSRFControlData::convertDateFormatStr2Date(_data);
        #                inventBatch.insert();
        #                ttscommit;
        #            }
        #            break;
        #
        #        case #BatchUOM:
        #            fieldValues.insert(#BatchUOM, _data);
        #            inventDimIdProduct = this.findInventDimIdProduct();
        #            if (pass.exists(#BatchRunningQty) && WHSWorkExecuteDisplay::str2numDisplay(pass.lookup(#BatchRunningQty)) != 0 &&
        #                InventTableModule::unitConvert(pass.lookup(#ItemId),
        #                                               ModuleInventPurchSales::Invent,
        #                                               _data,
        #                                               fieldValues.lookup(#BatchQty),
        #                                               inventDimIdProduct) > WHSWorkExecuteDisplay::str2numDisplay(pass.lookup(#BatchRunningQty)))
        #            {
        #                errorMessage = "@WAX1172";
        #                hasError = true;
        #                break;
        #            }
        #            break;
        #
        #        case #Disposition:
        #            fieldValues.insert(#Disposition, _data);
        #            break;
        #
        #        case #BatchQty:
        #            batchQty = WHSWorkExecuteDisplay::str2numDisplay(data);
        #            if (batchQty < 0)
        #            {
        #                errorMessage = "@WAX1172";
        #                hasError = true;
        #                break;
        #            }
        #
        #            if (mode == WHSWorkExecuteMode::TransferOrderItemReceiving || mode == WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate   ||
        #                mode == WHSWorkExecuteMode::TransferOrderLineReceiving || mode == WHSWorkExecuteMode::TransferOrderLineReceivingAndLocate)
        #            {
        #                inventBatchId = fieldValues.lookup(#BatchId);
        #
        #                if (!this.validateBatchQtyOnTOItemReceiving(inventBatchId, batchQty))
        #                {
        #                    inventBatchId = '';
        #                    break;
        #                }
        #            }
        #
        #            fieldValues.insert(#BatchQty, batchQty);
        #            break;
        #
        #        case #ShortPickReason:
        #            fieldValues.insert(#ShortPickReason, WHSWorkException::findByDescriptionAndType(_data, WHSExceptionType::ShortPick).WorkExceptionCode);
        #            fieldValues.insert(#SelectedValue, _data);
        #            break;
        #
        #        case #QtyToScrap:
        #            qtyToScrap = WHSWorkExecuteDisplay::str2numDisplay(data);
        #
        #            if (qtyToScrap < 0)
        #            {
        #                errorMessage = "@WAX1172";
        #                hasError = true;
        #                break;
        #            }
        #
        #            fieldValues.insert(#QtyToScrap, qtyToScrap);
        #            break;
        #
        #        case #RMANum:
        #            if (SalesTable::findReturnItemNum(_data).RecId != 0)
        #            {
        #                fieldValues.insert(#RMANum, _data);
        #            }
        #            else
        #            {
        #                errorMessage = "@WAX3262";
        #                hasError = true;
        #            }
        #            break;
        #
        #        case #ClusterId:
        #            if (WHSWorkClusterTable::exist(_data)               &&
        #                WHSWorkClusterTable::find(_data).LockedUser  &&
        #                WHSWorkClusterTable::find(_data).LockedUser  != pass.lookup(#UserId))
        #            {
        #                errorMessage = "@WAX3748";
        #                hasError = true;
        #                break;
        #            }
        #            fieldValues.insert(#ClusterId, _data);
        #            break;
        #
        #        case #LoadId:
        #            if (WHSLoadTable::exist(_data) && WHSLoadTable::find(_data).LoadDirection == WHSLoadDirection::Inbound)
        #            {
        #                fieldValues.insert(#LoadId, _data);
        #            }
        #            else
        #            {
        #                errorMessage = "@WAX3626";
        #                hasError = true;
        #            }
        #            break;
        #
        #        case #TONum:
        #            if (!InventTransferTable::find(_data))
        #            {
        #                errorMessage = "@WAX3859";
        #                hasError = true;
        #                break;
        #            }
        #            else if (InventTransferTable::find(_data).InventLocationIdTo != pass.lookup(#InventLocationId))
        #            {
        #                errorMessage = "@WAX1239";
        #                hasError = true;
        #                break;
        #            }
        #            transferId = _data;
        #            fieldValues.insert(#TONum, _data);
        #            break;
        #
        #        case #ParentLP:
        #            if (mode == WHSWorkExecuteMode::LicensePlateBuild)
        #            {
        #                if (!this.validateLicensePlateQty(_data)    ||
        #                    WMSLocation::exist(_data, pass.lookup(#InventLocationId)))
        #                {
        #                    errorMessage = "@WAX3901";
        #                    hasError = true;
        #                    break;
        #                }
        #            }
        #            else if (mode == WHSWorkExecuteMode::LicensePlateBreak)
        #            {
        #                if (!WHSLicensePlate::isParentLicensePlate(_data))
        #                {
        #                    errorMessage = "@WAX3901";
        #                    hasError = true;
        #                    break;
        #                }
        #            }
        #            fieldValues.insert(#ParentLP, _data);
        #            break;
        #
        #        case #ChildLP:
        #            if (mode == WHSWorkExecuteMode::LicensePlateBuild)
        #            {
        #                if (this.findLocationByLicensePlate(_data)                  &&
        #                    this.findLocationByNestedPlate(pass.lookup(#ParentLP))  &&
        #                    this.findLocationByLicensePlate(_data) != this.findLocationByNestedPlate(pass.lookup(#ParentLP)))
        #                {
        #                    errorMessage = "@WAX3931";
        #                    hasError = true;
        #                    break;
        #                }
        #                else if (WMSLocation::find(this.findLocationByLicensePlate(_data), pass.lookup(#InventLocationId)).LocProfileId == WHSParameters::find().UserLocType  ||
        #                         WMSLocation::find(this.findLocationByNestedPlate(_data), pass.lookup(#InventLocationId)).LocProfileId == WHSParameters::find().UserLocType)
        #                {
        #                    errorMessage = "@WAX3932";
        #                    hasError = true;
        #                    break;
        #                }
        #                else if (WHSWorkTable::findByLicensePlate(_data))
        #
        #                {
        #                    errorMessage = "@WAX3933";
        #                    hasError = true;
        #                    break;
        #                }
        #                else if (_data == pass.lookup(#ParentLP) ||
        #                         !this.findLocationByLicensePlate(_data))
        #                {
        #                    errorMessage = "@WAX1168";
        #                    hasError = true;
        #                    break;
        #                }
        #            }
        #            else if (mode == WHSWorkExecuteMode::LicensePlateBreak)
        #            {
        #                if (WHSLicensePlate::find(_data).LicensePlateParent != pass.lookup(#ParentLP))
        #                {
        #                    errorMessage = "@WAX3924";
        #                    hasError = true;
        #                    break;
        #                }
        #            }
        #            fieldValues.insert(#ChildLP, _data);
        #            break;
        #
        #        case #StartLocationId:
        #            if (!WMSLocation::whsGetLocationId(_data, inventLocationId))
        #            {
        #                errorMessage = "@WAX1160";
        #                hasError = true;
        #                break;
        #            }
        #
        #            fieldValues.insert(#StartLocationId, WMSLocation::whsGetLocationId(_data, inventLocationId));
        #
        #            if (pass.exists(#StartLocationId) && pass.lookup(#StartLocationId) != fieldValues.lookup(#StartLocationId))
        #            {
        #                pass.insert(#Initiation, 1);
        #            }
        #            break;
        #
        #        case #ZoneId:
        #            if (!WHSZone::exist(_data))
        #            {
        #                errorMessage = "@WAX4085";
        #                hasError = true;
        #                break;
        #            }
        #
        #            fieldValues.insert(#ZoneId, _data);
        #
        #            if (pass.exists(#ZoneId) && pass.lookup(#ZoneId) != fieldValues.lookup(#ZoneId))
        #            {
        #                pass.insert(#Initiation, 1);
        #            }
        #            break;
        #
        #        case #WorkPoolId:
        #            fieldValues.insert(#WorkPoolId, _data);
        #            fieldValues.insert(#SelectedWorkPoolId, _data);
        #
        #            if (pass.exists(#SelectedWorkPoolId) && pass.lookup(#SelectedWorkPoolId) != fieldValues.lookup(#SelectedWorkPoolId))
        #            {
        #                pass.insert(#Initiation, 1);
        #            }
        #            break;
        #
        #        case #CheckInOutId:
        #            if (mode == WHSWorkExecuteMode::DriverCheckIn || mode == WHSWorkExecuteMode::DriverCheckOut)
        #            {
        #                if (WHSLoadTable::exist(_data))
        #                {
        #                    fieldValues.insert(#CheckInOutId, _data);
        #                    fieldValues.insert(#LoadId, _data);
        #                }
        #                else if (WHSShipmentTable::exist(_data))
        #                {
        #                    fieldValues.insert(#CheckInOutId, _data);
        #                    fieldValues.insert(#LoadId, WHSShipmentTable::find(_data).LoadId);
        #                }
        #                else if (TMSAppointment::exist(_data) && TMSAppointment::find(_data).ApptRefType == TMSApptRefType::Load)
        #                {
        #                    fieldValues.insert(#CheckInOutId, _data);
        #                    fieldValues.insert(#LoadId, TMSAppointment::find(_data).ApptRefNum);
        #                }
        #                else
        #                {
        #                    errorMessage = "@WAX1081";
        #                    hasError = true;
        #                    break;
        #                }
        #
        #                if (WHSLoadTable::exist(fieldValues.lookup(#LoadId)))
        #                {
        #                    hasError = this.validateLoadIdCheckOut(fieldValues.lookup(#LoadId));
        #                }
        #                else
        #                {
        #                    errorMessage = "@WAX3626";
        #                    hasError = true;
        #                }
        #            }
        #            break;
        #
        #        case #Carrier:
        #            fieldValues.insert(#SelectedValue, _data);
        #            fieldValues.insert(#Carrier, this.findCarrierByName(_data).CarrierCode);
        #
        #            break;
        #
        #        case #TOLineNum:
        #            toLineNum = WHSWorkExecuteDisplay::str2realDisplay(_data);
        #            if (!InventTransferLine::find(transferId, toLineNum))
        #            {
        #                errorMessage = "@WAX1243";
        #                hasError = true;
        #                break;
        #            }
        #
        #            fieldValues.insert(#TOLineNum, toLineNum);
        #
        #            if (mode == WHSWorkExecuteMode::TransferOrderLineReceiving          ||
        #                mode == WHSWorkExecuteMode::TransferOrderLineReceivingAndLocate)
        #            {
        #                itemId = InventTransferLine::find(transferId, toLineNum).ItemId;
        #                fieldValues.insert(#ItemId, itemId);
        #
        #                qty = InventTransferLine::find(transferId, toLineNum).QtyRemainReceive;
        #                fieldValues.insert(#Qty, qty);
        #            }
        #
        #            uom = this.getTransferUOM();
        #            fieldValues.insert(#UOM, uom);
        #            break;
        #
        #        case #VendBatchDate:
        #            hasError = this.validateVendBatchDate(_data);
        #
        #            if (!hasError)
        #            {
        #                fieldValues.insert(#VendBatchDate, _data);
        #
        #                if (pass.lookup(#VendBatchDate) != fieldValues.lookup(#VendBatchDate))
        #                {
        #                    pass.insert(#Initiation, 1);
        #                }
        #            }
        #            break;
        #
        #        case #UseVendBatchDate:
        #            hasError = this.validateUseVendBatchDate(_data);
        #
        #            if (!hasError)
        #            {
        #                fieldValues.insert(#UseVendBatchDate, _data);
        #
        #                if (pass.lookup(#UseVendBatchDate) != fieldValues.lookup(#UseVendBatchDate))
        #                {
        #                    pass.insert(#Initiation, 1);
        #                }
        #            }
        #            break;
        #
        #        case #VendExpDate:
        #            hasError = this.validateVendExpDate(_data);
        #
        #            if (!hasError)
        #            {
        #                fieldValues.insert(#VendExpDate, _data);
        #
        #                if (pass.lookup(#VendExpDate) != fieldValues.lookup(#VendExpDate))
        #                {
        #                    pass.insert(#Initiation, 1);
        #                }
        #            }
        #            break;
        #
        #        case #UseVendExpDate:
        #            hasError = this.validateUseVendExpDate(_data);
        #
        #            if (!hasError)
        #            {
        #                fieldValues.insert(#UseVendExpDate, _data);
        #
        #                if (pass.lookup(#UseVendExpDate) != fieldValues.lookup(#UseVendExpDate))
        #                {
        #                    pass.insert(#Initiation, 1);
        #                }
        #            }
        #            break;
        #
        #        case #CountryOfOrigin1:
        #            hasError = this.validateCountryOfOrigin1(_data);
        #
        #            if (!hasError)
        #            {
        #                fieldValues.insert(#CountryOfOrigin1, _data);
        #
        #                if (pass.lookup(#CountryOfOrigin1) != fieldValues.lookup(#CountryOfOrigin1))
        #                {
        #                    pass.insert(#Initiation, 1);
        #                }
        #            }
        #            break;
        #
        #        case #CountryOfOrigin2:
        #            hasError = this.validateCountryOfOrigin2(_data);
        #
        #            if (!hasError)
        #            {
        #                fieldValues.insert(#CountryOfOrigin2, _data);
        #
        #                if (pass.lookup(#CountryOfOrigin2) != fieldValues.lookup(#CountryOfOrigin2))
        #                {
        #                    pass.insert(#Initiation, 1);
        #                }
        #            }
        #            break;
        #
        #        case #VendBatchId:
        #            fieldValues.insert(#VendBatchId, _data);
        #
        #            if (pass.lookup(#VendBatchId) != fieldValues.lookup(#VendBatchId))
        #            {
        #                pass.insert(#Initiation, 1);
        #            }
        #            break;
        #
        #        case #Potency:
        #            origInventBatchId = this.getOrigInventBatchId();
        #
        #            // If the batch ID has changed, clear out the potency value.
        #            if (origInventBatchId && origInventBatchId != inventBatchId)
        #            {
        #                fieldValues.insert(#Potency, '');
        #                break;
        #            }
        #
        #            // Validate the potency value.
        #            if (_enabled
        #            &&  !pass.exists(#SkipPotencyValidation)
        #            &&  !(pass.hasValue(#Potency)
        #            &&    pass.lookup(#Potency) == _data))
        #            {
        #                hasError = this.validatePotency(_data);
        #            }
        #
        #            if (pass.exists(#SkipPotencyValidation))
        #            {
        #                pass.remove(#SkipPotencyValidation);
        #            }
        #
        #            if (!hasError)
        #            {
        #                // Clear out the base attribute ID, if it has been set.
        #                if (pass.exists(#BaseAttributeId))
        #                {
        #                    pass.remove(#BaseAttributeId);
        #                }
        #
        #                // If the potency value has passed validation, remove the warning.
        #                if (pass.exists(#PotencyValueWarn))
        #                {
        #                    pass.remove(#PotencyValueWarn);
        #                }
        #
        #                fieldValues.insert(#Potency, _data);
        #            }
        #            break;
        #
        #        case #DimUOM:
        #            // Use the selected dimension UOM, if necessary.
        #            if (pass.exists(#UseSelectedDimUOM))
        #            {
        #                data = _selected;
        #
        #                pass.remove(#UseSelectedDimUOM);
        #            }
        #
        #            fieldValues.insert(#DimUOM, data);
        #            inventDimIdProduct = this.findInventDimIdProduct();
        #            if (pass.exists(#DimRunningQty) && WHSWorkExecuteDisplay::str2numDisplay(pass.lookupStr(#DimRunningQty)) != 0 &&
        #                InventTableModule::unitConvert(pass.lookup(#ItemId),
        #                                               ModuleInventPurchSales::Invent,
        #                                               data,
        #                                               WHSWorkExecuteDisplay::str2numDisplay(fieldValues.lookupStr(#DimQty)),
        #                                               inventDimIdProduct) > WHSWorkExecuteDisplay::str2numDisplay(pass.lookup(#DimRunningQty)))
        #            {
        #                errorMessage = "@WAX1172";
        #                hasError = true;
        #                break;
        #            }
        #            break;
        #
        #        case #DimQty:
        #            dimQty = WHSWorkExecuteDisplay::str2numDisplay(data);
        #            if (dimQty < 0)
        #            {
        #                errorMessage = "@WAX1172";
        #                hasError = true;
        #                break;
        #            }
        #
        #            fieldValues.insert(#DimQty, dimQty);
        #            break;
        #
        #        case #ClusterPosition:
        #            if (!this.validateAndUpdateWorkClusterPositionName(_data))
        #            {
        #                errorMessage = "@WAX5565";
        #                hasError = true;
        #            }
        #            break;
        #
        #        case #BatchDisposition:
        #            origInventBatchId = this.getOrigInventBatchId();
        #
        #            // If the batch ID has changed, reset the batch disposition code to the default value.
        #            if (origInventBatchId != inventBatchId)
        #            {
        #                pass.insert(#ResetBatchDisposition, 1);
        #
        #                fieldValues.insert(#BatchDisposition, '');
        #                break;
        #            }
        #
        #            // Use the selected batch disposition code, if necessary.
        #            if (pass.exists(#UseSelectedBatchDispCode))
        #            {
        #                data = _selected;
        #
        #                pass.remove(#UseSelectedBatchDispCode);
        #            }
        #
        #            // Validate the batch disposition code.
        #            if (_enabled)
        #            {
        #                hasError = this.validateBatchDisposition(data);
        #            }
        #
        #            if (!hasError)
        #            {
        #                // If the batch disposition code has passed validation, remove the warning.
        #                if (pass.exists(#BatchDispositionWarn))
        #                {
        #                    pass.remove(#BatchDispositionWarn);
        #                }
        #
        #                fieldValues.insert(#BatchDisposition, data);
        #            }
        #            break;
        #
        #        case #FromBatchDisposition:
        #            fieldValues.insert(#FromBatchDisposition, data);
        #            break;
        #
        #        case #QtyToPut:
        #            qtyToPut  = WHSWorkExecuteDisplay::str2numDisplay(data);
        #            inventDim = inventDim::find(this.findInventDimId(true));
        #
        #            // Check if the qtyToPut is greater than what is on the user and that QtyToPut is greater than 0
        #            if (qtyToPut  > WHSInventOnHand::onHandQty(pass.lookUpStr(#ItemId), inventDim.inventDimId)
        #            ||  qtyToPut <= 0)
        #            {
        #                errorMessage = "@WAX1172";
        #                hasError = true;
        #                break;
        #            }
        #            else
        #            {
        #                fieldValues.insert(#QtyToPut, _data);
        #            }
        #            break;
        #
        #        case #LastBox:
        #             FieldValues.insert(#LastBox,data);
        #             break;
        #
        #        default:
        #            if (InventDim::isFieldIdDimensional(fieldName2id(tableNum(InventDim), _name)))
        #            {
        #                fieldValues.insert(_name, _data);
        #            }
        #            break;
        #    }
        #
        #    if (hasError && _name != #BatchUOM)
        #    {
        #        fieldValues.insert(_name, '');
        #    }
        #
        #    return hasError;
        #}
      ENDSOURCE
      SOURCE #rebuildContainer
        #container rebuildContainer(container    _con)
        #{
        #    container       ret = conNull();
        #    container       con = _con;
        #    container       errorCon = conNull();
        #
        #    ret += [conPeek(con, 1)];
        #    ret += [conPeek(_con, 2)];
        #
        #    con = conDel(con, 1, 1);
        #    con = conDel(con, 1, 1);
        #
        #    errorCon += #RFLabel;
        #    errorCon += #RFError;
        #    errorCon += errorMessage;
        #    errorCon += 1;
        #    errorCon += '';
        #    errorCon += '';
        #    errorCon += 0;
        #    errorCon += '';
        #    errorCon += 0;
        #    errorCon += true;
        #    errorCon += '';
        #    errorCon += WHSRFColor::getHexColor(colorText);
        #
        #    ret += [errorCon];
        #    ret += con;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #serialExistInLocation
        #boolean serialExistInLocation(InventSerialId      _inventSerialId)
        #{
        #    InventDim   inventDim;
        #    boolean     ret = false;
        #
        #    inventDim = pass.createInventDimFromPass();
        #
        #    if (workLine.inventDim().InventStatusId)
        #    {
        #        inventDim.InventStatusId = workLine.inventDim().InventStatusId;
        #    }
        #
        #    if (mode != WHSWorkExecuteMode::AdjustmentOut && pass.exists(#SelectedValue))
        #    {
        #        if (WHSInventStatus::find(pass.lookup(#SelectedValue)))
        #        {
        #            inventDim.InventStatusId = pass.lookup(#SelectedValue);
        #        }
        #        else
        #        {
        #            inventDim.InventStatusId = WHSInventStatus::findByName(pass.lookup(#SelectedValue)).InventStatusId;
        #        }
        #
        #        if (fromInventStatusId && fromInventStatusId != pass.lookup(#SelectedValue))
        #        {
        #            inventDim.InventStatusId = fromInventStatusId;
        #        }
        #    }
        #
        #    inventDim.InventSerialId = _inventSerialId;
        #
        #    inventDim = InventDim::findOrCreate(inventDim);
        #
        #    if (WHSInventOnHand::getWorkPhysicalInvent(itemId, inventDim.InventDimId) > 0)
        #    {
        #        ret = true;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateAndUpdateWorkClusterLPScan
        #/// <summary>
        #/// Validates that the license plate id scanned in is the proper target license plate id for the cluster item and updates the container
        #/// </summary>
        #/// <param name="_licensePlateId">
        #/// The target license plate id scanned in during cluster picking
        #/// </param>
        #/// <returns>
        #/// True if the LP is the same as the target for the current work in the cluster; otherwise, false
        #/// </returns>
        #public boolean validateAndUpdateWorkClusterLPScan(WHSLicensePlateId _licensePlateId)
        #{
        #    WHSWorkTransId      workTransId;
        #    WHSWorkTable        workTable;
        #    WHSWorkClusterTable workClusterTable;
        #    boolean             ret;
        #
        #    ttsbegin;
        #
        #    workClusterTable = WHSWorkClusterTable::find(pass.lookupStr(#ClusterId), true);
        #
        #    if (workClusterTable.WorkClusterTransContainer)
        #    {
        #        workTransId = conPeek(workClusterTable.WorkClusterTransContainer, 1);
        #
        #        workTable = WHSWorkTable::find(WHSWorkTrans::find(workTransId).WorkId);
        #
        #        ret = _licensePlateId == workTable.TargetLicensePlateId ? true : false;
        #
        #        if (ret)
        #        {
        #            workClusterTable.WorkClusterTransContainer = conDel(workClusterTable.WorkClusterTransContainer, 1, 1);
        #            workClusterTable.update();
        #        }
        #    }
        #
        #    ttscommit;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateAndUpdateWorkClusterPositionName
        #/// <summary>
        #/// Validates the work cluster position name against the current work in the work cluster and updates the container
        #/// </summary>
        #/// <param name="_clusterPosition">
        #/// The position scanned into the RF for the current work
        #/// </param>
        #/// <returns>
        #/// True if the cluster position entered matches position of the current work; otherwise, false
        #/// </returns>
        #public boolean validateAndUpdateWorkClusterPositionName(WHSClusterPosition _clusterPosition)
        #{
        #    WHSWorkTransId      workTransId;
        #    WHSWorkTrans        workTrans;
        #    WHSWorkClusterTable workClusterTable;
        #    WHSWorkClusterLine  workClusterLine;
        #    boolean             ret;
        #
        #    ttsbegin;
        #
        #    workClusterTable = WHSWorkClusterTable::find(pass.lookupStr(#ClusterId), true);
        #
        #    if (workClusterTable.WorkClusterTransContainer)
        #    {
        #        workTransId = conPeek(workClusterTable.WorkClusterTransContainer, 1);
        #
        #        workTrans = WHSWorkTrans::find(workTransId);
        #
        #        select firstonly ClusterPosition from workClusterLine
        #            where workClusterLine.ClusterId == pass.lookup(#ClusterId)  &&
        #                  workClusterLine.WorkId    == workTrans.WorkId;
        #
        #        ret = (_clusterPosition == workClusterLine.ClusterPosition) ? true : false;
        #
        #        if (ret)
        #        {
        #            workClusterTable.WorkClusterTransContainer = conDel(workClusterTable.WorkClusterTransContainer, 1, 1);
        #            workClusterTable.update();
        #        }
        #    }
        #
        #    ttscommit;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateAssignSerial
        #boolean validateAssignSerial(InventSerialId     _serialId)
        #{
        #    WHSDimTracking  dimTracking;
        #    InventDim       inventDim;
        #    boolean         ret = true;
        #
        #    select firstonly RecId from dimTracking
        #        join InventDimId, InventSerialId from inventDim
        #        where dimTracking.InventDimId   == inventDim.InventDimId    &&
        #              dimTracking.WorkId        == workLine.WorkId       &&
        #              dimTracking.LineNum       == workLine.LineNum         &&
        #              inventDim.InventSerialId  == _serialId;
        #
        #    if (dimTracking.RecId != 0)
        #    {
        #        ret = false;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateBatchDisposition
        #/// <summary>
        #///     Validates the specified batch disposition code.
        #/// </summary>
        #/// <param name="_batchDispCode">
        #///     The specified batch disposition code.
        #/// </param>
        #/// <param name="_controlName">
        #///     The name used to identify the RF control.
        #/// </param>
        #/// <returns>
        #///     Returns a Boolean value to indicate whether the data is valid.
        #/// </returns>
        #protected boolean validateBatchDisposition(PdsBatchDispositionCode _batchDispCode, str _controlName = #BatchDisposition)
        #{
        #    boolean                 hasError;
        #    PdsBatchDispositionCode defaultValue;
        #
        #    // Only perform the validation check if the batch disposition code has changed.
        #    if (!pass.exists(_controlName)
        #    ||  pass.lookup(_controlName) != _batchDispCode)
        #    {
        #        defaultValue = pass.lookupStr(#BatchDispositionDefault);
        #
        #        // If batch disposition is being changed, validate that the new disposition code is not the same as the original.
        #        if (mode            == WHSWorkExecuteMode::ChangeBatchDisposition
        #        &&  _batchDispCode  == defaultValue)
        #        {
        #            hasError = true;
        #            errorMessage = "@WAX5577";
        #        }
        #
        #        // Display a warning if the batch disposition code does not match the default value.
        #        if (!hasError
        #        &&  _batchDispCode                      != defaultValue
        #        &&  (!pass.exists(#BatchDispositionWarn)
        #        ||   pass.lookup(#BatchDispositionWarn) != _batchDispCode))
        #        {
        #            hasError = true;
        #            errorMessage = "@WAX5566";
        #
        #            pass.insert(#BatchDispositionWarn, _batchDispCode);
        #            colorText = WHSRFColorText::Warning;
        #        }
        #    }
        #
        #    return hasError;
        #}
      ENDSOURCE
      SOURCE #validateBatchIdOnTOItemReceiving
        #boolean validateBatchIdOnTOItemReceiving(InventBatchId _batchId)
        #{
        #    boolean             ret = true;
        #    InventTransferLine  transferLine;
        #    InventTrans         inventTrans;
        #    InventTransOrigin   inventTransOrigin;
        #    InventDim           inventDim;
        #
        #    transferLine = InventTransferLine::find(pass.lookup(#TONum), pass.lookup(#TOLineNum));
        #
        #    select firstonly inventTrans
        #        join InventDimId, InventBatchId from inventDim
        #        join InventTransId, RecId from inventTransOrigin
        #        where inventTrans.InventTransOrigin     == inventTransOrigin.RecId              &&
        #              inventTransOrigin.InventTransId   == transferLine.InventTransIdReceive    &&
        #              inventTrans.StatusReceipt         == StatusReceipt::Ordered               &&
        #              inventDim.InventDimId             == inventTrans.InventDimId              &&
        #              inventDim.InventBatchId           == _batchId;
        #
        #    if (!inventTrans)
        #    {
        #        ret = false;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateBatchInLocationCycleCount
        #boolean validateBatchInLocationCycleCount(InventBatchId   _batchId)
        #{
        #    InventDim inventDimValue;
        #
        #    inventDimValue.InventBatchId = _batchId;
        #
        #    return this.validateFieldInLocationCycleCount(inventDimValue, fieldNum(InventDim, InventBatchId));
        #}
      ENDSOURCE
      SOURCE #validateBatchQtyOnTOItemReceiving
        #boolean validateBatchQtyOnTOItemReceiving(InventBatchId _batchId, Qty _batchQty)
        #{
        #    boolean             ret = true;
        #    InventTransferLine  transferLine;
        #    InventDim           inventDim;
        #    InventTrans         inventTrans;
        #    InventTransOrigin   inventTransOrigin;
        #
        #    transferLine = InventTransferLine::find(pass.lookup(#TONum), pass.lookup(#TOLineNum));
        #
        #    select firstonly Qty from inventTrans
        #        join InventDimId, InventBatchId from inventDim
        #        join RecId, InventTransId from inventTransOrigin
        #        where inventTrans.InventTransOrigin     == inventTransOrigin.RecId              &&
        #              inventTransOrigin.InventTransId   == transferLine.InventTransIdReceive    &&
        #              inventTrans.StatusReceipt         == StatusReceipt::Ordered               &&
        #              inventDim.InventDimId             == inventTrans.InventDimId              &&
        #              inventDim.InventBatchId           == _batchId;
        #
        #    if (inventTrans.Qty < _batchQty)
        #    {
        #        fieldValues.insert(#BatchQty, inventTrans.Qty);
        #        ret = false;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateColorIdMixing
        #boolean validateColorIdMixing(EcoResItemColorName _inventColorId)
        #{
        #    boolean     ret;
        #    InventSum   inventSum;
        #    InventDim   inventDim;
        #
        #    ttsbegin;
        #
        #    if (WHSLocationProfile::find(WMSLocation::find(locationId, inventLocationId).LocProfileId).AllowMixedItems)
        #    {
        #        ret = true;
        #    }
        #    else
        #    {
        #        select firstonly RecId from inventSum
        #            join InventDimId, InventSiteId, InventLocationId, wmsLocationId, InventColorId from inventDim
        #            where inventSum.InventDimId         == inventDim.InventDimId    &&
        #                  inventSum.PhysicalInvent      != 0                        &&
        #                  inventDim.InventSiteId        == inventSiteId             &&
        #                  inventDim.InventLocationId    == inventLocationId         &&
        #                  inventDim.wmsLocationId       == locationId               &&
        #                  inventDim.InventColorId       != _inventColorId;
        #
        #        if (inventSum.RecId == 0)
        #        {
        #            ret = true;
        #        }
        #    }
        #
        #    ttscommit;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateColorInLocationCycleCount
        #boolean validateColorInLocationCycleCount(EcoResItemColorName _colorId)
        #{
        #    InventDim inventDimValue;
        #
        #    inventDimValue.InventColorId = _colorId;
        #
        #    return this.validateFieldInLocationCycleCount(inventDimValue, fieldNum(InventDim, InventColorId));
        #}
      ENDSOURCE
      SOURCE #validateConfigInLocationCycleCount
        #boolean validateConfigInLocationCycleCount(EcoResItemConfigurationName _configId)
        #{
        #    InventDim inventDimValue;
        #
        #    inventDimValue.ConfigId = _configId;
        #
        #    return this.validateFieldInLocationCycleCount(inventDimValue, fieldNum(InventDim, ConfigId));
        #}
      ENDSOURCE
      SOURCE #validateCountryOfOrigin1
        #/// <summary>
        #///     Validates the first country of origin field.
        #/// </summary>
        #/// <param name="_countryOfOrigin1">
        #///     The first country of origin.
        #/// </param>
        #/// <returns>
        #///     Returns a Boolean value to indicate whether the data is valid.
        #/// </returns>
        #protected boolean validateCountryOfOrigin1(PdsCountryOfOrigin _countryOfOrigin1)
        #{
        #    PdsCountryOfOrigin  countryOfOrigin2;
        #    boolean             hasError;
        #
        #    if (_countryOfOrigin1 && !LogisticsAddressCountryRegion::find(_countryOfOrigin1))
        #    {
        #        errorMessage = strFmt("@SYS316352", _countryOfOrigin1, fieldPName(PdsVendBatchInfo, CountryOfOrigin1), tablePName(LogisticsAddressCountryRegion));
        #        hasError = true;
        #    }
        #    else
        #    {
        #        countryOfOrigin2 = pass.lookup(#CountryOfOrigin2);
        #
        #        if (_countryOfOrigin1 && _countryOfOrigin1 == countryOfOrigin2)
        #        {
        #            errorMessage = "@PDS1356";
        #            hasError = true;
        #        }
        #    }
        #
        #    return hasError;
        #}
      ENDSOURCE
      SOURCE #validateCountryOfOrigin2
        #/// <summary>
        #///     Validates the second country of origin field.
        #/// </summary>
        #/// <param name="_countryOfOrigin2">
        #///     The second country of origin.
        #/// </param>
        #/// <returns>
        #///     Returns a Boolean value to indicate whether the data is valid.
        #/// </returns>
        #protected boolean validateCountryOfOrigin2(PdsCountryOfOrigin _countryOfOrigin2)
        #{
        #    PdsCountryOfOrigin  countryOfOrigin1;
        #    boolean             hasError;
        #
        #    if (_countryOfOrigin2 && !LogisticsAddressCountryRegion::find(_countryOfOrigin2))
        #    {
        #        errorMessage = strFmt("@SYS316352", _countryOfOrigin2, fieldPName(PdsVendBatchInfo, CountryOfOrigin2), tablePName(LogisticsAddressCountryRegion));
        #        hasError = true;
        #    }
        #    else
        #    {
        #        countryOfOrigin1 = fieldValues.exists(#CountryOfOrigin1) ? fieldValues.lookup(#CountryOfOrigin1) : pass.lookup(#CountryOfOrigin1);
        #
        #        if (_countryOfOrigin2 && _countryOfOrigin2 == countryOfOrigin1)
        #        {
        #            errorMessage = "@PDS1356";
        #            hasError = true;
        #        }
        #    }
        #
        #    return hasError;
        #}
      ENDSOURCE
      SOURCE #validateFieldInLocationCycleCount
        #/// <summary>
        #///     Validates a field in location cycle count.
        #/// </summary>
        #/// <param name="_inventDimValue">
        #///     InventDim value.
        #/// </param>
        #/// <param name="_dimFieldId">
        #///     Field ID in InventDim.
        #/// </param>
        #/// <returns>
        #///     true if validation succeed; otherwise false.
        #/// </returns>
        #protected boolean validateFieldInLocationCycleCount(
        #    InventDim   _inventDimValue,
        #    FieldId     _dimFieldId)
        #{
        #    WHSWorkLineCycleCount   workLineCycleCount;
        #    InventDim               inventDim;
        #
        #    select firstonly RecId from workLineCycleCount
        #        where workLineCycleCount.WorkId  == workLine.WorkId
        #        &&    workLineCycleCount.LineNum == workLine.LineNum
        #    exists join inventDim
        #        where inventDim.InventDimId      == workLineCycleCount.InventDimId
        #        &&    inventDim.(_dimFieldId)    == _inventDimValue.(_dimFieldId);
        #
        #    return (workLineCycleCount.RecId != 0);
        #}
      ENDSOURCE
      SOURCE #validateGtdInLocationCycleCount
        #boolean validateGtdInLocationCycleCount(InventGTDId_RU _gtdId)
        #{
        #    InventDim inventDimValue;
        #
        #    inventDimValue.InventGtdId_RU = _gtdId;
        #
        #    return this.validateFieldInLocationCycleCount(inventDimValue, fieldNum(InventDim, InventGtdId_RU));
        #}
      ENDSOURCE
      SOURCE #validateItemInLocation
        #/// <summary>
        #/// Validates if there is physical inventory quantity for the current item. The inventory dimension values that are used
        #/// to retrieve the quantity are copied from the <c>InventDim</c> record related to the current work line and from the
        #/// product dimension values specified in the <c>InventDim</c> record passed to the method.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The current item id
        #/// </param>
        #/// <param name="_productInventDim">
        #/// The <c>InventDim</c> record containing the product dimensions values
        #/// </param>
        #/// <returns>
        #/// true if on hand quantity meeting the requirements was found; otherwise, false
        #/// </returns>
        #boolean validateItemInLocation(ItemId _itemId, InventDim _productInventDim = null)
        #{
        #    InventDim       inventDim;
        #    InventDim       workLineDim;
        #    InventDimParm   inventDimParm;
        #    Qty             tmpQty;
        #
        #    inventDim = InventDim::find(this.findInventDimId());
        #
        #    if (!WHSWorkLine::isInventDimIdBlank(workLine.InventDimId))
        #    {
        #        workLineDim = workLine.inventDim();
        #        inventDimParm.initFromInventDim(workLineDim);
        #        inventDim.copyDimParmDim(InventDimGroupSetup::newItemId(_itemId), workLineDim, inventDimParm);
        #    }
        #
        #    if (_productInventDim && _productInventDim.anyProductDimensionSpecified())
        #    {
        #        inventDimParm.initProductDimensionsAllGroups();
        #        inventDim.copyDimParmDim(InventDimGroupSetup::newItemIdProductDimensionsOnly(_itemId), _productInventDim, inventDimParm);
        #    }
        #
        #    inventDim = InventDim::findOrCreate(inventDim);
        #
        #    tmpQty = WHSInventOnHand::getWorkPhysicalInvent(_itemId, inventDim.InventDimId);
        #
        #    return tmpQty > 0;
        #}
      ENDSOURCE
      SOURCE #validateItemOnLoad
        #[SysObsoleteAttribute('Use WHSLoadItemReceivingPurchLineProvider instead', true)]
        #PurchId validateItemOnLoad(WHSLoadId _loadId, ItemId _itemId)
        #{
        #    throw error(Error::wrongUseOfFunction(funcName()));
        #}
      ENDSOURCE
      SOURCE #validateItemOnPurchLine
        #/// <summary>
        #///    Checks to see if item id used is actually on purchase order and hasn't been deleted
        #///    and if the product dimensions match with the ones of the order.
        #/// </summary>
        #/// <param name="_itemId">
        #///    Item id to be checked against
        #/// </param>
        #/// <param name="_itemInventDim">
        #///    InventDim Id to be checked against
        #/// </param>
        #/// <returns>
        #///    True if a purchase order line that matches the criteria is found ; false otherwise.
        #/// </returns>
        #public boolean validateItemOnPurchLine(ItemId  _itemId, InventDim _itemInventDim = null)
        #{
        #    PurchLine       purchLine;
        #    InventDim       inventDim;
        #    InventDimParm   inventDimParm;
        #
        #    if (_itemInventDim.anyProductDimensionSpecified())
        #    {
        #        inventDimParm.initProductDimensionsAllGroups();
        #
        #        select firstonly RecId from purchLine
        #            where purchLine.PurchId     == pass.lookup(#PONum)
        #                && purchLine.ItemId     == _itemId
        #                && !purchLine.IsDeleted
        #        #InventDimExistsJoinNoField(purchLine.InventDimId, inventDim, _itemInventDim, inventDimParm);
        #    }
        #    else
        #    {
        #        select firstonly RecId from purchLine
        #            where purchLine.PurchId     == pass.lookup(#PONum)
        #                && purchLine.ItemId     == _itemId
        #                && !purchLine.IsDeleted;
        #    }
        #
        #    return purchLine.RecId ? true : false;
        #}
      ENDSOURCE
      SOURCE #validateItemOnReturnOrder
        #boolean validateItemOnReturnOrder(ItemId _itemId)
        #{
        #    boolean         ret;
        #    SalesLine       salesLine;
        #    SalesTable      salesTable;
        #    ReturnItemNum   returnItemNum;
        #
        #    if (pass.exists(#RMANum))
        #    {
        #        returnItemNum = pass.lookup(#RMANum);
        #    }
        #
        #    select firstonly RecId from salesLine
        #        join SalesId, ReturnItemNum from salesTable
        #        where salesTable.SalesId        == salesLine.SalesId        &&
        #              salesTable.ReturnItemNum  == returnItemNum            &&
        #              salesLine.SalesType       == SalesType::ReturnItem    &&
        #              salesLine.ItemId          == _itemId;
        #
        #    if (salesLine.RecId != 0)
        #    {
        #        ret = true;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateItemOnTOLine
        #/// <summary>
        #///    Checks if a specific item id used on the transfer order
        #///    and if the product dimensions match with the ones of the order.
        #/// </summary>
        #/// <param name="_itemId">
        #///     Item id to be checked against
        #/// </param>
        #/// <param name="_itemInventDim">
        #///     InventDim Id to be checked against
        #/// </param>
        #/// <returns>
        #///     True if a transfer order line that matches the criteria is found ; false otherwise.
        #/// </returns>
        #public boolean validateItemOnTOLine(ItemId _itemId, InventDim _itemInventDim = null)
        #{
        #    InventTransferLine  transferLine;
        #    boolean             ret = false;
        #    InventDim           inventDim;
        #    InventDimParm       inventDimParm;
        #
        #    if (_itemInventDim.anyProductDimensionSpecified())
        #    {
        #        inventDimParm.initProductDimensionsAllGroups();
        #
        #        select firstonly RecId from transferLine
        #            where transferLine.TransferId   == pass.lookup(#TONum)
        #                && transferLine.ItemId      == _itemId
        #        #InventDimExistsJoinNoField(transferLine.InventDimId, inventDim, _itemInventDim, inventDimParm);
        #    }
        #    else
        #    {
        #        select firstonly RecId from transferLine
        #            where transferLine.TransferId   == pass.lookup(#TONum)
        #                && transferLine.ItemId      == _itemId;
        #    }
        #
        #    return transferLine.RecId ? true
        #                    : false;
        #}
      ENDSOURCE
      SOURCE #validateLicensePlateInLocation
        #boolean validateLicensePlateInLocation(WHSLicensePlateId _licensePlateId, boolean _override = false, boolean _validateStatus = false)
        #{
        #    InventDim         inventDim;
        #    InventSum         inventSum;
        #    WHSInventStatusId inventStatusId;
        #    boolean           ret = true;
        #
        #    if (workLine.WorkType == WHSWorkType::Pick                 ||
        #        mode              == WHSWorkExecuteMode::AdjustmentOut ||
        #        workLine.WorkType == WHSWorkType::Count                ||
        #        mode              == WHSWorkExecuteMode::Movement      ||
        #        _override)
        #    {
        #        ttsbegin;
        #
        #        inventStatusId = workLine.inventDim().InventStatusId;
        #
        #        select firstonly RecId from inventSum
        #            where inventSum.PhysicalInvent > 0
        #            join InventDimId, InventLocationId, InventSiteId, LicensePlateId, wmsLocationId, InventStatusId from inventDim
        #            where inventDim.InventDimId                        == inventSum.InventDimId &&
        #                  inventDim.InventLocationId                   == inventLocationId      &&
        #                  inventDim.InventSiteId                       == inventSiteId          &&
        #                  inventDim.LicensePlateId                     == _licensePlateId       &&
        #                  inventDim.wmsLocationId                      == locationId            &&
        #                 (!_validateStatus || inventDim.InventStatusId == inventStatusId);
        #
        #        ret = inventSum.RecId != 0;
        #
        #        ttscommit;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateLicensePlateQty
        #boolean validateLicensePlateQty(WHSLicensePlateId       _licensePlateId)
        #{
        #    InventSum       inventSum;
        #    InventDim       inventDim;
        #
        #    ttsbegin;
        #
        #    select firstonly RecId from inventSum
        #        where inventSum.Closed          == NoYes::No                        &&
        #                (inventSum.PhysicalInvent != 0                                ||
        #                inventSum.Picked         != 0)
        #        exists join inventDim
        #            where inventSum.InventDimId         == inventDim.InventDimId    &&
        #                    inventDim.LicensePlateId   == _licensePlateId;
        #
        #    ttscommit;
        #
        #    return inventSum.RecId == 0;
        #}
        #
        #
        #
        #
      ENDSOURCE
      SOURCE #validateLoadIdCheckOut
        #boolean validateLoadIdCheckOut(WHSLoadId _loadId)
        #{
        #    boolean         hasError;
        #    TMSAppointment  appt;
        #    WHSLoadTable    loadTable = WHSLoadTable::find(_loadId);
        #
        #
        #    if (loadTable.LoadDirection == WHSLoadDirection::Outbound
        #    &&  loadTable.LoadStatus    != WHSLoadStatus::Loaded)
        #    {
        #        errorMessage = "@WAX4175";
        #        hasError = true;
        #    }
        #
        #    if (!hasError)
        #    {
        #        appt = TMSAppointment::find(loadTable.tmsDisplayAppointmentId());
        #
        #        if (appt)
        #        {
        #            if (appt.ApptStatus == TMSApptStatus::Completed)
        #            {
        #                errorMessage = "@WAX4171";
        #                hasError     = true;
        #            }
        #
        #            if (mode == WHSWorkExecuteMode::DriverCheckOut && !hasError)
        #            {
        #                if (appt.ApptStatus == TMSApptStatus::CheckedIn)
        #                {
        #                    fieldValues.insert(#LoadId, _loadId);
        #                }
        #                else
        #                {
        #                    errorMessage = "@WAX4172";
        #                    hasError = true;
        #                }
        #            }
        #            else if (mode == WHSWorkExecuteMode::DriverCheckIn && !hasError)
        #            {
        #                if (appt.ApptStatus == TMSApptStatus::CheckedIn)
        #                {
        #                    errorMessage = "@WAX4173";
        #                    hasError = true;
        #                }
        #                else
        #                {
        #                    fieldValues.insert(#LoadId, _loadId);
        #                }
        #            }
        #        }
        #        else
        #        {
        #            errorMessage = "@WAX4174";
        #            hasError = true;
        #        }
        #    }
        #
        #    return hasError;
        #}
      ENDSOURCE
      SOURCE #validateOldestBatch
        #boolean validateOldestBatch(WHSLicensePlateId   _licensePlateId,
        #                            WMSLocationId       _locationId,
        #                            InventLocationId    _inventLocationId,
        #                            ItemId              _itemId,
        #                            InventDim           _inventDim)
        #{
        #    date            licensePlateDate;
        #    boolean         ret = true;
        #    InventBatch     inventBatch;
        #    InventDim       inventDim;
        #    InventSum       inventSum;
        #    InventDimParm   inventDimParm;
        #
        #    ttsbegin;
        #
        #    inventDimParm.initFromInventDim(_inventDim);
        #    inventDimParm.LicensePlateFlag = NoYes::No;
        #
        #    select firstonly ExpDate from inventBatch
        #        order by ExpDate asc
        #        where inventBatch.ItemId        == _itemId
        #        exists join inventSum
        #        where inventSum.ItemId          == inventBatch.ItemId
        #           && inventSum.PhysicalInvent   > 0
        #        #InventDimExistsJoinNoField(inventSum.InventDimId, inventDim, _inventDim, inventDimParm)
        #           && inventDim.InventBatchId   == inventBatch.InventBatchId
        #           && inventDim.LicensePlateId  == _licensePlateId;
        #
        #    licensePlateDate = inventBatch.ExpDate;
        #
        #    inventBatch.clear();
        #    inventDim.clear();
        #    inventSum.clear();
        #
        #    select firstonly RecId from inventBatch
        #        order by ExpDate asc
        #        where inventBatch.ItemId        == _itemId
        #           && inventBatch.ExpDate        < licensePlateDate
        #        exists join inventSum
        #        where inventSum.ItemId          == inventBatch.ItemId
        #           && inventSum.PhysicalInvent   > 0
        #        #InventDimExistsJoinNoField(inventSum.InventDimId, inventDim, _inventDim, inventDimParm)
        #           && inventDim.InventBatchId   == inventBatch.InventBatchId;
        #
        #    ttscommit;
        #
        #    if (inventBatch.RecId != 0)
        #    {
        #        ret = false;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateOwnerInLocationCycleCount
        #boolean validateOwnerInLocationCycleCount(InventOwnerId_RU _ownerId)
        #{
        #    InventDim inventDimValue;
        #
        #    inventDimValue.InventOwnerId_RU = _ownerId;
        #
        #    return this.validateFieldInLocationCycleCount(inventDimValue, fieldNum(InventDim, InventOwnerId_RU));
        #}
      ENDSOURCE
      SOURCE #validatePotency
        #/// <summary>
        #///     Validates the specified potency value.
        #/// </summary>
        #/// <param name="_potency">
        #///     The specified potency value.
        #/// </param>
        #/// <returns>
        #///     Returns a Boolean value to indicate whether the data is valid.
        #/// </returns>
        #protected boolean validatePotency(PdsBatchAttribValue _potency)
        #{
        #    PdsBatchAttrib                  pdsBatchAttrib;
        #    PdsBatchAttribMin               batchAttribMin;
        #    PdsBatchAttribMax               batchAttribMax;
        #    PdsBatchAttribToleranceAction   batchAttribToleranceAction;
        #    PdsBatchAttribMultiple          batchAttribMultiple;
        #    boolean                         hasError;
        #
        #    pdsBatchAttrib = PdsBatchAttrib::find(pass.lookupStr(#BaseAttributeId));
        #
        #    switch (pdsBatchAttrib.PdsBatchAttribType)
        #    {
        #        case PdsBatchAttribType::Integer :
        #            if (!str2numOK(_potency))
        #            {
        #                errorMessage = strFmt("@PRO1954", _potency);
        #                hasError = true;
        #            }
        #            break;
        #        case PdsBatchAttribType::Realnumber :
        #            if (!str2numOK(_potency))
        #            {
        #                errorMessage = strFmt("@PRO2249", _potency);
        #                hasError = true;
        #            }
        #            break;
        #    }
        #
        #    if (!hasError
        #    &&  (!pass.exists(#PotencyValueWarn)
        #    ||   pass.lookup(#PotencyValueWarn) != _potency))
        #    {
        #        [batchAttribMin, batchAttribMax, batchAttribToleranceAction, batchAttribMultiple] = pdsBatchAttrib.getAttribRange(itemId);
        #
        #        [hasError, errorMessage] = PdsBatchAttrib::isValidAttribRangeErrorMsg(batchAttribMin, batchAttribMax, _potency);
        #
        #        if (!hasError)
        #        {
        #            [hasError, errorMessage] = PdsBatchAttrib::isValidAttribMultipleErrorMsg(batchAttribMin, batchAttribMultiple, _potency);
        #        }
        #
        #        if (hasError && errorMessage == strFmt("@SYS87701", batchAttribMin, batchAttribMax))
        #        {
        #            errorMessage = strFmt("@SYS87701", WHSWorkExecuteDisplay::num2StrDisplay(batchAttribMin), WHSWorkExecuteDisplay::num2StrDisplay(batchAttribMax));
        #        }
        #    }
        #    if (hasError && batchAttribToleranceAction == PdsBatchAttribToleranceAction::Warning)
        #    {
        #        pass.insert(#PotencyValueWarn, _potency);
        #        colorText = WHSRFColorText::Warning;
        #    }
        #    return hasError;
        #}
      ENDSOURCE
      SOURCE #validateProdOrder
        #/// <summary>
        #/// Checks if the production order has been modified using non-WHS processes. Will traverse Batch order co/by Products as well
        #/// </summary>
        #/// <param name="_prodId">
        #/// The production order.
        #/// </param>
        #/// <returns>
        #/// True if no related transactions are status registered, false if any exist
        #/// </returns>
        #public boolean validateProdOrder(ProdId _prodId)
        #{
        #    PmfProdCoBy                     pmfProdCoBy;
        #    ProdTable                       prodTable;
        #    InventTrans                     inventTrans;
        #    InventTransOriginPmfProdCoBy    inventTransOriginPmfProdCoBy;
        #    InventTransOriginProdTable      inventTransOriginProdTable;
        #    boolean                         ok = true;
        #
        #    prodTable = ProdTable::find(_prodId);
        #
        #    select firstonly RecId from inventTransOriginProdTable
        #        where inventTransOriginProdTable.ProdOrderDataAreaId    == prodTable.DataAreaId
        #        &&    inventTransOriginProdTable.ProdOrderId            == prodTable.ProdId
        #        exists join inventTrans
        #            where  inventTrans.InventTransOrigin                == inventTransOriginProdTable.InventTransOrigin
        #            &&     inventTrans.StatusReceipt                    == StatusReceipt::Registered;
        #
        #    ok = ok && inventTransOriginProdTable.RecId == 0;
        #
        #    if (ok && prodTable.ProdType == ProdType::Process)
        #    {
        #       select firstonly RecId from pmfProdCoBy
        #            where pmfProdCoBy.ProdId                                        == prodTable.ProdId
        #            exists join TableId from inventTransOriginPmfProdCoBy
        #                where   inventTransOriginPmfProdCoBy.PmfProdCoByDataAreaId  == pmfProdCoBy.DataAreaId
        #                &&      inventTransOriginPmfProdCoBy.PmfProdCoByRecId       == pmfProdCoBy.RecId
        #                exists join inventTrans
        #                    where   inventTrans.InventTransOrigin                   == inventTransOriginPmfProdCoBy.InventTransOrigin
        #                    &&      inventTrans.StatusReceipt                       == StatusReceipt::Registered;
        #
        #        ok = ok && pmfProdCoBy.RecId == 0;
        #    }
        #
        #
        #
        #    return ok;
        #}
        #
      ENDSOURCE
      SOURCE #validateProfileInLocationCycleCount
        #boolean validateProfileInLocationCycleCount(InventProfileId_RU _profileId)
        #{
        #    InventDim inventDimValue;
        #
        #    inventDimValue.InventProfileId_RU = _profileId;
        #
        #    return this.validateFieldInLocationCycleCount(inventDimValue, fieldNum(InventDim, InventProfileId_RU));
        #}
      ENDSOURCE
      SOURCE #validateSalesSerialQuantity
        #/// <summary>
        #/// Checks whether there will be too many serials captured during picking.
        #/// This will occur if serials are added to the load before picking is completed.
        #/// </summary>
        #/// <returns>
        #/// True if too many serials will be captured; otherwise false.
        #/// </returns>
        #boolean validateSalesSerialQuantity()
        #{
        #    boolean ret;
        #
        #    // If all serials associated to order line + the 1 currently being capturing + remaining serials to capture, is greater than order line qty
        #    if ((abs(InventTrackingRegisterTrans::qtyPhysicalIssue(InventTransOrigin::findByInventTransId(workLine.InventTransId).RecId)) +
        #        1 + (pass.lookupNum(#SerialQty) - pass.lookupNum(#SerialCounter))) > SalesLine::findInventTransId(workline.InventTransId).QtyOrdered)
        #    {
        #        ret = true;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateSerialInLocationCycleCount
        #boolean validateSerialInLocationCycleCount(InventSerialId   _serialId)
        #{
        #    InventDim inventDimValue;
        #
        #    inventDimValue.InventSerialId = _serialId;
        #
        #    return this.validateFieldInLocationCycleCount(inventDimValue, fieldNum(InventDim, InventSerialId));
        #}
      ENDSOURCE
      SOURCE #validateSerialQty
        #boolean validateSerialQty(InventSerialId    _serialId,
        #                          ItemId            _itemId)
        #{
        #    boolean     ret;
        #    InventDim   inventDim;
        #    InventSum   inventSum;
        #
        #    ttsbegin;
        #
        #    select firstonly RecId from inventSum
        #        join InventDimId, InventSerialId from inventDim
        #        where inventSum.InventDimId     == inventDim.InventDimId    &&
        #              inventSum.PhysicalInvent  != 0                        &&
        #              inventSum.ItemId          == _itemId                  &&
        #              inventDim.InventSerialId  == _serialId;
        #
        #    if (inventSum.RecId == 0)
        #    {
        #        ret = true;
        #    }
        #
        #    ttscommit;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateSizeInLocationCycleCount
        #boolean validateSizeInLocationCycleCount(EcoResItemSizeName _sizeId)
        #{
        #    InventDim inventDimValue;
        #
        #    inventDimValue.InventSizeId = _sizeId;
        #
        #    return this.validateFieldInLocationCycleCount(inventDimValue, fieldNum(InventDim, InventSizeId));
        #}
      ENDSOURCE
      SOURCE #validateStatusInLocationCycleCount
        #boolean validateStatusInLocationCycleCount(WHSInventStatusId _statusId)
        #{
        #    WHSWorkLineCycleCount   workLineCycleCount;
        #    InventDim               inventDim;
        #    boolean                 ret = true;
        #
        #    if (pass.exists(#SerialId) && pass.lookup(#SerialId) != '')
        #    {
        #        select firstonly RecId from workLineCycleCount
        #            join inventDim
        #            where workLineCycleCount.InventDimId    == inventDim.InventDimId    &&
        #                  workLineCycleCount.WorkId      == workLine.WorkId       &&
        #                  workLineCycleCount.LineNum        == workLine.LineNum         &&
        #                  workLineCycleCount.ItemId         == itemId                   &&
        #                  inventDim.InventStatusId       == _statusId                &&
        #                  inventDim.InventSerialId          == pass.lookup(#SerialId);
        #    }
        #    else if (pass.exists(#BatchId) && pass.lookup(#BatchId) != '')
        #    {
        #        select firstonly RecId from workLineCycleCount
        #            join inventDim
        #            where workLineCycleCount.InventDimId    == inventDim.InventDimId    &&
        #                  workLineCycleCount.WorkId      == workLine.WorkId       &&
        #                  workLineCycleCount.LineNum        == workLine.LineNum         &&
        #                  workLineCycleCount.ItemId         == itemId                   &&
        #                  inventDim.InventBatchId           == pass.lookup(#BatchId)    &&
        #                  inventDim.InventStatusId       == _statusId;
        #    }
        #    else
        #    {
        #        select firstonly RecId from workLineCycleCount
        #            join InventDimId, InventStatusId from inventDim
        #            where workLineCycleCount.InventDimId    == inventDim.InventDimId    &&
        #                  workLineCycleCount.WorkId      == workLine.WorkId       &&
        #                  workLineCycleCount.LineNum        == workLine.LineNum         &&
        #                  workLineCycleCount.ItemId         == itemId                   &&
        #                  inventDim.InventStatusId       == _statusId;
        #    }
        #
        #    if (workLineCycleCount.RecId == 0)
        #    {
        #        ret = false;
        #    }
        #
        #    return ret;
        #
        #}
      ENDSOURCE
      SOURCE #validateStatusMixingQuarantine
        #boolean validateStatusMixingQuarantine(WMSLocationId        _locationId)
        #{
        #    InventSum           inventSum;
        #    InventDim           inventDim;
        #    boolean             ret = true;
        #    WMSLocation         location;
        #    WHSLicensePlateId   tmpLicensePlate;
        #
        #    location = WMSLocation::find(_locationId, inventLocationId);
        #
        #    if (location.whsLocationIsLPControlled() && !WHSLocationProfile::find(location.LocProfileId).AllowMixedStatus)
        #    {
        #        ttsbegin;
        #
        #        while select InventDimId, PhysicalInvent from inventSum
        #            join LicensePlateId from inventDim
        #            where inventSum.InventDimId         == inventDim.InventDimId    &&
        #                  inventDim.InventLocationId    == inventLocationId         &&
        #                  inventDim.wmsLocationId       == _locationId              &&
        #                  inventSum.PhysicalInvent       > 0
        #        {
        #            if (tmpLicensePlate && inventDim.LicensePlateId != tmpLicensePlate)
        #            {
        #                ret = false;
        #                break;
        #            }
        #
        #            tmpLicensePlate = inventDim.LicensePlateId;
        #        }
        #
        #        ttscommit;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateStyleInLocationCycleCount
        #boolean validateStyleInLocationCycleCount(EcoResItemStyleName _styleId)
        #{
        #    InventDim inventDimValue;
        #
        #    inventDimValue.InventStyleId = _styleId;
        #
        #    return this.validateFieldInLocationCycleCount(inventDimValue, fieldNum(InventDim, InventStyleId));
        #}
      ENDSOURCE
      SOURCE #validateTargetLicensePlateNotOnWork
        #/// <summary>
        #/// Validates that the license plate id is not used as a target license plate id for any in progress/open work
        #/// </summary>
        #/// <param name="_licensePlateId">
        #/// The license plate id to validate
        #/// </param>
        #/// <returns>
        #/// True when there is no open/in progress work with this license plate id; otherwise, false
        #/// </returns>
        #public boolean validateTargetLicensePlateNotOnWork(WHSLicensePlateId _licensePlateId)
        #{
        #    WHSWorkTable        whsWorkTable;
        #
        #    select firstonly RecId from whsWorkTable
        #        where whsWorkTable.TargetLicensePlateId    == _licensePlateId      &&
        #             (whsWorkTable.WorkStatus              == WHSWorkStatus::Open  ||
        #              whsWorkTable.WorkStatus              == WHSWorkStatus::InProcess);
        #
        #    return whsWorkTable.RecId == 0;
        #}
      ENDSOURCE
      SOURCE #validateUseVendBatchDate
        #/// <summary>
        #///     Validates the use vendor batch date field.
        #/// </summary>
        #/// <param name="_useVendBatchDate">
        #///     The value indicating whether vendor batch date must be used.
        #/// </param>
        #/// <returns>
        #///     Returns a Boolean value to indicate whether the data is valid.
        #/// </returns>
        #protected boolean validateUseVendBatchDate(str _useVendBatchDate)
        #{
        #    boolean hasError;
        #
        #    if (_useVendBatchDate == enum2str(NoYes::Yes) && WHSRFControlData::convertDateFormatStr2Date(fieldValues.lookup(#VendBatchDate)) == Global::dateNull())
        #    {
        #        errorMessage = "@PRO2231";
        #        hasError = true;
        #    }
        #
        #    return hasError;
        #}
        #
      ENDSOURCE
      SOURCE #validateUseVendExpDate
        #/// <summary>
        #///     Validates the use vendor expiry date field.
        #/// </summary>
        #/// <param name="_useVendExpDate">
        #///     The value indicating whether vendor expiry date must be used.
        #/// </param>
        #/// <returns>
        #///     Returns a Boolean value to indicate whether the data is valid.
        #/// </returns>
        #protected boolean validateUseVendExpDate(str _useVendExpDate)
        #{
        #    boolean hasError;
        #
        #    if (_useVendExpDate == enum2str(NoYes::Yes) && WHSRFControlData::convertDateFormatStr2Date(fieldValues.lookup(#VendExpDate)) == Global::dateNull())
        #    {
        #        errorMessage = "@PDS1352";
        #        hasError = true;
        #    }
        #
        #    return hasError;
        #}
      ENDSOURCE
      SOURCE #validateVendBatchDate
        #/// <summary>
        #///     Validates the vendor batch date field.
        #/// </summary>
        #/// <param name="_vendBatchDate">
        #///     The vendor batch date.
        #/// </param>
        #/// <returns>
        #///     Returns a Boolean value to indicate whether the data is valid.
        #/// </returns>
        #protected boolean validateVendBatchDate(str _vendBatchDate)
        #{
        #    boolean   hasError;
        #    TransDate vendBatchDate = WHSRFControlData::convertDateFormatStr2Date(_vendBatchDate);
        #
        #    if (vendBatchDate == Global::dateNull())
        #    {
        #        errorMessage = "@WAX1891";
        #        hasError = true;
        #    }
        #    else if (vendBatchDate > systemDateGet())
        #    {
        #        errorMessage = "@PRO2230";
        #        hasError = true;
        #    }
        #
        #    return hasError;
        #}
      ENDSOURCE
      SOURCE #validateVendExpDate
        #/// <summary>
        #///     Validates the vendor expiry date field.
        #/// </summary>
        #/// <param name="_vendExpDate">
        #///     The vendor expiry date.
        #/// </param>
        #/// <returns>
        #///     Returns a Boolean value to indicate whether the data is valid.
        #/// </returns>
        #protected boolean validateVendExpDate(str _vendExpDate)
        #{
        #    boolean   hasError;
        #    TransDate vendExpDate = WHSRFControlData::convertDateFormatStr2Date(_vendExpDate);
        #
        #    if (vendExpDate == Global::dateNull())
        #    {
        #        errorMessage = "@WAX1891";
        #        hasError = true;
        #    }
        #    else if (vendExpDate <= systemDateGet())
        #    {
        #        errorMessage = "@PDS1353";
        #        hasError = true;
        #    }
        #
        #    return hasError;
        #}
      ENDSOURCE
      SOURCE #validateWorkTableLocations
        #boolean validateWorkTableLocations(WHSWorkId _workId)
        #{
        #    WHSWorkLine tmpWorkLine;
        #
        #    select firstonly RecId from tmpWorkLine
        #        where tmpWorkLine.WorkId     == _workId  &&
        #              tmpWorkLine.wmsLocationId == '';
        #
        #    return tmpWorkLine.RecId == 0;
        #}
      ENDSOURCE
      SOURCE #checkSerialSalesProcess
        #/// <summary>
        #/// Determines if an <c>InventTrackingRegisterTrans</c> record exists for a particular transId/serialId combination.
        #/// </summary>
        #/// <param name="_inventTransId">
        #/// The <c>InventTransId</c> to use to find the <c>InventTransOrigin</c>
        #/// </param>
        #/// <param name="_serialId">
        #/// The serial number to check.
        #/// </param>
        #/// <param name="_itemId">
        #/// The <c>ItemId</c> used to find appropiate return line.
        #/// </param>
        #/// <param name="_returnNum">
        #/// The return sales number to search for.
        #/// </param>
        #/// <returns>
        #/// True if a record exists; otherwise, false.
        #/// </returns>
        #public static boolean checkSerialSalesProcess(
        #    InventTransId       _inventTransId,
        #    InventSerialId      _serialId,
        #    ItemId              _itemId     = '',
        #    SalesReturnItemNum  _returnNum  = '')
        #{
        #    InventTransId   transId = _inventTransId;
        #    boolean         ret;
        #
        #    if (_returnNum)
        #    {
        #        transId = WHSRFControlData::findReturnLine(_itemId, _returnNum);
        #    }
        #
        #    ret = InventTrackingRegisterTrans::checkSerialId(transId, _serialId);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #convertDateFormatStr2Date
        #/// <summary>
        #///     Converts a string value to a date based on system's date format.
        #/// </summary>
        #/// <param name="_dateString">
        #///     The date string whose date format is defined based on system's date format.
        #/// </param>
        #/// <returns>
        #///     Returns the converted date.
        #/// </returns>
        #public static date convertDateFormatStr2Date(str _dateString)
        #{
        #    System.Globalization.CultureInfo ci;
        #    utcDateTime dateTime;
        #    boolean     isCalledFromWebPortal = new xSession().isWorkerThread();
        #
        #    if (!_dateString)
        #    {
        #        return dateNull();
        #    }
        #
        #    // No need to convert date string again because date string has already been converted
        #    // to 'en-us' default date format by WHS web portal
        #    if (isCalledFromWebPortal)
        #    {
        #        return WHSRFControlData::convertStr2Date(_dateString);
        #    }
        #
        #    ci = new System.Globalization.CultureInfo(infolog.language());
        #
        #    try
        #    {
        #        dateTime = System.DateTime::Parse(_dateString, ci);
        #        return DateTimeUtil::date(dateTime);
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        return dateNull();
        #    }
        #}
      ENDSOURCE
      SOURCE #convertStr2Date
        #/// <summary>
        #///     Converts a string value to a date.
        #/// </summary>
        #/// <param name="_dateString">
        #///     The date string.
        #/// </param>
        #/// <returns>
        #///     Returns the converted date.
        #/// </returns>
        #public static date convertStr2Date(str _dateString)
        #{
        #    return str2Date(_dateString, #DateFormat);
        #
        #}
      ENDSOURCE
      SOURCE #createCycleCountWorkLineLP
        #static void createCycleCountWorkLineLP(WHSLicensePlateId    _licensePlateId,
        #                                       WMSLocationId        _toLocationId,
        #                                       WHSWorkId            _workId)
        #{
        #    WHSWorkLineCycleCount   workLineCycleCount;
        #    InventDim               inventDim;
        #    InventSum               inventSum;
        #    InventDim               tmpInventDim;
        #
        #    ttsbegin;
        #
        #    while select inventDim
        #        join PhysicalInvent, ItemId from inventSum
        #        where inventDim.InventDimId         == inventSum.InventDimId    &&
        #              inventDim.LicensePlateId   == _licensePlateId          &&
        #              inventSum.PhysicalInvent       > 0
        #    {
        #        tmpInventDim.clear();
        #        tmpInventDim = InventDim::find(inventDim.InventDimId);
        #        tmpInventDim.wmsLocationId = _toLocationId;
        #        tmpInventDim = InventDim::findOrCreate(tmpInventDim);
        #
        #        workLineCycleCount.clear();
        #        workLineCycleCount.InventDimId = tmpInventDim.InventDimId;
        #        workLineCycleCount.QtyExpected = inventSum.PhysicalInvent;
        #        workLineCycleCount.WorkId = _workId;
        #        workLineCycleCount.LineNum = 1;
        #        workLineCycleCount.ItemId = inventSum.ItemId;
        #        workLineCycleCount.insert();
        #    }
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #findReturnLine
        #/// <summary>
        #/// Finds the latest return line.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The <c>ItemId</c> to search with.
        #/// </param>
        #/// <param name="_returnNum">
        #/// The return sales number to search for.
        #/// </param>
        #/// <returns>
        #/// The <c>InventTransId</c> related to the return line.
        #/// </returns>
        #public static InventTransId findReturnLine(
        #    ItemId              _itemId,
        #    SalesReturnItemNum  _returnNum)
        #{
        #    SalesTable      salesTable  = SalesTable::findReturnItemNum(_returnNum);
        #    SalesLine       returnLine;
        #    InventTransId   transId;
        #
        #    // Selecting the latest registered line to check if the same serial Id has been used.
        #    select firstonly InventTransId from returnLine
        #        order by LineNum desc
        #        where returnLine.SalesId         == salesTable.SalesId
        #            && returnLine.ItemId         == _itemId
        #            && returnLine.ReturnStatus   == ReturnStatusLine::Registered;
        #
        #    transId = returnLine.InventTransId;
        #
        #    return transId;
        #}
      ENDSOURCE
      SOURCE #getOldestBatchInLoc
        #static Set getOldestBatchInLoc(InventLocationId   _inventLocationId,
        #                               WMSLocationId      _locationId,
        #                               ItemId             _itemId,
        #                               InventDim          _inventDim,
        #                               InventBatchExpDate _batchExpDate = dateNull())
        #{
        #    InventSum           inventSum;
        #    InventDim           inventDim;
        #    InventBatch         inventBatch;
        #    InventDimParm       inventDimParm;
        #    InventBatchExpDate  expDate;
        #    Set                 oldestBatchSet = new Set(Types::String);
        #
        #    ttsbegin;
        #
        #    inventDimParm.initFromInventDim(_inventDim);
        #    inventDimParm.LicensePlateFlag = NoYes::No;
        #
        #    select InventBatchId, ExpDate from inventBatch
        #        order by ExpDate asc
        #        where inventBatch.ItemId        == _itemId
        #           && inventBatch.expDate       >= _batchExpDate
        #        exists join inventSum
        #        where inventSum.ItemId          == inventBatch.ItemId
        #           && inventSum.PhysicalInvent   > 0
        #        #InventDimExistsJoinNoField(inventSum.InventDimId, inventDim, _inventDim, inventDimParm)
        #           && inventDim.inventBatchId   == inventBatch.inventBatchId;
        #
        #    ttscommit;
        #
        #    expDate = inventBatch.expDate;
        #    while (inventBatch.expDate == expDate)
        #    {
        #        oldestBatchSet.add(inventBatch.InventBatchId);
        #
        #        next inventBatch;
        #    }
        #
        #    return oldestBatchSet;
        #}
      ENDSOURCE
      SOURCE #processData
        #static container processData(container          _con,
        #                             WHSRFPassthrough   _pass)
        #{
        #    #WHSRF
        #    #WHSWorkExecuteControlElements
        #    #WHSWorkExecuteDisplayCases
        #    WHSRFControlData    controlData = new WHSRFControlData();
        #    container           con = _con;
        #    str                 controlType;
        #    str                 data;
        #    int                 i;
        #    int                 length;
        #    str                 name;
        #    int                 step;
        #    WHSWorkLine         workLine;
        #    WHSWorkTable        workTable;
        #    WHSWorkUserSession  userSession;
        #    WHSWorkExecuteMode  mode;
        #    boolean             hasError;
        #    int                 enabled;
        #    str                 selected;
        #
        #    length = conLen(con);
        #
        #    if (!length)
        #    {
        #        throw error("@WAX1169");
        #    }
        #
        #    mode = conPeek(conPeek(con, 1), 1);
        #    step = conPeek(conPeek(con, 1), 2);
        #    controlData.parmMode(mode);
        #    controlData.parmStep(step);
        #    controlData.parmPass(_pass);
        #
        #    if (_pass.exists(#MenuItem))
        #    {
        #        if (mode == WHSWorkExecuteMode::AdjustmentIn                        ||
        #            mode == WHSWorkExecuteMode::Movement                            ||
        #            mode == WHSWorkExecuteMode::MovementByTemplate                  ||
        #            mode == WHSWorkExecuteMode::Quarantine                          ||
        #            mode == WHSWorkExecuteMode::PurchaseOrderItemReceiving          ||
        #            mode == WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate ||
        #            mode == WHSWorkExecuteMode::LoadItemReceiving                   ||
        #            mode == WHSWorkExecuteMode::LoadItemReceivingAndLocate          ||
        #            mode == WHSWorkExecuteMode::PurchaseOrderLineReceiving          ||
        #            mode == WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate ||
        #            mode == WHSWorkExecuteMode::TransferOrderItemReceiving          ||
        #            mode == WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate ||
        #            mode == WHSWorkExecuteMode::TransferOrderLineReceiving          ||
        #            mode == WHSWorkExecuteMode::TransferOrderLineReceivingAndLocate ||
        #            mode == WHSWorkExecuteMode::LicensePlateLoading                 ||
        #            WHSRFMenuItemTable::getWHSWorkExecuteMode(WHSRFMenuItemTable::find(_pass.lookup(#MenuItem))) == WHSWorkExecuteMode::AdjustmentIn)
        #        {
        #            controlData.parmDefaulting(WHSRFMenuItemTable::find(_pass.lookup(#MenuItem)).DefaultData);
        #        }
        #        controlData.parmMenuItemName(_pass.lookup(#MenuItem));
        #    }
        #
        #    if (_pass.exists(#WorkId) && _pass.exists(#LineNum))
        #    {
        #        workLine = WHSWorkLine::find(_pass.lookup(#WorkId), _pass.lookup(#LineNum));
        #        workTable = workLine.whsWorkTable();
        #    }
        #
        #    if (workLine)
        #    {
        #        controlData.parmWorkLine(workLine);
        #    }
        #
        #    if (_pass.exists(#UserId))
        #    {
        #        userSession = WHSWorkUserSession::find(_pass.lookup(#UserId));
        #
        #        controlData.parmInventLocationId(userSession.InventLocationId);
        #        controlData.parmInventSiteId(InventLocation::find(userSession.InventLocationId).InventSiteId);
        #    }
        #
        #    for (i = 3; i <= length; i++)
        #    {
        #        controlType = conPeek(conPeek(con, i), #controlType);
        #
        #        if (controlType == #RFText      ||
        #            controlType == #RFPassword)
        #        {
        #            data    = conPeek(conPeek(con, i), #data);
        #            name    = conPeek(conPeek(con, i), #name);
        #            enabled = conPeek(conPeek(con, i), #enabled);
        #
        #            if (data)
        #            {
        #                hasError = controlData.processControl(name, data, enabled);
        #                if (hasError)
        #                {
        #                    con = conPoke(con, i, conPoke(conPeek(con, i), #data, ''));
        #                    con = conPoke(con, i, conPoke(conPeek(con, i), #error, '1'));
        #                    con = conPoke(con, i, conPoke(conPeek(con, i), #enabled, true));
        #                    break;
        #                }
        #                else
        #                {
        #                    con = conPoke(con, i, conPoke(conPeek(con, i), #error, '0'));
        #                }
        #            }
        #            else
        #            {
        #                controlData.populateData(name);
        #            }
        #        }
        #        else if (controlType == #RFListBox  ||
        #                 controlType == #RFComboBox)
        #        {
        #            data        = conPeek(conPeek(con, i), #data);
        #            name        = conPeek(conPeek(con, i), #name);
        #            enabled     = conPeek(conPeek(con, i), #enabled);
        #            selected    = conPeek(conPeek(con, i), #selected);
        #
        #            if (_pass.exists(#SelectedValue) && name != #UOM)
        #            {
        #                if (name == #FromInventoryStatus)
        #                {
        #                    if (_pass.exists(#SelectedFromValue) && _pass.exists(#ItemId) && _pass.lookup(#ItemId) != '')
        #                    {
        #                        if (!InventTable::find(_pass.lookup(#ItemId)).whsBatchActive()  ||
        #                            (_pass.exists(#BatchId) && _pass.lookup(#BatchId) != ''))
        #                        {
        #                            hasError = controlData.processControl(name, data);
        #                            if (hasError)
        #                            {
        #                                con = conPoke(con, i, conPoke(conPeek(con, i), #data, ''));
        #                                con = conPoke(con, i, conPoke(conPeek(con, i), #error, '1'));
        #                                break;
        #                            }
        #                        }
        #                        else
        #                        {
        #                            controlData.populateData(name);
        #                        }
        #                    }
        #                    else
        #                    {
        #                        controlData.populateData(name);
        #                    }
        #                }
        #                else if (name == #InventoryStatus)
        #                {
        #                    // Don't process inventory status control until item exists; except for quarantine where status is "To" status not dependent on inventory
        #                    if (_pass.exists(#SelectedValue) && (mode == WHSWorkExecuteMode::Quarantine || (_pass.exists(#ItemId) && _pass.lookup(#ItemId) != '')))
        #                    {
        #                        hasError = controlData.processControl(name, data);
        #                        if (hasError)
        #                        {
        #                            con = conPoke(con, i, conPoke(conPeek(con, i), #data, ''));
        #                            break;
        #                        }
        #                    }
        #                    else
        #                    {
        #                        controlData.populateData(name);
        #                    }
        #                }
        #                else
        #                {
        #                    hasError = controlData.processControl(name, data);
        #                    if (hasError)
        #                    {
        #                        con = conPoke(con, i, conPoke(conPeek(con, i), #data, ''));
        #                        con = conPoke(con, i, conPoke(conPeek(con, i), #error, '1'));
        #                        break;
        #                    }
        #                }
        #            }
        #            else if ((name == #UOM && _pass.exists(#SelectedValueUOM) && data)
        #                    || (name == #UOM && data && mode == WHSWorkExecuteMode::ProductionScrap)
        #                    || (data && workTable.WorkTransType == WHSWorkTransType::CycleCount)
        #                    || (name == #BatchUOM && data)
        #                    || (name == #DimUOM && data)
        #                    || (name == #Disposition && data)
        #                    || (name == #WorkPoolId && data)
        #                    || (name == #UOM && step == #ShortPick)
        #                    || (name == #UseVendBatchDate && data)
        #                    || (name == #UseVendExpDate && data)
        #                    || (name == #BatchDisposition && data)
        #                    || (name == #LastBox && Data))
        #            {
        #                hasError = controlData.processControl(name, data, enabled, selected);
        #                if (hasError && name != #BatchUOM && name != #DimUOM && mode != WHSWorkExecuteMode::ProductionScrap)
        #                {
        #                    con = conPoke(con, i, conPoke(conPeek(con, i), #error, '1'));
        #                    break;
        #                }
        #                else if (hasError)
        #                {
        #                    con = conPoke(con, i-1, conPoke(conPeek(con, i-1), #data, ''));
        #                    con = conPoke(con, i-1, conPoke(conPeek(con, i-1), #error, '1'));
        #                    break;
        #                }
        #            }
        #            else
        #            {
        #                controlData.populateData(name);
        #            }
        #        }
        #    }
        #
        #    if (hasError)
        #    {
        #        con = controlData.rebuildContainer(con);
        #    }
        #
        #    return [con, controlData.parmFieldValues().pack()];
        #}
      ENDSOURCE
      SOURCE #validateQtyToScrap
        #static boolean validateQtyToScrap(Qty                   _qtyToScrap,
        #                                  UnitOfMeasureSymbol   _uomToScrap,
        #                                  ItemId                _itemId,
        #                                  ProdId                _prodId)
        #{
        #    boolean             ret = true;
        #    InventTrans         inventTrans;
        #    InventTransOrigin   inventTransOrigin;
        #    ProdBOM             prodBOM;
        #    Qty                 pickedQty;
        #    Qty                 availQty;
        #    WrkCtrTable         wrkCtrTable;
        #    InventDim           bomInventDim;
        #    InventDim           scrapInventDim;
        #    Qty                 tmpQtyToScrap;
        #
        #    if (_uomToScrap)
        #    {
        #        tmpQtyToScrap  = InventTableModule::unitConvert(_itemId,
        #                                                        ModuleInventPurchSales::Invent,
        #                                                        _uomToScrap,
        #                                                        _qtyToScrap);
        #    }
        #
        #    select firstonly prodBOM
        #        where prodBOM.ProdId    == _prodId   &&
        #              prodBOM.ItemId    == _itemId;
        #
        #    while select StatusIssue, Qty from inventTrans
        #        join  RecId, InventTransId from inventTransOrigin
        #        where inventTrans.InventTransOrigin     == inventTransOrigin.RecId  &&
        #              inventTransOrigin.InventTransId   == prodBOM.InventTransId
        #    {
        #        if (inventTrans.StatusIssue == StatusIssue::Picked)
        #        {
        #            pickedQty = pickedQty - inventTrans.Qty;
        #        }
        #    }
        #
        #    wrkCtrTable = WrkCtrTable::find(ProdRoute::find(_prodId, prodBOM.OprNum, RouteOprPriority::Primary).displayWrkCtrId());
        #
        #    bomInventDim = prodBOM.inventDim();
        #
        #    scrapInventDim.InventSiteId         = bomInventDim.InventSiteId;
        #    scrapInventDim.InventLocationId       = wrkCtrTable.inputWMSLocation(systemDateGet()).InventLocationId;
        #    scrapInventDim.wmsLocationId          = wrkCtrTable.inputWMSLocation(systemDateGet()).wmsLocationId;
        #    scrapInventDim.LicensePlateId    = bomInventDim.LicensePlateId;
        #    scrapInventDim.InventStatusId    = bomInventDim.InventStatusId;
        #    scrapInventDim = InventDim::findOrCreate(scrapInventDim);
        #
        #    availQty = WHSInventOnHand::getWorkPhysicalAvail(_itemId, scrapInventDim.InventDimId);
        #
        #    if (_qtyToScrap > pickedQty + availQty)
        #    {
        #        ret = false;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: WHSWorkCreatePurchLine unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #WHSWorkCreatePurchLine
    PROPERTIES
      Name                #WHSWorkCreatePurchLine
      Extends             #WHSWorkCreateReceiving
      RunOn               #Server
      Origin              #{8521E02F-75A2-49CF-895E-8E7F3B212CAB}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class WhsWorkCreatePurchLine extends WHSWorkCreateReceiving
        #{
        #    WHSWorkCreateId     workCreateId;
        #    WHSUnitization      unitization;
        #    PurchLine           purchLine;
        #    InventQty           inventQty;
        #    WHSLoadId           loadId;
        #}
      ENDSOURCE
      SOURCE #createBatch
        #/// <summary>
        #///     Generates or updates an inventory batch ID for a given item.
        #/// </summary>
        #/// <param name="_batchId">
        #///     The inventory batch ID.
        #/// </param>
        #/// <param name="_itemId">
        #///     The item ID.
        #/// </param>
        #public void createBatch(InventBatchId _batchId, ItemId _itemId)
        #{
        #    InventBatch                     inventBatch;
        #    WHSInventBatchReceiptDetails    whsInventBatchReceiptDetails;
        #    InventTable                     inventTable;
        #    //////////////////////////////////////////////////////
        #    TransDate                       _ManufDate;
        #    AZ_BatchConfig                  _BatchConfig;
        #    BarcodeConfigId                 _BarcodeConfigId;
        #    VendProdCode                    _VendProdCode;
        #    real                            _BatchQty;
        #    //////////////////////////////////////////////////////
        #
        #    //Get the Detail fromm Scanned Batch No
        #    _BarcodeConfigId = inventTable::find(_itemId,false).BarcodeConfigId;
        #
        #    _ManufDate = AZ_BatchConfig::GetPackingDate(_batchId,_BarcodeConfigId);
        #    _BatchQty  = AZ_BatchConfig::GetBatchQty(_batchId,_BarcodeConfigId);
        #    _VendProdCode = AZ_BatchConfig::GetProductCode(_batchId,_BarcodeConfigId);
        #
        #    ttsbegin;
        #
        #    whsInventBatchReceiptDetails = WHSInventBatchReceiptDetails::find(receiptId, _itemId, _batchId);
        #
        #    inventTable = InventTable::find(_itemId);
        #    inventBatch = InventBatch::find(_batchId, _itemId, true);
        #
        #    inventBatch.PdsVendBatchDate    = whsInventBatchReceiptDetails.PdsVendBatchDate;
        #    inventBatch.PdsUseVendBatchDate = whsInventBatchReceiptDetails.PdsUseVendBatchDate;
        #    inventBatch.PdsVendExpiryDate   = whsInventBatchReceiptDetails.PdsVendExpiryDate;
        #    inventBatch.PdsUseVendBatchExp  = whsInventBatchReceiptDetails.PdsUseVendBatchExp;
        #    inventBatch.PdsCountryOfOrigin1 = whsInventBatchReceiptDetails.PdsCountryOfOrigin1;
        #    inventBatch.PdsCountryOfOrigin2 = whsInventBatchReceiptDetails.PdsCountryOfOrigin2;
        #    inventBatch.PdsVendBatchId      = whsInventBatchReceiptDetails.PdsVendBatchId;
        #
        #    if (inventBatch.RecId == 0)
        #    {
        #        inventBatch.InventBatchId   = _batchId;
        #        inventBatch.ItemId          = _itemId;
        #        inventBatch.VendProdCode    = _VendProdCode;
        #
        #        if (_ManufDate)
        #        {
        #            inventBatch.prodDate = _ManufDate;
        #        }
        #        else
        #        {
        #            inventBatch.ProdDate        = systemDateGet();
        #        }
        #
        #       inventBatch.ExpDate         = inventTable.isShelfLifeItem() ? inventBatch.ProdDate : whsInventBatchReceiptDetails.ExpDate;
        #    }
        #
        #    inventBatch.pdsSetShelfLifeBestBeforeFields(inventTable);
        #    inventBatch.write();
        #
        #    // Set the potency attribute value
        #    inventBatch.updateBaseBatchAttribValue(whsInventBatchReceiptDetails.PdsPotencyBaseValue);
        #
        #    // Capture the batch disposition code
        #    if (inventTable.pdsIsShelfLifeCapable() && whsInventBatchReceiptDetails.PdsBatchDispositionCode)
        #    {
        #        PdsResetDispositionStatus::setBatchDispositionCode(_itemId, _batchId, whsInventBatchReceiptDetails.PdsBatchDispositionCode);
        #    }
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #createSerial
        #void createSerial(InventSerialId _serialId, ItemId _itemId)
        #{
        #    InventSerial    inventSerial;
        #
        #    if (!InventSerial::exist(_itemId, _serialId))
        #    {
        #        ttsbegin;
        #        inventSerial.InventSerialId = _serialId;
        #        inventSerial.ItemId         = _itemId;
        #        inventSerial.insert();
        #        ttscommit;
        #    }
        #}
      ENDSOURCE
      SOURCE #createTempTable
        #/// <summary>
        #/// Creates the temporary work line(s) for purchase order line registration
        #/// </summary>
        #void createTempTable()
        #{
        #    TMSPurchTable       tmsPurchTable;
        #    WHSLoadLine         whsLoadLine;
        #    MapEnumerator       dimQtyEnumerator;
        #
        #    ttsbegin;
        #
        #    startLocationId = this.defaultReceiptLocationId(purchLine.InventDimId);
        #
        #    // Register the Purchase Order Lines and create batches if we need to.
        #    this.processPurchLines();
        #
        #    if (purchLine.ProjId == '')
        #    {
        #        tmsPurchTable = TMSPurchTable::find(purchLine.PurchId);
        #
        #        // Create map to track above location dimensions and qty, based off registered inventory
        #        this.createReceiptDimQtyMap(purchLine.ItemId);
        #
        #        // Fill the Purch specific fields on the Temp Work Line.
        #        tmpWorkLine.WorkType            = WHSWorkType::Put;
        #        tmpWorkLine.OriginType          = WHSOriginType::Purch;
        #        tmpWorkLine.OriginRefId         = purchLine.PurchId;
        #        tmpWorkLine.OrderNum            = purchLine.PurchId;
        #        tmpWorkLine.WorkCreateId        = workCreateId;
        #        tmpWorkLine.WorkTransType       = WHSWorkTransType::Purch;
        #        tmpWorkLine.InventTransId       = purchLine.InventTransId;
        #        tmpWorkLine.ItemId              = purchLine.ItemId;
        #        tmpWorkLine.InventBatchId       = inventBatchId;
        #        tmpWorkLine.RefTableId          = tableNum(PurchLine);
        #        tmpWorkLine.RefRecId            = purchLine.RecId;
        #        tmpWorkLine.OrderNum            = purchLine.PurchId;
        #        tmpWorkLine.StartLocationId     = startLocationId;
        #        tmpWorkLine.InventUnitizeQty    = unitizeQty;
        #        tmpWorkLine.CarrierCode         = tmsPurchTable.CarrierCode;
        #        tmpWorkLine.CarrierServiceCode  = tmsPurchTable.CarrierServiceCode;
        #        tmpWorkLine.ModeCode            = tmsPurchTable.ModeCode;
        #        tmpWorkLine.CustVendAC          = purchLine.VendAccount;
        #
        #        select firstonly forupdate whsLoadLine
        #            where (!loadId || whsLoadLine.LoadId == loadId)
        #                && whsLoadLine.InventTransId == purchLine.InventTransId
        #                && whsLoadLine.InventTransType == InventTransType::Purch;
        #
        #        tmpWorkLine.LoadId              = whsLoadLine.LoadId;
        #        tmpWorkLine.ShipmentId          = whsLoadLine.ShipmentId;
        #        tmpWorkLine.LoadLineRefRecId    = whsLoadLine.RecId;
        #
        #        this.setGlobals();
        #
        #        // Create the Temp Work Line record(s).
        #        if (!dimQty.empty())
        #        {
        #            dimQtyEnumerator = dimQty.getEnumerator();
        #
        #            while (dimQtyEnumerator.moveNext())
        #            {
        #                workInventDim = InventDim::find(dimQtyEnumerator.currentKey());
        #
        #                // Populate batch field on tmp work line to evaluate mixing rules
        #                if (workInventDim.InventBatchId)
        #                {
        #                    tmpWorkLine.InventBatchId = workInventDim.InventBatchId;
        #                }
        #                else if (batchMix != null)
        #                {
        #                    tmpWorkLine.InventBatchId = batchMix.lookup(workInventDim.InventDimId);
        #                }
        #
        #                this.createTempLine(tmpWorkLine, dimQtyEnumerator.currentValue());
        #            }
        #        }
        #        else
        #        {
        #            this.createTempLine(tmpWorkLine, inventQty);
        #        }
        #
        #        if (whsLoadLine)
        #        {
        #            whsLoadLine.WorkCreatedQty += inventQty;
        #            whsLoadLine.update();
        #        }
        #    }
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #new
        #void new(Common _common, WHSWorkCreateId _workCreateId = '')
        #{
        #    purchLine = _common;
        #
        #    workCreateId = _workCreateId ? _workCreateId : NumberSeq::newGetNum(WHSParameters::numRefWHSWorkCreateId()).num();
        #
        #    super(purchLine, workCreateId);
        #}
      ENDSOURCE
      SOURCE #parmInventQty
        #public InventQty parmInventQty(InventQty _inventQty = inventQty)
        #{
        #    inventQty = _inventQty;
        #
        #    return inventQty;
        #}
      ENDSOURCE
      SOURCE #parmLoadId
        #public WHSLoadId parmLoadId(WHSLoadId _loadId = loadId)
        #{
        #    loadId = _loadId;
        #
        #    return loadId;
        #}
      ENDSOURCE
      SOURCE #parmPurchLine
        #public PurchLine parmPurchLine(PurchLine _purchLine = purchLine)
        #{
        #    purchLine = _purchLine;
        #
        #    return purchLine;
        #}
      ENDSOURCE
      SOURCE #parmUnitization
        #public WHSUnitization parmUnitization(WHSUnitization _unitization = unitization)
        #{
        #    unitization = _unitization;
        #
        #    return unitization;
        #}
      ENDSOURCE
      SOURCE #parmWorkCreateId
        #public WHSWorkCreateId parmWorkCreateId(WHSWorkCreateId _workCreateId = workCreateId)
        #{
        #    workCreateId = _workCreateId;
        #
        #    return workCreateId;
        #}
      ENDSOURCE
      SOURCE #processPurchLines
        #/// <summary>
        #///     Registers purchase order lines.
        #/// </summary>
        #public void processPurchLines()
        #{
        #    WHSReceiptDetails   receiptDetails;
        #    InventDim           inventDim;
        #    InventDim           tmpInventDim;
        #
        #    if (WHSReceiptDetails::existByReceiptIdLicensePlate(receiptId, targetLicensePlateId))
        #
        #    {
        #        while select receiptDetails
        #            where receiptDetails.ReceiptId == receiptId
        #            exists join inventDim
        #                where inventDim.InventDimId     == receiptDetails.InventDimId
        #                &&    inventDim.LicensePlateId  == targetLicensePlateId
        #        {
        #            tmpInventDim = InventDim::find(receiptDetails.InventDimId);
        #
        #            if (tmpInventDim.InventBatchId)
        #            {
        #                this.createBatch(tmpInventDim.InventBatchId, purchLine.ItemId);
        #            }
        #
        #            if (tmpInventDim.InventSerialId)
        #            {
        #                this.createSerial(tmpInventDim.InventSerialId, purchLine.ItemId);
        #            }
        #
        #            this.registerPurchLine(purchLine.InventTransId, receiptDetails.InventQty, targetLicensePlateId, receiptDetails.InventDimId);
        #
        #            if (!inventBatchId)
        #            {
        #                inventBatchId = tmpInventDim.InventBatchId;
        #            }
        #        }
        #    }
        #    else
        #    {
        #        this.registerPurchLine(purchLine.InventTransId, inventQty, targetLicensePlateId);
        #    }
        #}
      ENDSOURCE
      SOURCE #construct
        #static WHSWorkCreatePurchLine construct(Common _common, WHSWorkCreateId _workCreateId = '')
        #{
        #    WHSWorkCreatePurchLine  workCreatePurchLine;
        #
        #    workCreatePurchLine = new WHSWorkCreatePurchLine(_common, _workCreateId);
        #
        #    return workCreatePurchLine;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: WHSWorkExecuteDisplay unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #WHSWorkExecuteDisplay
    PROPERTIES
      Name                #WHSWorkExecuteDisplay
      Origin              #{B136616A-4683-46E0-A943-500BCD4BE648}
    ENDPROPERTIES
    
    METHODS
      SOURCE #addBackButton
        #container addBackButton(container   _con,
        #                        int         _newLine = 1,
        #                        int         _defaultButton = 0)
        #{
        #    container   ret = _con;
        #
        #    if ((workLine.WorkType  != WHSWorkType::Pick                                        &&
        #        workLine.WorkType   != WHSWorkType::Put                                         &&
        #        workLine.WorkType   != WHSWorkType::Custom                                      &&
        #        workLine.WorkType   != WHSWorkType::Print                                       &&
        #        workLine.WorkType   != WHSWorkType::None                                        &&
        #        workLine.WorkType   != WHSWorkType::PackToNestedLicensePlate                    &&
        #        mode                != WHSWorkExecuteMode::Movement                             &&
        #        mode                != WHSWorkExecuteMode::MovementByTemplate                   &&
        #        mode                != WHSWorkExecuteMode::Quarantine                           &&
        #        mode                != WHSWorkExecuteMode::PurchaseOrderLineReceiving           &&
        #        mode                != WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate  &&
        #        mode                != WHSWorkExecuteMode::PurchaseOrderItemReceiving           &&
        #        mode                != WHSWorkExecuteMode::LicensePlateReceiving                &&
        #        mode                != WHSWorkExecuteMode::LicensePlateReceivingAndLocate)      ||
        #        mode                == WHSWorkExecuteMode::Menu                                 ||
        #        mode                == WHSWorkExecuteMode::ChangeWarehouse)
        #    {
        #        ret += [this.buildControl(#RFButton, #RFBack, "@SYS56453", _newLine, '', #WHSRFUndefinedDataType, '', _defaultButton)];
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #addButtons
        #container addButtons(container _con)
        #{
        #    container       ret = _con;
        #    boolean         createOk = true;
        #    boolean         createCancel = true;
        #    boolean         createDrop = true;
        #    boolean         createBack = true;
        #    boolean         createDone = true;
        #    boolean         createFull = true;
        #    boolean         createOverride = true;
        #    boolean         createSuggestLocation = true;
        #    boolean         createShortPick = true;
        #    boolean         createSkip = true;
        #    boolean         createSplitPut = true;
        #    boolean         createLPOverride = true;
        #    boolean         createOverpick = true;
        #    int             length;
        #    int             i = 1;
        #    str             controlType;
        #    str             name;
        #
        #    if (conLen(conPeek(_con, 1)) == 2)
        #    {
        #        i = 3;
        #    }
        #
        #    length = conLen(_con);
        #
        #    for (i = i; i <= length; i++)
        #    {
        #        controlType = conPeek(conPeek(_con, i), #controlType);
        #        name = conPeek(conPeek(_con, i), #name);
        #
        #        if (controlType == #RFButton)
        #        {
        #            switch (name)
        #            {
        #                case #RFOK:
        #                    createOk = false;
        #                    break;
        #
        #                case #RFDone:
        #                    createDone = false;
        #                    break;
        #
        #                case #RFBack:
        #                    createBack = false;
        #                    break;
        #
        #                case #RFCancel:
        #                    createCancel = false;
        #                    break;
        #
        #                case #RFFull:
        #                    createFull = false;
        #                    break;
        #
        #                case #RFDrop:
        #                    createDrop = false;
        #                    break;
        #
        #                case #RFOverride:
        #                    createOverride = false;
        #                    break;
        #
        #                case #RFNoLocation:
        #                    createSuggestLocation = false;
        #                    break;
        #
        #                case #RFShortPick:
        #                    createShortPick = false;
        #                    break;
        #
        #                case #RFSkip:
        #                    createSkip = false;
        #                    break;
        #
        #                case #RFSplitPut:
        #                    createSplitPut = false;
        #                    break;
        #
        #                case #RFOverrideLP:
        #                    createLPOverride = false;
        #                    break;
        #
        #                case #RFOverpick:
        #                    createOverpick = false;
        #                    break;
        #            }
        #        }
        #    }
        #
        #    if (createOk)
        #    {
        #        ret = this.addOkButton(ret);
        #    }
        #
        #    if (createFull)
        #    {
        #        ret = this.addFullButton(ret);
        #    }
        #
        #    if (createDrop)
        #    {
        #        ret = this.addDropButton(ret);
        #    }
        #
        #    if (createDone)
        #    {
        #        ret = this.addDoneButton(ret);
        #    }
        #
        #    if (createBack)
        #    {
        #        ret = this.addBackButton(ret);
        #    }
        #
        #    if (createCancel)
        #    {
        #        ret = this.addCancelButton(ret);
        #    }
        #
        #    if (createSplitPut)
        #    {
        #        ret = this.addSplitPutButton(ret);
        #    }
        #
        #    if (createLPOverride)
        #    {
        #        ret = this.addOverrideLPButton(ret);
        #    }
        #
        #    if (createOverride)
        #    {
        #        ret = this.addOverrideButton(ret);
        #    }
        #
        #    if (createSuggestLocation)
        #    {
        #        ret = this.addSuggestLocationButton(ret);
        #    }
        #
        #    if (createShortPick)
        #    {
        #        ret = this.addShortPickButton(ret);
        #    }
        #
        #    if (createOverpick)
        #    {
        #        ret = this.addOverpickButton(ret);
        #    }
        #
        #    if (createSkip)
        #    {
        #        ret = this.addSkipButton(ret);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #addCancelButton
        #container addCancelButton(container _con,
        #                          int       _newLine = 1,
        #                          boolean   _override = false)
        #{
        #    container           ret = _con;
        #    boolean             addCancel = true;
        #    str                 controlType;
        #    str                 name;
        #    int                 length;
        #    int                 i = 1;
        #
        #    if ((_override                                                      ||
        #         workLine.WorkType  == WHSWorkType::Pick                        ||
        #         mode               == WHSWorkExecuteMode::Movement             ||
        #         mode               == WHSWorkExecuteMode::MovementByTemplate   ||
        #         mode               == WHSWorkExecuteMode::Quarantine           ||
        #         workLine.WorkType  == WHSWorkType::Put))
        #    {
        #        if (conLen(conPeek(_con, 1)) == 2)
        #        {
        #            i = 3;
        #        }
        #
        #        length = conLen(_con);
        #
        #        for (i = i; i <= length; ++i)
        #        {
        #            controlType = conPeek(conPeek(_con, i), #controlType);
        #            name = conPeek(conPeek(_con, i), #name);
        #
        #            if (controlType == #RFButton && name == #RFCancel)
        #            {
        #                addCancel = false;
        #            }
        #        }
        #
        #        if (addCancel)
        #        {
        #            if (mode == WHSWorkExecuteMode::SystemGrouping && workLine.WorkType == WHSWorkType::Pick)
        #            {
        #                if (!pass.exists(#AddDoneButton) && workLine.QtyWork == workLine.QtyRemain)
        #                {
        #                    ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", _newLine, '', #WHSRFUndefinedDataType, '', 0)];
        #                }
        #            }
        #            else
        #            {
        #                if (workLine.WorkType == WHSWorkType::Pick)
        #                {
        #                    if ((workLine.InventQtyRemain == workLine.InventQtyWork && !WHSWorkTable::isPickCompleted(workLine.WorkId, true)) || workLine.WorkStop)
        #                    {
        #                        if (mode    != WHSWorkExecuteMode::PickPack ||
        #                            (mode   == WHSWorkExecuteMode::PickPack &&
        #                             (!pass.exists(#TargetWorkId)           ||
        #                              workLine.WorkId == pass.lookup(#TargetWorkId))))
        #                        {
        #                            ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", _newLine, '', #WHSRFUndefinedDataType, '', 0)];
        #                        }
        #                    }
        #                }
        #                else
        #                {
        #                    ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", _newLine, '', #WHSRFUndefinedDataType, '', 0)];
        #                }
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #addDoneButton
        #container addDoneButton(container _con, boolean _override = false)
        #{
        #    container   ret = _con;
        #
        #    if ((workLine.WorkType  != WHSWorkType::Pick                                        &&
        #        workLine.WorkType   != WHSWorkType::Put                                         &&
        #        workLine.WorkType   != WHSWorkType::Custom                                      &&
        #        workLine.WorkType   != WHSWorkType::Print                                       &&
        #        workLine.WorkType   != WHSWorkType::None                                        &&
        #        workLine.WorkType   != WHSWorkType::PackToNestedLicensePlate                    &&
        #        mode                != WHSWorkExecuteMode::Movement                             &&
        #        mode                != WHSWorkExecuteMode::MovementByTemplate                   &&
        #        mode                != WHSWorkExecuteMode::Quarantine                           &&
        #        mode                != WHSWorkExecuteMode::PurchaseOrderLineReceiving           &&
        #        mode                != WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate  &&
        #        mode                != WHSWorkExecuteMode::PurchaseOrderItemReceiving           &&
        #        mode                != WHSWorkExecuteMode::LicensePlateReceiving                &&
        #        mode                != WHSWorkExecuteMode::LicensePlateReceivingAndLocate       &&
        #        step                != #OverrideStep1                                           &&
        #        step                != #OverrideStep2                                           &&
        #        step                != #WorkAuditTemplate)                                      ||
        #        _override           == true)
        #    {
        #        ret += [this.buildControl(#RFButton, #RFDone, "@SYS112206", 1, '', #WHSRFUndefinedDataType, '', 0)];
        #    }
        #    else if (mode == WHSWorkExecuteMode::SystemGrouping &&
        #             pass.exists(#AddDoneButton)                &&
        #             workLine.WorkType == WHSWorkType::Pick     &&
        #             workLine.isFirstPick()                     &&
        #             step != #OverrideStep1                     &&
        #             step != #OverrideStep2                     &&
        #             step != #NoLocation)
        #    {
        #        ret += [this.buildControl(#RFButton, #RFDone, "@SYS112206", 1, '', #WHSRFUndefinedDataType, '', 0)];
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #addDropButton
        #container addDropButton(container   _con,
        #                        int         _newLine = 1)
        #{
        #    container   ret = _con;
        #
        #    if (workLine.WorkType   != WHSWorkType::Pick                                        &&
        #        workLine.WorkType   != WHSWorkType::Put                                         &&
        #        workLine.WorkType   != WHSWorkType::Custom                                      &&
        #        workLine.WorkType   != WHSWorkType::None                                        &&
        #        workLine.WorkType   != WHSWorkType::Print                                       &&
        #        workLine.WorkType   != WHSWorkType::PackToNestedLicensePlate                    &&
        #        mode                != WHSWorkExecuteMode::Movement                             &&
        #        mode                != WHSWorkExecuteMode::MovementByTemplate                   &&
        #        mode                != WHSWorkExecuteMode::Quarantine                           &&
        #        mode                != WHSWorkExecuteMode::PurchaseOrderLineReceiving           &&
        #        mode                != WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate  &&
        #        mode                != WHSWorkExecuteMode::PurchaseOrderItemReceiving           &&
        #        mode                != WHSWorkExecuteMode::LicensePlateReceiving                &&
        #        mode                != WHSWorkExecuteMode::LicensePlateReceivingAndLocate)
        #    {
        #        ret += [this.buildControl(#RFButton, #RFDrop, "@WAX1202", _newLine, '', #WHSRFUndefinedDataType, '', 0)];
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #addErrorLabel
        #container addErrorLabel(container       _con,
        #                        str             _error,
        #                        WHSRFColorText  _color = WHSRFColorText::Default)
        #{
        #    container   ret = _con;
        #
        #    ret += [this.buildControl(#RFLabel, #RFError, _error, 1, '', #WHSRFUndefinedDataType, '', 0, true, '', _color)];
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #addErrorLabelFromInfolog
        #/// <summary>
        #/// Adds an error message from the infolog to the specified container.
        #/// </summary>
        #/// <param name="_con">
        #/// The container to add the error to.
        #/// </param>
        #/// <param name="_startInfologLine">
        #/// The starting line from which to retrieve the infolog message; optional.
        #/// </param>
        #/// <param name="_color">
        #/// The color in which the message should appear; optional.
        #/// </param>
        #/// <returns>
        #/// The container updated with the error message.
        #/// </returns>
        #protected container addErrorLabelFromInfolog(
        #    container       _con,
        #    int             _startInfologLine   = infologLine(),
        #    WHSRFColorText  _color              = WHSRFColorText::Default)
        #{
        #    str                     errorString;
        #    int                     currentInfologLine;
        #    SysInfologMessageStruct sysInfologMessageStruct;
        #    int                     prefixDepth;
        #    SysInfoLogStr           currentPrefixes[];
        #    int                     currentPrefixesLength;
        #
        #    for (currentInfologLine = _startInfologLine; currentInfologLine <= infologLine(); currentInfologLine++)
        #    {
        #        sysInfologMessageStruct = SysInfologMessageStruct::construct(infolog.text(currentInfologLine));
        #
        #        // Iterates through the new prefix to find from where it differs from the current prefix
        #        prefixDepth = 1;
        #        while (prefixDepth <= sysInfologMessageStruct.prefixDepth() &&
        #               prefixDepth <= currentPrefixesLength &&
        #               currentPrefixes[prefixDepth] == sysInfologMessageStruct.preFixTextElement(prefixDepth))
        #        {
        #            prefixDepth++;
        #        }
        #
        #        // Writes the remaining tabbed prefixes if needed
        #        while (prefixDepth <= sysInfologMessageStruct.prefixDepth())
        #        {
        #            currentPrefixes[prefixDepth] = sysInfologMessageStruct.preFixTextElement(prefixDepth);
        #            errorString += strRep(' ', prefixDepth - 1) + sysInfologMessageStruct.preFixTextElement(prefixDepth) + '\n';
        #            prefixDepth++;
        #        }
        #
        #        currentPrefixesLength = sysInfologMessageStruct.prefixDepth();
        #
        #        // Writes the error message
        #        errorString += strRep(' ', currentPrefixesLength) + sysInfologMessageStruct.message() + '\n';
        #    }
        #
        #    return this.addErrorLabel(_con, errorString, _color);
        #}
      ENDSOURCE
      SOURCE #addExceptionButton
        #container addExceptionButton(container  _con,
        #                             int        _newLine = 1)
        #{
        #    container   ret = _con;
        #    boolean     addException = true;
        #    str         controlType;
        #    str         name;
        #    int         length;
        #    int         i = 1;
        #
        #    if (mode != WHSWorkExecuteMode::PickPack        &&
        #        mode != WHSWorkExecuteMode::UserGrouping    &&
        #        step != #ReceivingExceptionStep1            &&
        #        step != #ReceivingExceptionStep2)
        #    {
        #        if (conLen(conPeek(_con, 1)) == 2)
        #        {
        #            i = 3;
        #        }
        #
        #        length = conLen(_con);
        #
        #        for (i = i; i <= length; ++i)
        #        {
        #            controlType = conPeek(conPeek(_con, i), #controlType);
        #            name = conPeek(conPeek(_con, i), #name);
        #
        #            if (controlType == #RFButton && name == #RFException)
        #            {
        #                addException = false;
        #            }
        #        }
        #
        #        if (addException)
        #        {
        #            ret += [this.buildControl(#RFButton, #RFException, "@SYS24667", _newLine, '', #WHSRFUndefinedDataType, '', 0)];
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #addFullButton
        #container addFullButton(container   _con,
        #                        int         _newLine = 1)
        #{
        #    container   ret = _con;
        #
        #    if (!this.shouldHandleByLP()                                                &&
        #        (mode                   == WHSWorkExecuteMode::UserDirected             ||
        #         mode                   == WHSWorkExecuteMode::UserGrouping             ||
        #         mode                   == WHSWorkExecuteMode::SystemGrouping           ||
        #         mode                   == WHSWorkExecuteMode::SystemDirected           ||
        #         mode                   == WHSWorkExecuteMode::ValidatedUserDirected)   &&
        #        workLine.WorkType       == WHSWorkType::Pick                            &&
        #        WHSWorkTable::isPickCompleted(workLine.WorkId, false)                   &&
        #        !WHSWorkLine::isPutBefore(workLine.WorkId, workLine.LineNum)            &&
        #        workLine.ContainerId    == ""                                           &&
        #        workLine.InventQtyWork  == workLine.InventQtyRemain                     &&
        #        step                    != #SplitWork                                   &&
        #        step                    != #ShortPick                                   &&
        #        step                    != #ShortPickConf                               &&
        #        step                    != #WorkAuditTemplate                           &&
        #        step                    != #OverpickStep)
        #    {
        #        ret += [this.buildControl(#RFButton, #RFFull, "@WAX1203", _newLine, '', #WHSRFUndefinedDataType, '', 0)];
        #    }
        #    else if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).AllowFullSplit        &&
        #             !workTable.isInbound()                                                 &&
        #             workLine.WorkType        ==  WHSWorkType::Pick                         &&
        #             !noFullButton                                                          &&
        #             !WHSWorkLine::isPutBefore(workLine.WorkId, workLine.LineNum)           &&
        #             workLine.ContainerId     == ""                                         &&
        #             step                     !=  #SplitWork                                &&
        #             step                     !=  #ShortPick                                &&
        #             step                     !=  #ShortPickConf                            &&
        #             step                     !=  #OverpickStep)
        #    {
        #        ret += [this.buildControl(#RFButton, #RFFull, "@WAX1203", _newLine, '', #WHSRFUndefinedDataType, '', 0)];
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #addLocationConfirmationControl
        #/// <summary>
        #/// Builds the container with the Location Confirmation control if the setup requires to have it displayed in the RF.
        #/// </summary>
        #/// <param name="_whsWorkType">
        #/// The current work type
        #/// </param>
        #/// <param name="_wmsLocation">
        #/// The current WMS Location
        #/// </param>
        #/// <returns>
        #/// The container with the data of the control that was built.
        #/// </returns>
        #protected container addLocationConfirmationControl(WHSWorkType _whsWorkType, WMSLocation _wmsLocation)
        #{
        #    container           ret;
        #
        #    if (pass.exists(#MenuItem))
        #    {
        #        if (WHSRFAutoConfirm::isLocationConfirmationEnabled(pass.lookup(#MenuItem), _whsWorkType))
        #        {
        #            if (_wmsLocation.CheckText)
        #            {
        #                ret = [this.buildControl(#RFText, #CheckDigit, "@WAX1197", 1, pass.lookupStr(#CheckDigit), extendedTypeNum(WMSCheckText), '', 0)];
        #            }
        #            else if (pass.exists(#SystemPopulated))
        #            {
        #                ret = [this.buildControl(#RFText, #LocVerification, "@WAX1196", 1, pass.lookupStr(#LocVerification), extendedTypeNum(WMSLocationId), '', 0)];
        #            }
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #addMoveLPButton
        #container addMoveLPButton(container   _con,
        #                          int         _newLine = 1)
        #{
        #    container   ret = _con;
        #
        #    if (   pass.hasValue(#LicensePlateId)
        #        && (mode == WHSWorkExecuteMode::Movement
        #        ||  mode == WHSWorkExecuteMode::MovementByTemplate))
        #    {
        #        ret += [this.buildControl(#RFButton, #RFMoveLp, "@WAX1481", _newLine, '', #WHSRFUndefinedDataType, '', 0)];
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #addOkButton
        #container addOkButton(container _con,
        #                      int       _newLine = 1)
        #{
        #    container   ret = _con;
        #
        #    if (workLine.WorkType   == WHSWorkType::Pick                        ||
        #        workLine.WorkType   == WHSWorkType::Put                         ||
        #        workLine.WorkType   == WHSWorkType::Custom                      ||
        #        workLine.WorkType   == WHSWorkType::PackToNestedLicensePlate    ||
        #        mode                == WHSWorkExecuteMode::Movement             ||
        #        mode                == WHSWorkExecuteMode::MovementByTemplate   ||
        #        mode                == WHSWorkExecuteMode::Quarantine           ||
        #        mode                == WHSWorkExecuteMode::InquiryLocation      ||
        #        mode                == WHSWorkExecuteMode::ProductionScrap      ||
        #        mode                == WHSWorkExecuteMode::InquiryItem)
        #    {
        #        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", _newLine, '', #WHSRFUndefinedDataType, '', 1)];
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #addOverpickButton
        #/// <summary>
        #/// Adds the over pick button if possible.
        #/// </summary>
        #/// <param name="_con">
        #/// The container with fields currently displayed on the mobile device.
        #/// </param>
        #/// <param name="_newLine">
        #/// Specifies if the next field on the mobile device should be on a new line.
        #/// </param>
        #/// <returns>
        #/// The mobile device fields.
        #/// </returns>
        #public container addOverpickButton(container _con, int _newLine = 1)
        #{
        #    container   ret = _con;
        #
        #    if ((mode                       == WHSWorkExecuteMode::UserDirected
        #        ||  mode                    == WHSWorkExecuteMode::SystemDirected
        #        ||  mode                    == WHSWorkExecuteMode::SystemGrouping
        #        ||  mode                    == WHSWorkExecuteMode::UserGrouping
        #        ||  mode                    == WHSWorkExecuteMode::ValidatedUserDirected)
        #        && (workTable.WorkTransType == WHSWorkTransType::Sales
        #        || workTable.WorkTransType  == WHSWorkTransType::TransferIssue)
        #        && workLine.WorkType        == WHSWorkType::Pick
        #        && step                     != #ShortPick
        #        && step                     != #ShortPickConf
        #        && step                     != #NoLocation
        #        && step                     != #OverrideStep1
        #        && step                     != #OverrideStep2
        #        && step                     != #SplitWork
        #        && step                     != #RFPickingComment
        #        && step                     != #AssignSerialStep
        #        && step                     != #WorkAuditTemplate
        #        && step                     != #OverpickStep
        #        && WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).AllowShippingOverpick)
        #    {
        #        ret += [this.buildControl(#RFButton, #RFOverpick, "@SYP4862231", _newLine, '', #WHSRFUndefinedDataType, '', 0)];
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #addOverrideButton
        #container addOverrideButton(
        #    container _con,
        #    int       _newLine = 1)
        #{
        #    InventLocation  inventLocation;
        #    container       ret = _con;
        #
        #    if (!this.shouldHandleByLP()                        &&
        #        !pass.exists(#NoOverrideButton)                 &&
        #        !pass.exists(#WorkComplete)                     &&
        #        step                    != #NoLocation          &&
        #        step                    != #ShortPick           &&
        #        step                    != #ShortPickConf       &&
        #        step                    != #SplitWork           &&
        #        step                    != #SplitPutWork        &&
        #        step                    != #RFPickingComment    &&
        #        step                    != #AssignSerialStep    &&
        #        step                    != #WorkAuditTemplate   &&
        #        step                    != #OverpickStep        &&
        #        WHSWorkUser::allowOverride(pass.lookup(#UserId), workLine.WorkType))
        #    {
        #        if (workLine.WorkType == WHSWorkType::Pick)
        #        {
        #            inventLocation = InventLocation::find(workTable.InventLocationId);
        #
        #            if (   !WHSWorkLine::isPutBefore(workLine.WorkId, workLine.LineNum)
        #                && mode                    != WHSWorkExecuteMode::MovementByTemplate
        #                && workLine.wmsLocationId  != inventLocation.wmsLocationIdDefaultReceipt
        #                && workLine.wmsLocationId  != inventLocation.DefaultProductionFinishGoodsLocation
        #                && workLine.wmsLocationId  != inventLocation.DefaultKanbanFinishedGoodsLocation)
        #            {
        #                ret += [this.buildControl(#RFButton, #RFOverride, "@SYP4862058", _newLine, '', #WHSRFUndefinedDataType, '', 0)];
        #            }
        #        }
        #        else
        #        {
        #            if (!WHSWorkTable::find(workLine.WorkId).isReplenDemand()
        #            &&  workLine.WMSLocationId)
        #            {
        #                ret += [this.buildControl(#RFButton, #RFOverride, "@SYP4862058", _newLine, '', #WHSRFUndefinedDataType, '', 0)];
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #addOverrideLPButton
        #/// <summary>
        #/// Adds a button to override an LP to the RF screen
        #/// </summary>
        #/// <param name="_con">
        #/// Current container of the RF controls.
        #/// </param>
        #/// <param name="_newLine">
        #/// To determine if the button should be on a new line.
        #/// </param>
        #/// <returns>
        #/// A container of the RF controls.
        #/// </returns>
        #container addOverrideLPButton(
        #    container _con,
        #    int       _newLine = 1)
        #{
        #    container   ret = _con;
        #
        #    if (addLPOverride)
        #    {
        #        ret += [this.buildControl(#RFButton, #RFOverrideLP, "@SYP4862057", _newLine, '', #WHSRFUndefinedDataType, '', 0)];
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #addProductConfirmationControl
        #/// <summary>
        #/// Builds the container with the Product Confirmation control if the setup requires to have it displayed in the RF.
        #/// </summary>
        #/// <param name="_whsWorkType">
        #/// The current work type.
        #/// </param>
        #/// <returns>
        #/// The container with the data of the control that was built.
        #/// </returns>
        #protected container addProductConfirmationControl(WHSWorkType _whsWorkType)
        #{
        #    container           ret;
        #
        #    if (pass.exists(#MenuItem))
        #    {
        #        if (WHSRFAutoConfirm::isProductConfirmationEnabled(pass.lookup(#MenuItem), _whsWorkType))
        #        {
        #            if (pass.exists(#ProductConfirmation))
        #            {
        #                ret = [this.buildControl(#RFText, #ProductConfirmation, "@SYS14428", 1, pass.lookup(#ProductConfirmation), extendedTypeNum(ItemId), '', 0)];
        #            }
        #            else
        #            {
        #                ret = [this.buildControl(#RFText, #ProductConfirmation, "@SYS14428", 1, '', extendedTypeNum(ItemId), '', 0)];
        #            }
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #addShortPickButton
        #container addShortPickButton(container  _con,
        #                             int        _newLine = 1)
        #{
        #    container   ret = _con;
        #
        #    if (!this.shouldHandleByLP()
        #        && (mode                   == WHSWorkExecuteMode::UserDirected
        #        ||  mode                   == WHSWorkExecuteMode::SystemDirected
        #        ||  mode                   == WHSWorkExecuteMode::SystemGrouping
        #        ||  mode                   == WHSWorkExecuteMode::UserGrouping
        #        ||  mode                   == WHSWorkExecuteMode::ValidatedUserDirected)
        #        && workLine.WorkType       == WHSWorkType::Pick
        #        && !WHSWorkLine::isPutBefore(workLine.WorkId, workLine.LineNum)
        #        && !WHSWorkExecute::isPotentialOverPick(workTable, workLine)
        #        && step                    != #ShortPick
        #        && step                    != #ShortPickConf
        #        && step                    != #NoLocation
        #        && step                    != #OverrideStep1
        #        && step                    != #OverrideStep2
        #        && step                    != #SplitWork
        #        && step                    != #RFPickingComment
        #        && step                    != #AssignSerialStep
        #        && step                    != #WorkAuditTemplate
        #        && step                    != #OverpickStep
        #        && workTable.WorkTransType != WHSWorkTransType::KanbanPick)
        #    {
        #        if (   !WHSWorkLine::isPutBefore(workLine.WorkId, workLine.LineNum)
        #            && workLine.wmsLocationId != InventLocation::find(workTable.InventLocationId).wmsLocationIdDefaultReceipt
        #            && workLine.wmsLocationId != InventLocation::find(workTable.InventLocationId).DefaultProductionFinishGoodsLocation
        #            && workLine.wmsLocationId != InventLocation::find(workTable.InventLocationId).DefaultKanbanFinishedGoodsLocation)
        #        {
        #            ret += [this.buildControl(#RFButton, #RFShortPick, "@WAX1322", _newLine, '', #WHSRFUndefinedDataType, '', 0)];
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #addSkipButton
        #container addSkipButton(container   _con,
        #                        int         _newLine = 1)
        #{
        #    container   ret = _con;
        #
        #    // Only show the Skip button for Pick's which aren't the last Pick or system directed menu items
        #    // Also allowing the ability to skip put lines
        #    if ((!this.shouldHandleByLP()
        #    &&   step                    != #ShortPick
        #    &&   step                    != #ShortPickConf
        #    &&   step                    != #NoLocation
        #    &&   step                    != #OverrideStep1
        #    &&   step                    != #OverrideStep2
        #    &&   step                    != #SplitWork
        #    &&   step                    != #RFPickingComment
        #    &&   step                    != #WorkAuditTemplate
        #    &&   step                    != #SplitPutWork
        #    &&   step                    != #OverpickStep
        #    &&   !pass.exists(#GroupPutaway))
        #    &&  ((workLine.WorkType      == WHSWorkType::Put
        #    &&    !workLine.isPickLineAfter()
        #    &&    workLine.hasMultipleFinalPuts())
        #    ||   (workLine.WorkType      == WHSWorkType::Pick
        #    &&    workLine.InventQtyWork == workLine.InventQtyRemain
        #    &&    (!workLine.isLastRemainingPick()
        #    ||     mode == WHSWorkExecuteMode::SystemGrouping
        #    ||     WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).MenuItemDirectedBy == WHSMenuItemDirectedBy::SystemDirected))))
        #    {
        #        ret += [this.buildControl(#RFButton, #RFSkip, "@WAX3534", _newLine, '', #WHSRFUndefinedDataType, '', 0)];
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #addSplitPutButton
        #/// <summary>
        #/// Adds a button to enter to a split put to the RF screen.
        #/// </summary>
        #/// <param name="_con">
        #/// Current container of the RF controls.
        #/// </param>
        #/// <param name="_newLine">
        #/// To determine if the button should be on a new line.
        #/// </param>
        #/// <returns>
        #/// A container of the RF controls.
        #/// </returns>
        #container addSplitPutButton(
        #    container _con,
        #    int       _newLine = 1)
        #{
        #    container   ret = _con;
        #
        #    if (addSplitButton)
        #    {
        #        ret += [this.buildControl(#RFButton, #RFSplitPut, "@SYP4862059", _newLine, '', #WHSRFUndefinedDataType, '', 0)];
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #addSuggestLocationButton
        #container addSuggestLocationButton(container    _con,
        #                                   boolean      _override = false)
        #{
        #    container   ret = _con;
        #
        #    if (step == #NoLocation || step == #ShortPickConf || _override)
        #    {
        #        ret += [this.buildControl(#RFButton, #RFNoLocation, "@WAX1281", 1, '', #WHSRFUndefinedDataType, '', 0)];
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #addTrackingDimRecUOMControl
        #/// <summary>
        #///     Adds the batch UOM control to the RF container.
        #/// </summary>
        #/// <param name="_con">
        #///     The RF container variable.
        #/// </param>
        #/// <param name="_label">
        #///     The label to be used for the control.
        #/// </param>
        #/// <param name="_elements">
        #///     The elements to be included in the combobox.
        #/// </param>
        #/// <param name="_selected">
        #///     A Boolean value indiciating the value that must be selected from the list of available options.
        #/// </param>
        #/// <param name="_enabled">
        #///     A Boolean value indicating whether the control is enabled for edit.
        #/// </param>
        #/// <returns>
        #///     Returns the updated RF container variable.
        #/// </returns>
        #protected container addTrackingDimRecUOMControl(
        #    container   _con,
        #    str         _label,
        #    str         _elements,
        #    str         _selected,
        #    boolean     _enabled)
        #{
        #    container   ret = _con;
        #    str         label;
        #
        #    label =  _label ? _label : "@WAX721";   // UOM
        #
        #    if (!_enabled && _selected)
        #    {
        #        ret += [this.buildControl(#RFCombobox, #DimUOM, label, 1, _selected, #WHSRFUndefinedDataType, '', 0, _enabled, _selected)];
        #    }
        #    else
        #    {
        #        ret += [this.buildControl(#RFCombobox, #DimUOM, label, 1, _elements, #WHSRFUndefinedDataType, '', 0, _enabled, _selected ? _selected : '')];
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildAboveLocationDimensions
        #/// <summary>
        #/// Method builds label controls on the RF screen for all dimensions above location in the reservation hierarchy.
        #/// </summary>
        #/// <param name="_con">
        #/// A container holding all the current RF screen information
        #/// </param>
        #/// <param name="_inventDim">
        #/// The inventDim holding values to be displayed.
        #/// </param>
        #/// <param name="_itemId">
        #/// The Id of the item which determines the reservation hierarchy, thus, determining the dimensions above locaiton.
        #/// </param>
        #/// <returns>
        #/// A container with the updated RF screen information
        #/// </returns>
        #protected container buildAboveLocationDimensions(
        #    container   _con,
        #    InventDim   _inventDim,
        #    ItemId      _itemId)
        #{
        #    WHSReservationHierarchyProvider     reservationHierarchyProvider;
        #    WHSReservationHierarchyElementData  hierarchyElementData;
        #    container                           ret = _con;
        #    ListEnumerator                      le;
        #    FieldId                             dimFieldId;
        #    boolean                             displayInventStatus;
        #
        #    // Method to build the dimension control
        #    container buildDimControl(InventDim _internalInventDim, FieldId _internalDimFieldId)
        #    {
        #        return [this.buildControl(#RFLabel,
        #                    fieldId2name(tableNum(InventDim), _internalDimFieldId),
        #                    strFmt("%1: %2", new DictField(tableNum(InventDim), _internalDimFieldId).label(), _internalInventDim.(_internalDimFieldId)),
        #                    1, '', #WHSRFUndefinedDataType, '', 0, false)];
        #    }
        #
        #    if (_itemId)
        #    {
        #        reservationHierarchyProvider = WHSReservationHierarchyProvider::construct();
        #        displayInventStatus = WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfDisplayStatus;
        #
        #        // Add product dimensions
        #        le = InventDimGroupSetup::newItemIdProductDimensionsOnly(_itemId).activeFields().getEnumerator();
        #        while (le.moveNext())
        #        {
        #            dimFieldId = le.current();
        #            if (_inventDim.(dimFieldId))
        #            {
        #                ret += buildDimControl(_inventDim, dimFieldId);
        #            }
        #        }
        #
        #        // Add dimensions from hierarchy
        #        le = reservationHierarchyProvider.getDimListAboveLocationFromInventTable(
        #                    InventTable::find(_itemId),
        #                    WHSReservationHierarchySortOrder::TopDown)
        #                .getEnumerator();
        #        while (le.moveNext())
        #        {
        #            hierarchyElementData = le.current();
        #            dimFieldId = hierarchyElementData.parmDimensionFieldId();
        #
        #            // Filter out status, warehouse and site.
        #            if (_inventDim.(dimFieldId)
        #                && dimFieldId != fieldNum(InventDim, InventLocationId)
        #                && dimFieldId != fieldNum(InventDim, InventSiteId)
        #                && (dimFieldId != fieldNum(InventDim, InventStatusId)
        #                    || displayInventStatus))
        #            {
        #                ret += buildDimControl(_inventDim, dimFieldId);
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildAdjustInTrackingDimensions
        #protected container buildAdjustInTrackingDimensions(
        #    container   _con,
        #    ItemId      _itemId)
        #{
        #    container       ret = _con;
        #    ListEnumerator  le;
        #    str             dateFormat = WHSParameters::getDateFormat();
        #
        #    le = InventDimGroupSetup::newDimensionGroups(0, 0, InventTable::find(_itemId).trackingDimensionGroup()).activeFields().getEnumerator();
        #
        #    while (le.moveNext())
        #    {
        #        switch (le.current())
        #        {
        #            case fieldNum(InventDim, InventBatchId):
        #                ret += [this.buildControl(#RFText, #BatchId, "@SYS14462", 1, '', extendedTypeNum(InventBatchId), '', 0)];
        #
        #                if (pass.lookupStr(#BatchId) != '')
        #                {
        #                    if (InventBatch::exist(pass.lookup(#ItemId), pass.lookup(#BatchId)))
        #                    {
        #                        ret += [this.buildControl(#RFText, #ExpDate, strFmt("@WAX1769", dateFormat), 1, strFmt('%1', InventBatch::find(pass.lookup(#BatchId), pass.lookup(#ItemId)).ExpDate), extendedTypeNum(InventBatchExpDate), '', 0, false)];
        #                    }
        #                    else
        #                    {
        #                        if (!pass.exists(#ExpDate) && WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).DefaultData)
        #                        {
        #                            ret += [this.buildControl(#RFText, #ExpDate, strFmt("@WAX1769", dateFormat), 1, WHSRFDefaultData::getDefaultValue(pass.lookup(#MenuItem),
        #                                                                                                                                              WHSDefaultDataField::ExpDate,
        #                                                                                                                                              pass.lookup(#UserId),
        #                                                                                                                                              pass.lookup(#InventLocationId),
        #                                                                                                                                              pass.lookup(#WMSLocationId)), extendedTypeNum(InventBatchExpDate), '', 0)];
        #                        }
        #                        else
        #                        {
        #                            ret += [this.buildControl(#RFText, #ExpDate, strFmt("@WAX1769", dateFormat), 1, '', extendedTypeNum(InventBatchExpDate), '', 0)];
        #                        }
        #                    }
        #                }
        #                break;
        #
        #            case fieldNum(InventSerial, InventSerialId):
        #                if (this.mustCaptureSerialOnReceipt(_itemId))
        #                {
        #                    ret += [this.buildControl(#RFText, #SerialId, "@WAX1614", 1, '', extendedTypeNum(InventSerialId), '', 0)];
        #                }
        #                break;
        #
        #            default:
        #                ret += [this.buildControlForTableField(tableNum(InventDim), le.current(), fieldId2name(tableNum(InventDim), le.current()), 1, '', true)];
        #                break;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildAdjustmentType
        #container buildAdjustmentType(container    _con,
        #                              str          _label = '',
        #                              boolean      _showRemove = false,
        #                              boolean      _showBlank = false,
        #                              boolean      _showOK = true,
        #                              str          _selected = '')
        #{
        #    WHSAdjustmentType   adjustmentType;
        #    container           ret = _con;
        #    boolean             first = true;
        #    str                 elements;
        #    str                 label = _label ? _label : "@SYS17769";      // Adjustment Type
        #    ;
        #
        #    if (_showBlank)
        #    {
        #        elements = '||';
        #    }
        #
        #    while select AdjustmentTypeCode from adjustmentType
        #    {
        #        if (first)
        #        {
        #            elements += adjustmentType.AdjustmentTypeCode;
        #            first = false;
        #        }
        #        else
        #        {
        #            elements = elements + '||' + adjustmentType.AdjustmentTypeCode;
        #        }
        #    }
        #
        #    ret += [this.buildControl(#RFCombobox, #AdjustmentType, label, 1, elements, #WHSRFUndefinedDataType, '', 0, true, _selected ? _selected : WHSRFMenuItemTable::getDefaultAdjustmentTypeCode(pass.lookup(#MenuItem)))];
        #    pass.insert(#SelectedAdjustmentType, _selected ? _selected : WHSRFMenuItemTable::getDefaultAdjustmentTypeCode(pass.lookup(#MenuItem)));
        #
        #    if (_showRemove)
        #    {
        #        ret += [this.buildControl(#RFButton, "@SYS26394", "@WAX879", 1, '', #WHSRFUndefinedDataType, '', 0)];
        #    }
        #
        #    if (_showOK)
        #    {
        #        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildAssignSerial
        #container buildAssignSerial(container _con, str _extraText = '')
        #{
        #    InventTable inventTable = InventTable::find(workLine.ItemId);
        #    FieldId     fieldId;
        #    FieldName   fieldName;
        #    DictField   dictField;
        #    container   ret = _con;
        #    str         finalLabel = _extraText ? _extraText : "@WAX3318";
        #
        #    ret += [this.buildControl(#RFLabel, #Enter, finalLabel, 1, '', #WHSRFUndefinedDataType, '', 0)];
        #
        #    ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, workLine.wmsLocationId, extendedTypeNum(WMSLocationId), '', 0, false)];
        #
        #    if (pass.exists(#LicensePlateId))
        #    {
        #        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.lookup(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0, false)];
        #    }
        #
        #    ret += [this.buildControl(#RFText, #ItemId, "@SYS111673", 1, pass.lookupStr(#ItemId), extendedTypeNum(ItemId), '', 0, false)];
        #
        #    // Build control to capture next dimension
        #    // No need to prompt for dimension if raw material picking in a license plate controlled location since full LP qty is picked
        #    ret = this.buildNextDimensionCaptureControl(ret, workLine.inventDimWithLocation(), workLine.ItemId, workLine.InventQtyRemain, true, true);
        #
        #    if (inventTable.salesProcessSerialActive())
        #    {
        #        fieldId     = fieldNum(InventDim, InventSerialId);
        #        fieldName   = fieldId2name(tableNum(InventDim), fieldId);
        #        dictField   = new DictField(tableNum(InventDim), fieldId);
        #
        #        ret += [this.buildControl(#RFLabel,
        #                                  #SerialCounter,
        #                                  strFmt("@WAX3121", pass.lookup(#SerialCounter), pass.lookupNum(#SerialQty), inventTable.inventUnitId()),
        #                                  1, '', #WHSRFUndefinedDataType, '', 0)];
        #
        #        ret += [this.buildControl(#RFText, fieldName, dictField.label(), 1, pass.lookupStr(fieldName), dictField.typeId(), '', 0)];
        #    }
        #
        #    ret  = this.addOkButton(ret);
        #    ret += [this.buildControl(#RFButton, #RFSerialUnreadable, "@SYS4030029", 1, '', #WHSRFUndefinedDataType, '', 0)];
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildBatchDisposition
        #/// <summary>
        #///     Builds the batch disposition control on the RF screen.
        #/// </summary>
        #/// <param name="_con">
        #///     The RF container variable.
        #/// </param>
        #/// <param name="_controlName">
        #///     The name used to identify the RF control.
        #/// </param>
        #/// <param name="_label">
        #///     The label to be used for the RF control.
        #/// </param>
        #/// <param name="_editable">
        #///     A Boolean value indicating whether the control is editable.
        #/// </param>
        #/// <returns>
        #///     Returns the updated RF container variable.
        #/// </returns>
        #protected container buildBatchDisposition(
        #    container       _con,
        #    str             _controlName = #BatchDisposition,
        #    str             _label = "@PRO173",
        #    boolean         _editable = true)
        #{
        #    container               ret = _con;
        #    ItemId                  itemId;
        #    PdsBatchDispositionCode defaultValue;
        #    PdsBatchDispositionCode selectedValue;
        #    str                     elements;
        #    boolean                 showBlank;
        #
        #    if (this.displayBatchDisposition())
        #    {
        #        itemId = pass.lookupStr(#ItemId);
        #
        #        // Get the default batch disposition code.
        #        [defaultValue, showBlank] = this.getDefaultBatchDispositionCode(itemId);
        #
        #        // If the batch ID has changed, reset the selected value to the default.
        #        if (pass.exists(#ResetBatchDisposition))
        #        {
        #            selectedValue = defaultValue;
        #
        #            pass.remove(#ResetBatchDisposition);
        #        }
        #        else
        #        {
        #            selectedValue = pass.lookupStr(_controlName);
        #        }
        #
        #        // Build the batch disposition elements.
        #        elements = this.buildBatchDispositionElements(showBlank);
        #
        #        ret += [this.buildControl(#RFComboBox, _controlName, _label, 1, elements, #WHSRFUndefinedDataType, '', 0, _editable, selectedValue ? selectedValue : defaultValue)];
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildBatchDispositionElements
        #/// <summary>
        #///     Builds a pipe-delimited string containing batch disposition values.
        #/// </summary>
        #/// <param name="_showBlank">
        #///     A Boolean value to indicate whether a blank value should be included in the list of available options.
        #/// </param>
        #/// <returns>
        #///     Returns a pipe-delimited string containing batch disposition values.
        #/// </returns>
        #protected str buildBatchDispositionElements(boolean _showBlank)
        #{
        #    PdsDispositionMaster    pdsDispositionMaster;
        #    boolean                 first = true;
        #    str                     elements;
        #
        #    if (_showBlank)
        #    {
        #        elements = '||';
        #    }
        #    if (pass.exists(#ItemId))
        #    {
        #        while select DispositionCode from pdsDispositionMaster
        #        {
        #            if (first)
        #            {
        #                first = false;
        #            }
        #            else
        #            {
        #                elements += '||';
        #            }
        #
        #            elements += pdsDispositionMaster.DispositionCode;
        #        }
        #    }
        #
        #    return elements;
        #}
      ENDSOURCE
      SOURCE #buildBatchExpDate
        #/// <summary>
        #///     Builds the batch expiration date control on the RF screen.
        #/// </summary>
        #/// <param name="_con">
        #///     The RF container variable.
        #/// </param>
        #/// <param name="_batchId">
        #///     The batch for which the expiry date control is being constructed; optional.
        #/// </param>
        #/// <returns>
        #///     Returns the updated RF container variable.
        #/// </returns>
        #protected container buildBatchExpDate(container _con, InventBatchId _batchId = '')
        #{
        #    container                       ret = _con;
        #    str                             expDate;
        #    InventBatchId                   inventBatchId;
        #    InventTable                     inventTable;
        #    boolean                         enabled = false;
        #    str                             dateFormat;
        #
        #    inventTable = InventTable::find(pass.lookupStr(#ItemId));
        #
        #    // For shelf life items, expiration date is calculated at registration rather than being captured through the RF.
        #    if (!inventTable.isShelfLifeItem())
        #    {
        #        if (pass.exists(#VendBatchInfoEntered))
        #        {
        #            expDate = pass.lookupStr(#ExpDate);
        #        }
        #        else
        #        {
        #            inventBatchId = (_batchId) ? _batchId : this.getInventBatchId();
        #
        #            if (inventBatchId)
        #            {
        #                expDate = strFmt('%1', WHSWorkExecuteDisplay::getBatchExpDate(inventTable.ItemId, inventBatchId, pass.lookupStr(#ReceiptId)));
        #            }
        #
        #            if (!this.itemRequiresManualDimTracking(inventTable, InventTrackingDimType::Batch))
        #            {
        #                /*
        #                    If the item does not require manual batch assignment, we need to ensure that the current batch is the auto generated one
        #                    and not a new one that the user registered. If the batch is auto generated during receiving, there will not be a record
        #                    yet in the InventBatch table.
        #                */
        #                if (inventBatchId
        #                    && (pass.lookupStr(#AutoGeneratedBatchId) == inventBatchId || InventBatch::exist(inventTable.ItemId, inventBatchId)))
        #                {
        #                    enabled = false;
        #                }
        #                else
        #                {
        #                    enabled = true;
        #                }
        #            }
        #            else
        #            {
        #                enabled = !(expDate
        #                            || pass.lookupStr(#ExpDate)
        #                            || InventBatch::exist(inventTable.ItemId, inventBatchId));
        #            }
        #        }
        #
        #        dateFormat = WHSParameters::getDateFormat();
        #
        #        ret += [this.buildControl(#RFText, #ExpDate, strFmt("@WAX1769", dateFormat), 1, expDate, extendedTypeNum(InventBatchExpDate), '', 0, enabled)];
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildBatchOverrideIfMenuItemAllows
        #/// <summary>
        #///     If the menu item allows batch number override, build the batch control elements.
        #/// </summary>
        #/// <param name="_con">
        #///     The RF container variable.
        #/// </param>
        #/// <param name="_inventBatchId">
        #///     The original inventory batch ID.
        #/// </param>
        #/// <param name="_licensePlateId">
        #///     The license plate ID.
        #/// </param>
        #/// <returns>
        #///     Returns the updated RF container variable.
        #/// </returns>
        #protected container buildBatchOverrideIfMenuItemAllows(
        #    container           _con,
        #    InventBatchId       _inventBatchId,
        #    WHSLicensePlateId   _licensePlateId)
        #{
        #    container           ret = _con;
        #    InventBatchId       batchId;
        #    WHSRFMenuItemTable  menuItemTable;
        #    str                 defaultValue;
        #    boolean             editable = true;
        #    InventBatch         inventBatch;
        #    str                 dateFormat = WHSParameters::getDateFormat();
        #    InventTable         inventTable;
        #
        #    menuItemTable = WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem));
        #
        #    if (menuItemTable.OverrideInventBatchId
        #        && pass.hasValue(#ItemId)
        #        && InventTable::find(pass.lookup(#ItemId)).isItemBatchActivated())
        #    {
        #        inventTable = InventTable::find(pass.lookup(#ItemId));
        #
        #        if (!pass.exists(#BatchId) && _inventBatchId)
        #        {
        #            pass.insert(#BatchId, _inventBatchId);
        #        }
        #
        #        batchId = pass.lookupStr(#BatchId);
        #
        #        ret += [this.buildControl(#RFText, #BatchId, "@SYS14462", 1, batchId, extendedTypeNum(InventBatchId), '', 0)];
        #
        #        if (!inventTable.isShelfLifeItem())
        #        {
        #            inventBatch = InventBatch::find(batchId, inventTable.ItemId);
        #
        #            if (inventBatch.RecId != 0)
        #            {
        #                defaultValue    = strFmt("%1", inventBatch.ExpDate);
        #                editable        = false;
        #            }
        #            else if (!pass.exists(#ExpDate) && menuItemTable.DefaultData)
        #            {
        #                defaultValue =  WHSRFDefaultData::getDefaultValue(pass.lookup(#MenuItem),
        #                                    WHSDefaultDataField::ExpDate,
        #                                    pass.lookup(#UserId),
        #                                    pass.lookup(#InventLocationId),
        #                                    pass.lookup(#WMSLocationId));
        #            }
        #
        #            ret += [this.buildControl(#RFText, #ExpDate, strFmt("@WAX1769", dateFormat), 1, defaultValue, extendedTypeNum(InventBatchExpDate), '', 0, editable)];
        #        }
        #        else if (InventBatch::exist(inventTable.ItemId, batchId))
        #        {
        #            editable = false;
        #        }
        #
        #        // Build the batch disposition control.
        #        ret = this.buildBatchDisposition(ret);
        #
        #        // For the sake of adding a grouping header for the potency control, we must add LP prior to adding potency on the RF screen.
        #        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, _licensePlateId, extendedTypeNum(WHSLicensePlateId), '', 0)];
        #
        #        // Build the potency control.
        #        ret = this.buildGetPotency(ret, batchId);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildComments
        #container buildComments(container   _con)
        #{
        #    container           ret = _con;
        #    WHSShipmentTable    shipmentTable;
        #    DocuRef             docuRef;
        #    WHSWorkLine         pickLine;
        #    WHSWorkLine         firstPutLine;
        #    WHSParameters       parameters = WHSParameters::find();
        #    str                 notes;
        #    WHSShipmentId       prevShipment;
        #    RecId               prevDocu;
        #    int                 numOfPicks;
        #    Qty                 inventUnits;
        #    Weight              totalWeight;
        #    WHSWorkLine         tmpWorkLine;
        #
        #    if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfDisplayPickSummary)
        #    {
        #        while select WorkType, InventQtyWork, ItemId from tmpWorkLine
        #            order by LineNum
        #            where tmpWorkLine.WorkId == workLine.WorkId
        #        {
        #            if (tmpWorkLine.WorkType == WHSWorkType::Pick)
        #            {
        #                ++numOfPicks;
        #                inventUnits += tmpWorkLine.InventQtyWork;
        #                totalWeight += tmpWorkLine.InventQtyWork * InventTable::find(tmpWorkLine.ItemId).grossWeight();
        #            }
        #            else if (tmpWorkLine.WorkType == WHSWorkType::Put)
        #            {
        #                break;
        #            }
        #        }
        #
        #        ret += [this.buildControl(#RFLabel, #Comments, strFmt("@WAX2958", numOfPicks), 1, '', #WHSRFUndefinedDataType, '', 0)];
        #        ret += [this.buildControl(#RFLabel, #Comments, strFmt("@WAX2959", inventUnits), 1, '', #WHSRFUndefinedDataType, '', 0)];
        #        ret += [this.buildControl(#RFLabel, #Comments, strFmt("@WAX2960", totalWeight, '\n'), 1, '', #WHSRFUndefinedDataType, '', 0)];
        #    }
        #
        #    select firstonly LineNum, WorkId from firstPutLine
        #        order by LineNum desc
        #        where firstPutLine.WorkId   == workLine.WorkId &&
        #              firstPutLine.WorkType == WHSWorkType::Put;
        #
        #    while select LineNum, WorkId, ShipmentId from pickLine
        #        join ShipmentId from shipmentTable
        #        order by shipmentTable.ShipmentId
        #        where pickLine.LineNum      <  firstPutLine.LineNum    &&
        #              pickLine.WorkId       == firstPutLine.WorkId  &&
        #              pickLine.ShipmentId   == shipmentTable.ShipmentId
        #    {
        #        if (prevShipment != shipmentTable.ShipmentId)
        #        {
        #            while select docuRef
        #                order by docuRef.RecId asc
        #                where docuRef.RefTableId    == shipmentTable.TableId    &&
        #                      docuRef.RefRecId      == shipmentTable.RecId      &&
        #                      docuRef.TypeId        == parameters.rfNoteType
        #            {
        #                if (prevDocu != docuRef.RecId)
        #                {
        #                    notes += docuRef.Notes + '\n';
        #                    prevDocu = docuRef.RecId;
        #                }
        #            }
        #            if (notes)
        #            {
        #                ret += [this.buildControl(#RFLabel, #Comments, strFmt("@WAX2500", shipmentTable.ShipmentId, '\n', notes), 1, '', #WHSRFUndefinedDataType, '', 0)];
        #            }
        #            prevShipment = shipmentTable.ShipmentId;
        #            notes = '';
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildConfirmScreen
        #container buildConfirmScreen(container _con, str _message)
        #{
        #    container           ret = _con;
        #    WHSWorkTypeCustom   workTypeCustom;
        #
        #    workTypeCustom = WHSWorkTypeCustom::find(workLine.WorkTypeCustomCode);
        #
        #    ret += [this.buildControl(#RFLabel, #Confirmation, _message, 1, '', #WHSRFUndefinedDataType, '', 0)];
        #
        #    if (workTypeCustom.CaptureData)
        #    {
        #        ret += [this.buildControl(#RFText, #Custom, workTypeCustom.rfLabel, 1, '', extendedTypeNum(Description), '', 0)];
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildControl
        #container buildControl(str                  _controlType,
        #                       str                  _name,
        #                       str                  _label,
        #                       int                  _newLine,
        #                       str                  _data,
        #                       ExtendedTypeId       _inputType,
        #                       str                  _error,
        #                       int                  _defaultButton,
        #                       boolean              _enabled = true,
        #                       str                  _selected = '',
        #                       WHSRFColorText       _color = WHSRFColorText::Default)
        #{
        #    container   ret         = conNull();
        #    int         length      = -1;
        #    str         typeStr     = #TypeUndefined;
        #    SysDictType sysTypeDict = new SysDictType(_inputType);
        #    Types       type;
        #
        #    if (_inputType != #WHSRFUndefinedDataType && sysTypeDict)
        #    {
        #        type    = sysTypeDict.isTime() ? Types::Time : sysTypeDict.baseType();
        #        typeStr = enum2Symbol(enumNum(Types), type);
        #        if (type == Types::String)
        #        {
        #            length = sysTypeDict.stringLen();
        #        }
        #    }
        #
        #    ret = [_controlType];
        #    ret += _name;
        #    ret += _label;
        #    ret += _newLine;
        #    ret += _data;
        #    ret += typeStr;
        #    ret += length;
        #    ret += _error == '' ? '0' : '1';
        #    ret += _defaultButton;
        #    ret += _enabled ? 1 : 0;
        #    ret += _selected;
        #    ret += WHSRFColor::getHexColor(_color);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildControlExistsInContainer
        #/// <summary>
        #/// Checks if a build control was found in display container with a given name.
        #/// </summary>
        #/// <param name="_displayCon">
        #/// The container which holds the controls for user display.
        #/// </param>
        #/// <param name="_controlName">
        #/// The name of the build control that needs to be fetched.
        #/// </param>
        #/// <returns>
        #/// True, if control was found in the build container; otherwise, false.
        #/// </returns>
        #protected int buildControlExistsInContainer(container _displayCon, str _controlName)
        #{
        #    return this.indexOfBuildControlFromContainer(_displayCon, _controlName) != 0;
        #}
      ENDSOURCE
      SOURCE #buildControlForTableField
        #/// <summary>
        #///    Builds a control based on a table field.
        #/// </summary>
        #/// <param name="_tableId">
        #///    The table ID of the field.
        #/// </param>
        #/// <param name="_fieldId">
        #///    The field ID.
        #/// </param>
        #/// <param name="_name">
        #///    The name of the control.
        #/// </param>
        #/// <param name="_newLine">
        #///    The new line value for the control.
        #/// </param>
        #/// <param name="_data">
        #///    The control value.
        #/// </param>
        #/// <param name="_enabled">
        #///    A Boolean value that indicates if the field is enabled.
        #/// </param>
        #/// <returns>
        #///    A container that represents the control.
        #/// </returns>
        #protected container buildControlForTableField(
        #    TableId _tableId,
        #    FieldId _fieldId,
        #    str     _name,
        #    int     _newLine,
        #    str     _data,
        #    boolean _enabled)
        #{
        #    container   result;
        #
        #    DictType    dictType = WHSWorkExecuteDisplay::dictTypeForTableField(_tableId,_fieldId);
        #
        #    if (dictType)
        #    {
        #        result = this.buildControl(#RFText,_name,dictType.label(),_newLine,_data, dictType.id() ,'',0,_enabled);
        #    }
        #
        #    return result;
        #}
      ENDSOURCE
      SOURCE #buildCycleCountUOM
        #container buildCycleCountUOM(container    _con,
        #                             str          _label = '',
        #                             boolean      _showBlank = false,
        #                             str          _selected = '')
        #{
        #    WHSInventTable      whsInventTable;
        #    WHSUOMSeqGroupLine  uomSeqGroupLine;
        #    container           ret = _con;
        #    boolean             first = true;
        #    str                 elements;
        #    str                 label = _label ? _label : "@WAX721";      // UOM
        #    int                 countUOM = 0;
        #    ItemId              itemId;
        #
        #    if (pass.exists(#ItemId))
        #    {
        #        itemId = pass.lookup(#ItemId);
        #        whsInventTable = WHSInventTable::find(itemId);
        #    }
        #
        #    if (!WHSUOMSeqGroupTable::hasCycleCountUOM(whsInventTable.uomSeqGroupId))
        #    {
        #        ret += [this.buildControl(#RFText, #CycleCountQty1, "@SYS105177", 1, '', extendedTypeNum(Qty), '', 0)];
        #
        #        elements = this.buildUOMSequenceGroupString(itemId, _showBlank);
        #
        #        ret += [this.buildControl(#RFCombobox, #CycleCountUOM1, label, 0, elements, #WHSRFUndefinedDataType, '', 0, true, _selected ? _selected : '')];
        #    }
        #    else
        #    {
        #        while select reverse UnitId from uomSeqGroupLine
        #            where uomSeqGroupLine.uomSeqGroupId  == whsInventTable.uomSeqGroupId  &&
        #                  uomSeqGroupLine.CycleCountUOM  == NoYes::Yes
        #        {
        #            if (countUOM < 4)
        #            {
        #                switch (countUOM)
        #                {
        #                    case 0:
        #                        ret += [this.buildControl(#RFText, #CycleCountQty1, "@SYS105177", 1, '', extendedTypeNum(Qty), '', 0)];
        #                        ret += [this.buildControl(#RFCombobox, #CycleCountUOM1, label, 0, uomSeqGroupLine.UnitId, #WHSRFUndefinedDataType, '', 0, false, uomSeqGroupLine.UnitId)];
        #                        countUOM++;
        #                        break;
        #
        #                    case 1:
        #                        ret += [this.buildControl(#RFText, #CycleCountQty2, "@SYS105177", 1, '', extendedTypeNum(Qty), '', 0)];
        #                        ret += [this.buildControl(#RFCombobox, #CycleCountUOM2, label, 0, uomSeqGroupLine.UnitId, #WHSRFUndefinedDataType, '', 0, false, uomSeqGroupLine.UnitId)];
        #                        countUOM++;
        #                        break;
        #
        #                    case 2:
        #                        ret += [this.buildControl(#RFText, #CycleCountQty3, "@SYS105177", 1, '', extendedTypeNum(Qty), '', 0)];
        #                        ret += [this.buildControl(#RFCombobox, #CycleCountUOM3, label, 0, uomSeqGroupLine.UnitId, #WHSRFUndefinedDataType, '', 0, false, uomSeqGroupLine.UnitId)];
        #                        countUOM++;
        #                        break;
        #
        #                    case 3:
        #                        ret += [this.buildControl(#RFText, #CycleCountQty4, "@SYS105177", 1, '', extendedTypeNum(Qty), '', 0)];
        #                        ret += [this.buildControl(#RFCombobox, #CycleCountUOM4, label, 0, uomSeqGroupLine.UnitId, #WHSRFUndefinedDataType, '', 0, false, uomSeqGroupLine.UnitId)];
        #                        countUOM++;
        #                        break;
        #                }
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildDispositon
        #/// <summary>
        #/// Builds a list of disposition codes to be used within the RF
        #/// </summary>
        #/// <param name="_con">
        #/// Container holding RF information
        #/// </param>
        #/// <param name="_selected">
        #/// Selected value for disposition control
        #/// </param>
        #/// <param name="_enabled">
        #/// Determines if control is enabled or not
        #/// </param>
        #/// <param name="_addEmpty">
        #/// Determines if an empty entry should be added as the first disposition code
        #/// </param>
        #/// <returns>
        #/// Container with disposition values
        #/// </returns>
        #public container buildDispositon(
        #    container    _con,
        #    str          _selected = '',
        #    boolean      _enabled = true,
        #    boolean      _addEmpty = false)
        #{
        #    container           ret = _con;
        #    boolean             first = true;
        #    str                 elements;
        #    WHSDispositionTable dispositionTable;
        #    WHSDispositionCode  dispositionCode;
        #    str                 selected = _selected;
        #
        #    elements = '';
        #
        #    if (_addEmpty)
        #    {
        #        elements += '||';
        #    }
        #
        #    while select dispositionTable
        #    {
        #        if (first)
        #        {
        #            if (this.showDisposition(dispositionTable))
        #            {
        #                elements += dispositionTable.DispositionCode;
        #                first = false;
        #            }
        #        }
        #        else
        #        {
        #            if (this.showDisposition(dispositionTable))
        #            {
        #                elements = elements + '||' + dispositionTable.DispositionCode;
        #            }
        #        }
        #    }
        #
        #    if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).DefaultData)
        #    {
        #        dispositionCode = WHSRFDefaultData::getDefaultValue(pass.lookup(#MenuItem),
        #                                                            WHSDefaultDataField::Disposition,
        #                                                            pass.lookup(#UserId),
        #                                                            pass.lookupStr(#InventLocationId),
        #                                                            pass.lookupStr(#WMSLocationId));
        #    }
        #
        #    if (!selected && dispositionCode)
        #    {
        #        selected = dispositionCode;
        #    }
        #
        #    ret += [this.buildControl(#RFCombobox, #Disposition, "@WAX1841", 1, elements, #WHSRFUndefinedDataType, '', 0, _enabled, selected ? selected : '')];
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildGetBatchLoop
        #container buildGetBatchLoop(container     _con,
        #                            Qty           _defaultQty,
        #                            str           _extraText = '')
        #{
        #    container       ret = _con;
        #    WMSLocation     location;
        #
        #    location = WMSLocation::find(pass.lookup(#WMSLocationId), pass.lookup(#InventLocationId));
        #
        #    ret += [this.buildControl(#RFLabel, #BatchLoop, "@WAX2009", 1, '', #WHSRFUndefinedDataType, '', 0)];
        #
        #    if (location.whsLocationIsLPControlled())
        #    {
        #        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.lookup(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0, false)];
        #    }
        #    else
        #    {
        #        ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, workLine.wmsLocationId, extendedTypeNum(WMSLocationId), '', 0, false)];
        #    }
        #
        #    if (_defaultQty)
        #    {
        #        ret += [this.buildControl(#RFText, #BatchQtyToPick, "@WAX2011", 1, WHSWorkExecuteDisplay::num2StrDisplay(_defaultQty), extendedTypeNum(Qty), '', 0, false)];
        #        ret += [this.buildControl(#RFText, #BatchQtyPicked, "@WAX2012", 1, '0', extendedTypeNum(Qty), '', 0, false)];
        #
        #    }
        #    else
        #    {
        #        ret += [this.buildControl(#RFText, #BatchQtyToPick, "@WAX2011", 1, pass.lookup(#BatchQtyToPick), extendedTypeNum(Qty), '', 0, false)];
        #        ret += [this.buildControl(#RFText, #BatchQtyPicked, "@WAX2011", 1, pass.lookup(#BatchQtyPicked), extendedTypeNum(Qty), '', 0, false)];
        #    }
        #
        #    ret += [this.buildControl(#RFText, #BatchId, "@SYS14462", 1, '', extendedTypeNum(InventBatchId), '', 0)];
        #
        #    ret = this.addOkButton(ret);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildGetFullQty
        #container buildGetFullQty(container _con, str _extraText = '')
        #{
        #    container               ret = _con;
        #    str                     finalLabel = _extraText ? _extraText : "@WAX727";     // Enter a Quantity
        #    UnitOfMeasureSymbol     inventUnit;
        #
        #    inventUnit = InventTableModule::find(workLine.ItemId, ModuleInventPurchSales::Invent).UnitId;
        #
        #    ret += [this.buildControl(#RFLabel, #Enter, finalLabel, 1, '', #WHSRFUndefinedDataType, '', 0)];
        #
        #    ret += [this.buildControl(#RFText, #FullQty, "@WAX1327", 1, pass.lookupStr(#FullQty), #WHSRFUndefinedDataType, '', 0)];
        #    ret += [this.buildControl(#RFLabel, #UOM, inventUnit, 0, '', #WHSRFUndefinedDataType, '', 0)];
        #
        #    ret += [this.buildControl(#RFLabel, #RFQtyLabel, strFmt("@WAX2611", workLine.InventQtyRemain, inventUnit), 1, '', #WHSRFUndefinedDataType, '', 0)];
        #
        #    ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildGetItemId
        #container buildGetItemId(container _con, str _extraText = '')
        #{
        #    container           ret = _con;
        #    str                 finalLabel = _extraText ? _extraText : "@WAX720";     // Enter an ItemId
        #    InventTable         inventTable;
        #
        #    inventTable = InventTable::find(pass.lookupStr(#ItemId));
        #
        #    ret += [this.buildControl(#RFLabel, #Enter, finalLabel, 1, '', #WHSRFUndefinedDataType, '', 0)];
        #    ret += [this.buildControl(#RFText, #ItemId, "@SYS111673", 1, pass.lookupStr(#ItemId), extendedTypeNum(ItemId), '', 0)];
        #
        #    ret = this.buildProductDimensionsText(ret, inventTable.ItemId, true, true, true);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildGetLicensePlate
        #container buildGetLicensePlate(container _con, str _extraText = '', WHSLicensePlateId _licensePlateId = '')
        #{
        #    container   ret = _con;
        #    str         finalLabel = _extraText ? _extraText : "@WAX722";     // Scan a License Plate
        #    ;
        #
        #    ret += [this.buildControl(#RFLabel, #Scan, finalLabel, 1, '', #WHSRFUndefinedDataType, '', 0)];
        #    ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX359", 1, _licensePlateId, extendedTypeNum(WHSLicensePlateId), '', 0)];
        #    ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildGetLocation
        #container buildGetLocation(container        _con,
        #                           str              _extraText = '',
        #                           WMSLocationId    _location = '')
        #{
        #    container   ret = _con;
        #    str         finalLabel = _extraText ? _extraText : "@WAX723";     // Scan a Location
        #    ;
        #
        #    ret += [this.buildControl(#RFLabel, #Scan, finalLabel, 1, '', #WHSRFUndefinedDataType, '', 0)];
        #    ret += [this.buildControl(#RFText, #WMSLocationId, "@SYS80395", 1, _location, extendedTypeNum(WMSLocationId), '', 0)];
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildGetPotency
        #/// <summary>
        #///     Bulids the batch potency control.
        #/// </summary>
        #/// <param name="_con">
        #///     The RF container variable.
        #/// </param>
        #/// <param name="_inventBatchId">
        #///     The inventory batch ID specified on the purchase order line.
        #/// </param>
        #/// <param name="_includeGroupLabel">
        #///     Boolean value indicating whether the group label must be included.
        #/// </param>
        #/// <returns>
        #///     The updated RF container variable.
        #/// </returns>
        #protected container buildGetPotency(
        #    container       _con,
        #    InventBatchId   _inventBatchId,
        #    boolean         _includeGroupLabel = true)
        #{
        #    container           ret = _con;
        #    ItemId              itemId;
        #    InventTable         inventTable;
        #    PdsBatchAttribValue defaultValue;
        #    InventBatchId       batchId;
        #    boolean             enabled;
        #
        #
        #    itemId = pass.lookupStr(#ItemId);
        #
        #    if (this.capturePotency(itemId))
        #    {
        #        inventTable = InventTable::find(itemId);
        #
        #        pass.insert(#BaseAttributeId, inventTable.pdsBaseAttributeId);
        #
        #        if (pass.exists(#VendBatchInfoEntered))
        #        {
        #            defaultValue = pass.lookupStr(#Potency);
        #        }
        #        else
        #        {
        #            if (_inventBatchId)
        #            {
        #                batchId = _inventBatchId;
        #            }
        #            else
        #            {
        #                batchId = this.getInventBatchId();
        #            }
        #
        #            if (InventBatch::exist(itemId, batchId))
        #            {
        #                defaultValue = PdsBatchAttributes::find(itemId, batchId, inventTable.pdsBaseAttributeId).PdsBatchAttribValue;
        #            }
        #            else
        #            {
        #                defaultValue = WHSInventBatchReceiptDetails::find(pass.lookupStr(#ReceiptId), itemId, batchId).PdsPotencyBaseValue;
        #            }
        #        }
        #        enabled = (!defaultValue);
        #
        #        if (_includeGroupLabel)
        #        {
        #            ret += [this.buildControl(#RFLabel, #PotencyRFLabel, "@PSC61", 1, '', #WHSRFUndefinedDataType, '', 0)];
        #        }
        #
        #        ret += [this.buildControl(#RFText, #Potency, inventTable.pdsBaseAttributeId, 1, defaultValue, extendedTypeNum(PDSBaseAttributeId), '', 0, enabled)];
        #    }
        #
        #    return ret;
        #}
        #
        #
      ENDSOURCE
      SOURCE #buildGetProdId
        #container buildGetProdId(container _con, str _extraText = '')
        #{
        #    container   ret = _con;
        #    str         finalLabel = _extraText ? _extraText : "@WAX726";     // Scan a Prod Id
        #    ;
        #
        #    ret += [this.buildControl(#RFLabel, #Scan, finalLabel, 1, '', #WHSRFUndefinedDataType, '', 0)];
        #    ret += [this.buildControl(#RFText, #ProdId, "@WAX725", 1, '', extendedTypeNum(ProdId), '', 0)];
        #    ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildGetVendBatchDetails
        #/// <summary>
        #///     Builds the RF screen to capture vendor batch information.
        #/// </summary>
        #/// <param name="_con">
        #///     The container to store RF values.
        #/// </param>
        #/// <returns>
        #///     The updated RF container variable.
        #/// </returns>
        #protected container buildGetVendBatchDetails(container _con)
        #{
        #    container   ret = _con;
        #    str         elements;
        #    str         dateFormat = WHSParameters::getDateFormat();
        #    boolean     useVendExpDateEditable;
        #
        #    useVendExpDateEditable = InventTable::find(pass.lookup(#ItemId)).isShelfLifeItem();
        #
        #    elements = this.buildNoYesCombobox();
        #
        #    ret += [this.buildControl(#RFLabel, #VendBatchInfo, "@SYS345080", 1, '', #WHSRFUndefinedDataType, '', 0)];
        #
        #    ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, pass.lookup(#ItemId), extendedTypeNum(ItemId), '', 0, false)];
        #    ret += [this.buildControl(#RFText, #BatchId, "@SYS14462", 1, pass.lookup(#BatchId), extendedTypeNum(InventBatchId), '', 0, false)];
        #
        #    ret += [this.buildControl(#RFText, #VendBatchDate, strFmt("@WAX5517", dateFormat), 1, pass.lookup(#VendBatchDate), extendedTypeNum(PdsVendBatchDate), '', 0)];
        #    ret += [this.buildControl(#RFCombobox, #UseVendBatchDate, "@PRO2223", 1, elements, #WHSRFUndefinedDataType, '', 0, true, pass.lookup(#UseVendBatchDate))];
        #
        #    ret += [this.buildControl(#RFText, #VendExpDate, strFmt("@WAX5518", dateFormat), 1, pass.lookup(#VendExpDate), extendedTypeNum(PdsVendExpiryDate), '', 0)];
        #
        #    if (useVendExpDateEditable)
        #    {
        #        ret += [this.buildControl(#RFCombobox, #UseVendExpDate, "@PDS1343", 1, elements, #WHSRFUndefinedDataType, '', 0, true, pass.lookup(#UseVendExpDate))];
        #    }
        #    else
        #    {
        #        ret += [this.buildControl(#RFCombobox, #UseVendExpDate, "@PDS1343", 1, elements, #WHSRFUndefinedDataType, '', 0, false, enum2str(NoYes::No))];
        #
        #        pass.insert(#UseVendExpDate, enum2str(NoYes::No));
        #    }
        #
        #    ret += [this.buildControl(#RFText, #CountryOfOrigin1, "@PDS1345", 1, pass.lookup(#CountryOfOrigin1), extendedTypeNum(PdsCountryOfOrigin1), '', 0)];
        #    ret += [this.buildControl(#RFText, #CountryOfOrigin2, "@PDS1347", 1, pass.lookup(#CountryOfOrigin2), extendedTypeNum(PdsCountryOfOrigin2), '', 0)];
        #
        #    ret += [this.buildControl(#RFText, #VendBatchId, "@PDS1349", 1, pass.lookup(#VendBatchId), extendedTypeNum(PdsVendBatchId), '', 0)];
        #
        #    ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        #    ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildGetWorkId
        #container buildGetWorkId(container _con, str _extraText = '')
        #{
        #    container   ret = _con;
        #    str         finalLabel = _extraText ? _extraText : "@WAX729";     // Scan a Work Id
        #    ;
        #
        #    ret += [this.buildControl(#RFLabel, #Scan, finalLabel, 1, '', #WHSRFUndefinedDataType, '', 0)];
        #    ret += [this.buildControl(#RFText, #WorkId, "@WAX273", 1, '', extendedTypeNum(WHSWorkId), '', 0)];
        #    ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildGetWorkIdLicensePlateId
        #container buildGetWorkIdLicensePlateId(container _con, str _extraText = '')
        #{
        #    container   ret = _con;
        #    str         finalLabel = _extraText ? _extraText : "@WAX1056";     // Scan a Work Id / License Plate Id
        #    ;
        #
        #    ret += [this.buildControl(#RFLabel, #Scan, finalLabel, 1, '', #WHSRFUndefinedDataType, '', 0)];
        #    ret += [this.buildControl(#RFText, #WHSWorkLicensePlateId, "@WAX33", 1, '', extendedTypeNum(WHSLicensePlateId), '', 0)];
        #    ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        #    if (!pass.exists(#AddCancel))
        #    {
        #        ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildGroupedPutaway
        #container buildGroupedPutaway(container _con,
        #                              boolean   _overrideLP = false)
        #{
        #    WHSWorkExecute      workExecute = new WHSWorkExecute();
        #    container           ret = _con;
        #    WHSWorkGrouping     workGrouping;
        #    WHSWorkLine         groupWorkLine;
        #    Qty                 qty;
        #    InventQty           inventQty;
        #    UnitOfMeasureSymbol workUnitId;
        #    UnitOfMeasureSymbol inventUnitId;
        #    ItemId              itemId;
        #    boolean             multipleItem;
        #    boolean             multipleUOM;
        #    boolean             multipleInventUOM;
        #    InventTableModule   inventTableModule;
        #    WHSRFDescription1   description1;
        #    WHSRFDescription2   description2;
        #    WHSLicensePlateId   groupLicensePlateId;
        #    int                 numberOfWorkLines;
        #
        #    void setMultipleValues()
        #    {
        #        inventTableModule = InventTableModule::find(groupWorkLine.ItemId, ModuleInventPurchSales::Invent);
        #
        #        if ((itemId && itemId != groupWorkLine.ItemId) || !groupWorkLine.ItemId)
        #        {
        #            multipleItem = true;
        #        }
        #
        #        if ((workUnitId && workUnitId != groupWorkLine.UnitId) || !groupWorkLine.UnitId)
        #        {
        #            multipleUOM = true;
        #        }
        #
        #        if ((inventUnitId && inventUnitId != inventTableModule.UnitId) || !inventTableModule.UnitId)
        #        {
        #            multipleInventUOM = true;
        #        }
        #
        #        qty += groupWorkLine.QtyRemain;
        #        inventQty += groupWorkLine.InventQtyRemain;
        #
        #        itemId = groupWorkLine.ItemId;
        #        workUnitId = groupWorkLine.UnitId;
        #        inventUnitId = inventTableModule.UnitId;
        #    }
        #
        #    if (pass.exists(#WorkGroupingId) && pass.lookup(#WorkGroupingId) != '' && WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem)).GroupPutaway)
        #    {
        #        while select WorkId from workGrouping
        #            where workGrouping.WorkGroupingId == pass.lookup(#WorkGroupingId)
        #        {
        #            // Loop next set of put lines on the work
        #            while select groupWorkLine
        #                order by LineNum
        #                    where groupWorkLine.WorkId       == workGrouping.WorkId
        #                    &&    groupWorkLine.WorkStatus   <= WHSWorkStatus::InProcess
        #            {
        #                numberOfWorkLines++;
        #
        #                if (groupWorkLine.WorkType == WHSWorkType::Pick)
        #                {
        #                    break;
        #                }
        #
        #                setMultipleValues();
        #            }
        #        }
        #    }
        #    else
        #    {
        #        // If Grouping Id does not exist must be in a multi-put scenario.
        #        while select groupWorkLine
        #            where groupWorkLine.WorkId   == workLine.WorkId
        #            &&    groupWorkLine.LineNum  >= workLine.LineNum
        #            &&    groupWorkLine.QtyRemain > 0
        #        {
        #            numberOfWorkLines++;
        #
        #            setMultipleValues();
        #
        #            if (!groupLicensePlateId)
        #            {
        #                groupLicensePlateId = workTable.TargetLicensePlateId;
        #            }
        #        }
        #    }
        #
        #    ret += [this.buildControl(#RFLabel, 'Put', strFmt("@WAX1270", workTable.WorkTransType), 1, '', #WHSRFUndefinedDataType, '', 0)];
        #    ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, workLine.wmsLocationId, extendedTypeNum(WMSLocationId), '', 0, false)];
        #
        #    if (WHSRFAutoConfirm::isLocationConfirmationEnabled(pass.lookup(#MenuItem), WHSWorkType::Put) &&
        #        !pass.exists(#GroupPutaway))
        #    {
        #        if (WMSLocation::find(workLine.wmsLocationId, workTable.InventLocationId).CheckText)
        #        {
        #            ret += [this.buildControl(#RFText, #CheckDigit, "@WAX1197", 1, '', extendedTypeNum(WMSCheckText), '', 0)];
        #        }
        #        else if (pass.exists(#SystemPopulated))
        #        {
        #            if ((!pass.exists(#PrevStep) || pass.lookup(#PrevStep) != WHSWorkExecuteDisplay::num2StrDisplay(#OverrideStep2)) && !pass.exists(#GroupPutawayConfirm))
        #            {
        #                ret += [this.buildControl(#RFText, #LocVerification, "@WAX1196", 1, '', extendedTypeNum(WMSLocationId), '', 0)];
        #            }
        #        }
        #    }
        #
        #    if (groupLicensePlateId
        #    &&  !_overrideLP)
        #    {
        #        ret += [this.buildControl(#RFText, #TargetLicensePlateId, "@WAX1214", 1, pass.lookupStr(#TargetLicensePlateId) ? pass.lookupStr(#TargetLicensePlateId) : groupLicensePlateId, extendedTypeNum(WHSLicensePlateId), '', 0, false)];
        #    }
        #    else if (_overrideLP)
        #    {
        #        ret += [this.buildControl(#RFText, #TargetLicensePlateId, "@WAX1214", 1, pass.lookupStr(#TargetLicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0)];
        #    }
        #    // Clear out UOM values if grouped work units do not match
        #    if (multipleUOM)
        #    {
        #        workUnitId = '';
        #    }
        #
        #    if (multipleInventUOM)
        #    {
        #        inventUnitId = '';
        #    }
        #
        #    if (multipleItem)
        #    {
        #        ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, "@WAX402", extendedTypeNum(ItemId), '', 0, false)];
        #    }
        #    else
        #    {
        #        ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, itemId, extendedTypeNum(ItemId), '', 0, false)];
        #        ret += this.addProductConfirmationControl(WHSWorkType::Put);
        #    }
        #
        #    ret += [this.buildControl(#RFLabel, #RFQtyLabel, strFmt("@WAX1283", qty, workUnitId, inventQty, inventUnitId, ';\t'), 1, '', #WHSRFUndefinedDataType, '', 0)];
        #
        #    if (WHSRFAutoConfirm::isVerifyQtyConfirmationEnabled(pass.lookup(#MenuItem), WHSWorkType::Put) &&
        #        !pass.exists(#GroupPutaway))
        #    {
        #        ret += [this.buildControl(#RFText, #QtyVerification, "@SYS105177", 1, '', extendedTypeNum(Qty), '', 0)];
        #        ret += [this.buildControl(#RFLabel, #QtyVerifyUOM, workUnitId, 0, '', #WHSRFUndefinedDataType, '', 0, false)];
        #    }
        #
        #    if (!multipleItem)
        #    {
        #        description1    = WHSInventTable::find(itemId).rfDescription1;
        #        description2    = WHSInventTable::find(itemId).rfDescription2;
        #
        #        if (description1)
        #        {
        #            ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', description1), 1, '', #WHSRFUndefinedDataType, '', 0, false)];
        #        }
        #        else
        #        {
        #            ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', InventTable::find(workLine.ItemId).defaultProductName()), 1, '', #WHSRFUndefinedDataType, '', 0, false)];
        #        }
        #
        #        if (description2)
        #        {
        #            ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt("\t        %1", description2), 1, '', #WHSRFUndefinedDataType, '', 0, false)];
        #        }
        #    }
        #
        #    pass.insert(#LicensePlateId, workTable.TargetLicensePlateId);
        #
        #    if (workLine.WMSLocationId
        #    &&  !WHSWorkLine::getNextOppositeWorkLine(workLine.WorkId, workLine.LineNum, workLine.WorkType)
        #    &&  (workTable.WorkTransType == WHSWorkTransType::Purch
        #    ||   workTable.WorkTransType == WHSWorkTransType::ProdPut
        #    ||   workTable.WorkTransType == WHSWorkTransType::ProdProcessPut
        #    ||   workTable.WorkTransType == WHSWorkTransType::TransferReceipt
        #    ||   workTable.WorkTransType == WHSWorkTransType::Invent
        #    ||   workTable.WorkTransType == WHSWorkTransType::Replenishment
        #    ||   workTable.WorkTransType == WHSWorkTransType::ReturnOrder
        #    ||   workTable.WorkTransType == WHSWorkTransType::KanbanPut))
        #    {
        #        if (workTable.WorkTransType != WHSWorkTransType::Replenishment
        #        &&  numberOfWorkLines == 1)
        #        {
        #            addSplitButton = true;
        #        }
        #
        #        if (WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem)).AllowLicensePlatePutOverride
        #        &&  WMSLocation::find(workLine.wmsLocationId, workTable.InventLocationId).whsLocationIsLPControlled()
        #        &&  !_overrideLP)
        #        {
        #            addLPOverride = true;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildInventoryStatus
        #container buildInventoryStatus(container    _con,
        #                               str          _label = '',
        #                               boolean      _showRemove = false,
        #                               boolean      _showBlank = false,
        #                               boolean      _showOK = true,
        #                               str          _selected = '',
        #                               boolean      _enabled = true)
        #{
        #    WHSInventStatus     inventStatus;
        #    container           ret = _con;
        #    boolean             first = true;
        #    str                 elements;
        #    str                 label = _label ? _label : "@WAX357";      // Inventory Status
        #    ;
        #
        #    if (_showBlank)
        #    {
        #        elements = '||';
        #    }
        #
        #    while select inventStatus
        #    {
        #        if (first)
        #        {
        #            elements += inventStatus.Name;
        #            first = false;
        #        }
        #        else
        #        {
        #            elements = elements + '||' + inventStatus.Name;
        #        }
        #    }
        #
        #    ret += [this.buildControl(#RFCombobox, #InventoryStatus, label, 1, elements, #WHSRFUndefinedDataType, '', 0, _enabled, _selected)];
        #
        #    if (_showRemove)
        #    {
        #        ret += [this.buildControl(#RFButton, "@SYS26394", "@WAX879", 1, '', #WHSRFUndefinedDataType, '', 0)];
        #    }
        #
        #    if (_showOK)
        #    {
        #        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildItemDescription
        #private container buildItemDescription(ItemId _itemId)
        #{
        #    WHSRFDescription1   description1;
        #    WHSRFDescription2   description2;
        #    container           ret;
        #
        #    description1    = WHSInventTable::find(_itemId).rfDescription1;
        #    description2    = WHSInventTable::find(_itemId).rfDescription2;
        #
        #    if (description1)
        #    {
        #        ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', description1), 1, '', #WHSRFUndefinedDataType, '', 0, false)];
        #    }
        #    else
        #    {
        #        ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', InventTable::find(_itemId).defaultProductName()), 1, '', #WHSRFUndefinedDataType, '', 0, false)];
        #    }
        #
        #    if (description2)
        #    {
        #        ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt("\t        %1", description2), 1, '', #WHSRFUndefinedDataType, '', 0, false)];
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildLocationListFromSet
        #str buildLocationListFromSet(Set _locations)
        #{
        #    SetEnumerator   se = new SetEnumerator();
        #    str             current;
        #    str             ret;
        #
        #    if (_locations)
        #    {
        #        se = _locations.getEnumerator();
        #
        #        while (se.moveNext())
        #        {
        #            current = se.current();
        #
        #            if (!ret)
        #            {
        #                ret = current;
        #            }
        #            else
        #            {
        #                ret = ret + ',' + current;
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildLocationListFromStr
        #Set buildLocationListFromStr(str _locations)
        #{
        #    ListEnumerator  le = new ListEnumerator();
        #    List            locations;
        #    str             current;
        #    Set             ret = new Set(Types::String);
        #
        #    if (_locations)
        #    {
        #        locations = strSplit(_locations, ',');
        #
        #        le = locations.getEnumerator();
        #
        #        while (le.moveNext())
        #        {
        #            current = le.current();
        #            ret.add(current);
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildLPControlFromPass
        #private container buildLPControlFromPass(boolean            _useOldValues,
        #                                        boolean             _updatePass,
        #                                        WHSRFPassthrough    _pass)
        #{
        #    container ret = conNull();
        #    if (_updatePass && !_useOldValues)
        #    {
        #        if (pass.exists(#PickQtyConfirmationEnabled)
        #            && step == #Pick
        #            && workLine.WorkType == WHSWorkType::Pick
        #            && _pass.exists(#LicensePlateId)
        #            && !_pass.exists(#QtyVerification))
        #        {
        #            ret = [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, _pass.lookupStr(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0, false)];
        #        }
        #        else
        #        {
        #            ret = [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, '', extendedTypeNum(WHSLicensePlateId), '', 0)];
        #        }
        #    }
        #    else
        #    {
        #        ret = [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, _pass.lookupStr(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0)];
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildNextDimensionCaptureControl
        #/// <summary>
        #/// Builds the next input control for inventory dimension capture if needed.
        #/// </summary>
        #/// <param name="_con">
        #/// Current container that represents the currently build RF screen.
        #/// </param>
        #/// <param name="_inventDim">
        #/// The inventDim holding values predetermined by the work.
        #/// </param>
        #/// <param name="_itemId">
        #/// The Id of the item which determines the reservation hierarchy, thus, determining the next dimensions contorl.
        #/// </param>
        #/// <param name="_qty">
        #/// The qty remaining to be picked.
        #/// </param>
        #/// <param name="_updatePass">
        #/// A boolean which determines how we are updating the global pass. If building a new dim control we must prompt the user again.
        #/// </param>
        #/// <param name="_assignSerial">
        #/// A boolean which determines if we should add serial control, as item is serial enabled and serial number is capture at picking.
        #/// </param>
        #/// <returns>
        #/// A container that represents the currently build RF screen including any controls built in this method.
        #/// </returns>
        #protected container buildNextDimensionCaptureControl(
        #    container   _con,
        #    InventDim   _inventDim,
        #    ItemId      _itemId,
        #    InventQty   _qty,
        #    boolean     _updatePass = true,
        #    boolean     _assignSerial = false)
        #{
        #    ListEnumerator                      enumerator;
        #    container                           ret = _con;
        #    InventDim                           inventDim = _inventDim;
        #    InventDim                           tmpInventDim;
        #    FieldId                             fieldId;
        #    FieldName                           fieldName;
        #    DictField                           dictField;
        #    boolean                             prompt;
        #    WHSReservationHierarchyProvider     reservationHierarchyProvider;
        #    WHSReservationHierarchyElementData  elementData;
        #    InventTable                         inventTable;
        #
        #    // If item is not specified, no need to evaluate and display dim controls
        #    if (!_itemId)
        #    {
        #        return ret;
        #    }
        #
        #    if (pass.exists(#LicensePlateId))
        #    {
        #        inventDim.LicensePlateId = pass.lookup(#LicensePlateId);
        #    }
        #
        #    // Get invent table for current item id
        #    inventTable = InventTable::find(_itemId);
        #
        #    // Get List
        #    reservationHierarchyProvider = WHSReservationHierarchyProvider::construct();
        #    enumerator = reservationHierarchyProvider.getDimListBelowLicensePlate(
        #                        inventTable,
        #                        WHSReservationHierarchySortOrder::TopDown)
        #                    .getEnumerator();
        #
        #    while (enumerator.moveNext())
        #    {
        #        elementData = enumerator.current();
        #        fieldId = elementData.parmDimensionFieldId();
        #        fieldName = fieldId2name(inventDim.TableId, fieldId);
        #        dictField = new DictField(tableNum(InventDim), fieldId);
        #
        #        if (pass.exists(fieldName) && pass.hasValue(fieldName))
        #        {
        #            inventDim.(fieldId) = pass.lookup(fieldName);
        #            ret += [this.buildControl(#RFText, fieldName, dictField.label(), 1, pass.lookupStr(fieldName), dictField.typeId(), '', 0)];
        #            continue;
        #        }
        #
        #        // Call method to determine if are demand qty is >= what is on the dimensions set
        #        if (!_assignSerial && !this.isOnHandGreaterThanDemand(inventDim, _itemId, _qty))
        #        {
        #            break;
        #        }
        #
        #        // Check to see if we are allowed to pick a batch negative, if so prompt for desired batch
        #        if (this.promptForNegativeBatch(fieldId, inventDim, _itemId))
        #        {
        #            if (!pass.exists(#BatchId) || !pass.hasValue(#BatchId))
        #            {
        #                pass.insert(#BatchId, this.findDefaultBatch(inventTable, inventDim.wmsLocation()));
        #            }
        #
        #            ret += [this.buildControl(#RFText, #BatchId, "@SYS14462", 1, pass.lookupStr(#BatchId), extendedTypeNum(InventBatchId), '', 0)];
        #
        #            break;
        #        }
        #
        #        // Call a method used for defaulting the dim field if there is only one available
        #        if (!_assignSerial)
        #        {
        #            [tmpInventDim, prompt] = this.getDefaultDimValue(inventDim, fieldId, _itemId);
        #            if (!prompt)
        #            {
        #                inventDim.(fieldId) = tmpInventDim.(fieldId);
        #                continue;
        #            }
        #        }
        #
        #        // Ask for current dimension
        #        // For Serial id, we might have multiple so we want to keep the counter
        #        if (fieldId == fieldNum(InventDim, InventSerialId) && _assignSerial)
        #        {
        #            ret += [this.buildControl(#RFLabel,
        #                #SerialCounter,
        #                strFmt("@WAX3121", pass.lookup(#SerialCounter), pass.lookupNum(#SerialQty), inventTable.inventUnitId()),
        #                1, '', #WHSRFUndefinedDataType, '', 0)];
        #        }
        #
        #        ret += [this.buildControl(#RFText, fieldName, dictField.label(), 1, pass.lookupStr(fieldName), dictField.typeId(), '', 0)];
        #
        #        if (!_updatePass)
        #        {
        #            pass.insert(#DimPrompt, 1);
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildNextDimensionControl
        #/// <summary>
        #/// Builds the appropiate controls for inventory dimension if needed.
        #/// </summary>
        #/// <param name="_con">
        #/// Current container that represents the currently build RF screen.
        #/// </param>
        #/// <param name="_itemId">
        #/// The Id of the item which determines the reservation hierarchy, thus, determining the next dimensions control.
        #/// </param>
        #/// <returns>
        #/// A container that represents the currently build RF screen including any controls built in this method.
        #/// </returns>
        #protected container buildNextDimensionControl(
        #    container   _con,
        #    ItemId      _itemId)
        #{
        #    ListEnumerator                      enumerator;
        #    container                           ret = _con;
        #    InventDim                           inventDim;
        #    InventDim                           tmpInventDim;
        #    FieldId                             fieldId;
        #    FieldName                           fieldName;
        #    DictField                           dictField;
        #    InventTable                         inventTable;
        #    boolean                             prompt;
        #    WHSReservationHierarchyElementData  elementData;
        #    WHSReservationHierarchyProvider     reservationHierarchyProvider;
        #
        #    if (!_itemId)
        #    {
        #        return ret;
        #    }
        #
        #    inventTable = InventTable::find(_itemId);
        #
        #    inventDim = this.createInventDimFromPass();
        #    inventDim = InventDim::findOrCreate(inventDim);
        #
        #    // Get List
        #    reservationHierarchyProvider = WHSReservationHierarchyProvider::construct();
        #    enumerator = reservationHierarchyProvider.getDimListBelowLicensePlate(
        #                        inventTable,
        #                        WHSReservationHierarchySortOrder::TopDown)
        #                    .getEnumerator();
        #
        #    while (enumerator.moveNext())
        #    {
        #        elementData = enumerator.current();
        #        fieldId = elementData.parmDimensionFieldId();
        #        fieldName = fieldId2name(inventDim.TableId, fieldId);
        #        dictField = new DictField(tableNum(InventDim), fieldId);
        #
        #        [tmpInventDim, prompt] = this.getDefaultDimValue(inventDim, fieldId, _itemId);
        #
        #        if (pass.exists(fieldName) && pass.hasValue(fieldName))
        #        {
        #            inventDim.(fieldId) = pass.lookup(fieldName);
        #            ret += [this.buildControl(#RFText, fieldName, dictField.label(), 1, pass.lookupStr(fieldName), dictField.typeId(), '', 0, prompt)];
        #            continue;
        #        }
        #
        #        pass.insert(fieldName, tmpInventDim.(fieldId));
        #
        #        if (!prompt)
        #        {
        #            ret += [this.buildControl(#RFText, fieldName, dictField.label(), 1, pass.lookupStr(fieldName), dictField.typeId(), '', 0, false)];
        #        }
        #        else
        #        {
        #            ret += [this.buildControl(#RFText, fieldName, dictField.label(), 1, '', dictField.typeId(), '', 0)];
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildNoYesCombobox
        #/// <summary>
        #///     Builds a pipe-delimited string containing no, yes, and blank values.
        #/// </summary>
        #/// <returns>
        #///     Returns a pipe-delimited string containing no, yes, and blank values.
        #/// </returns>
        #protected str buildNoYesCombobox()
        #{
        #    return '||' + enum2str(NoYes::No) + '||' + enum2str(NoYes::Yes);
        #}
      ENDSOURCE
      SOURCE #buildOverpickScreen
        #/// <summary>
        #/// Adds fields to over pick work to the mobile device.
        #/// </summary>
        #/// <param name="_con">
        #/// The current mobile device screen.
        #/// </param>
        #/// <returns>
        #/// The updated fields that should be displayed on the mobile device.
        #/// </returns>
        #public container buildOverpickScreen(container _con)
        #{
        #    container           ret = _con;
        #    WMSLocation         location;
        #    WHSRFDescription1   description1;
        #    WHSRFDescription2   description2;
        #    InventDim           inventDim;
        #    Qty                 qty;
        #    UnitOfMeasureSymbol uom;
        #    boolean             first = true;
        #
        #    description1    = WHSInventTable::find(workLine.ItemId).rfDescription1;
        #    description2    = WHSInventTable::find(workLine.ItemId).rfDescription2;
        #    inventDim       = InventDim::find(workLine.InventDimId);
        #    qty             = workLine.QtyRemain;
        #    uom             = workLine.UnitId;
        #
        #    if (workLine.wmsLocationId)
        #    {
        #        location = WMSLocation::find(workLine.wmsLocationId, pass.lookup(#InventLocationId));
        #    }
        #
        #    ret += [this.buildControl(#RFLabel, #RFOverPick, "@SYP4862231", 1, '',#WHSRFUndefinedDataType, '', 0)];
        #
        #    ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, workLine.wmsLocationId, extendedTypeNum(WMSLocationId), '', 0, false)];
        #
        #    ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, workLine.ItemId, extendedTypeNum(ItemId), '', 0, false)];
        #
        #    if (workLine.ItemId)
        #    {
        #        if (description1)
        #        {
        #            ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt("\t        %1", description1), 1, '',#WHSRFUndefinedDataType, '', 0, false)];
        #        }
        #        else
        #        {
        #            ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt("\t        %1", InventTable::find(workLine.ItemId).defaultProductName()), 1, '', #WHSRFUndefinedDataType, '', 0, false)];
        #        }
        #
        #        if (description2)
        #        {
        #            ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt("\t        %1", description2), 1, '', #WHSRFUndefinedDataType, '', 0, false)];
        #        }
        #    }
        #
        #    // Build label controls for all dimensions specified above location
        #    ret = this.buildAboveLocationDimensions(ret, inventDim, workLine.ItemId);
        #
        #    ret += [this.buildControl(#RFLabel, #RFQtyLabel, strFmt("@WAX1685", qty, uom), 1, '', #WHSRFUndefinedDataType, '', 0)];
        #
        #    ret += [this.buildControl(#RFText, #QtyToPick, "@WAX1327", 1, pass.lookupStr(#QtyToPick), #WHSRFUndefinedDataType, '', 0)];
        #
        #    ret = this.buildUOM(ret, '', false, false, false, pass.lookupStr(#SelectedValueUOM));
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildPick
        #container buildPick(
        #    container _con,
        #    str       _extraText  = '',
        #    boolean   _updatePass = true)
        #{
        #    container           ret = _con;
        #    WMSLocation         location;
        #    WHSLicensePlateId   licensePlateId;
        #    WHSRFDescription1   description1;
        #    WHSRFDescription2   description2;
        #    InventDim           inventDim;
        #    str                 qty;
        #    str                 inventQty;
        #    UnitOfMeasureSymbol uom;
        #    UnitOfMeasureSymbol inventUOM;
        #    InventTable         inventTable;
        #    WHSRFAutoConfirm    autoConfirm;
        #    WHSLicensePlate     licensePlate;
        #    boolean             licensePlateControlled;
        #    boolean             isPotentialOverPick;
        #    str                 labelStr;
        #    boolean             allowOverrideTargetLP;
        #    boolean             useOldValues;
        #    Qty                 overPickQty;
        #    InventQty           overPickInventQty;
        #    Qty                 qtyOnLicensePlate;
        #    EcoResReleasedProductUnitConverter  releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();
        #
        #    description1    = WHSInventTable::find(workLine.ItemId).rfDescription1;
        #    description2    = WHSInventTable::find(workLine.ItemId).rfDescription2;
        #    inventDim       = InventDim::find(workLine.InventDimId);
        #    qty             = WHSWorkExecuteDisplay::num2StrDisplay(workLine.QtyRemain);
        #    inventQty       = WHSWorkExecuteDisplay::num2StrDisplay(workLine.InventQtyRemain);
        #    uom             = workLine.UnitId;
        #    inventUOM       = InventTableModule::find(workLine.ItemId, ModuleInventPurchSales::Invent).UnitId;
        #    licensePlateId  = workTable.TargetLicensePlateId;
        #    inventTable     = InventTable::find(workLine.ItemId);
        #    // If the previous step was a partial full or short pick then we want to use old values from the pass through to populate controls that may have already been entered.
        #    if (pass.lookupInt64(#prevStep) == #SplitWork
        #    ||  pass.lookupInt64(#prevStep) == #ShortPickConf)
        #    {
        #        // If we have already picked the LP and then entering full qty don't want to show the same LP again.
        #        if (workLine.InventQtyRemain == workLine.InventQtyWork)
        #        {
        #            useOldValues = true;
        #        }
        #
        #        pass.remove(#prevStep);
        #        pass.remove(#FullQty);
        #        noFullButton = true;
        #    }
        #
        #    if (workLine.wmsLocationId)
        #    {
        #        location = WMSLocation::find(workLine.wmsLocationId, pass.lookup(#InventLocationId));
        #        licensePlateControlled = location.whsLocationIsLPControlled();
        #        pass.insert(#SystemPopulated, 1);
        #    }
        #
        #    isPotentialOverPick = WHSWorkExecute::isPotentialOverPick(workTable, workLine);
        #
        #    // Maybe overPicking, need to pop up pick form again to confirm pick qty
        #    if (mode == WHSWorkExecuteMode::UserDirected
        #    &&  licensePlateControlled
        #    &&  isPotentialOverPick
        #    &&  !pass.exists(#LicensePlateId))
        #    {
        #        pass.insert(#SelectBestLP, 1);
        #    }
        #
        #    if (mode == WHSWorkExecuteMode::SystemGrouping)
        #    {
        #        ret += [this.buildControl(#RFLabel, #GroupingLabel, strFmt("@WAX2394", pass.lookup(#GroupingWorkNum), pass.lookup(#GroupingWorkTotal)), 1, '', #WHSRFUndefinedDataType, '', 0)];
        #    }
        #    else if (mode == WHSWorkExecuteMode::UserGrouping)
        #    {
        #        ret += [this.buildControl(#RFLabel, #GroupingLabel, strFmt("@WAX2393", pass.lookup(#GroupingWorkNum)), 1, '', #WHSRFUndefinedDataType, '', 0)];
        #    }
        #
        #    ret += [this.buildControl(#RFLabel, #RFPick, this.getPickHeaderLabel(enum2str(workTable.WorkTransType)), 1, '', #WHSRFUndefinedDataType, '', 0)];
        #
        #    if (this.shouldHandleByLP())
        #    {
        #        ret = this.buildPickHandleByLP(ret, workLine.wmsLocationId);
        #        return ret;
        #    }
        #
        #    ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, workLine.wmsLocationId, extendedTypeNum(WMSLocationId), '', 0, false)];
        #
        #    ret += this.addLocationConfirmationControl(WHSWorkType::Pick, location);
        #
        #    if (autoConfirm)
        #    {
        #        if (location.CheckText)
        #        {
        #           ret += [this.buildControl(#RFText, #CheckDigit, "@WAX1197", 1, pass.lookupStr(#CheckDigit), extendedTypeNum(WMSCheckText), '', 0)];
        #        }
        #        else if (pass.exists(#SystemPopulated))
        #        {
        #           ret += [this.buildControl(#RFText, #LocVerification, "@WAX1196", 1, pass.lookupStr(#LocVerification), extendedTypeNum(WMSLocationId), '', 0)];
        #        }
        #    }
        #
        #    allowOverrideTargetLP = WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem)).OverrideTargetLP;
        #
        #    if (   mode != WHSWorkExecuteMode::ReportAsFinishedAndLocate
        #        && mode != WHSWorkExecuteMode::KanbanPutAndLocate)
        #    {
        #        if (licensePlateId && !workLine.AskForNewLicensePlate)
        #        {
        #            ret += [this.buildControl(#RFText, #TargetLicensePlateId, "@WAX1214", 1, licensePlateId, extendedTypeNum(WHSLicensePlateId), '', 0, false)];
        #
        #            if ((mode == WHSWorkExecuteMode::UserGrouping       ||
        #                 mode == WHSWorkExecuteMode::SystemGrouping     ||
        #                 !pass.hasValue(#LicensePlateId))               &&
        #                 _updatePass)
        #            {
        #                pass.insert(#LicensePlateId, workTable.TargetLicensePlateId);
        #            }
        #        }
        #        if (licensePlateId                          &&
        #            workLine.isFirstWorkLine()              &&
        #            mode != WHSWorkExecuteMode::PickPack)
        #        {
        #            if (!pass.hasValue(#LicensePlateId))
        #            {
        #                pass.insert(#LicensePlateId, workTable.TargetLicensePlateId);
        #            }
        #            if (licensePlateControlled
        #            &&  ((workLine.InventQtyRemain != 0
        #            &&    workLine.InventQtyRemain != workLine.InventQtyWork)
        #            ||   WHSWorkTable::isPickCompleted(workLine.WorkId,false)))
        #            {
        #                ret += this.buildLPControlFromPass(useOldValues, _updatePass, pass);
        #            }
        #        }
        #        else if (licensePlateControlled && !WHSWorkLine::isPutBefore(workLine.WorkId, workLine.LineNum) && !workLine.AskForNewLicensePlate)
        #        {
        #            ret += this.buildLPControlFromPass(useOldValues, _updatePass, pass);
        #        }
        #    }
        #    else
        #    {
        #        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, licensePlateId, extendedTypeNum(WHSLicensePlateId), '', 0)];
        #    }
        #
        #    if (!licensePlateId && !licensePlateControlled)
        #    {
        #        if ((mode   == WHSWorkExecuteMode::UserGrouping     ||
        #            mode    == WHSWorkExecuteMode::SystemGrouping)  &&
        #            pass.exists(#LicensePlateId))
        #        {
        #            pass.remove(#LicensePlateId);
        #        }
        #
        #        if (useOldValues && pass.exists(#TargetLicensePlateId))
        #        {
        #            ret += [this.buildControl(#RFText, #TargetLicensePlateId, "@WAX1214", 1, pass.lookupStr(#TargetLicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0)];
        #        }
        #        else if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).GenerateLP)
        #        {
        #            ret += [this.buildControl(#RFText, #TargetLicensePlateId, "@WAX1214", 1, WHSLicensePlate::generateLicensePlateId(workLine.ItemId, workLine.UnitId), extendedTypeNum(WHSLicensePlateId), '', 0, allowOverrideTargetLP)];
        #        }
        #        else
        #        {
        #            ret += [this.buildControl(#RFText, #TargetLicensePlateId, "@WAX1214", 1, '', extendedTypeNum(WHSLicensePlateId), '', 0)];
        #        }
        #    }
        #    else if (!licensePlateControlled && pass.exists(#LicensePlateId))
        #    {
        #        pass.remove(#LicensePlateId);
        #    }
        #
        #    if (workLine.AskForNewLicensePlate)
        #    {
        #        if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).GenerateLP)
        #        {
        #            ret += [this.buildControl(#RFText, #TargetLicensePlateId, "@WAX1214", 1, WHSLicensePlate::generateLicensePlateId(workLine.ItemId, workLine.UnitId), extendedTypeNum(WHSLicensePlateId), '', 0, allowOverrideTargetLP)];
        #        }
        #        else
        #        {
        #            ret += [this.buildControl(#RFText, #TargetLicensePlateId, "@WAX1214", 1, '', extendedTypeNum(WHSLicensePlateId), '', 0)];
        #        }
        #
        #        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.lookupStr(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0, 0)];
        #    }
        #
        #    if (pass.exists(#LicensePlateId))
        #    {
        #        if (!pass.exists(#DimTrackingDelay))
        #        {
        #            licensePlate = WHSLicensePlate::find(pass.lookup(#LicensePlateId));
        #        }
        #        else
        #        {
        #            pass.remove(#DimTrackingDelay);
        #        }
        #    }
        #
        #    if (!workLine.ItemId)
        #    {
        #        ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, "@WAX402", extendedTypeNum(ItemId), '', 0, false)];
        #    }
        #    else
        #    {
        #        ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, workLine.ItemId, extendedTypeNum(ItemId), '', 0, false)];
        #        ret += this.addProductConfirmationControl(WHSWorkType::Pick);
        #    }
        #
        #    if (workLine.QtyRemain)
        #    {
        #        if (pass.exists(#LicensePlateId)
        #            && pass.lookupStr(#LicensePlateId) != ''
        #            && licensePlateControlled
        #            && !pass.exists(#QtyVerification)
        #            && !pass.exists(#DetermineStep)
        #            && (workTable.WorkTransType == WHSWorkTransType::Sales
        #            || workTable.WorkTransType == WHSWorkTransType::TransferIssue))
        #        {
        #            //set the quantity to the min of the remaining and the quantity on the lp
        #            //so user is informed of the right qty to pick for scenarios where the lp has less qty than what remains to be picked
        #            qtyOnLicensePlate = WHSInvent::getQtyOnLicensePlate(pass.lookupStr(#LicensePlateId), workLine.ItemId, InventDim.inventDimId, workLine.wmsLocationId);
        #            inventQty = WHSWorkExecuteDisplay::num2StrDisplay(min(workLine.InventQtyRemain, qtyOnLicensePlate));
        #            if (releasedProductUnitConverter.canBeConverted(UnitOfMeasure::unitOfMeasureIdBySymbol(inventUOM),
        #                                                            UnitOfMeasure::unitOfMeasureIdBySymbol(uom),
        #                                                            workLine.ItemId,
        #                                                            workLine.InventDimId))
        #            {
        #                qtyOnLicensePlate = releasedProductUnitConverter.convert(qtyOnLicensePlate,
        #                                                                        UnitOfMeasure::unitOfMeasureIdBySymbol(inventUOM),
        #                                                                        UnitOfMeasure::unitOfMeasureIdBySymbol(uom),
        #                                                                        NoYes::No,
        #                                                                        workLine.ItemId,
        #                                                                        workLine.InventDimId,
        #                                                                        NoYes::No);
        #                qty = WHSWorkExecuteDisplay::num2StrDisplay(min(workLine.QtyRemain, qtyOnLicensePlate));
        #            }
        #        }
        #
        #        labelStr = isPotentialOverPick ? strFmt("@SYP4881769", qty, uom, inventQty, inventUOM, ';\t')
        #                                       : strFmt("@WAX1283", qty, uom, inventQty, inventUOM, ';\t');
        #
        #        if (isPotentialOverPick && pass.lookupStr(#LicensePlateId) && pass.exists(#SelectBestLP))
        #        {
        #            [overPickQty, overPickInventQty] = this.calcQtyOverPicking(pass.lookupStr(#LicensePlateId), workLine, inventUOM);
        #            qty = WHSWorkExecuteDisplay::num2StrDisplay(overPickQty);
        #            inventQty = WHSWorkExecuteDisplay::num2StrDisplay(overPickInventQty);
        #            ret += [this.buildControl(#RFLabel, #RFQtyLabel, strFmt("@WAX1685", qty, uom), 1, '', #WHSRFUndefinedDataType, '', 0)];
        #        }
        #        else
        #        {
        #            ret += [this.buildControl(#RFLabel, #RFQtyLabel, labelStr, 1, '', #WHSRFUndefinedDataType, '', 0)];
        #        }
        #
        #        if (pass.exists(#MenuItem))
        #        {
        #            if (WHSRFAutoConfirm::isVerifyQtyConfirmationEnabled(pass.lookup(#MenuItem), WHSWorkType::Pick))
        #            {
        #                if (licensePlateControlled && pass.lookupStr(#PickQtyConfirmationEnabled) == '1')
        #                {
        #                    if (step == #Pick
        #                    && workLine.WorkType == WHSWorkType::Pick
        #                    && pass.exists(#LicensePlateId)
        #                    && pass.lookupStr(#LicensePlateId) != ''
        #                    && !pass.exists(#QtyVerification))
        #                    {
        #                        ret += [this.buildControl(#RFText, #QtyVerification, "@SYS105177", 1, pass.lookupStr(#QtyVerification), extendedTypeNum(Qty), '', 0)];
        #                        ret += [this.buildControl(#RFLabel, #QtyVerifyUOM, uom, 0, '', #WHSRFUndefinedDataType, '', 0, false)];
        #                    }
        #                }
        #                else
        #                {
        #                    ret += [this.buildControl(#RFText, #QtyVerification, "@SYS105177", 1, pass.lookupStr(#QtyVerification), extendedTypeNum(Qty), '', 0)];
        #                    ret += [this.buildControl(#RFLabel, #QtyVerifyUOM, uom, 0, '', #WHSRFUndefinedDataType, '', 0, false)];
        #                }
        #            }
        #        }
        #    }
        #
        #    if (workLine.ItemId)
        #    {
        #        if (description1)
        #        {
        #            ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', description1), 1, '', #WHSRFUndefinedDataType, '', 0, false)];
        #        }
        #        else
        #        {
        #            ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', InventTable::find(workLine.ItemId).defaultProductName()), 1, '', #WHSRFUndefinedDataType, '', 0, false)];
        #        }
        #
        #        if (description2)
        #        {
        #            ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt('\t        %1', description2), 1, '', #WHSRFUndefinedDataType, '', 0, false)];
        #        }
        #    }
        #
        #    // Build label controls for all dimensions specified above location
        #    ret = this.buildAboveLocationDimensions(ret, workLine.inventDim(), workLine.ItemId);
        #
        #    // Build control to capture next dimension
        #    // No need to prompt for dimension if kanban picking in a license plate controlled location since full LP qty is picked
        #    if (pass.lookupStr(#SkipSerialValidate) != #AssignSerialComplete // if we have been through the serial assignment, we don't need to prompt for dimensions
        #    && ((licensePlateControlled
        #    &&   licensePlate
        #    &&   workTable.WorkTransType != WHSWorkTransType::KanbanPick)
        #    ||   !licensePlateControlled))
        #    {
        #        ret = this.buildNextDimensionCaptureControl(ret, workLine.inventDimWithLocation(), workLine.ItemId, workLine.InventQtyRemain, _updatePass);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildPickHandleByLP
        #/// <summary>
        #/// Builds label controls on the RF screen for pick screen when work should use strategy "Handle by license plate".
        #/// </summary>
        #/// <param name="_con">
        #/// A container holding all the current RF screen information.
        #/// </param>
        #/// <param name="_wmsLocationId">
        #/// The location Id.
        #/// </param>
        #/// <returns>
        #/// The container with the updated RF screen information.
        #/// </returns>
        #protected container buildPickHandleByLP(container _con, WMSLocationId _wmsLocationId)
        #{
        #    container ret = _con;
        #
        #    if (_wmsLocationId)
        #    {
        #        ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, _wmsLocationId, extendedTypeNum(WMSLocationId), '', 0, false)];
        #        pass.insert(#WMSLocationId, _wmsLocationId);
        #    }
        #    else
        #    {
        #        ret = this.buildGetLocation(ret);
        #    }
        #
        #    if (workLine.LocatedLPId)
        #    {
        #        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, workLine.LocatedLPId, extendedTypeNum(WHSLicensePlateId), '', 0, false)];
        #        pass.insert(#LicensePlateId, workLine.LocatedLPId);
        #    }
        #    else
        #    {
        #        throw error("@WAX691");
        #    }
        #
        #    ret = this.addOkButton(ret);
        #    ret = this.addCancelButton(ret);
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #buildPORecTrackingDimensions
        #protected container buildPORecTrackingDimensions(
        #    container   _con,
        #    ItemId      _itemId,
        #    Qty         _defaultQty)
        #{
        #    container           ret = _con;
        #    WHSInventTable      whsInventTable;
        #    ListEnumerator      le;
        #    str                 qtyString;
        #    Qty                 receivingDimQty = _defaultQty;
        #    InventDim           purchLineInventDim;
        #    InventBatchId       batchId;
        #    InventSerialId      serialId;
        #    //////////////////////////////////
        #    str                 _elements;
        #    str                 _selected = 'No';
        #    /////////////////////////////////
        #
        #
        #    whsInventTable = WHSInventTable::find(_itemId);
        #    purchLineInventDim = PurchLine::find(pass.lookup(#PONum), pass.lookupInt64(#POLineNum)).inventDim();
        #
        #    ret += [this.buildControl(#RFLabel, "@WAX5546", "@WAX5546", 1, '', #WHSRFUndefinedDataType, '', 0)];
        #
        #    ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, pass.lookup(#ItemId), extendedTypeNum(ItemId), '', 0, false)];
        #
        #    if (whsInventTable.rfDescription1)
        #    {
        #        ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt("\t        %1", whsInventTable.rfDescription1), 1, '', #WHSRFUndefinedDataType, '', 0, false)];
        #    }
        #    else
        #    {
        #        ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt("\t        %1", InventTable::find(whsInventTable.ItemId).defaultProductName()), 1, '', #WHSRFUndefinedDataType, '', 0, false)];
        #    }
        #
        #    if (whsInventTable.rfDescription2)
        #    {
        #        ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt("\t        %1", whsInventTable.rfDescription2), 1, '', #WHSRFUndefinedDataType, '', 0, false)];
        #    }
        #
        #    ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.lookup(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0, false)];
        #
        #    le = InventDimGroupSetup::newDimensionGroups(0, 0, InventTable::find(_itemId).trackingDimensionGroup()).activeFields().getEnumerator();
        #
        #    while (le.moveNext())
        #    {
        #        switch (le.current())
        #        {
        #            case fieldNum(InventDim, InventBatchId):
        #
        #                // If vendor batch details have been entered, all fields should already be populated within the pass.
        #                if (pass.exists(#VendBatchInfoEntered))
        #                {
        #                    ret += [this.buildControl(#RFText, #BatchId, "@SYS14462", 1, pass.lookup(#BatchId), extendedTypeNum(InventBatchId), '', 0, false)];
        #                    batchId = pass.lookup(#BatchId);
        #                }
        #                else if (!pass.lookupStr(#BatchId))
        #                {
        #                    [batchId, receivingDimQty] =
        #                        PurchLine::getBatchAndWHSQtyToReceive(pass.lookup(#PONum), pass.lookupInt64(#POLineNum), pass.lookup(#ReceiptId), _defaultQty, pass.lookupStr(#DimUOM));
        #                }
        #
        #                if (batchId)
        #                {
        #                    ret += [this.buildControl(#RFText, #BatchId, "@SYS14462", 1, batchId, extendedTypeNum(InventBatchId), '', 0, false)];
        #                }
        #                else if (pass.lookupStr(#SessionBatchId))
        #                {
        #                    ret += [this.buildControl(#RFText, #BatchId, "@SYS14462", 1, pass.lookup(#SessionBatchId), extendedTypeNum(InventBatchId), '', 0)];
        #                    batchId = pass.lookup(#SessionBatchId);
        #                }
        #                else if (pass.lookupStr(#BatchId) && !this.itemRequiresManualDimTracking(InventTable::find(_itemId), InventTrackingDimType::Batch))
        #                {
        #                    ret += [this.buildControl(#RFText, #BatchId, "@SYS14462", 1, pass.lookup(#BatchId), extendedTypeNum(InventBatchId), '', 0, false)];
        #                    batchId = pass.lookup(#BatchId);
        #                }
        #                else
        #                {
        #                    ret += [this.buildControl(#RFText, #BatchId, "@SYS14462", 1, '', extendedTypeNum(InventBatchId), '', 0)];
        #                    batchId = '';
        #                }
        #
        #                // Build the batch expiration date control.
        #                ret = this.buildBatchExpDate(ret, batchId);
        #                break;
        #
        #            case fieldNum(InventDim, InventSerialId):
        #                if (this.mustCaptureSerialOnReceipt(_itemId))
        #                {
        #                    serialId = pass.lookupStr(#SerialId);
        #
        #                    if (!serialId)
        #                    {
        #                        serialId = PurchLine::getSerialToReceive(pass.lookup(#PONum), pass.lookupInt64(#POLineNum));
        #                    }
        #
        #                    ret += [this.buildControl(#RFText, #SerialId, "@WAX1614", 1, serialId, extendedTypeNum(InventSerialId), '', 0, serialId == '')];
        #
        #                    if (receivingDimQty != 1)
        #                    {
        #                        if (EcoResTrackingDimensionGroup::find(InventTable::find(_itemId).trackingDimensionGroup()).IsSerialNumberControlEnabled)
        #                        {
        #                            receivingDimQty = 1;
        #                        }
        #                        else if (receivingDimQty && this.mustCaptureSerialOnReceiptInCurrentFlow(_itemId))
        #                        {
        #                            //we don't know if we are done with registering on the serial so we need to clear the quantity to avoid registering to much on the serial
        #                            receivingDimQty = 0;
        #                        }
        #                    }
        #                }
        #                break;
        #
        #            default:
        #                // If any dimensions are specified on the purch line, default the value and make the control non editable.
        #                if (purchLineInventDim.(le.current()))
        #                {
        #                    ret += [this.buildControlForTableField(tableNum(InventDim),
        #                                                           le.current(),
        #                                                           fieldId2name(tableNum(InventDim), le.current()),
        #                                                           1,
        #                                                           purchLineInventDim.(le.current()),
        #                                                           false)];
        #                }
        #                else
        #                {
        #                    ret += [this.buildControlForTableField(tableNum(InventDim),
        #                                                           le.current(),
        #                                                           fieldId2name(tableNum(InventDim), le.current()),
        #                                                           1,
        #                                                           '',
        #                                                           true)];
        #                }
        #                break;
        #        }
        #    }
        #
        #    ret += this.buildRemainingReceiptQtyCurrentLPLabel(
        #                                                _itemId,
        #                                                pass.lookupNum(#DimRunningQty),
        #                                                InventTableModule::find(_itemId, ModuleInventPurchSales::Invent).UnitId);
        #
        #    qtyString = (receivingDimQty != 0) ? WHSWorkExecuteDisplay::num2StrDisplay(receivingDimQty) : '';
        #    ret += [this.buildControl(#RFText, #DimQty, "@SYS105177", 1, qtyString, extendedTypeNum(Qty), '', 0)];
        #    ret = this.buildTrackingDimReceiptUOM(ret, '', false, false, pass.lookupStr(#DimUOM));
        #
        #    // Added lastbox combobox
        #    _elements = this.buildNoYesCombobox();
        #
        #    //ret += [this.buildControl(#RFCombobox, #LastBox, "@WAX639", 1, _elements, #WHSRFUndefinedDataType, '', 0, true, _selected)];
        #    ret += [this.buildControl(#RFCombobox,#LastBox,'Last?',1,_elements,#WHSRFUndefinedDataType,'',0,true, _selected ? _selected : 'No')];
        #   //ret += [this.buildControl(#RFCombobox, #LastBox, label, 1, _elements, #WHSRFUndefinedDataType, '', 0, true,'')];
        #
        #    // Build the batch disposition control
        #    ret = this.buildBatchDisposition(ret);
        #
        #    // Build potency control
        #    ret = this.buildGetPotency(ret, batchId);
        #
        #    ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        #    ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildProductDimensionsFromInventDim
        #/// <summary>
        #/// Builds RF text controls for product dimensions based off an inventory dimension record.
        #/// </summary>
        #/// <param name="_con">
        #/// The current RF container we are adding text controls to.
        #/// </param>
        #/// <param name="_itemId">
        #/// The item whose product dimensions we are adding controls for.
        #/// </param>
        #/// <param name="_inventDim">
        #/// The inventory dimension record we are basing product dimension controls off of.
        #/// </param>
        #/// <param name="_enableControls">
        #/// Boolean to determine whether added text controls should be editable.
        #/// </param>
        #/// <returns>
        #/// An updated RF container which includes text controls for the item's product dimensions.
        #/// </returns>
        #protected container buildProductDimensionsFromInventDim(
        #    container   _con,
        #    ItemId      _itemId,
        #    InventDim   _inventDim,
        #    boolean     _enableControls = true)
        #{
        #    container       ret = _con;
        #    ListEnumerator  le;
        #    FieldName       inventDimName;
        #
        #    le = InventDimGroupSetup::newItemIdProductDimensionsOnly(_itemId).activeFields().getEnumerator();
        #
        #    while (le.moveNext())
        #    {
        #        inventDimName = fieldId2name(tableNum(InventDim), le.current());
        #        ret += [this.buildControlForTableField(tableNum(InventDim),
        #                                               le.current(),
        #                                               inventDimName,
        #                                               1,
        #                                               _inventDim.(le.current()),
        #                                               _enableControls)];
        #        if (!pass.exists(inventDimName))
        #        {
        #            pass.insert(inventDimName, _inventDim.(le.current()));
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildProductDimensionsText
        #/// <summary>
        #/// Builds RF text controls for active product dimensions.
        #/// </summary>
        #/// <param name="_con">
        #/// The current RF container we are adding text controls to.
        #/// </param>
        #/// <param name="_itemId">
        #/// The item whose product dimensions we are adding controls for.
        #/// </param>
        #/// <param name="_populate">
        #/// Boolean to determine whether to populate controls with current values in passthrough.
        #/// </param>
        #/// <param name="_enableControls">
        #/// Boolean to determine whether added text controls should be editable.
        #/// </param>
        #/// /// <param name="_insertPass">
        #/// Boolean to determine whether to add values to the passthrough if they don't exist.
        #/// </param>
        #/// <returns>
        #/// An updated RF container which includes text controls for the item's product dimensions.
        #/// </returns>
        #protected container buildProductDimensionsText(
        #    container   _con,
        #    ItemId      _itemId,
        #    boolean     _populate = false,
        #    boolean     _enableControls = true,
        #    boolean     _insertPass = false)
        #{
        #    container       ret = _con;
        #    ListEnumerator  le;
        #    FieldName       fieldName;
        #
        #    le = InventDimGroupSetup::newItemIdProductDimensionsOnly(_itemId).activeFields().getEnumerator();
        #
        #    while (le.moveNext())
        #    {
        #        fieldName = fieldId2name(tableNum(InventDim), le.current());
        #
        #        ret += [this.buildControlForTableField(tableNum(InventDim),
        #                                               le.current(),
        #                                               fieldName,
        #                                               1,
        #                                               _populate ? pass.lookupStr(fieldName) : '',
        #                                               _enableControls)];
        #
        #        if (_insertPass && !pass.exists(fieldName))
        #        {
        #            pass.insert(fieldName, '');
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildPut
        #container buildPut(
        #    container        _con,
        #    str              _extraText = '',
        #    boolean          _overrideLP = false,
        #    WMSLocationId    _location = '')
        #{
        #    container           ret = _con;
        #    WHSLicensePlateId   licensePlateId;
        #    WHSLicensePlate     licensePlate;
        #    InventDim           inventDim;
        #    str                 qty;
        #    str                 inventQty;
        #    UnitOfMeasureSymbol uom;
        #    UnitOfMeasureSymbol inventUOM;
        #    Qty                 overPickingInventQty;
        #    Qty                 overPickingQty;
        #    EcoResReleasedProductUnitConverter releasedProductUnitConverter;
        #
        #    ret += [this.buildControl(#RFLabel, #RFPut, strFmt("@WAX1270", workTable.WorkTransType), 1, '', #WHSRFUndefinedDataType, '', 0)];
        #
        #    if (this.shouldHandleByLP())
        #    {
        #        ret = this.buildPutHandleByLP(ret, workLine.wmsLocationId);
        #        return ret;
        #    }
        #
        #    inventDim       = InventDim::find(workLine.InventDimId);
        #    qty             = WHSWorkExecuteDisplay::num2StrDisplay(workLine.QtyRemain);
        #    inventQty       = WHSWorkExecuteDisplay::num2StrDisplay(workLine.InventQtyRemain);
        #    uom             = workLine.UnitId;
        #    inventUOM       = InventTableModule::find(workLine.ItemId, ModuleInventPurchSales::Invent).UnitId;
        #
        #    if (workLine.wmsLocationId && !pass.exists(#UserPutLocation))
        #    {
        #        pass.insert(#SystemPopulated, 1);
        #    }
        #
        #    if (workLine.WMSLocationId)
        #    {
        #        ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, workLine.wmsLocationId, extendedTypeNum(WMSLocationId), '', 0, false)];
        #    }
        #    else
        #    {
        #        ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, _location, extendedTypeNum(WMSLocationId), '', 0, true)];
        #    }
        #
        #    if (pass.exists(#MenuItem))
        #    {
        #        if (WHSRFAutoConfirm::isLocationConfirmationEnabled(pass.lookup(#MenuItem), WHSWorkType::Put))
        #        {
        #            if (WMSLocation::find(workLine.wmsLocationId, workTable.InventLocationId).CheckText)
        #            {
        #                ret += [this.buildControl(#RFText, #CheckDigit, "@WAX1197", 1, '', extendedTypeNum(WMSCheckText), '', 0)];
        #            }
        #            else if (pass.exists(#SystemPopulated))
        #            {
        #                if ((!pass.exists(#PrevStep) || pass.lookup(#PrevStep) != WHSWorkExecuteDisplay::num2StrDisplay(#OverrideStep2)) && !pass.exists(#GroupPutawayConfirm))
        #                {
        #                    ret += [this.buildControl(#RFText, #LocVerification, "@WAX1196", 1, '', extendedTypeNum(WMSLocationId), '', 0)];
        #                }
        #            }
        #        }
        #    }
        #
        #    licensePlateId  = workTable.TargetLicensePlateId;
        #    licensePlate    = WHSLicensePlate::find(licensePlateId);
        #
        #    ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, licensePlateId, extendedTypeNum(WHSLicensePlateId), '', 0, licensePlateId ? false : true)];
        #
        #    if (   (workTable.WorkTransType != WHSWorkTransType::ProdPick
        #        &&  workTable.WorkTransType != WHSWorkTransType::KanbanPick
        #        &&  workLine.ItemId         != ''
        #        &&  WMSLocation::find(workLine.wmsLocationId, workTable.InventLocationId).whsLocationIsLPControlled()
        #        &&  WHSLicensePlate::getTotalQtyOnLicensePlateWithDelta(licensePlateId) > workLine.InventQtyRemain)
        #        || _overrideLP)
        #    {
        #        ret += [this.buildControl(#RFText, #TargetLicensePlateId, "@WAX1214", 1, '', extendedTypeNum(WHSLicensePlateId), '', 0)];
        #        _overrideLP = true;
        #    }
        #    else if (pass.exists(#TargetLicensePlateId) && pass.lookup(#TargetLicensePlateId) != workTable.TargetLicensePlateId)
        #    {
        #        pass.remove(#TargetLicensePlateId);
        #    }
        #
        #    if (!workLine.ItemId)
        #    {
        #        ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, "@WAX402", extendedTypeNum(ItemId), '', 0, false)];
        #    }
        #    else
        #    {
        #        ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, workLine.ItemId, extendedTypeNum(ItemId), '', 0, false)];
        #        ret += this.addProductConfirmationControl(WHSWorkType::Put);
        #    }
        #
        #    if (workLine.QtyRemain)
        #    {
        #        // Fetch overPicking qty from pick line as they may have different inventory dimension
        #        if (workLine.WorkType == WHSWorkType::Put && WhsWorkExecute::isPotentialOverPick(workTable, workLine))
        #        {
        #            overPickingInventQty = workLine.calculateOverPickPutQuantity();
        #
        #            if (inventUOM != '' && uom != '')
        #            {
        #                // Only calculate converted put qty if both work line UOM and inventory UOM are specified
        #                releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();
        #                overPickingQty = releasedProductUnitConverter.convert(
        #                                    overPickingInventQty,
        #                                    UnitOfMeasure::unitOfMeasureIdBySymbol(inventUom),
        #                                    UnitOfMeasure::unitOfMeasureIdBySymbol(uom),
        #                                    NoYes::No,
        #                                    workLine.ItemId,
        #                                    workLine.InventDimId);
        #            }
        #            else
        #            {
        #                uom = '';
        #                overPickingQty = overPickingInventQty;
        #        }
        #
        #            qty = WhsWorkExecuteDisplay::num2StrDisplay(overPickingQty);
        #            inventQty = WhsWorkExecuteDisplay::num2StrDisplay(overPickingInventQty);
        #        }
        #
        #        ret += [this.buildControl(#RFLabel, #RFQtyLabel, strFmt("@WAX1283", qty, uom, inventQty, inventUOM, ';\t'), 1, '', #WHSRFUndefinedDataType, '', 0)];
        #
        #        if (pass.exists(#MenuItem))
        #        {
        #            if (WHSRFAutoConfirm::isVerifyQtyConfirmationEnabled(pass.lookup(#MenuItem), WHSWorkType::Put))
        #            {
        #                ret += [this.buildControl(#RFText, #QtyVerification, "@SYS105177", 1, '', extendedTypeNum(Qty), '', 0)];
        #                ret += [this.buildControl(#RFLabel, #QtyVerifyUOM, uom, 0, '', #WHSRFUndefinedDataType, '', 0, false)];
        #            }
        #        }
        #    }
        #
        #    if (workLine.ItemId)
        #    {
        #        ret += this.buildItemDescription(workLine.ItemId);
        #    }
        #
        #    // Build label controls for all dimensions specified above location
        #    ret = this.buildAboveLocationDimensions(ret, workLine.inventDim(), workLine.ItemId);
        #
        #    if (workLine.WMSLocationId
        #    &&  !WHSWorkLine::getNextOppositeWorkLine(workLine.WorkId, workLine.LineNum, workLine.WorkType)
        #    &&  (workTable.WorkTransType == WHSWorkTransType::Purch
        #    ||   workTable.WorkTransType == WHSWorkTransType::ProdPut
        #    ||   workTable.WorkTransType == WHSWorkTransType::ProdProcessPut
        #    ||   workTable.WorkTransType == WHSWorkTransType::TransferReceipt
        #    ||   workTable.WorkTransType == WHSWorkTransType::Invent
        #    ||   workTable.WorkTransType == WHSWorkTransType::Replenishment
        #    ||   workTable.WorkTransType == WHSWorkTransType::ReturnOrder
        #    ||   workTable.WorkTransType == WHSWorkTransType::KanbanPut))
        #    {
        #        if (workTable.WorkTransType != WHSWorkTransType::Replenishment)
        #        {
        #            addSplitButton = true;
        #        }
        #
        #        if (WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem)).AllowLicensePlatePutOverride
        #        &&  WMSLocation::find(workLine.wmsLocationId, workTable.InventLocationId).whsLocationIsLPControlled()
        #        &&  !_overrideLP)
        #        {
        #            addLPOverride = true;
        #        }
        #    }
        #
        #    if (!workLine.WMSLocationId)
        #    {
        #        ret = this.addSuggestLocationButton(ret, true);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildPutHandleByLP
        #/// <summary>
        #/// Builds label controls on the RF screen for put screen when work should use strategy "Handle by license plate".
        #/// </summary>
        #/// <param name="_con">
        #/// A container holding all the current RF screen information.
        #/// </param>
        #/// <param name="_wmsLocationId">
        #/// The location Id.
        #/// </param>
        #/// <returns>
        #/// The container with the updated RF screen information.
        #/// </returns>
        #protected container buildPutHandleByLP(container _con, WMSLocationId _wmsLocationId)
        #{
        #    container ret = _con;
        #
        #    if (_wmsLocationId)
        #    {
        #        ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, _wmsLocationId, extendedTypeNum(WMSLocationId), '', 0, false)];
        #        pass.insert(#WMSLocationId, workLine.wmsLocationId);
        #    }
        #    else
        #    {
        #        ret = this.buildGetLocation(ret);
        #    }
        #
        #    ret = this.addOkButton(ret);
        #    ret = this.addCancelButton(ret);
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #buildReceivingExceptions
        #container buildReceivingExceptions(container _con, str _selected = '')
        #{
        #    WHSWorkException        exceptions;
        #    container               ret = _con;
        #    boolean                 first = true;
        #    str                     elements;
        #
        #    while select exceptions
        #        where exceptions.ExceptionType == WHSExceptionType::Receiving
        #    {
        #        if (first)
        #        {
        #            elements = exceptions.WorkExceptionDesc;
        #            first = false;
        #        }
        #        else
        #        {
        #            elements = elements + '||' + exceptions.WorkExceptionDesc;
        #        }
        #    }
        #
        #    ret += [this.buildControl(#RFCombobox, #WHSReceivingException, "@WAX494", 1, elements, #WHSRFUndefinedDataType, '', 0, true, _selected)];
        #    ret += [this.buildControl(#RFButton, #RFNextException, "@WAX718", 1, '', #WHSRFUndefinedDataType, '', 0)];
        #    ret += [this.buildControl(#RFButton, #RFDone, "@SYS112206", 1, '', #WHSRFUndefinedDataType, '', 1)];
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildReceivingLicensePlateInfo
        #container buildReceivingLicensePlateInfo(container              _con,
        #                                         WHSLicensePlateId      _licensePlateId,
        #                                         WHSModule              _module)
        #{
        #    WHSUOMStructure         structure;
        #    WHSASNItem              asnItem;
        #    VendName                vendName;
        #    vendName                prevVendName;
        #    WHSOrderNum             orderNum;
        #    WHSOrderNum             prevOrderNum;
        #    container               ret = _con;
        #    str                     itemInfo;
        #    int                     i;
        #
        #    ret += [this.buildControl(#RFLabel, int2str(i), strFmt("@WAX730", _licensePlateId), 1, '', #WHSRFUndefinedDataType, '', 0)];
        #
        #    select firstonly RecId from structure
        #        where structure.LicensePlateParent == _licensePlateId;
        #
        #    if (structure.RecId != 0)
        #    {
        #        structure.clear();
        #
        #        while select sum(Qty) from asnItem
        #            group by ItemId, uom, LoadId, LoadLineRefRecId, InventDimId
        #            join Module from structure
        #            where asnItem.LicensePlateId        == structure.LicensePlateId  &&
        #                  structure.LicensePlateParent  == _licensePlateId              &&
        #                  structure.Module              == _module
        #        {
        #            if (structure.Module == WHSModule::Purch)
        #            {
        #                vendName = PurchLine::findInventTransId(WHSLoadLine::findbyRecId(asnItem.LoadLineRefRecId).InventTransId).purchTable().vendorName();
        #                if (vendName != prevVendName)
        #                {
        #                    ret += [this.buildControl(#RFLabel,
        #                                              int2str(i),
        #                                              strFmt("@SYS82246", vendName),
        #                                              1,
        #                                              '',
        #                                              #WHSRFUndefinedDataType,
        #                                              '',
        #                                              0)];
        #                    prevVendName = vendName;
        #                }
        #            }
        #
        #            orderNum = WHSLoadLine::findbyRecId(asnItem.LoadLineRefRecId).OrderNum;
        #            if (orderNum != prevOrderNum)
        #            {
        #                ret += [this.buildControl(#RFLabel,
        #                                          int2str(i),
        #                                          strFmt("@WAX3657", orderNum),
        #                                          1,
        #                                          '',
        #                                          #WHSRFUndefinedDataType,
        #                                          '',
        #                                          0)];
        #
        #                prevOrderNum = orderNum;
        #            }
        #
        #            itemInfo = '';
        #            itemInfo = this.generateItemInfoForReceiving(asnItem);
        #            ret += [this.buildControl(#RFLabel, int2str(i), itemInfo, 1, '', #WHSRFUndefinedDataType, '', 0)];
        #            ++i;
        #        }
        #    }
        #    else
        #    {
        #        while select asnItem
        #            where asnItem.LicensePlateId    == _licensePlateId  &&
        #                  asnItem.Module            == _module
        #        {
        #            if (asnItem.Module == WHSModule::Purch)
        #            {
        #                vendName = PurchLine::findInventTransId(WHSLoadLine::findbyRecId(asnItem.LoadLineRefRecId).InventTransId).purchTable().vendorName();
        #                if (vendName != prevVendName)
        #                {
        #                    ret += [this.buildControl(#RFLabel, int2str(i), strFmt("@SYS82246", vendName), 1, '', #WHSRFUndefinedDataType, '', 0)];
        #                    prevVendName = vendName;
        #                }
        #            }
        #            orderNum = WHSLoadLine::findbyRecId(asnItem.LoadLineRefRecId).OrderNum;
        #            if (orderNum != prevOrderNum)
        #            {
        #                ret += [this.buildControl(#RFLabel,
        #                                          int2str(i),
        #                                          strFmt("@WAX3657", WHSLoadLine::findbyRecId(asnItem.LoadLineRefRecId).OrderNum),
        #                                          1,
        #                                          '',
        #                                          #WHSRFUndefinedDataType,
        #                                          '',
        #                                          0)];
        #
        #                prevOrderNum = orderNum;
        #            }
        #
        #            itemInfo = '';
        #            itemInfo = this.generateItemInfoForReceiving(asnItem);
        #            ret += [this.buildControl(#RFLabel, int2str(i), itemInfo, 1, '', #WHSRFUndefinedDataType, '', 0)];
        #            ++i;
        #        }
        #    }
        #
        #    if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).ShowDisposition && _module != WHSModule::Transfer)
        #    {
        #        ret = this.buildDispositon(ret, pass.lookupStr(#Disposition), true, true);
        #    }
        #
        #    ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildRemainingReceiptQtyCurrentLPLabel
        #private container buildRemainingReceiptQtyCurrentLPLabel(
        #    ItemId              _itemId,
        #    Qty                 _dimQty,
        #    UnitOfMeasureSymbol _uomSymbol)
        #{
        #    InventTable         inventTable;
        #    InventNumGroup      numGroup;
        #    Qty                 qtyLeft;
        #
        #    inventTable = InventTable::find(_itemId);
        #    numGroup = InventNumGroup::find(inventTable.BatchNumGroupId);
        #
        #    if (numGroup.PerQty != 0)
        #    {
        #        qtyLeft = min(_dimQty, numGroup.PerQty);
        #    }
        #    else
        #    {
        #        qtyLeft = _dimQty;
        #    }
        #
        #    return [this.buildControl(#RFLabel, #RFQtyLabel, strFmt("@SYP4884893", qtyLeft, _uomSymbol), 1, '', extendedTypeNum(String255), '', 0)];
        #}
      ENDSOURCE
      SOURCE #buildShortPick
        #container buildShortPick(container  _con,
        #                         str        _extraText = '')
        #{
        #    container           ret = _con;
        #    WMSLocation         location;
        #    WHSLicensePlateId   licensePlateId;
        #    WHSRFDescription1   description1;
        #    WHSRFDescription2   description2;
        #    InventDim           inventDim;
        #    Qty                 qty;
        #    Qty                 inventQty;
        #    UnitOfMeasureSymbol uom;
        #    UnitOfMeasureSymbol inventUOM;
        #    WHSWorkException    shortPickReason;
        #    boolean             first = true;
        #    str                 elements;
        #
        #    description1    = WHSInventTable::find(workLine.ItemId).rfDescription1;
        #    description2    = WHSInventTable::find(workLine.ItemId).rfDescription2;
        #    inventDim       = InventDim::find(workLine.InventDimId);
        #    qty             = workLine.QtyRemain;
        #    inventQty       = workLine.InventQtyRemain;
        #    uom             = workLine.UnitId;
        #    inventUOM       = InventTableModule::find(workLine.ItemId, ModuleInventPurchSales::Invent).UnitId;
        #    licensePlateId  = workTable.TargetLicensePlateId;
        #
        #    if (workLine.wmsLocationId)
        #    {
        #        location = WMSLocation::find(workLine.wmsLocationId, pass.lookup(#InventLocationId));
        #    }
        #
        #    ret += [this.buildControl(#RFLabel, #RFShortPick, "@WAX1322", 1, '',#WHSRFUndefinedDataType, '', 0)];
        #
        #    ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, workLine.wmsLocationId, extendedTypeNum(WMSLocationId), '', 0, false)];
        #
        #    ret += this.addLocationConfirmationControl(WHSWorkType::Pick, location);
        #
        #    if (licensePlateId)
        #    {
        #        ret += [this.buildControl(#RFText, #TargetLicensePlateId, "@WAX1214", 1, licensePlateId, extendedTypeNum(WHSLicensePlateId), '', 0, false)];
        #    }
        #
        #    if (location.whsLocationIsLPControlled())
        #    {
        #        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.lookupStr(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0)];
        #    }
        #    else if (!licensePlateId && !location.whsLocationIsLPControlled())
        #    {
        #        if (!pass.exists(#TargetLicensePlateId) && WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).GenerateLP)
        #        {
        #            pass.insert(#TargetLicensePlateId, WHSLicensePlate::generateLicensePlateId(workLine.ItemId, workLine.UnitId));
        #        }
        #
        #        ret += [this.buildControl(#RFText, #TargetLicensePlateId, "@WAX1214", 1, pass.lookupStr(#TargetLicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0)];
        #    }
        #
        #    ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, workLine.ItemId, extendedTypeNum(ItemId), '', 0, false)];
        #
        #    if (workLine.ItemId)
        #    {
        #        ret += this.addProductConfirmationControl(WHSWorkType::Pick);
        #        if (description1)
        #        {
        #            ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt("\t        %1", description1), 1, '',#WHSRFUndefinedDataType, '', 0, false)];
        #        }
        #        else
        #        {
        #            ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt("\t        %1", InventTable::find(workLine.ItemId).defaultProductName()), 1, '', #WHSRFUndefinedDataType, '', 0, false)];
        #        }
        #
        #        if (description2)
        #        {
        #            ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt("\t        %1", description2), 1, '', #WHSRFUndefinedDataType, '', 0, false)];
        #        }
        #    }
        #
        #    // Build label controls for all dimensions specified above location
        #    ret = this.buildAboveLocationDimensions(ret, inventDim, workLine.ItemId);
        #
        #    ret += [this.buildControl(#RFText, #QtyToPick, "@WAX1327", 1, pass.lookupStr(#QtyToPick), #WHSRFUndefinedDataType, '', 0)];
        #
        #    ret = this.buildUOM(ret, '', false, false, false, pass.lookupStr(#SelectedValueUOM));
        #
        #    while select shortPickReason
        #        where shortPickReason.ExceptionType == WHSExceptionType::ShortPick
        #    {
        #        if (first)
        #        {
        #            elements += shortPickReason.WorkExceptionDesc;
        #            first = false;
        #        }
        #        else
        #        {
        #            elements = elements + '||' + shortPickReason.WorkExceptionDesc;
        #        }
        #    }
        #
        #    ret += [this.buildControl(#RFCombobox, #ShortPickReason, "@SYS86426", 1, elements, #WHSRFUndefinedDataType, '', 0, true, pass.lookupStr(#SelectedValue))];
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildShortPickConf
        #container buildShortPickConf(container  _con,
        #                             str        _extraText = '')
        #{
        #    container           ret = _con;
        #    WMSLocation         location;
        #    WHSLicensePlateId   licensePlateId;
        #    WHSRFDescription1   description1;
        #    WHSRFDescription2   description2;
        #    InventDim           inventDim;
        #    Qty                 qty;
        #    Qty                 inventQty;
        #    UnitOfMeasureSymbol uom;
        #    UnitOfMeasureSymbol inventUOM;
        #    boolean             first = true;
        #    str                 elements = '||';
        #
        #    description1    = WHSInventTable::find(workLine.ItemId).rfDescription1;
        #    description2    = WHSInventTable::find(workLine.ItemId).rfDescription2;
        #    inventDim       = InventDim::find(workLine.InventDimId);
        #    qty             = workLine.QtyRemain;
        #    inventQty       = workLine.InventQtyRemain;
        #    uom             = workLine.UnitId;
        #    inventUOM       = InventTableModule::find(workLine.ItemId, ModuleInventPurchSales::Invent).UnitId;
        #    licensePlateId  = workTable.TargetLicensePlateId;
        #
        #    if (workLine.wmsLocationId)
        #    {
        #        location = WMSLocation::find(workLine.wmsLocationId, pass.lookup(#InventLocationId));
        #    }
        #
        #    ret += [this.buildControl(#RFLabel, #RFShortPick, "@WAX1322", 1, '', #WHSRFUndefinedDataType, '', 0)];
        #
        #    ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, workLine.wmsLocationId, extendedTypeNum(WMSLocationId), '', 0, false)];
        #
        #    if (licensePlateId)
        #    {
        #        ret += [this.buildControl(#RFText, #TargetLicensePlateId, "@WAX1214", 1, licensePlateId, extendedTypeNum(WHSLicensePlateId), '', 0, false)];
        #    }
        #
        #    if (pass.lookupStr(#LicensePlateId))
        #    {
        #        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.lookup(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0, false)];
        #    }
        #
        #    ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, workLine.ItemId, extendedTypeNum(ItemId), '', 0, false)];
        #
        #    if (workLine.ItemId)
        #    {
        #        if (description1)
        #        {
        #            ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt("\t        %1", description1), 1, '', #WHSRFUndefinedDataType, '', 0, false)];
        #        }
        #        else
        #        {
        #            ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt("\t        %1", InventTable::find(workLine.ItemId).defaultProductName()), 1, '', #WHSRFUndefinedDataType, '', 0, false)];
        #        }
        #
        #        if (description2)
        #        {
        #            ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt("\t        %1", description2), 1, '', #WHSRFUndefinedDataType, '', 0, false)];
        #        }
        #    }
        #
        #    // Build label controls for all dimensions specified above location
        #    ret = this.buildAboveLocationDimensions(ret, inventDim, workLine.ItemId);
        #
        #    ret += [this.buildControl(#RFText, #QtyToPick, "@WAX1327", 1, pass.lookup(#QtyToPick), #WHSRFUndefinedDataType, '', 0, false)];
        #    ret += [this.buildControl(#RFText, #QtyShort, "@WAX1333", 1, pass.lookup(#QtyShort), #WHSRFUndefinedDataType, '', 0, false)];
        #    ret = this.buildUOM(ret, '', false, false, false, pass.lookupStr(#SelectedValueUOM), false);
        #
        #    ret += [this.buildControl(#RFText, #ReasonString, "@SYS86426", 1, pass.exists(#ShortPickReason) ? WHSWorkException::find(pass.lookup(#ShortPickReason), WHSExceptionType::ShortPick).WorkExceptionDesc : '', #WHSRFUndefinedDataType, '', 0, false)];
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildSplitPut
        #/// <summary>
        #/// Builds the split put screen for the RF.
        #/// </summary>
        #/// <param name="_con">
        #/// Container holding RF information
        #/// </param>
        #/// <returns>
        #/// Container with new RF information.
        #/// </returns>
        #container buildSplitPut(container   _con)
        #{
        #    container           ret = _con;
        #    InventDim           inventDim;
        #    InventDim           workLineDim;
        #
        #    ret += [this.buildControl(#RFLabel, #RFPut, strFmt("@WAX1270", workTable.WorkTransType), 1, '', #WHSRFUndefinedDataType, '', 0)];
        #
        #    if (!workLine.ItemId)
        #    {
        #        ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, "@WAX402", extendedTypeNum(ItemId), '', 0, false)];
        #    }
        #    else
        #    {
        #        ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, workLine.ItemId, extendedTypeNum(ItemId), '', 0, false)];
        #        ret += this.addProductConfirmationControl(WHSWorkType::Put);
        #    }
        #
        #    workLineDim = workLine.inventDim();
        #
        #    this.fillPassFromInventDim(workLineDim);
        #
        #    // For current qty need to look at the user who picked the work as the location.
        #    pass.insert(#WMSLocationId, WHSWorkLine::getPrevOppositeWorkLine(workLine.WorkId, workLine.LineNum, workLine.WorkType).UserId);
        #
        #    ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.lookupStr(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0, false)];
        #
        #    ret = this.buildProductDimensionsFromInventDim(ret, workLine.ItemId, workLineDim, false);
        #
        #    ret = this.buildNextDimensionControl(ret, workLine.ItemId);
        #
        #    inventDim = this.createInventDimFromPass();
        #    inventDim = InventDim::findOrCreate(inventDim);
        #
        #    pass.insert(#CurrentQty, min(workLine.InventQtyRemain, WHSInventOnHand::onHandQty(workLine.ItemId, inventDim.InventDimId)));
        #
        #    ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, workLine.wmsLocationId, extendedTypeNum(WMSLocationId), '', 0, false)];
        #
        #    if (pass.exists(#MenuItem))
        #    {
        #        if (WHSRFAutoConfirm::isLocationConfirmationEnabled(pass.lookup(#MenuItem), WHSWorkType::Put))
        #        {
        #            if (WMSLocation::find(workLine.wmsLocationId, workTable.InventLocationId).CheckText)
        #            {
        #                ret += [this.buildControl(#RFText, #CheckDigit, "@WAX1197", 1, pass.lookupStr(#CheckDigit), extendedTypeNum(WMSCheckText), '', 0)];
        #            }
        #            else if (pass.exists(#SystemPopulated))
        #            {
        #                if ((!pass.exists(#PrevStep) || pass.lookup(#PrevStep) != WHSWorkExecuteDisplay::num2StrDisplay(#OverrideStep2)) && !pass.exists(#GroupPutawayConfirm))
        #                {
        #                    ret += [this.buildControl(#RFText, #LocVerification, "@WAX1196", 1, '', extendedTypeNum(WMSLocationId), '', 0)];
        #                }
        #            }
        #        }
        #    }
        #
        #    // Show available qty for dimensions given.
        #    ret += [this.buildControl(#RFText, #CurrentQty, "@WAX1147", 1, pass.lookup(#CurrentQty), #WHSRFUndefinedDataType, '', 0, false)];
        #
        #    ret += [this.buildControl(#RFText, #QtyToPut, "@SYS105177", 1, pass.lookupStr(#QtyToPut), #WHSRFUndefinedDataType, '', 0, true)];
        #
        #    // Split put will be done in inventory units
        #    ret += [this.buildControl(#RFText, #QtyUOM, "@WAX721", 1, InventTableModule::find(workLine.ItemId, ModuleInventPurchSales::Invent).UnitId, #WHSRFUndefinedDataType, '', 0, false)];
        #
        #    // Split put should be able to change target LP
        #    if (WMSLocation::find(workLine.wmsLocationId, workTable.InventLocationId).whsLocationIsLPControlled())
        #    {
        #        ret += [this.buildControl(#RFText, #TargetLicensePlateId, "@WAX1214", 1, pass.lookupStr(#TargetLicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0, true)];
        #    }
        #
        #    if (workLine.ItemId)
        #    {
        #        ret += this.buildItemDescription(workLine.ItemId);
        #    }
        #
        #    // Build label controls for all dimensions specified above location
        #    ret = this.buildAboveLocationDimensions(ret, workLineDim, workLine.ItemId);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildTORecTrackingDimensions
        #protected container buildTORecTrackingDimensions(
        #    container               _con,
        #    ItemId                  _itemId,
        #    Qty                     _defaultQty,
        #    UnitOfMeasureSymbol     _defaultUOM = '')
        #{
        #    container           ret = _con;
        #    InventTransferLine  transferLine;
        #    WHSInventTable      whsInventTable;
        #    ListEnumerator      le;
        #    InventDim           transferLineDim;
        #    InventBatchId       batchId;
        #    InventSerialId      serialId;
        #    boolean             enable;
        #    str                 qtyStrToDisplay;
        #    Qty                 qtyToDisplay = 0;
        #    Qty                 qtyToDisplayInDimUOM = 0;
        #    Qty                 inventToDimUOMConversion = 0;
        #    UnitOfMeasureSymbol uomToDisplay;
        #    str                 dimUOM;
        #    UnitOfMeasureSymbol inventUOM = InventTableModule::find(_itemId, ModuleInventPurchSales::Invent).UnitId;
        #    boolean             serialEnabled;
        #
        #    EcoResReleasedProductUnitConverter  releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();;
        #
        #    transferLine = InventTransferLine::find(pass.lookup(#TONum), pass.lookupNum(#TOLineNum));
        #    whsInventTable = WHSInventTable::find(_itemId);
        #    transferLineDim = transferLine.inventDim();
        #
        #    dimUOM = pass.lookupStr(#DimUOM);
        #    //If there is a UOM selected or calculated based on the unit sequence group ID, we want to keep it in the display by default.
        #    uomToDisplay = dimUOM ? dimUOM : inventUOM;
        #
        #    ret += [this.buildControl(#RFLabel, "@WAX5546", "@WAX5546", 1, '', #WHSRFUndefinedDataType, '', 0)];
        #
        #    ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, pass.lookup(#ItemId), extendedTypeNum(ItemId), '', 0, false)];
        #
        #    if (whsInventTable.rfDescription1)
        #    {
        #        ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt("\t        %1", whsInventTable.rfDescription1), 1, '', #WHSRFUndefinedDataType, '', 0, false)];
        #    }
        #    else
        #    {
        #        ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt("\t        %1", InventTable::find(whsInventTable.ItemId).defaultProductName()), 1, '', #WHSRFUndefinedDataType, '', 0, false)];
        #    }
        #
        #    if (whsInventTable.rfDescription2)
        #    {
        #        ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt("\t        %1", whsInventTable.rfDescription2), 1, '', #WHSRFUndefinedDataType, '', 0, false)];
        #    }
        #
        #    ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.lookup(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0, false)];
        #
        #    le = InventDimGroupSetup::newDimensionGroups(0, 0, InventTable::find(_itemId).trackingDimensionGroup()).activeFields().getEnumerator();
        #
        #    while (le.moveNext())
        #    {
        #        switch (le.current())
        #        {
        #            case fieldNum(InventDim, InventBatchId):
        #                enable = transferLineDim.InventBatchId == '';
        #
        #                //we do this to handle a scenario where multiple serial numbers exist for multiple batches e.g B1S1, B1S2, B2S3. We don't want to jump to B2 since we don't know when the user is done with B1
        #                if (pass.lookupStr(#BatchId))
        #                {
        #                    //if we have a serial number and a batch then we should not allow editing the batch since we expect to get qty as the next
        #                    enable = !pass.exists(#SerialId) && enable;
        #                    ret += [this.buildControl(#RFText, #BatchId, "@SYS14462", 1, pass.lookupStr(#BatchId), extendedTypeNum(InventBatchId), '', 0, enable)];
        #
        #                    //If the batch ID and the Qty have a value specified in the RF, we want to keep it.
        #                    if (pass.lookupNum(#DimQty) != 0)
        #                    {
        #                        qtyToDisplay = pass.lookupNum(#DimQty);
        #                    }
        #                }
        #                else
        #                {
        #                    [batchId, qtyToDisplay] = WHSInventTransferLine::getBatchAndInventQtyLeftToReceive(
        #                                                                                                    transferLine,
        #                                                                                                    pass.lookupStr(#ReceiptId),
        #                                                                                                    pass.lookupStr(#LicensePlateId));
        #
        #                    if (qtyToDisplay)
        #                    {
        #                        /*
        #                            We have to display the minimum quantity between the current remaining to be received on this license plate
        #                            and the remaining ordered quantity for this batch as calculated by the getWHSBatchAndInventQtyLeftToReceive.
        #                        */
        #                        qtyToDisplay = min(qtyToDisplay, InventTableModule::unitConvert(
        #                                                                                    _itemId,
        #                                                                                    ModuleInventPurchSales::Invent,
        #                                                                                    _defaultUOM,
        #                                                                                    _defaultQty,
        #                                                                                    transferLine.InventDimId));
        #
        #                        /*
        #                            If there is a different unit selected or calculated based on the unit seq. group ID, we want to default the quantity
        #                            in that unit, if it is a value without any decimals.
        #                        */
        #                        if (dimUOM != '' &&  dimUOM != inventUOM)
        #                        {
        #
        #                            qtyToDisplayInDimUOM = releasedProductUnitConverter.convert(
        #                                                                            qtyToDisplay,
        #                                                                            UnitOfMeasure::unitOfMeasureIdBySymbol(inventUOM),
        #                                                                            UnitOfMeasure::unitOfMeasureIdBySymbol(dimUOM),
        #                                                                            NoYes::No,
        #                                                                            _itemId,
        #                                                                            transferLine.InventDimId,
        #                                                                            NoYes::No);
        #
        #                            if (qtyToDisplayInDimUOM >= 1 && qtyToDisplayInDimUOM == decRound(qtyToDisplayInDimUOM,0))
        #                            {
        #                                qtyToDisplay = qtyToDisplayInDimUOM;
        #                                uomToDisplay = dimUOM;
        #                            }
        #                            else
        #                            {
        #                                uomToDisplay = inventUOM;
        #                            }
        #                        }
        #
        #                        ret += [this.buildControl(#RFText, #BatchId, "@SYS14462", 1, batchId, extendedTypeNum(InventBatchId), '', 0, enable)];
        #                    }
        #                    else if (pass.lookupStr(#SessionBatchId))
        #                    {
        #                        ret += [this.buildControl(#RFText, #BatchId, "@SYS14462", 1, pass.lookupStr(#SessionBatchId), extendedTypeNum(InventBatchId), '', 0, enable)];
        #                        batchId = pass.lookupStr(#SessionBatchId);
        #                    }
        #                    //If there is not any batch retrieved, we will default the UOM control to the inventory unit
        #                    else
        #                    {
        #                        ret += [this.buildControl(#RFText, #BatchId, "@SYS14462", 1, '', extendedTypeNum(InventBatchId), '', 0, enable)];
        #                        batchId = '';
        #                    }
        #                }
        #                break;
        #
        #            case fieldNum(InventDim, InventSerialId):
        #                if (this.mustCaptureSerialOnReceipt(_itemId))
        #                {
        #                    serialId = pass.lookupStr(#SerialId);
        #                    //allow for override to support scenario where something else than what was on the line was picked
        #                    serialEnabled = serialId == '';
        #
        #                    if (!serialId)
        #                    {
        #                        serialId = transferLine.inventDim().inventSerialId;
        #                        serialEnabled = true;
        #                    }
        #
        #                    ret += [this.buildControl(#RFText, #SerialId, "@WAX1614", 1, serialId, extendedTypeNum(InventSerialId), '', 0, serialId == '')];
        #                    //we should not default more than one since we dont know if we are splitting a batch in multiple serial numbers
        #                    if (_defaultQty != 1 && !pass.lookupStr(#DimQty))
        #                    {
        #                        qtyToDisplay = 0;
        #                        uomToDisplay = inventUOM;
        #                    }
        #                }
        #
        #                break;
        #
        #            default:
        #                if (transferLineDim.(le.current()))
        #                {
        #                    ret += [this.buildControlForTableField(tableNum(InventDim),
        #                                                           le.current(),
        #                                                           fieldId2name(tableNum(InventDim), le.current()),
        #                                                           1,
        #                                                           transferLineDim.(le.current()),
        #                                                           false)];
        #                }
        #                else
        #                {
        #                    ret += [this.buildControlForTableField(tableNum(InventDim),
        #                                                           le.current(),
        #                                                           fieldId2name(tableNum(InventDim), le.current()),
        #                                                           1,
        #                                                           '',
        #                                                           true)];
        #                }
        #                break;
        #        }
        #    }
        #
        #    ret += this.buildRemainingReceiptQtyCurrentLPLabel(
        #                                                _itemId,
        #                                                pass.lookupNum(#DimRunningQty),
        #                                                inventUOM);
        #
        #    if (dimUOM != '' &&  dimUOM != inventUOM)
        #    {
        #        ret += [this.buildControl(
        #                                #RFLabel,
        #                                'Invent Conversion',
        #                                strFmt("1 %1 = %2 %3", dimUOM,
        #                                                       InventTableModule::unitConvert(_itemId,
        #                                                                                    ModuleInventPurchSales::Invent,
        #                                                                                    dimUOM,
        #                                                                                    1,
        #                                                                                    transferLine.inventDimId),
        #                                                       inventUOM),
        #                                 1,'',#WHSRFUndefinedDataType, '', 0)];
        #    }
        #
        #
        #    qtyStrToDisplay = (qtyToDisplay != 0) ? WHSWorkExecuteDisplay::num2StrDisplay(qtyToDisplay) : '';
        #    ret += [this.buildControl(#RFText, #DimQty, "@SYS105177", 1, qtyStrToDisplay, extendedTypeNum(Qty), '', 0)];
        #    ret = this.buildTrackingDimReceiptUOM(ret, '', false, true, uomToDisplay);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildTrackingDimensionsText
        #protected container buildTrackingDimensionsText(
        #    container       _con,
        #    ItemId          _itemId,
        #    WMSLocationId   _locationId = '',
        #    boolean         _outbound = true,
        #    boolean         _populate = false,
        #    boolean         _enableControls = true,
        #    boolean         _displaySerial = false)
        #{
        #    container       ret = _con;
        #    ListEnumerator  le;
        #
        #    le = InventDimGroupSetup::newDimensionGroups(0, 0, InventTable::find(_itemId).trackingDimensionGroup()).activeFields().getEnumerator();
        #
        #    while (le.moveNext())
        #    {
        #        switch (le.current())
        #        {
        #            case fieldNum(InventDim, InventSerialId):
        #                if (_displaySerial
        #                    || (_outbound && WMSLocation::whsLocationHasSerial(_locationId, _itemId))
        #                    || (!_outbound && this.mustCaptureSerialOnReceipt(_itemId)))
        #                {
        #                    ret += [this.buildControl(#RFText,
        #                                              #SerialId,
        #                                              "@WAX1614",
        #                                              1,
        #                                              _populate ? pass.lookupStr(#SerialId) : '',
        #                                              extendedTypeNum(InventSerialId),
        #                                              '',
        #                                              0,
        #                                              _enableControls)];
        #                }
        #                break;
        #
        #            default:
        #                ret += [this.buildControlForTableField(tableNum(InventDim),
        #                                               le.current(),
        #                                               fieldId2name(tableNum(InventDim), le.current()),
        #                                               1,
        #                                               _populate ? pass.lookupStr(fieldId2name(tableNum(InventDim), le.current())) : '',
        #                                               _enableControls)];
        #                break;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildTrackingDimReceiptUOM
        #protected container buildTrackingDimReceiptUOM(
        #    container   _con,
        #    str         _label = '',
        #    boolean     _showBlank = false,
        #    boolean     _showOK = true,
        #    str         _selected = '',
        #    boolean     _enabled = true)
        #{
        #    container   ret;
        #    str         elements;
        #    ItemId      itemId;
        #
        #    if (pass.exists(#ItemId))
        #    {
        #        itemId = pass.lookup(#ItemId);
        #    }
        #    elements = this.buildUOMSequenceGroupString(itemId, _showBlank);
        #
        #    ret = this.addTrackingDimRecUOMControl(_con, _label, elements, _selected, _enabled);
        #
        #    if (_showOK)
        #    {
        #        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildUOM
        #container buildUOM(container    _con,
        #                   str          _label = '',
        #                   boolean      _showRemove = false,
        #                   boolean      _showBlank  = false,
        #                   boolean      _showOK     = true,
        #                   str          _selected   = '',
        #                   boolean      _enabled    = true)
        #{
        #    container           ret = _con;
        #    str                 elements;
        #    str                 label = _label ? _label : "@WAX721";      // UOM
        #    ItemId              itemId;
        #
        #    if (pass.exists(#ItemId))
        #    {
        #        itemId = pass.lookup(#ItemId);
        #    }
        #
        #    elements = this.buildUOMSequenceGroupString(itemId, _showBlank);
        #
        #    ret += [this.buildControl(#RFCombobox, #UOM, label, 1, elements, #WHSRFUndefinedDataType, '', 0, _enabled, _selected ? _selected : '')];
        #
        #    if (_showRemove)
        #    {
        #        ret += [this.buildControl(#RFButton, "@SYS26394", "@WAX879", 1, '', #WHSRFUndefinedDataType, '', 0)];
        #    }
        #
        #    if (_showOK)
        #    {
        #        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildUOMSequenceGroupString
        #/// <summary>
        #///     Builds a pipe-delimited string containing sequence group unit values.
        #/// </summary>
        #/// <param name="_itemId">
        #///     An item ID to build the string for.
        #/// </param>
        #/// <param name="_showBlank">
        #///     A Boolean value to indicate whether a blank value should be included in the list of available options.
        #/// </param>
        #/// <returns>
        #///     Returns a pipe-delimited string containing sequence group unit values.
        #/// </returns>
        #protected str buildUOMSequenceGroupString(
        #    ItemId  _itemId,
        #    boolean _showBlank)
        #{
        #    WHSInventTable      whsInventTable;
        #    WHSUOMSeqGroupLine  uomSeqGroupLine;
        #    boolean             first = true;
        #    str                 elements;
        #
        #    if (_showBlank)
        #    {
        #        elements = '||';
        #    }
        #
        #    if (_itemId)
        #    {
        #        while select UnitId
        #                from uomSeqGroupLine
        #                order by LineNum
        #            exists join whsInventTable
        #                where whsInventTable.ItemId         == _itemId
        #                   && uomSeqGroupLine.uomSeqGroupId == whsInventTable.uomSeqGroupId
        #        {
        #            if (first)
        #            {
        #                first = false;
        #            }
        #            else
        #            {
        #                elements += '||';
        #            }
        #
        #            elements += uomSeqGroupLine.UnitId;
        #        }
        #    }
        #
        #    return elements;
        #}
      ENDSOURCE
      SOURCE #buildWorkAuditTemplate
        #container buildWorkAuditTemplate(container  _con)
        #{
        #    container                   ret = _con;
        #    WHSWorkAuditTemplateTable   workAuditTemplateTable;
        #    WHSWorkAuditTemplateLine    workAuditTemplateLine;
        #
        #    workAuditTemplateTable  = WHSWorkAuditTemplateTable::find(pass.lookup(#AuditTemplateId));
        #    workAuditTemplateLine   = WHSWorkAuditTemplateLine::find(pass.lookup(#AuditTemplateId), pass.lookup(#AuditSeqNum));
        #
        #    // Header label referencing audit break field
        #    ret += [this.buildControl(#RFLabel, #Scan, strFmt("@WAX736",
        #                                                      workAuditTemplateTable.AuditDisplayLabel,
        #                                                      workTable.(workAuditTemplateTable.AuditBreakFieldNum)), 1, '', #WHSRFUndefinedDataType, '', 0)];
        #
        #    if (workAuditTemplateLine.AuditBreakFunction == WHSAuditBreakFunction::CaptureData)
        #    {
        #        ret += [this.buildControl(#RFText, #Field, workAuditTemplateLine.AuditRFLabel, 1, '', extendedTypeNum(Description), '', 0)];
        #    }
        #    else
        #    {
        #        // If not capture data audit function, display function
        #        ret += [this.buildControl(#RFLabel, #Field, workAuditTemplateLine.AuditRFLabel, 1, '', #WHSRFUndefinedDataType, '', 0)];
        #    }
        #
        #    ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildWorkExceptions
        #container buildWorkExceptions(container _con, str _selected = '')
        #{
        #    WHSWorkException    exceptions;
        #    container           ret = _con;
        #    boolean             first = true;
        #    str                 elements = '||';
        #
        #    while select exceptions
        #        where exceptions.ExceptionType == WHSExceptionType::Work
        #    {
        #        if (first)
        #        {
        #            elements = exceptions.WorkExceptionDesc;
        #            first = false;
        #        }
        #        else
        #        {
        #            elements = elements + '||' + exceptions.WorkExceptionDesc;
        #        }
        #    }
        #
        #    ret += [this.buildControl(#RFCombobox, #WHSWorkException, "@WAX639", 1, elements, #WHSRFUndefinedDataType, '', 0, true, _selected)];
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #calcQtyOverPicking
        #/// <summary>
        #/// Calculate on-hand inventory qty and over picking qty from license plate.
        #/// </summary>
        #/// <param name="_licensePlateId">
        #/// License plated Id.
        #/// </param>
        #/// <param name="_workLine">
        #/// The current work line being executed
        #/// </param>
        #/// <param name="_inventUOM">
        #/// A unit of measure symbol for invent unitId.
        #/// </param>
        #/// /// <param name="_wmsLocationId">
        #/// A location of warehouse for license plate, option.
        #/// </param>
        #/// <returns>
        #/// A container contains on-hand qty and over picking qty of work line.
        #/// </returns>
        #private container calcQtyOverPicking(WHSLicensePlateId _licensePlateId, WHSWorkLine _workLine, UnitOfMeasureSymbol _inventUOM, WMSLocationId _wmsLocationId = _workLine.wmsLocationId)
        #{
        #    EcoResReleasedProductUnitConverter  releasedProductUnitConverter;
        #    InventQty                           inventQtyPick;
        #    Qty                                 qtyPick;
        #
        #    inventQtyPick = WHSInvent::getQtyOnLicensePlate(_licensePlateId, _workLine.ItemId, _workLine.InventDimId, _wmsLocationId);
        #
        #    releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();
        #    qtyPick = releasedProductUnitConverter.convert(inventQtyPick,
        #                                                    UnitOfMeasure::unitOfMeasureIdBySymbol(_inventUOM),
        #                                                    UnitOfMeasure::unitOfMeasureIdBySymbol(_workLine.UnitId),
        #                                                    NoYes::No,
        #                                                    _workLine.ItemId,
        #                                                    _workLine.InventDimId);
        #
        #    return [qtyPick, inventQtyPick];
        #}
      ENDSOURCE
      SOURCE #canGroupRemainingIndividualPutWorkLines
        #/// <summary>
        #/// Checks if the remaining individual put work lines can be grouped.
        #/// </summary>
        #/// <param name="_workLine">
        #/// The current workline.
        #/// </param>
        #/// <param name="_menuItemName">
        #/// The current menu item name.
        #/// </param>
        #/// <returns>
        #/// true if non of the next work lines is of an opposite type, if all the put locations are the same and if the quantity confirmation during put is disabled; otherwise, false
        #/// </returns>
        #private boolean canGroupRemainingIndividualPutWorkLines(WHSWorkLine _workLine, WHSMenuItemName _menuItemName)
        #{
        #    return !WHSWorkLine::getNextOppositeWorkLine(_workLine.WorkId, _workLine.LineNum, _workLine.WorkType)
        #         && WHSWorkTable::multipleFinalPutsAllLocationsEqual(_workLine.WorkId)
        #         && (!WHSRFAutoConfirm::isVerifyQtyConfirmationEnabled(_menuItemName, WHSWorkType::Put)
        #             || WHSWorkTable::multipleFinalPutsWithLocAndUnitsEqualQty(_workLine.WorkId));
        #}
      ENDSOURCE
      SOURCE #capturePotency
        #/// <summary>
        #///     Indicates whether potency must be captured during receiving flows.
        #/// </summary>
        #/// <param name="_itemId">
        #///     The item ID.
        #/// </param>
        #/// <returns>
        #///     Returns true if potency must be captured.
        #/// </returns>
        #protected boolean capturePotency(ItemId _itemId = '')
        #{
        #    InventTable inventTable;
        #    ItemId      itemId = _itemId;
        #
        #    if (!itemId)
        #    {
        #        itemId = pass.lookupStr(#ItemId);
        #    }
        #
        #    inventTable = InventTable::findHavingPotencyAttribute(itemId);
        #
        #    return inventTable.RecId != 0;
        #}
      ENDSOURCE
      SOURCE #captureTrackingDimensions
        #/// <summary>
        #/// Determines whether the given item needs to have batch or serial numbers specified.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The item currently being transacted via the RF device.
        #/// </param>
        #/// <returns>
        #/// True, if tracking dimensions need to be captured; otherwise False.
        #/// </returns>
        #/// <remarks>
        #/// The capture of the tracking dimensions should only be triggered in case the
        #/// <c>InventNumGroup</c> record requires an id to be manually provided, or, during a
        #/// physical update.
        #/// </remarks>
        #protected boolean captureTrackingDimensions(ItemId _itemId)
        #{
        #    ListEnumerator  le;
        #    InventTable     inventTable;
        #    boolean         ret;
        #
        #    inventTable = InventTable::find(_itemId);
        #    le = InventDimGroupSetup::newDimensionGroups(0, 0, inventTable.trackingDimensionGroup()).activeFields().getEnumerator();
        #
        #    while (le.moveNext())
        #    {
        #        switch (le.current())
        #        {
        #            case fieldNum(InventDim, InventSerialId):
        #                ret = this.mustCaptureSerialOnReceipt(_itemId);
        #                break;
        #            case fieldNum(InventDim, InventBatchId):
        #                ret = true;
        #                break;
        #            default:
        #                ret = false;
        #                break;
        #        }
        #
        #        if (ret)
        #        {
        #            break;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkForPickPackWork
        #boolean checkForPickPackWork(WHSWorkId  _sourceWorkId)
        #{
        #    boolean         ret;
        #    WHSWorkTable    newWorkTable;
        #    WHSWorkTable    sourceWorkTable = WHSWorkTable::find(_sourceWorkId);
        #    WHSWorkExecute  workExecute = new WHSWorkExecute();
        #
        #    while select newWorkTable
        #        where newWorkTable.WorkId           != _sourceWorkId                    &&
        #              newWorkTable.InventSiteId     == sourceWorkTable.InventSiteId     &&
        #              newWorkTable.InventLocationId == sourceWorkTable.InventLocationId &&
        #              newWorkTable.OrderNum         == sourceWorkTable.OrderNum         &&
        #              newWorkTable.LoadId           == sourceWorkTable.LoadId           &&
        #              newWorkTable.Frozen           == NoYes::No                        &&
        #              newWorkTable.WorkStatus       <= WHSWorkStatus::Open
        #    {
        #        ret = (workExecute.validatePickPackGrouping(_sourceWorkId, newWorkTable.WorkId) == ''  &&
        #               WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookup(#MenuItem),
        #                                                            workExecute.getFirstOpenLine(newWorkTable.WorkId, pass.lookup(#UserId)).WorkClassId));
        #
        #        if (ret)
        #        {
        #            break;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkReceiptAtWarehouseAllowed
        #/// <summary>
        #/// Validates that it is possible to receive goods from the source document line at the provided warehouse.
        #/// </summary>
        #/// <param name="_sourceDocLine">
        #/// Source document line table map that is being received.
        #/// </param>
        #/// <param name="_receiptWarehouse">
        #/// The warehouse the goods are received at.
        #/// </param>
        #/// <exception cref="Exception::Error">
        #/// Receipt at the mobile device user warehouse is not allowed.
        #/// </exception>
        #protected void checkReceiptAtWarehouseAllowed(WHSReceiptOrderLine _sourceDocLine, InventLocationId _receiptWarehouse)
        #{
        #    InventDim inventDim = _sourceDocLine.inventDim();
        #
        #    if (inventDim.InventLocationId != _receiptWarehouse
        #        && !InventSite::allowReceiptAtOtherWarehouse(inventDim.InventLocationId, _receiptWarehouse))
        #    {
        #        throw error("@WAX1239");
        #    }
        #}
      ENDSOURCE
      SOURCE #checkWarehouseAllowsRFReceipt
        #/// <summary>
        #/// Validates that the warehouse has a default receipt location set that is LP controlled.
        #/// </summary>
        #/// <param name="_inventLocationId">
        #/// The warehouse to check for valid receipt location.
        #/// </param>
        #/// <returns>
        #/// true if the warehouse has a LP controlled default receipt location; otherwise, false
        #/// </returns>
        #protected boolean checkWarehouseAllowsRFReceipt(InventLocationId _inventLocationId)
        #{
        #    InventLocation  inventLocation;
        #    boolean         ret = true;
        #
        #    inventLocation = InventLocation::find(_inventLocationId);
        #
        #    if (!inventLocation.wmsLocationIdDefaultReceipt || !WMSLocation::find(inventLocation.wmsLocationIdDefaultReceipt, _inventLocationId).whsLocationIsLPControlled())
        #    {
        #        ret = false;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #public abstract class WhsWorkExecuteDisplay
        #{
        #    #WHSWorkExecuteControlElements
        #    #WHSWorkExecuteDisplayCases
        #    #WHSRF
        #    #XmlDocumentation
        #
        #    // Container structure constants
        #    #define.StateInfo(1)
        #    #define.PassthroughInfo(2)
        #    #define.ControlsStart(3)
        #
        #    // StateInfo sub-container constants.
        #    #define.StateInfoMode(1)
        #    #define.StateInfoStep(2)
        #
        #    #define.IndexOfDataInBuildControl(5) // This is the index at which data is set in the buildControl function
        #    #define.IndexOfNameInBuildControl(2) // This is the index at which control name is set in the buildControl function
        #    #define.IndexOfErrorControlInContainer(3)
        #
        #    #define.PickQtyConfirmationEnabled('PickQtyConfirmationEnabled')
        #    #define.AutoGeneratedBatchId('AutoGeneratedBatchId')
        #
        #    WHSWorkExecuteMode  mode;
        #    int                 step;
        #
        #    WHSWorkLine         workLine;
        #    WHSUserId           userId;
        #    WHSRFPassthrough    pass;
        #    WHSWorkTable        workTable;
        #    boolean             addLPOverride;
        #    boolean             addSplitButton;
        #    boolean             noFullButton;
        #}
      ENDSOURCE
      SOURCE #clearClickedButtons
        #container clearClickedButtons(container     _con)
        #{
        #    container       ret = _con;
        #    int             i;
        #    int             length;
        #
        #    length = conLen(ret);
        #
        #    if (length > 2)
        #    {
        #        for (i = 3; i <= length; ++i)
        #        {
        #            if (conPeek(conPeek(ret, i), #controlType) == #RFButton)
        #            {
        #                ret = conPoke(ret, i, conPoke(conPeek(ret, i), #data, ''));
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #clearErrors
        #container clearErrors(container     _con)
        #{
        #    container       ret = _con;
        #    int             i;
        #    int             length;
        #
        #    length = conLen(ret);
        #
        #    for (i = 3; i <= length; ++i)
        #    {
        #        ret = conPoke(ret, i, conPoke(conPeek(ret, i), #error, ''));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #clearPassBelowLicensePlate
        #/// <summary>
        #/// Clears out inventory dimension values in the passthrough that are below license plate in the reservation hierarchy.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The Id of the item which determines the reservation hierarchy, thus, determining dimensions below license plate.
        #/// </param>
        #protected void clearPassBelowLicensePlate(ItemId _itemId)
        #{
        #    WHSReservationHierarchyProvider     reservationHierarchyProvider;
        #    WHSReservationHierarchyElementData  elementData;
        #    Enumerator                          enumerator;
        #
        #    reservationHierarchyProvider = WHSReservationHierarchyProvider::construct();
        #
        #    enumerator = reservationHierarchyProvider.getDimListBelowLicensePlate(
        #                        InventTable::find(_itemId),
        #                        WHSReservationHierarchySortOrder::TopDown)
        #                    .getEnumerator();
        #
        #    while (enumerator.moveNext())
        #    {
        #        elementData = enumerator.current();
        #        pass.remove(fieldId2name(tableNum(InventDim), elementData.parmDimensionFieldId()));
        #    }
        #}
      ENDSOURCE
      SOURCE #clearPassBelowLocation
        #/// <summary>
        #/// Clears out inventory dimension values in the passthrough that are below location in the reservation hierarchy.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The Id of the item which determines the reservation hierarchy, thus, determining dimensions below license plate.
        #/// </param>
        #protected void clearPassBelowLocation(ItemId _itemId)
        #{
        #    WHSReservationHierarchyProvider     reservationHierarchyProvider;
        #    WHSReservationHierarchyElementData  elementData;
        #    Enumerator                          enumerator;
        #
        #    reservationHierarchyProvider = WHSReservationHierarchyProvider::construct();
        #
        #    enumerator = reservationHierarchyProvider.getDimListBelowLocation(
        #                        InventTable::find(_itemId),
        #                        WHSReservationHierarchySortOrder::TopDown)
        #                    .getEnumerator();
        #
        #    while (enumerator.moveNext())
        #    {
        #        elementData = enumerator.current();
        #        pass.remove(fieldId2name(tableNum(InventDim), elementData.parmDimensionFieldId()));
        #    }
        #}
      ENDSOURCE
      SOURCE #combineMaps
        #WHSRFPassthrough combineMaps(WHSRFPassthrough _targetMap, WHSRFPassthrough _sourceMap)
        #{
        #    MapEnumerator       me;
        #    str                 key;
        #    str                 value;
        #    WHSRFPassthrough    ret = _targetMap;
        #
        #    me = _sourceMap.getEnumerator();
        #
        #    while (me.moveNext())
        #    {
        #        key = me.currentKey();
        #        value = me.currentValue();
        #
        #        ret.insert(key, value);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #countUniqueLPInLocation
        #int countUniqueLPInLocation(InventLocationId    _inventLocationId,
        #                            InventSiteId        _inventSiteId,
        #                            WMSLocationId       _locationId)
        #{
        #    InventDim       inventDim;
        #    InventSum       inventSum;
        #
        #    select count(RecId) from inventDim
        #        join InventDimId, PhysicalInvent from inventSum
        #        where inventDim.InventDimId         == inventSum.InventDimId    &&
        #              inventDim.InventLocationId    == _inventLocationId        &&
        #              inventDim.InventSiteId        == _inventSiteId            &&
        #              inventDim.wmsLocationId       == _locationId              &&
        #              inventDim.LicensePlateId      != ''                       &&
        #              inventSum.PhysicalInvent       > 0;
        #
        #    return int642int(inventDim.RecId);
        #}
      ENDSOURCE
      SOURCE #createAssignSerialDimTracking
        #void createAssignSerialDimTracking(str  _buttonClicked = '')
        #{
        #    WHSDimTracking      dimTracking;
        #    InventDim           inventDim;
        #    WHSWorkInventTrans  workInventTrans;
        #    List                listDimbelowLicensePlate;
        #
        #    ttsbegin;
        #
        #    select firstonly InventTransIdParent, ItemId from workInventTrans
        #        where workInventTrans.WorkId    == workLine.WorkId
        #        &&    workInventTrans.LineNum   == workLine.LineNum;
        #
        #    if (InventTable::find(workInventTrans.ItemId).salesProcessSerialActive())
        #    {
        #        InventTrackingRegisterTrans::createFromSerial(pass.lookupStr(#SerialId), workInventTrans.InventTransIdParent, _buttonClicked == #RFSerialUnreadable);
        #    }
        #
        #    inventDim = workLine.inventDimWithLocation();
        #
        #    if (pass.exists(#LicensePlateId))
        #    {
        #        inventDim.LicensePlateId    = pass.lookup(#LicensePlateId);
        #    }
        #
        #    listDimbelowLicensePlate = WHSReservationHierarchyProvider::construct().getDimListBelowLicensePlate(
        #                                                                                InventTable::find(workInventTrans.ItemId),
        #                                                                                WHSReservationHierarchySortOrder::TopDown);
        #
        #    this.initInventDimFromPassDimList(inventDim, WHSReservationHierarchyInventDimUtil::hierarchyList2FieldIdList(listDimbelowLicensePlate));
        #
        #    inventDim = InventDim::findOrCreate(inventDim);
        #
        #    dimTracking.WorkId              = workLine.WorkId;
        #    dimTracking.LineNum             = workLine.LineNum;
        #    dimTracking.InventDimId         = inventDim.InventDimId;
        #    dimTracking.InventTransIdParent = workInventTrans.InventTransIdParent;
        #    dimTracking.Qty                 = 1;
        #    dimTracking.insert();
        #
        #    // Remove serial from pass through once dimTracking has been created.
        #    // We don't want to use this serial any further when evaluating dimensions, such as in future loops in method processWorkLine.
        #    pass.remove(#SerialId);
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #createInventDimFromPass
        #/// <summary>
        #/// Creates an inventDim from the current pass through values.
        #/// </summary>
        #/// <returns>
        #/// An inventDim record.
        #/// </returns>
        #/// <remarks>
        #/// This method relies on the keys of the pass through map to match inventDim field names.
        #/// </remarks>
        #protected InventDim createInventDimFromPass()
        #{
        #    InventDim inventDim;
        #
        #    this.initInventDimFromPassDimList(inventDim, InventDim::dimFieldsList());
        #
        #    return InventDim::findOrCreate(inventDim);
        #}
      ENDSOURCE
      SOURCE #createUpdatedPass
        #///<summary>
        #/// Correctly save the mobile device state before running confirmation process.
        #/// </summary>
        #/// <param name="_con">
        #/// The current form state.
        #/// </param>
        #/// <param name="_pass">
        #/// The current RF passthrough.
        #/// </param>
        #/// <param name="_mode">
        #/// The work execution type that is running the confirmation.
        #/// </param>
        #/// <returns>
        #/// The updated RF passthrough
        #/// </returns>
        #/// <remarks>
        #/// If custom logic is needed to save a work mode's form state before running the
        #/// confirmation dialog it can be added to this method.
        #/// </remarks>
        #public WHSRFPassthrough createUpdatedPass(container _con, WHSRFPassthrough _pass, WHSWorkExecuteMode _mode)
        #{
        #    container           con = _con;
        #    WHSRFPassthrough    locPass = _pass;
        #    container           tmpFieldValues;
        #    WHSRFPassthrough    fieldValues;
        #
        #    [con, tmpFieldValues] = WHSRFControlData::processData(con, locPass);
        #    fieldValues = WHSRFPassthrough::create(tmpFieldValues);
        #
        #    return fieldValues;
        #}
      ENDSOURCE
      SOURCE #defaultTORecBatchId
        #protected InventBatchId defaultTORecBatchId(
        #    InventTransferId    _transferId,
        #    LineNum             _lineNum)
        #{
        #    InventTransferLine  transferLine;
        #    InventTrans         inventTrans;
        #    InventTransOrigin   inventTransOrigin;
        #    InventBatchId       batchId;
        #
        #    // First try to default off transfer line
        #    batchId = transferLine.inventDim().InventBatchId;
        #
        #    // Next try to default based on transactions
        #    if (!batchId)
        #    {
        #        batchId = InventTrans::findTransId(InventTransferLine::find(pass.lookup(#TONum), pass.lookupNum(#TOLineNum)).InventTransIdReceive).inventDim().InventBatchId;
        #
        #        while select inventTrans
        #            where inventTrans.ItemId        == pass.lookup(#ItemId)
        #            &&    inventTrans.StatusReceipt == StatusReceipt::Ordered
        #            join InventTransId from inventTransOrigin
        #                where inventTransOrigin.RecId == inventTrans.InventTransOrigin
        #                exists join transferLine
        #                    where transferLine.InventTransIdReceive == inventTransOrigin.InventTransId
        #                    &&    transferLine.TransferId           == _transferId
        #                    &&    transferLine.LineNum              == _lineNum
        #        {
        #            if (inventTrans.inventDim().InventBatchId != batchId)
        #            {
        #                batchId = '';
        #                break;
        #            }
        #        }
        #    }
        #
        #    // Next try to default based off previous receipts
        #    if (pass.lookupStr(#SessionBatchId))
        #    {
        #        batchId = pass.lookup(#SessionBatchId);
        #    }
        #
        #    return batchId;
        #}
      ENDSOURCE
      SOURCE #deleteControlDataFromContainer
        #/// <summary>
        #/// Deletes the control from the container which holds the controls for user display, by its name.
        #/// </summary>
        #/// <param name="_displayCon">
        #/// The container which holds the controls for user display.
        #/// </param>
        #/// <param name="_controlName">
        #/// The name of the build control that needs to be set.
        #/// </param>
        #/// <returns>
        #/// The new container with the changed data.
        #/// </returns>
        #protected container deleteControlDataFromContainer(container _displayCon, str _controlName)
        #{
        #    int             controlIndex;
        #    container       ret = _displayCon;
        #
        #    while (true)
        #    {
        #        controlIndex = this.indexOfBuildControlFromContainer(ret, _controlName);
        #        if (controlIndex == 0)
        #        {
        #            break;
        #        }
        #        ret = conDel(ret, controlIndex, 1);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #determineRestart
        #container determineRestart(container _con)
        #{
        #    container   data = _con;
        #
        #    if (workLine && !workLine.WorkStop)
        #    {
        #        pass = this.resetPassthrough(data);
        #        pass.insert(#WorkId, workLine.WorkId);
        #        pass.insert(#LineNum, workLine.LineNum);
        #        pass.insert(#DimTrackingDelay, 1);
        #        this.clearPassBelowLicensePlate(workLine.ItemId);
        #        data = conPoke(data, 2, pass.pack());
        #        step = #StepOne;
        #
        #        if (pass.exists(#GroupPutawayConfirm))
        #        {
        #            pass.remove(#GroupPutawayConfirm);
        #        }
        #    }
        #    else
        #    {
        #        if (workLine.WorkId && WHSWorkTemplateLine::findByRecId(workLine.WorkTemplateLineRecId).Freeze)
        #        {
        #            WHSWorkTable::freezeOrUnfreezeWork(workLine.WorkId, true);
        #        }
        #        WHSWorkTable::lockUnlockWork(workLine.WorkId, '');
        #        pass = this.resetPassthrough(data, false);
        #        pass.insert(#WorkComplete, 1);
        #        data = conPoke(data, 2, pass.pack());
        #        step = #Restart;
        #    }
        #
        #    return data;
        #}
      ENDSOURCE
      SOURCE #displayBatchDisposition
        #/// <summary>
        #///     Determines whether batch disposition must be displayed on the RF screen.
        #/// </summary>
        #/// <returns>
        #///     Returns true if batch disposition must be displayed.
        #/// </returns>
        #protected boolean displayBatchDisposition()
        #{
        #    boolean             ret;
        #    InventTable         inventTable;
        #    WHSRFMenuItemTable  menuItemTable;
        #
        #    inventTable = InventTable::find(pass.lookupStr(#ItemId));
        #    menuItemTable = WHSRFMenuItemTable::find(pass.lookup(#MenuItem));
        #
        #    if (inventTable.whsBatchActive()
        #    &&  (menuItemTable.ShowBatchDisposition
        #    ||   menuItemTable.WorkActivity == WHSWorkActivity::ChangeBatchDisposition))
        #    {
        #        ret = true;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #displayForm
        #abstract container displayForm(container _con, str _buttonClicked = '')
        #{
        #}
      ENDSOURCE
      SOURCE #displayTrackingDimForm
        #/// <summary>
        #/// Displays the RF form to get user input on the tracking dimensions.
        #/// </summary>
        #/// <param name="_con">
        #/// The incoming container of the caller with the controls.
        #/// </param>
        #/// <param name="_buttonClicked">
        #/// The name of the caller menu item.
        #/// </param>
        #/// <param name="_inventDimId">
        #/// The <c>InventDimId</c> value which can be used to resolve the product variant or distinct product reference.
        #/// </param>
        #/// <returns>
        #/// The container with the processed output of the tracking display form.
        #/// </returns>
        #/// <remarks>
        #/// The calling class should have a case for <c>TrackingDimDetailsStep</c> to handle
        #/// the output from the tracking display form.
        #/// </remarks>
        #protected container displayTrackingDimForm(container _con, str _buttonClicked, InventDimId _inventDimId = pass.createInventDimFromPass().InventDimId)
        #{
        #    container   ret = conNull();
        #    int         indx;
        #    boolean     trackingDimHasBeenSet;
        #    InventTable inventTable = InventTable::find(pass.lookupStr(#ItemId));
        #
        #    pass.insert(#DimUOM, pass.lookup(#CurrentUOM));
        #
        #    //if we need to capture the serial in this flow then we will not default since user needs to be able to specify a qty before the flow is considered done
        #    if (!this.mustCaptureSerialOnReceiptInCurrentFlow(inventTable.ItemId))
        #    {
        #        pass.insert(#DimQty, WHSWorkExecuteDisplay::num2StrDisplay(pass.lookupNum(#CurrentQty)));
        #    }
        #    else
        #    {
        #        pass.insert(#DimQty, '');
        #    }
        #    pass.insert(#DimRunningQty, InventTableModule::unitConvert(inventTable.ItemId,
        #                                                               ModuleInventPurchSales::Invent,
        #                                                               pass.lookup(#CurrentUOM),
        #                                                               pass.lookupNum(#CurrentQty),
        #                                                               _inventDimId));
        #
        #    // The container need not have the license plate (which may have older value) if it is already present on pass
        #    if (pass.lookup(#LicensePlateId) != '')
        #    {
        #        indx = this.indexOfBuildControlFromContainer(_con, #LicensePlateId);
        #        if (indx > 0)
        #        {
        #            _con = conDel(_con, indx, 1);
        #        }
        #    }
        #
        #    // If Dimension unit of measure has been set on the pass above- no conflicting UOM should be present in the container
        #    indx = this.indexOfBuildControlFromContainer(_con, #DimUOM);
        #    if (indx > 0)
        #    {
        #        _con = conDel(_con, indx, 1);
        #    }
        #
        #    step = #TrackingDimDetailsStep;
        #
        #    /*
        #        If we have to capture the serial ID, we have to keep the current tracking dim display and execute the
        #        #TrackingDimDetailsStep once the ID is set. If the item is also batch enabled, we need to call the logic for generating
        #        or finding the batches before building the tracking dim display.
        #    */
        #    if (pass.exists(#CaptureSerial))
        #    {
        #        if (inventTable.whsBatchActive())
        #        {
        #            [trackingDimHasBeenSet, _con] = this.setBatchDetails(_con);
        #        }
        #        ret = conNull();
        #        ret = this.buildPORecTrackingDimensions(ret, inventTable.ItemId, pass.lookupNum(#CurrentQty));
        #        return ret;
        #    }
        #
        #    ret = this.updateModeStepPass(_con, mode, step, pass);
        #    ret = this.displayForm(ret, _buttonClicked);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #fieldValueChanged
        #/// <summary>
        #///     Determines whether a given field value has changed.
        #/// </summary>
        #/// <param name="_fieldValues">
        #///     The container of field values.
        #/// </param>
        #/// <param name="_controlName">
        #///     The name of the RF control to check.
        #/// </param>
        #/// <returns>
        #///     Returns true if the field value has changed.
        #/// </returns>
        #protected boolean fieldValueChanged(WHSRFPassthrough _fieldValues, str _controlName)
        #{
        #    boolean             ret;
        #    WHSRFPassthrough    fieldValues = _fieldValues;
        #
        #    if (pass.exists(_controlName) && fieldValues.exists(_controlName))
        #    {
        #        ret = fieldValues.lookup(_controlName) != pass.lookup(_controlName);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #fillPassFromInventDim
        #/// <summary>
        #/// Creates entries in the pass through map for each field in the inventDim.
        #/// </summary>
        #/// <param name="_inventDim">
        #/// The inventDim record that will be used to fill the pass through.
        #/// </param>
        #/// <remarks>
        #/// This method relies on the keys of the pass through map to match inventDim field names.
        #/// </remarks>
        #protected void fillPassFromInventDim(InventDim _inventDim)
        #{
        #    List            dimList;
        #    ListEnumerator  enumerator;
        #    FieldName       fieldName;
        #
        #    // Fields might not have been selected on the specified buffers, or might have been updated since selection
        #    _inventDim.checkInvalidFieldAccess(false);
        #
        #    dimList = InventDim::dimFieldsList();
        #    enumerator = dimList ? dimList.getEnumerator() : null;
        #
        #    while (enumerator.moveNext())
        #    {
        #        if (_inventDim.(enumerator.current()))
        #        {
        #            fieldName = fieldId2name(_inventDim.TableId, enumerator.current());
        #            pass.insert(fieldName, _inventDim.(enumerator.current()));
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #findDefaultBatch
        #InventBatchId findDefaultBatch(InventTable _inventTable, WMSLocation   _location)
        #{
        #    InventBatchId       tmpBatchId;
        #    InventSum           inventSum;
        #    InventDim           inventDim;
        #
        #    while select InventDimId, ItemId, PhysicalInvent from inventSum
        #        join InventBatchId from inventDim
        #        where inventSum.InventDimId         == inventDim.InventDimId        &&
        #              inventSum.ItemId              == _inventTable.ItemId          &&
        #              inventSum.PhysicalInvent      >  0                            &&
        #              inventDim.InventLocationId    == _location.InventLocationId   &&
        #              inventDim.wmsLocationId       == _location.wmsLocationId      &&
        #              inventDim.InventBatchId       != ''
        #    {
        #        if (tmpBatchId && tmpBatchId != inventDim.InventBatchId)
        #        {
        #            tmpBatchId = '';
        #            break;
        #        }
        #        tmpBatchId = inventDim.InventBatchId;
        #    }
        #
        #    return tmpBatchId;
        #}
      ENDSOURCE
      SOURCE #generateItemDimension
        #str generateItemDimension(ItemId _itemId, InventDimId _inventDimId)
        #{
        #    InventDimParm   inventDimParm = InventTable::find(_itemId).inventDimParmProductDimensions();
        #    InventDim       inventDim = InventDim::find(_inventDimId);
        #    List            dimList;
        #    ListEnumerator  le;
        #    FieldId         dimFieldId;
        #    str             ret;
        #
        #    dimList     = InventDim::dimFieldsList();
        #    le          = dimList.getEnumerator();
        #
        #    while (le.moveNext())
        #    {
        #        dimFieldId = le.current();
        #
        #        if (inventDim.(dimFieldId)
        #        &&  dimFieldId  != fieldNum(InventDim, InventSiteId)
        #        &&  dimFieldId  != fieldNum(InventDim, InventLocationId)
        #        &&  dimFieldId  != fieldNum(InventDim, wmsLocationId)
        #        &&  dimFieldId  != fieldNum(InventDim, LicensePlateId))
        #        {
        #            ret += '\n' + strFmt(new DictField(tableNum(InventDim), dimFieldId).label() + ': ' + inventDim.(dimFieldId));
        #        }
        #    }
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #generateItemInfoForLicensePlate
        #str generateItemInfoForLicensePlate(InventSum _inventSum, WMSLocationId _locationId)
        #{
        #    WHSInventTable      whsInventTable = WHSInventTable::find(_inventSum.ItemId);
        #    InventTable         inventTable    = InventTable::find(_inventSum.ItemId);
        #    UnitOfMeasureSymbol unitID;
        #    str                 ret;
        #    str                 desc1 = '\n        ' + inventTable.defaultProductName();
        #    str                 desc2;
        #    str                 dimensions;
        #
        #    if (whsInventTable.rfDescription1)
        #    {
        #        desc1 = '\n        ' + whsInventTable.rfDescription1;
        #    }
        #    if (whsInventTable.rfDescription2)
        #    {
        #        desc2 = '\n        ' + whsInventTable.rfDescription2 + '\n';
        #    }
        #    else
        #    {
        #        desc1 = desc1 + '\n';
        #    }
        #
        #    unitID = InventTableModule::find(inventTable.ItemId, ModuleInventPurchSales::Invent).UnitId;
        #    dimensions = this.generateItemDimension(inventTable.ItemId, _inventSum.InventDimId);
        #
        #    ret = strFmt("@WAX737" + '\n' + "@WAX744",     // Location: %1\nItem Id: %2%3%4Qty: %5 %6%7
        #                 _locationId,
        #                 inventTable.ItemId,
        #                 desc1,
        #                 desc2,
        #                 _inventSum.PhysicalInvent,
        #                 unitID,
        #                 dimensions);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #generateItemInfoForLocation
        #str generateItemInfoForLocation(InventSum _inventSum, WMSLocationId _locationId, WHSLicensePlateId _licensePlateId)
        #{
        #    WHSInventTable      whsInventTable = WHSInventTable::find(_inventSum.ItemId);
        #    InventTable         inventTable = InventTable::find(_inventSum.ItemId);
        #    UnitOfMeasureSymbol unitID;
        #    Qty                 availQty;
        #    str                 ret;
        #    str                 desc1 = '\n        ' + inventTable.defaultProductName();
        #    str                 desc2;
        #    str                 dimensions;
        #
        #    if (whsInventTable.rfDescription1)
        #    {
        #        desc1 = '\n        ' + whsInventTable.rfDescription1;
        #    }
        #    if (whsInventTable.rfDescription2)
        #    {
        #        desc2 = '\n        ' + whsInventTable.rfDescription2 + '\n';
        #    }
        #    else
        #    {
        #        desc1 = desc1 + '\n';
        #    }
        #
        #    unitID = InventTableModule::find(inventTable.ItemId, ModuleInventPurchSales::Invent).UnitId;
        #    dimensions = this.generateItemDimension(inventTable.ItemId, _inventSum.InventDimId);
        #
        #    if (_licensePlateId)
        #    {
        #        ret = strFmt("@WAX740" + '\n' + "@WAX744",     // License Plate: %1\nItem Id: %2%3%4Qty: %5 %6%7
        #                     _licensePlateId,
        #                     inventTable.ItemId,
        #                     desc1,
        #                     desc2,
        #                     _inventSum.PhysicalInvent,
        #                     unitID,
        #                     dimensions);
        #    }
        #    else
        #    {
        #        ret = strFmt("@WAX741",     // Item Id: %1%2%3Qty: %4 %5%6
        #                     inventTable.ItemId,
        #                     desc1,
        #                     desc2,
        #                     _inventSum.PhysicalInvent + _inventSum.Picked,
        #                     UnitOfMeasureTranslation::findByTranslation(UnitOfMeasure::unitOfMeasureIdBySymbol(unitID), Global::currentUserLanguage()).Description,
        #                     dimensions);
        #
        #        if (_inventSum.Picked)
        #        {
        #            ret += strFmt('\n' + "@WAX2725",
        #                          _inventSum.Picked,
        #                          UnitOfMeasureTranslation::findByTranslation(UnitOfMeasure::unitOfMeasureIdBySymbol(unitID), Global::currentUserLanguage()).Description);
        #        }
        #
        #        availQty = WHSInventOnHand::getWorkPhysicalAvail(_inventSum.ItemId, _inventSum.InventDimId);
        #
        #        if (availQty < _inventSum.PhysicalInvent)
        #        {
        #            ret += strFmt('\n' + "@WAX2726",
        #                          _inventSum.PhysicalInvent - availQty,
        #                          UnitOfMeasureTranslation::findByTranslation(UnitOfMeasure::unitOfMeasureIdBySymbol(unitID), Global::currentUserLanguage()).Description);
        #
        #            ret += strFmt('\n' + "@WAX2727",
        #                          availQty,
        #                          UnitOfMeasureTranslation::findByTranslation(UnitOfMeasure::unitOfMeasureIdBySymbol(unitID), Global::currentUserLanguage()).Description);
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #generateItemInfoForProdId
        #str generateItemInfoForProdId(ProdId _prodId)
        #{
        #    ProdTable           prodTable = ProdTable::find(_prodId);
        #    WHSInventTable      whsInventTable = WHSInventTable::find(prodTable.ItemId);
        #    str                 ret;
        #    str                 desc1;
        #    str                 desc2;
        #    str                 dimensions;
        #
        #    if (whsInventTable.rfDescription1)
        #    {
        #        desc1 = '\n        ' + whsInventTable.rfDescription1;
        #    }
        #    if (whsInventTable.rfDescription2)
        #    {
        #        desc2 = '\n        ' + whsInventTable.rfDescription2 + '\n';
        #    }
        #    else
        #    {
        #        desc1 = desc1 + '\n';
        #    }
        #
        #    dimensions = this.generateItemDimension(prodTable.ItemId, prodTable.InventDimId);
        #
        #    ret = strFmt("@WAX739",     // Item Id: %1%2%3%4
        #                 prodTable.ItemId,
        #                 desc1,
        #                 desc2,
        #                 dimensions);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #generateItemInfoForReceiving
        #str generateItemInfoForReceiving(WHSASNItem _asnItem)
        #{
        #    WHSInventTable      whsInventTable = WHSInventTable::find(_asnItem.ItemId);
        #    InventTable         inventTable = InventTable::find(_asnItem.ItemId);
        #    UnitOfMeasureSymbol unitID;
        #    str                 ret;
        #    str                 desc1;
        #    str                 desc2;
        #    str                 dimensions;
        #    str                 convertedQty;
        #    EcoResReleasedProductUnitConverter  releasedProductUnitConverter;
        #
        #    if (whsInventTable.rfDescription1)
        #    {
        #        desc1 = '\n        ' + whsInventTable.rfDescription1;
        #    }
        #    if (whsInventTable.rfDescription2)
        #    {
        #        desc2 = '\n        ' + whsInventTable.rfDescription2 + '\n';
        #    }
        #    else
        #    {
        #        desc1 = desc1 + '\n';
        #    }
        #
        #    unitID = InventTableModule::find(inventTable.ItemId, ModuleInventPurchSales::Invent).UnitId;
        #    dimensions = this.generateItemDimension(_asnItem.ItemId, _asnItem.InventDimId);
        #
        #    if (unitID != _asnItem.uom)
        #    {
        #        releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();
        #
        #        convertedQty = strFmt('\n        %1 %2',
        #                              releasedProductUnitConverter.convert(_asnItem.Qty,
        #                                                                   UnitOfMeasure::unitOfMeasureIdBySymbol(_asnItem.uom),
        #                                                                   UnitOfMeasure::unitOfMeasureIdBySymbol(unitID),
        #                                                                   NoYes::No,
        #                                                                   _asnItem.ItemId,
        #                                                                   _asnItem.InventDimId,
        #                                                                   NoYes::No),
        #                              unitID);
        #    }
        #
        #    ret = strFmt("@WAX734",     // Item Id: %1%2%3Qty: %4 %5%6%7
        #                 _asnItem.ItemId,
        #                 desc1,
        #                 desc2,
        #                 _asnItem.Qty,
        #                 _asnItem.uom,
        #                 convertedQty,
        #                 dimensions);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getButtonClicked
        #str getButtonClicked(container _con)
        #{
        #    int     length;
        #    int     i = 3;
        #    str     ret;
        #
        #    length = conLen(_con);
        #
        #    while (i <= length)
        #    {
        #        if (conPeek(conPeek(_con, i), 1) == #RFButton &&
        #            conPeek(conPeek(_con, i), #data) == '1')
        #        {
        #            ret = conPeek(conPeek(_con, i), #name);
        #            break;
        #        }
        #        ++i;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getControlDataFromContainer
        #/// <summary>
        #/// Fetches the data of the control from the container which holds the controls for user display, by the name of the control.
        #/// </summary>
        #/// <param name="_displayCon">
        #/// The container which holds the controls for user display.
        #/// </param>
        #/// <param name="_controlName">
        #/// The name of the build control that needs to be fetched.
        #/// </param>
        #/// <returns>
        #/// The data of the found control in the build container.
        #/// </returns>
        #protected str getControlDataFromContainer(container _displayCon, str _controlName)
        #{
        #    int             controlIndex = this.indexOfBuildControlFromContainer(_displayCon, _controlName);
        #    container       control;
        #    str             ret = '';
        #
        #    if (controlIndex > 0)
        #    {
        #        control = conPeek(_displayCon, controlIndex);
        #        ret = conPeek(control, #IndexOfDataInBuildControl);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getControlLocation
        #/// <summary>
        #///     Get the location of the specified RF control.
        #/// </summary>
        #/// <param name="_con">
        #///     The RF container variable.
        #/// </param>
        #/// <param name="_controlName">
        #///     The name of the RF control.
        #/// </param>
        #/// <returns>
        #///     Returns the location of the specified RF control.
        #/// </returns>
        #protected int getControlLocation(container _con, str _controlName)
        #{
        #    container   ret = _con;
        #    int         conLength;
        #    int         i;
        #    container   controlCon;
        #    int         controlLoc;
        #    str         controlName;
        #
        #    conLength = conLen(ret);
        #
        #    for (i = #FieldControlStartLoc; i <= conLength; i++)
        #    {
        #        controlCon  = conPeek(ret, i);
        #        controlName = conPeek(controlCon, #name);
        #
        #        if (controlName == _controlName)
        #        {
        #            controlLoc = i;
        #            break;
        #        }
        #    }
        #
        #    return controlLoc;
        #}
      ENDSOURCE
      SOURCE #getDefaultBatchDispositionCode
        #/// <summary>
        #///     Gets the default batch disposition code.
        #/// </summary>
        #/// <param name="_itemId">
        #///     The item identifier.
        #/// </param>
        #/// <returns>
        #///     Returns a container identifying the default batch disposition code, as well as whether a blank value should be included in the element dropdown.
        #/// </returns>
        #protected container getDefaultBatchDispositionCode(ItemId _itemId)
        #{
        #    PdsBatchDispositionCode defaultValue;
        #    InventBatchId           inventBatchId;
        #    boolean                 showBlank;
        #    WHSReceiptId            receiptId;
        #
        #    // Determine the inventory batch ID
        #    inventBatchId = this.getInventBatchId();
        #
        #    receiptId = pass.lookupStr(#ReceiptId);
        #
        #    if (WHSInventBatchReceiptDetails::exist(receiptId, _itemId, inventBatchId))
        #    {
        #        defaultValue = WHSInventBatchReceiptDetails::find(receiptId, _itemId, inventBatchId).PdsBatchDispositionCode;
        #    }
        #    else if (InventBatch::exist(_itemId, inventBatchId))
        #    {
        #        defaultValue = InventBatch::find(inventBatchId, _itemId).PdsDispositionCode;
        #    }
        #    else
        #    {
        #        defaultValue = InventModelGroup::find(InventModelGroupItem::findByItemIdLegalEntity(_itemId).ModelGroupId).PdsDispositionCode;
        #    }
        #
        #    // Include a blank value if a batch disposition code could not be defaulted.
        #    if (!defaultValue)
        #    {
        #        showBlank = true;
        #    }
        #
        #    pass.insert(#BatchDispositionDefault, defaultValue);
        #
        #    return [defaultValue, showBlank];
        #}
      ENDSOURCE
      SOURCE #getDefaultDimValue
        #/// <summary>
        #/// Determines if for specified dim criteria there is more than one value for a inventory dimension field in physical inventory.
        #/// </summary>
        #/// <param name="_inventDimCriteria">
        #/// The inventory dimension criteria.
        #/// </param>
        #/// <param name="_dimFieldId">
        #/// The inventory dimension field being evalued for mutilpe values in inventory.
        #/// </param>
        #/// /// <param name="_itemId">
        #/// The Id of the item which we are trying determine if inventory allows defaulting of the next dimension.
        #/// </param>
        #/// <returns>
        #/// A container with the values: <c>InventDim</c> record with the _dimFieldId filled if there is only a single value based on the query;
        #/// otherwise, it returns a blank inventDim. A boolean value to determine if a prompt is needed.
        #/// </returns>
        #protected container getDefaultDimValue(
        #    InventDim   _inventDimCriteria,
        #    FieldId     _dimFieldId,
        #    ItemId      _itemId)
        #{
        #    InventDim               inventDim;
        #    InventDim               returnDim;
        #    Query                   query;
        #    QueryBuildDataSource    qbds;
        #    QueryRun                queryRun;
        #    Counter                 i;
        #
        #    query = new Query();
        #    qbds = query.addDataSource(tableNum(InventDim));
        #    qbds.addGroupByField(_dimFieldId);
        #    InventDim::queryAddRangeCriteria(qbds, _inventDimCriteria);
        #    qbds.addRange(_dimFieldId).value(SysQuery::valueNotEmptyString());
        #    qbds = qbds.addDataSource(tableNum(InventSum));
        #    qbds.addRange(fieldNum(InventSum, ItemId)).value(_itemId);
        #    qbds.relations(true);
        #    qbds.addRange(fieldNum(InventSum, PhysicalInvent)).value(SysQuery::value('>0'));
        #
        #    queryRun = new QueryRun(query);
        #
        #    while (queryRun.next())
        #    {
        #        ++i;
        #        if (i == 2)
        #        {
        #            returnDim.clear();
        #            inventDim.clear();
        #            break;
        #        }
        #        inventDim = queryRun.get(tableNum(InventDim));
        #        returnDim.(_dimFieldId) = inventDim.(_dimFieldId);
        #    }
        #
        #    return [returnDim, i > 1];
        #}
      ENDSOURCE
      SOURCE #getDefaultLPInventStatusId
        #WHSInventStatusId getDefaultLPInventStatusId(WHSLicensePlateId  _licensePlateId)
        #{
        #    InventDim       inventDim;
        #    InventSum       inventSum;
        #
        #    if (_licensePlateId)
        #    {
        #        select firstonly InventStatusId from inventDim
        #            where inventDim.LicensePlateId  == _licensePlateId
        #            &&    inventDim.InventStatusId  != ''
        #            exists join inventSum
        #                where inventDim.InventDimId     == inventSum.InventDimId
        #                &&    inventSum.Closed          == NoYes::No
        #                &&    inventSum.PhysicalInvent   > 0;
        #    }
        #
        #    return inventDim.InventStatusId;
        #}
      ENDSOURCE
      SOURCE #getInventBatchId
        #/// <summary>
        #///     Determines the scanned inventory batch ID.
        #/// </summary>
        #/// <returns>
        #///     Returns the scanned inventory batch ID.
        #/// </returns>
        #protected InventBatchId getInventBatchId()
        #{
        #    InventBatchId   inventBatchId;
        #    InventDim       purchLineInventDim;
        #
        #    purchLineInventDim = PurchLine::find(pass.lookupStr(#PONum), pass.lookupInt64(#POLineNum)).inventDim();
        #
        #    if (purchLineInventDim.InventBatchId)
        #    {
        #        inventBatchId = purchLineInventDim.InventBatchId;
        #    }
        #    else if (pass.hasValue(#SessionBatchId))
        #    {
        #        inventBatchId = pass.lookup(#SessionBatchId);
        #    }
        #    else
        #    {
        #        inventBatchId = pass.lookupStr(#BatchId);
        #    }
        #
        #    return inventBatchId;
        #}
      ENDSOURCE
      SOURCE #getPickHeaderLabel
        #/// <summary>
        #/// Gets a header label for picking operation.
        #/// </summary>
        #/// <param name="_movementStr">
        #/// A specified <c>string</c> which should be used as a header.
        #/// </param>
        #/// <returns>
        #/// A header label for picking operation.
        #/// </returns>
        #public str getPickHeaderLabel(str _movementStr)
        #{
        #    if (pass.exists(#SelectBestLP) && !pass.exists(#LicensePlateId))
        #    {
        #        return strFmt("@SYP4881772", _movementStr) + "\n" + "@SYP4881785";
        #    }
        #    else
        #    {
        #        return strFmt("@WAX1275", _movementStr);
        #    }
        #}
      ENDSOURCE
      SOURCE #getSerialItemQty
        #InventQty getSerialItemQty(WHSLicensePlateId     _licensePlateId = '')
        #{
        #    InventDim   inventDim;
        #    InventSum   inventSum;
        #
        #    select sum(PhysicalInvent) from inventSum
        #        join InventDimId, InventLocationId, wmsLocationId, LicensePlateId from inventDim
        #        where inventSum.InventDimId         == inventDim.InventDimId        &&
        #              inventDim.InventLocationId    == workTable.InventLocationId   &&
        #              inventDim.wmsLocationId       == workLine.wmsLocationId       &&
        #              inventDim.LicensePlateId      == _licensePlateId              &&
        #              inventSum.ItemId              == workLine.ItemId              &&
        #              inventSum.PhysicalInvent       > 0;
        #
        #    // Registering all serials for raw material over picking
        #    if (WHSWorkExecute::isPotentialOverPick(workTable, workLine))
        #    {
        #        return inventSum.PhysicalInvent;
        #    }
        #
        #    return min(workLine.InventQtyRemain, inventSum.PhysicalInvent);
        #}
      ENDSOURCE
      SOURCE #getStep
        #container getStep(container _con, WHSWorkExecuteMode _mode)
        #{
        #    WHSLicensePlateLabelBuild       labelBuild;
        #    WHSWorkExecute                  workExecute = new WHSWorkExecute();
        #    WMSLocation                     location;
        #    container                       con = _con;
        #    container                       ret;
        #    boolean                         recall;
        #    str                             message = '';
        #
        #    location = WMSLocation::find(workLine.wmsLocationId, workTable.InventLocationId);
        #    pass.insert(#WorkId, workLine.WorkId);
        #    pass.insert(#LineNum, workLine.LineNum);
        #    pass.insert(#WMSLocationId, location.wmsLocationId);
        #    pass.insert(#InventDimId, workLine.InventDimId);
        #    pass.insert(#ItemId, workLine.ItemId);
        #    pass.insert(#UOM, workLine.UnitId);
        #    pass.insert(#QtyLeft, workLine.InventQtyRemain);
        #    pass.insert(#QtyWork, workLine.QtyWork);
        #    pass.insert(#InventQtyWork, workLine.InventQtyWork);
        #    pass.insert(#IsLicensePlateControlled, location.whsLocationIsLPControlled());
        #    pass.insert(#IsMultiSKU, WHSWorkTable::find(workLine.WorkId).WorkIsMultiSKU);
        #    pass.insert(#WHSWorkTypeCustomCode, workLine.WorkTypeCustomCode);
        #
        #    if (pass.exists(#WorkComplete) && WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).MenuItemDirectedBy == WHSMenuItemDirectedBy::SystemDirected)
        #    {
        #        ret = conNull();
        #        ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);
        #        pass.remove(#WorkComplete);
        #    }
        #
        #    // Keep values of verificaiton fields if previous step was a partial full.
        #    if (pass.lookupInt64(#prevStep) != #SplitWork)
        #    {
        #        if (pass.exists(#CheckDigit))
        #        {
        #            pass.remove(#CheckDigit);
        #        }
        #        else if (pass.exists(#LocVerification))
        #        {
        #            pass.remove(#LocVerification);
        #        }
        #
        #        if (pass.exists(#ProductConfirmation))
        #        {
        #            pass.remove(#ProductConfirmation);
        #        }
        #
        #        if (pass.exists(#QtyVerification))
        #        {
        #            pass.remove(#QtyVerification);
        #            pass.remove(#FullQty);
        #        }
        #    }
        #
        #    // Empty location for certain puts will no longer display no locaiton screen.
        #    if (!location.wMSLocationId
        #    &&  ((workLine.WorkType       != WHSWorkType::Put
        #    &&    workLine.WorkType       != WHSWorkType::Custom
        #    &&    workLine.WorkType       != WHSWorkType::Print)
        #    ||   (workLine.WorkType       == WHSWorkType::Put
        #    &&    workTable.WorkTransType != WHSWorkTransType::Purch
        #    &&    workTable.WorkTransType != WHSWorkTransType::ProdPut
        #    &&    workTable.WorkTransType != WHSWorkTransType::ProdProcessPut
        #    &&    workTable.WorkTransType != WHSWorkTransType::TransferReceipt
        #    &&    workTable.WorkTransType != WHSWorkTransType::Invent
        #    &&    workTable.WorkTransType != WHSWorkTransType::Replenishment
        #    &&    workTable.WorkTransType != WHSWorkTransType::ReturnOrder
        #    &&    workTable.WorkTransType != WHSWorkTransType::KanbanPut)))
        #    {
        #        ret = this.buildGetLocation(ret);
        #        step = #NoLocation;
        #    }
        #    else
        #    {
        #        switch (workLine.WorkType)
        #        {
        #            case WHSWorkType::Pick:
        #                if ((this.hasComments()                                                     ||
        #                     WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfDisplayPickSummary) &&
        #                    !WHSWorkLine::isPutBefore(workLine.WorkId, workLine.LineNum)            &&
        #                    !pass.exists(#CommentsDisplayed))
        #                {
        #                    ret = this.buildComments(ret);
        #                    step = #RFPickingComment;
        #                }
        #                else
        #                {
        #                    ret = this.buildPick(ret, '');
        #                    step = #Pick;
        #                }
        #                break;
        #
        #            case WHSWorkType::Put:
        #                if (!pass.exists(#GroupPutawayFail)
        #                &&  WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).GroupPutaway
        #                &&  (WHSWorkGrouping::validateGroupPutLocations(pass.lookupStr(#WorkGroupingId))
        #                ||  (workLine.WMSLocationId
        #                &&   this.canGroupRemainingIndividualPutWorkLines(workLine, pass.lookup(#MenuItem)))))
        #                {
        #                    ret = this.buildGroupedPutaway(ret);
        #                    step = #Put;
        #
        #                    if (!pass.exists(#GroupPutaway))
        #                    {
        #                        pass.insert(#GroupPutaway, 1);
        #                    }
        #                    else
        #                    {
        #                        pass.insert(#GroupPutawayConfirm, 1);
        #                    }
        #                }
        #                else
        #                {
        #                    if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).GroupPutaway)
        #                    {
        #                        pass.insert(#GroupPutawayFail, 1);
        #                    }
        #
        #                    ret = this.buildPut(ret, '');
        #                    step = #Put;
        #                }
        #                break;
        #
        #            case WHSWorkType::Custom:
        #                pass.insert(#CustomCode, workLine.WorkTypeCustomCode);
        #                ret = this.buildConfirmScreen(ret, WHSWorkTypeCustom::find(workLine.WorkTypeCustomCode).WorkTypeCustomDesc);
        #                step = #CustomConfirmation;
        #                break;
        #
        #            case WHSWorkType::StatusChange:
        #                if (!WHSWorkTypeStatusChange::find(workLine.statusChangeCode()).PromptUser)
        #                {
        #                    WHSWorkQuarantine::changeLPStatusByWorkLine(workLine, WHSWorkTypeStatusChange::find(workLine.statusChangeCode()).InventStatusId);
        #                    workLine = workExecute.confirmCustomWork(workLine.WorkId, workLine.LineNum, userId);
        #                    ret = this.determineRestart(con);
        #                    if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
        #                    {
        #                        throw error("@WAX1459");
        #                    }
        #                    recall = true;
        #                }
        #                else
        #                {
        #                    step = #StatusChange;
        #                }
        #                break;
        #
        #            case WHSWorkType::Print:
        #                labelBuild = new WHSLicensePlateLabelBuild(workLine.WorkId, workLine, '', userId);
        #                labelBuild.buildLicensePlateLabels();
        #                workLine = workExecute.confirmCustomWork(workLine.WorkId, workLine.LineNum, userId);
        #                ret = this.determineRestart(con);
        #                if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
        #                {
        #                    throw error("@WAX1459");
        #                }
        #                recall = true;
        #                break;
        #
        #            default:
        #                ret = this.addErrorLabel(ret, "@WAX754");
        #                ret = this.buildGetWorkId(ret);
        #                break;
        #        }
        #    }
        #
        #    pass.remove(#DetermineStep);
        #
        #    return [ret, recall];
        #}
      ENDSOURCE
      SOURCE #getWorkExecuteModeFromWorkTransType
        #WHSWorkExecuteMode getWorkExecuteModeFromWorkTransType(
        #    WHSWorkTransType  _workTransType,
        #    WHSLicensePlateId _targetLicensePlateId)
        #{
        #    WHSWorkExecuteMode      workExecuteMode;
        #
        #    switch (_workTransType)
        #    {
        #        case WHSWorkTransType::TransferIssue,
        #             WHSWorkTransType::Sales:
        #            workExecuteMode = WHSWorkExecuteMode::Shipping;
        #            break;
        #
        #        case WHSWorkTransType::Purch, WHSWorkTransType::TransferReceipt:
        #            workExecuteMode = _targetLicensePlateId ? WHSWorkExecuteMode::PurchaseOrderLine : WHSWorkExecuteMode::ASNLicensePlate;
        #            break;
        #
        #        case WHSWorkTransType::ProdPick:
        #            workExecuteMode = WHSWorkExecuteMode::RawMaterialPicking;
        #            break;
        #
        #        case WHSWorkTransType::ProdPut:
        #        case WHSWorkTransType::ProdProcessPut:
        #        case WHSWorkTransType::KanbanPut:
        #            workExecuteMode = WHSWorkExecuteMode::FinishedGoodsPutaway;
        #            break;
        #
        #        case WHSWorkTransType::KanbanPick:
        #            workExecuteMode = WHSWorkExecuteMode::RawMaterialPicking;
        #            break;
        #
        #        case WHSWorkTransType::Invent:
        #        case WHSWorkTransType::CycleCountAccepted:
        #            workExecuteMode = WHSWorkExecuteMode::Movement;
        #            break;
        #
        #        case WHSWorkTransType::Replenishment,
        #             WHSWorkTransType::ReturnOrder:
        #            workExecuteMode = WHSWorkExecuteMode::UserDirected;
        #            break;
        #
        #        default:
        #            throw error("@WAX867");
        #    }
        #
        #    return workExecuteMode;
        #}
      ENDSOURCE
      SOURCE #hasComments
        #boolean hasComments()
        #{
        #    WHSShipmentTable    shipmentTable;
        #    DocuRef             docuRef;
        #    WHSWorkLine         pickLine;
        #    WHSWorkLineCache    cache = WHSWorkLineCache::newFromWorkId(workLine.WorkId);
        #    boolean             ret;
        #    WHSParameters       parameters = WHSParameters::find();
        #
        #    select firstonly RecId from pickLine
        #        where pickLine.LineNum      <  cache.parmFirstPutLineNum() &&
        #              pickLine.WorkId       == workLine.WorkId
        #        exists join shipmentTable
        #            where shipmentTable.ShipmentId == pickLine.ShipmentId
        #        exists join docuRef
        #            where docuRef.RefTableId    == shipmentTable.TableId    &&
        #                  docuRef.RefRecId      == shipmentTable.RecId      &&
        #                  docuRef.RefCompanyId  == shipmentTable.DataAreaId &&
        #                  docuRef.TypeId        == parameters.rfNoteType;
        #
        #    if (pickLine)
        #    {
        #        ret = true;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #hasError
        #int hasError(container _con)
        #{
        #    int     length;
        #    int     ret;
        #    int     i = 3
        #    ;
        #
        #    length = conLen(_con);
        #
        #    while (i <= length)
        #    {
        #        if (conPeek(conPeek(_con, i), #controlType) == #RFLabel &&
        #            conPeek(conPeek(_con, i), #name) == #RFError)
        #        {
        #            ret = 1;
        #            break;
        #        }
        #
        #        ++i;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #indexOfBuildControlFromContainer
        #/// <summary>
        #/// Fetches the ndex of the control from the container which holds the controls for user display, by the name of the control.
        #/// </summary>
        #/// <param name="_displayCon">
        #/// The container which holds the controls for user display.
        #/// </param>
        #/// <param name="_controlName">
        #/// The name of the build control that needs to be fetched.
        #/// </param>
        #/// <returns>
        #/// The index of the found control in the build container.
        #/// </returns>
        #protected int indexOfBuildControlFromContainer(container _displayCon, str _controlName)
        #{
        #    int             ret;
        #    int             counter;
        #    container       control;
        #    str             value;
        #
        #    for (counter = 1; counter <= conLen(_displayCon); counter++)
        #    {
        #        control = conPeek(_displayCon, counter);
        #        value = strFmt("%1", conPeek(control, #IndexOfNameInBuildControl));
        #        if (value == _controlName)
        #        {
        #            ret = counter;
        #            break;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #initInventDimFromPassDimList
        #/// <summary>
        #/// Initializes an <c>InventDim</c> buffer from the current dimensions list.
        #/// </summary>
        #/// <param name="_inventDim">
        #/// The <c>InventDim</c> buffer that should be initialized.
        #/// </param>
        #/// <param name="_dimList">
        #/// The list of dimension field ID's that should be assigned values.
        #/// </param>
        #/// <remarks>
        #/// This method relies on the keys of the pass through map to match inventDim field names.
        #/// </remarks>
        #protected void initInventDimFromPassDimList(
        #    InventDim   _inventDim,
        #    List        _dimList)
        #{
        #    ListEnumerator  enumerator;
        #    FieldName       fieldName;
        #
        #    enumerator = _dimList.getEnumerator();
        #
        #    while (enumerator.moveNext())
        #    {
        #        fieldName = fieldId2name(_inventDim.TableId, enumerator.current());
        #
        #        if (pass.hasValue(fieldName))
        #        {
        #            _inventDim.(enumerator.current()) = pass.lookup(fieldName);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #initVendBatchInfoFields
        #/// <summary>
        #///     Initialize the vendor batch detail fields within the pass.
        #/// </summary>
        #protected void initVendBatchInfoFields()
        #{
        #    InventBatch                     inventBatch;
        #    PurchLine                       purchLine;
        #    WHSInventBatchReceiptDetails    whsInventBatchReceiptDetails;
        #    PdsVendBatchDate                vendBatchDate;
        #    PdsVendExpiryDate               vendExpiryDate;
        #    str                             useVendBatchDate;
        #    str                             useVendExpiryDate;
        #    PdsCountryOfOrigin              countryOfOrigin1;
        #    PdsCountryOfOrigin1             countryOfOrigin2;
        #    PdsVendBatchId                  vendBatchId;
        #    PdsVendBatchInfo                pdsVendBatchInfo;
        #
        #    whsInventBatchReceiptDetails = WHSInventBatchReceiptDetails::find(pass.lookupStr(#ReceiptId), pass.lookupStr(#ItemId), pass.lookupStr(#BatchId));
        #
        #    if (whsInventBatchReceiptDetails.RecId > 0)
        #    {
        #        vendBatchDate       = whsInventBatchReceiptDetails.PdsVendBatchDate;
        #        useVendBatchDate    = enum2str(whsInventBatchReceiptDetails.PdsUseVendBatchDate);
        #        vendExpiryDate      = whsInventBatchReceiptDetails.PdsVendExpiryDate;
        #        useVendExpiryDate   = enum2str(whsInventBatchReceiptDetails.PdsUseVendBatchExp);
        #        countryOfOrigin1    = whsInventBatchReceiptDetails.PdsCountryOfOrigin1;
        #        countryOfOrigin2    = whsInventBatchReceiptDetails.PdsCountryOfOrigin2;
        #        vendBatchId         = whsInventBatchReceiptDetails.PdsVendBatchId;
        #    }
        #    else
        #    {
        #        inventBatch = InventBatch::find(pass.lookupStr(#BatchId), pass.lookupStr(#ItemId));
        #
        #        if (inventBatch.RecId > 0)
        #        {
        #            vendBatchDate       = inventBatch.PdsVendBatchDate;
        #            useVendBatchDate    = enum2str(inventBatch.PdsUseVendBatchDate);
        #            vendExpiryDate      = inventBatch.PdsVendExpiryDate;
        #            useVendExpiryDate   = enum2str(inventBatch.PdsUseVendBatchExp);
        #            countryOfOrigin1    = inventBatch.PdsCountryOfOrigin1;
        #            countryOfOrigin2    = inventBatch.PdsCountryOfOrigin2;
        #            vendBatchId         = inventBatch.PdsVendBatchId;
        #        }
        #        else
        #        {
        #            purchLine           = PurchLine::find(pass.lookupStr(#PONum), pass.lookupInt64(#POLineNum));
        #            pdsVendBatchInfo    = PdsVendBatchInfo::findByRefRecId(purchLine.RecId);
        #
        #            if (pdsVendBatchInfo.RecId > 0)
        #            {
        #                vendBatchDate       = pdsVendBatchInfo.VendBatchDate;
        #                useVendBatchDate    = enum2str(pdsVendBatchInfo.UseVendBatchDate);
        #                vendExpiryDate      = pdsVendBatchInfo.VendExpiryDate;
        #                useVendExpiryDate   = enum2str(pdsVendBatchInfo.UseVendBatchExp);
        #                countryOfOrigin1    = pdsVendBatchInfo.CountryOfOrigin1;
        #                countryOfOrigin2    = pdsVendBatchInfo.CountryOfOrigin2;
        #                vendBatchId         = pdsVendBatchInfo.VendBatchId;
        #            }
        #        }
        #    }
        #
        #    pass.insert(#VendBatchDate, vendBatchDate);
        #    pass.insert(#UseVendBatchDate, useVendBatchDate);
        #    pass.insert(#VendExpDate, vendExpiryDate);
        #    pass.insert(#UseVendExpDate, useVendExpiryDate);
        #    pass.insert(#CountryOfOrigin1, countryOfOrigin1);
        #    pass.insert(#CountryOfOrigin2, countryOfOrigin2);
        #    pass.insert(#VendBatchId, vendBatchId);
        #}
      ENDSOURCE
      SOURCE #isOnHandGreaterThanDemand
        #/// <summary>
        #/// Method determines if on hand inventory for specific dimension set is greater than current work demand.
        #/// </summary>
        #/// <param name="_inventDim">
        #/// The dimension set used for finding on hand inventory
        #/// </param>
        #/// <param name="_itemId">
        #/// The Id of the item which we are evaluating on hand inventory.
        #/// </param>
        #/// <param name="_qtyToBePicked">
        #/// The qty remaining to be picked.
        #/// </param>
        #/// <returns>
        #/// true if on hand inventory is greater than work demand; otherwise false
        #/// </returns>
        #private boolean isOnHandGreaterThanDemand(
        #    InventDim   _inventDim,
        #    ItemId      _itemId,
        #    InventQty   _qtyToBePicked)
        #{
        #    InventDim   inventDim = _inventDim;
        #
        #    inventDim = InventDim::findOrCreate(inventDim);
        #
        #    return WHSInventOnHand::getWorkPhysicalInvent(_itemId, inventDim.InventDimId) > _qtyToBePicked;
        #}
      ENDSOURCE
      SOURCE #itemRequiresManualDimTracking
        #private boolean itemRequiresManualDimTracking(
        #    InventTable                 _inventTable,
        #    InventTrackingDimType       _type           = InventTrackingDimType::Batch)
        #{
        #    boolean         ret = true;
        #
        #    switch (_type)
        #    {
        #        case InventTrackingDimType::Batch:
        #            if (_inventTable.BatchNumGroupId != '' && !InventNumGroup::find(_inventTable.BatchNumGroupId).ManualAllocation)
        #            {
        #                ret = false;
        #            }
        #            break;
        #        case InventTrackingDimType::Serial:
        #            if (_inventTable.SerialNumGroupId != '' && !InventNumGroup::find(_inventTable.SerialNumGroupId).ManualAllocation)
        #            {
        #                ret = false;
        #            }
        #            break;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #mustCaptureSerialOnReceipt
        #/// <summary>
        #/// Determines whether the given item needs to have serial numbers specified during receiving.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The item currently being received via the RF device.
        #/// </param>
        #/// <returns>
        #/// True, if the serial number needs to be captured on receipt; otherwise False.
        #/// </returns>
        #/// <remarks>
        #/// The capture of the tracking dimensions should only be triggered in case the
        #/// <c>InventNumGroup</c> record requires an id to be manually provided, or, during a
        #/// physical update.
        #/// </remarks>
        #protected boolean mustCaptureSerialOnReceipt(ItemId _itemId)
        #{
        #    return WHSInventTable::captureSerial(_itemId) == WHSRFWhenToCapture::Receiving;
        #}
      ENDSOURCE
      SOURCE #mustCaptureSerialOnReceiptInCurrentFlow
        #/// <summary>
        #/// Determines whether the given item needs to have serial numbers specified during receiving
        #/// in case they have not been specified yet in the pass object.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The item currently being received via the RF device.
        #/// </param>
        #/// <returns>
        #/// True, if the serial number has not been set yet and needs to be captured on receipt; otherwise False.
        #/// </returns>
        #protected boolean mustCaptureSerialOnReceiptInCurrentFlow(ItemId _itemId)
        #{
        #    boolean ret;
        #
        #    if (!pass.lookupStr(#SerialId))
        #    {
        #        ret = this.mustCaptureSerialOnReceipt(_itemId);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #populateAutoTrackingDim
        #/// <summary>
        #/// Populates the passthrough variable with an auto-generated batch or serial number.
        #/// </summary>
        #/// <param name="_type">
        #/// The tracking type in the dimension - Batch or Serial.
        #/// generated.
        #/// </param>
        #/// <param name="_itemId">
        #/// The item for which the tracking number is to be generated.
        #/// </param>
        #/// <param name="_transRefId">
        #/// The InventTransRefId for which the tracking number is to be generated.
        #/// </param>
        #/// <param name="_transId">
        #/// The InventTransId for which the tracking number is to be generated.
        #/// </param>
        #/// <param name="_transType">
        #/// The <c>InventTransType</c> associated; optional.
        #/// </param>
        #/// <returns>
        #/// True if a new tracking id was set on pass; otherwise, false.
        #/// </returns>
        #protected boolean populateAutoTrackingDim(
        #    InventTrackingDimType    _type,
        #    ItemId                   _itemId,
        #    InventTransRefId         _transRefId,
        #    InventTransId            _transId,
        #    InventTransType          _transType = InventTransType::Purch)
        #{
        #    InventTable                 inventTable;
        #    InventNumGroup              inventNumGroup;
        #    anytype                     trackingTypeKey;
        #    ExtendedTypeId              trackingExtType;
        #    boolean                     generateNewId = false;
        #    str                         generatedId;
        #
        #    inventTable = InventTable::find(_itemId);
        #    switch (_type)
        #    {
        #        case InventTrackingDimType::Batch:
        #            inventNumGroup = InventNumGroup::find(inventTable.BatchNumGroupId);
        #            trackingTypeKey = #BatchId;
        #            trackingExtType = extendedTypeNum(InventBatchId);
        #            break;
        #        case InventTrackingDimType::Serial:
        #            inventNumGroup = InventNumGroup::find(inventTable.SerialNumGroupId);
        #            trackingTypeKey = #SerialId;
        #            trackingExtType = extendedTypeNum(InventSerialId);
        #            break;
        #        default:
        #            return false;
        #    }
        #
        #    generateNewId =
        #        !this.itemRequiresManualDimTracking(inventTable, _type)
        #        && inventNumGroup.isTransTypeActivated(_transType)
        #        && inventNumGroup.OnlyInventTransaction ? inventNumGroup.PhysicalUpdate : false;
        #
        #    if (!generateNewId)
        #    {
        #        return false;
        #    }
        #
        #    // generate a tracking number from the number series
        #
        #    generatedId = inventNumGroup.buildNumberParameters(today(),
        #                                           _transRefId,
        #                                           _transId,
        #                                           trackingExtType);
        #
        #    pass.insert(trackingTypeKey, generatedId);
        #
        #    if (trackingTypeKey == #BatchId)
        #    {
        #        pass.insert(#AutoGeneratedBatchId, generatedId);
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #populateItemBatchReceiptDetails
        #/// <summary>
        #///     Populates the <c>WHSInventBatchReceiptDetails</c> table with details from the received batch.
        #/// </summary>
        #protected void populateItemBatchReceiptDetails()
        #{
        #    WHSInventBatchReceiptDetails    whsInventBatchReceiptDetails;
        #    InventTable                     inventTable;
        #
        #    ttsbegin;
        #
        #    inventTable = InventTable::find(pass.lookup(#ItemId));
        #
        #    whsInventBatchReceiptDetails = WHSInventBatchReceiptDetails::find(pass.lookup(#ReceiptId), inventTable.ItemId, pass.lookup(#BatchId), true);
        #
        #    if (whsInventBatchReceiptDetails.RecId == 0)
        #    {
        #        whsInventBatchReceiptDetails.ReceiptId      = pass.lookup(#ReceiptId);
        #        whsInventBatchReceiptDetails.ItemId         = inventTable.ItemId;
        #        whsInventBatchReceiptDetails.InventBatchId  = pass.lookup(#BatchId);
        #    }
        #
        #    // For shelf life items, the expiration date will be calculated at registration.
        #    if (!inventTable.isShelfLifeItem())
        #    {
        #        // Exp date is not filled up when batch id has been automatically populated.
        #        if (pass.exists(#ExpDate))
        #        {
        #            whsInventBatchReceiptDetails.ExpDate = WHSRFControlData::convertDateFormatStr2Date(pass.lookup(#ExpDate));
        #
        #        }
        #    }
        #
        #    if (pass.exists(#VendBatchInfoEntered))
        #    {
        #        whsInventBatchReceiptDetails.PdsVendBatchDate       = WHSRFControlData::convertDateFormatStr2Date(pass.lookup(#VendBatchDate));
        #        whsInventBatchReceiptDetails.PdsUseVendBatchDate    = pass.lookup(#UseVendBatchDate) == enum2str(NoYes::Yes) ? NoYes::Yes : NoYes::No;
        #        whsInventBatchReceiptDetails.PdsVendExpiryDate      = WHSRFControlData::convertDateFormatStr2Date(pass.lookup(#VendExpDate));
        #        whsInventBatchReceiptDetails.PdsUseVendBatchExp     = pass.lookup(#UseVendExpDate) == enum2str(NoYes::Yes) ? NoYes::Yes : NoYes::No;
        #        whsInventBatchReceiptDetails.PdsCountryOfOrigin1    = pass.lookup(#CountryOfOrigin1);
        #        whsInventBatchReceiptDetails.PdsCountryOfOrigin2    = pass.lookup(#CountryOfOrigin2);
        #        whsInventBatchReceiptDetails.PdsVendBatchId         = pass.lookup(#VendBatchId);
        #    }
        #
        #    whsInventBatchReceiptDetails.PdsPotencyBaseValue        = pass.lookupStr(#Potency);
        #    whsInventBatchReceiptDetails.PdsBatchDispositionCode    = pass.lookupStr(#BatchDisposition);
        #
        #    whsInventBatchReceiptDetails.write();
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #processFieldValues
        #container processFieldValues(container _con, WHSRFPassthrough _fieldValues)
        #{
        #    str         value;
        #    boolean     complete = true;
        #    container   con = _con;
        #    str         controlType;
        #    str         name;
        #    int         length;
        #    int         i;
        #    int         enabled;
        #    container   subCon;
        #
        #    length = conLen(con);
        #
        #    for (i = 1; i <= length; ++i)
        #    {
        #        subCon = conPeek(con, i);
        #        controlType = conPeek(subCon, #controlType);
        #
        #        if (controlType == #RFText      ||
        #            controlType == #RFPassword)
        #        {
        #            name = conPeek(subCon, #name);
        #
        #            if (_fieldValues.exists(name))
        #            {
        #                con = conPoke(con, i, conPoke(subCon, #data, _fieldValues.lookup(name)));
        #
        #                value   = _fieldValues.lookup(name);
        #                enabled = conPeek(subCon, #enabled);
        #
        #                if (!value
        #                &&  enabled)
        #                {
        #                    complete = false;
        #                }
        #            }
        #        }
        #        else if (controlType == #RFComboBox && conPeek(subCon, #data) == '' && conPeek(conPeek(con,i), #selected) == '')
        #        {
        #            name    = conPeek(subCon, #name);
        #            enabled = conPeek(subCon, #enabled);
        #
        #            if (name    != #Disposition
        #            &&  name    != #InventoryStatus
        #            &&  enabled)
        #            {
        #                complete = false;
        #            }
        #        }
        #    }
        #
        #    return [con, complete];
        #}
      ENDSOURCE
      SOURCE #processTrackingDimDetails
        #/// <summary>
        #/// Processes input gathered from the tracking details RF screen.
        #/// </summary>
        #/// <param name="_nextStep">
        #/// The next step to return the caller to, once the processing has been completed.
        #/// </param>
        #/// <param name="_hasError">
        #/// A boolean indicating if an error was passed on from the previous run.
        #/// </param>
        #/// <param name="_con">
        #/// The display container having the input data which was passed to the caller.
        #/// </param>
        #/// <param name="_fieldValues">
        #/// The <c>WHSRFPassthrough</c> instance with the values of the input fields from the first step onwards.
        #/// </param>
        #/// <param name="_startInfologLine">
        #/// The starting line from which to retrieve the infolog message.
        #/// </param>
        #/// <param name="_addCancel">
        #/// The boolean indicating if the Cancel button should be added and has been pre-set by the caller.
        #/// </param>
        #/// <returns>
        #/// A container having the following fields,
        #/// <list>
        #/// <item>a boolean which indicates if an error occured, </item>
        #/// <item>the container having the controls for the next step, </item>
        #/// <item>and a boolean indicating if the Cancel button should be displayed. </item>
        #/// </list>
        #/// </returns>
        #protected container processTrackingDimDetails(
        #    int                         _nextStep,
        #    boolean                     _hasError,
        #    container                   _con,
        #    WHSRFPassthrough            _fieldValues,
        #    int                         _startInfologLine,
        #    boolean                     _addCancel)
        #{
        #    boolean                     hasError = _hasError;
        #    container                   ret;
        #    container                   tmpFieldValues;
        #    boolean                     inventBatchChanged;
        #    boolean                     complete;
        #    InventDim                   trackingInventDim;
        #    InventQty                   dimInventQty;
        #    //////////////////////////////////////////////////////
        #    InventQty                   BatchQty;
        #    ItemId                      ItemId;
        #    VendProdCode                VendProdCode;
        #    InventBatchId               ExistedBatchId;
        #    //////////////////////////////////////////////////////
        #    boolean                     trackingDimHasBeenSet;
        #    real                        currentDimQty;
        #    InventDimParm               trackingDimsToRemove;
        #
        #
        #    try
        #    {
        #        if (hasError)
        #        {
        #            _con = conDel(_con, #IndexOfErrorControlInContainer, 1);
        #        }
        #        [_con, tmpFieldValues] = WHSRFControlData::processData(_con, pass);
        #        _fieldValues = WHSRFPassthrough::create(tmpFieldValues);
        #
        #        // Check to see whether the batch ID has been changed
        #        inventBatchChanged = this.fieldValueChanged(_fieldValues, #BatchId);
        #
        #        pass = this.combineMaps(pass, _fieldValues);
        #        hasError = this.hasError(_con);
        #
        #        if (hasError)
        #        {
        #            ret = _con;
        #            ret = this.rebuildDimUOM(ret, false);
        #            ret = this.rebuildBatchDisposition(ret);
        #            return [true, ret, _addCancel];
        #        }
        #
        #        currentDimQty = pass.lookupNum(#DimQty);
        #        _con = this.buildPORecTrackingDimensions(ret, pass.lookup(#ItemId), pass.lookupNum(#DimQty));
        #        [trackingDimHasBeenSet, _con] = this.setBatchDetails(_con);
        #        // do not continue further if the quantity to track is less than requested
        #        if (!trackingDimHasBeenSet
        #            || WHSWorkExecuteDisplay::str2numDisplay(this.getControlDataFromContainer(_con, #DimQty)) < currentDimQty)
        #        {
        #            return [false, _con];
        #        }
        #
        #        if (!_fieldValues.empty())
        #        {
        #            [ret, complete] = this.processFieldValues(_con, _fieldValues);
        #
        #            ///Get Batch Qty from Scanned Batch ID
        #            BatchQty = AZ_BatchConfig::GetBatchQty(Pass.lookup(#BatchId),InventTable::find(Pass.lookup(#ItemId),false).BarcodeConfigId);
        #            VendProdCode = AZ_BatchConfig::GetProductCode(Pass.lookup(#BatchId),InventTable::find(Pass.lookup(#ItemId),false).BarcodeConfigId);
        #
        #            if (VendProdCode != InventTable::find(Pass.lookup(#ItemId),false).VendProdCode)
        #            {
        #                throw error("Batch Validation : Invalid Product Code!");
        #            }
        #
        #            if (BatchQty > 0)
        #            {
        #                Pass.insert(#DimQty,BatchQty);
        #            }
        #
        #            // Check whether or not the batch ID has been changed
        #            // cannot scanned the batch label twice
        #
        #           // if (inventBatchChanged == true)
        #           // {
        #            //    throw error("Batch label is already exist or scanned");
        #           // }
        #
        #            if ((pass.exists(#SessionBatchId)
        #                && pass.exists(#BatchId)
        #                && pass.lookup(#SessionBatchId) != pass.lookup(#BatchId))
        #                || inventBatchChanged)
        #            {
        #                complete = false;
        #                pass.remove(#ExpDate);
        #                pass.insert(#SessionBatchId, pass.lookup(#BatchId));
        #
        #                // If the batch ID changes, remove the default disposition code.
        #                if (pass.exists(#BatchDispositionDefault))
        #                {
        #                    pass.remove(#BatchDispositionDefault);
        #                }
        #
        #                ret = conNull();
        #                // Defaulting the UI to the remaining quantity and picking its unit of measure
        #                pass.insert(#DimUOM, InventTableModule::find(pass.lookup(#ItemId), ModuleInventPurchSales::Invent).UnitId);
        #                ret = this.buildPORecTrackingDimensions(ret, pass.lookup(#ItemId), pass.lookupNum(#DimRunningQty));
        #            }
        #
        #            if (complete && !pass.exists(#DisplayBatch))
        #            {
        #                // Capture vendor batch details, if necessary.
        #                if (!pass.exists(#VendBatchInfoEntered)
        #                &&  InventModelGroup::find(InventModelGroupItem::findByItemIdLegalEntity(pass.lookup(#ItemId)).ModelGroupId).PdsReqVendBatchDetail)
        #                {
        #                    step = #VendBatchDetailsStep;
        #
        #                    this.initVendBatchInfoFields();
        #
        #                    pass.insert(#VendBatchAttemptNo, 1);
        #
        #                    ret = conNull();
        #                    ret = this.buildGetVendBatchDetails(ret);
        #
        #                    return [false, ret, _addCancel];
        #                }
        #
        #                trackingInventDim = pass.createInventDimFromPass();
        #                trackingInventDim.wmsLocationId = InventLocation::find(trackingInventDim.InventLocationId).wmsLocationIdDefaultReceipt;
        #                trackingInventDim = InventDim::findOrCreate(trackingInventDim);
        #
        #                dimInventQty = InventTableModule::unitConvert(pass.lookup(#ItemId),
        #                                                              ModuleInventPurchSales::Invent,
        #                                                              pass.lookup(#DimUOM),
        #                                                              pass.lookupNum(#DimQty),
        #                                                              trackingInventDim.InventDimId);
        #
        #                // The system should not allow the user to enter more than the expected quantity per LP
        #                if ((pass.lookupNum(#DimRunningQty) - dimInventQty) < 0 )
        #                {
        #                    throw error("@WAX2142"); // Cannot over recieve
        #                }
        #
        #                // Build the inventory batch receipt details record if capturing batch.
        #                if (trackingInventDim.InventBatchId)
        #                {
        #                    this.populateItemBatchReceiptDetails();
        #                }
        #
        #                //insert or update receiving record when we have all dimensions
        #                //we are only supporting a flow where serial is captured after batch. Other tracking dimensions will have to be handled specifically.
        #                #InventDimDevelop
        #
        #                if (dimInventQty && !this.mustCaptureSerialOnReceiptInCurrentFlow(pass.lookup(#ItemId)))
        #                {
        #                    WHSReceiptDetails::createOrUpdateReceiptDetails(pass.lookup(#ReceiptId), trackingInventDim.InventDimId, dimInventQty);
        #                }
        #
        #                pass.insert(#DimRunningQty, pass.lookupNum(#DimRunningQty) - dimInventQty);
        #
        #                // Dimensions specified for all license plate qty
        #                if (pass.lookupNum(#DimRunningQty) == 0 || Pass.lookup(#LastBox) == "Yes")
        #                {
        #
        #                    // Overwrite the Running Qty in LP if it is the last box and still have remaining Qty
        #                    pass.insert(#DimRunningQty, 0);
        #
        #
        #                    // When moving to the previous step, validate the selected value rather than the element string.
        #                    if (this.displayBatchDisposition())
        #                    {
        #                        pass.insert(#UseSelectedBatchDispCode, 1);
        #                    }
        #
        #                    // Skip the potency validation during the next step.
        #                    if (this.capturePotency())
        #                    {
        #                        pass.insert(#SkipPotencyValidation, 1);
        #                    }
        #
        #                    // if item requires manual batch entry, remove entered fields.
        #                    if (this.itemRequiresManualDimTracking(InventTable::find(pass.lookup(#ItemId))))
        #                    {
        #                        pass.remove(#BatchId);
        #                        ret = this.deleteControlDataFromContainer(ret, #BatchId);
        #
        #                        pass.remove(#ExpDate);
        #                        ret = this.deleteControlDataFromContainer(ret, #ExpDate);
        #
        #                        pass.remove(#VendBatchInfoEntered);
        #                        ret = this.deleteControlDataFromContainer(ret, #VendBatchInfoEntered);
        #                    }
        #
        #                    //we are done filling up this lp so clear the serial for the next lp
        #                    pass.remove(#serialId);
        #
        #                    step = _nextStep;
        #                    ret = this.updateModeStepPass(ret, mode, step, pass);
        #                    ret = this.displayForm(ret);
        #                }
        #                else if (str2num(pass.lookup(#DimRunningQty)) > 0)
        #                {
        #                    if (pass.lookupStr(#DimQty) && !this.mustCaptureSerialOnReceiptInCurrentFlow(pass.lookup(#ItemId)))
        #                    {
        #                        trackingDimsToRemove.setAllTrackingDimensions();
        #
        #                        //For batch/serial enabled items, it needs to be possible to add more serials on the same batch.
        #                        //If the batch is auto generated, it can be only one for all the receiving quantity and we need to keep it between the different displays.
        #                        if (pass.lookupStr(#BatchId)
        #                            && this.mustCaptureSerialOnReceipt(pass.lookup(#ItemId))
        #                            && !this.itemRequiresManualDimTracking(InventTable::find(pass.lookup(#ItemId)), InventTrackingDimType::Batch))
        #                        {
        #                            trackingDimsToRemove.InventBatchIdFlag = NoYes::No;
        #                        }
        #
        #                        this.removeTrackingDimensionsFromPass(pass.lookup(#ItemId), trackingDimsToRemove);
        #                        pass.remove(#DimQty);
        #                        pass.insert(#DimUOM, InventTableModule::find(pass.lookup(#ItemId), ModuleInventPurchSales::Invent).UnitId);
        #
        #                        if (trackingDimsToRemove.InventBatchIdFlag == NoYes::Yes)
        #                        {
        #                            pass.remove(#SessionBatchId);
        #
        #                            // If we are receiving a multi-batch LP, remove the flag indicating that vendor batch details have aleady been entered prior to moving on to the next batch.
        #                            pass.remove(#VendBatchInfoEntered);
        #
        #                            // If we are receiving a multi-batch LP, reset the selected batch disposition code prior to moving on to the next batch.
        #                            if (this.displayBatchDisposition())
        #                            {
        #                                pass.insert(#ResetBatchDisposition, 1);
        #                            }
        #                        }
        #
        #                        ret = conNull();
        #                        ret = this.buildPORecTrackingDimensions(ret, pass.lookup(#ItemId), pass.lookupNum(#DimRunningQty));
        #                    }
        #
        #                }
        #            }
        #
        #            if (pass.exists(#DisplayBatch))
        #            {
        #                pass.remove(#DisplayBatch);
        #            }
        #        }
        #    }
        #    catch
        #    {
        #        ret = conNull();
        #        ret = this.addErrorLabelFromInfolog(ret, _startInfologLine, WHSRFColorText::Error);
        #        ret = this.buildPORecTrackingDimensions(ret, pass.lookup(#ItemId), pass.lookupNum(#DimQty));
        #        ret = this.resetButtonClicked(ret);
        #
        #        _addCancel = false;
        #    }
        #
        #    return [false, ret, _addCancel];
        #}
      ENDSOURCE
      SOURCE #processVendorBatchDetails
        #/// <summary>
        #/// Processes input gathered from the vendor batch details RF screen.
        #/// </summary>
        #/// <param name="_hasError">
        #/// A boolean indicating if an error was passed on from the previous run.
        #/// </param>
        #/// <param name="_con">
        #/// The display container having the input data which was passed to the caller.
        #/// </param>
        #/// <param name="_fieldValues">
        #/// The <c>WHSRFPassthrough</c> instance with the values of the input fields from the first step onwards.
        #/// </param>
        #/// <returns>
        #/// A container having the following fields,
        #/// <list>
        #/// <item>a boolean which indicates if an error occured,</item>
        #/// <item>and the container having the controls for the next step.</item>
        #/// </list>
        #/// </returns>
        #protected container processVendorBatchDetails(
        #    boolean                     _hasError,
        #    container                   _con,
        #    WHSRFPassthrough            _fieldValues)
        #{
        #    boolean                     hasError = _hasError;
        #    container                   ret;
        #    container                   tmpFieldValues;
        #    int                         attemptNum = 1;
        #    boolean                     complete;
        #
        #    if (_hasError)
        #    {
        #        _con = conDel(_con, #RFErrorLoc, 1);
        #    }
        #
        #    [_con, tmpFieldValues] = WHSRFControlData::processData(_con, pass);
        #    _fieldValues = WHSRFPassthrough::create(tmpFieldValues);
        #    pass = this.combineMaps(pass, _fieldValues);
        #    hasError = this.hasError(_con);
        #
        #    if (hasError)
        #    {
        #        ret = _con;
        #        ret = this.rebuildUseVendBatchDates(ret);
        #        return [true, ret];
        #    }
        #
        #    _con = this.buildGetVendBatchDetails(ret);
        #
        #    if (!_fieldValues.empty())
        #    {
        #        attemptNum = pass.lookup(#VendBatchAttemptNo);
        #
        #        [ret, complete] = this.processFieldValues(_con, _fieldValues);
        #
        #        // If all vendor batch information has been entered, or the maximum number of attempts has been reached, revert back to step 3.
        #        if ((complete
        #            &&   pass.lookup(#UseVendBatchDate) != ''
        #            &&   pass.lookup(#UseVendExpDate)   != '')
        #            ||  (!pass.exists(#Initiation)
        #            &&   attemptNum                     == #MaxVendBatchAttempts))
        #        {
        #            pass.insert(#VendBatchInfoEntered, 1);
        #
        #            // When moving to the previous step, validate the selected value rather than the element string.
        #            if (this.displayBatchDisposition())
        #            {
        #                pass.insert(#UseSelectedBatchDispCode, 1);
        #            }
        #
        #            pass.insert(#UseSelectedDimUOM, 1);
        #
        #            // Skip the potency validation during the next step.
        #            if (this.capturePotency())
        #            {
        #                pass.insert(#SkipPotencyValidation, 1);
        #            }
        #
        #            step = #TrackingDimDetailsStep;
        #
        #            ret = conNull();
        #            ret = this.buildPORecTrackingDimensions(ret, pass.lookup(#ItemId), pass.lookupNum(#DimQty));
        #            ret = this.updateModeStepPass(ret, mode, step, pass);
        #            ret = this.displayForm(ret);
        #        }
        #        // If the vendor batch details form is not complete, but data has been entered, reset the number of attempts and display the form again.
        #        else if (pass.exists(#Initiation))
        #        {
        #            pass.remove(#Initiation);
        #
        #            if (attemptNum != 1)
        #            {
        #                pass.insert(#VendBatchAttemptNo, 1);
        #            }
        #        }
        #        // If no data has been added or changed, display a warning to the user that fields have been left blank.
        #        else
        #        {
        #            ret = conNull();
        #            ret = this.addErrorLabel(ret, "@WAX5514", WHSRFColorText::Warning);
        #            ret = this.buildGetVendBatchDetails(ret);
        #
        #            attemptNum++;
        #
        #            pass.insert(#VendBatchAttemptNo, attemptNum);
        #        }
        #    }
        #
        #    return [false, ret];
        #}
        #
      ENDSOURCE
      SOURCE #processWorkLine
        #container processWorkLine(WHSWorkLine           _workLine,
        #                          container             _con,
        #                          WHSWorkExecuteMode    _mode,
        #                          int                   _step,
        #                          WHSUserId             _userId,
        #                          WMSLocationId         _newLocationId = '',
        #                          str                   _buttonClicked = '',
        #                          boolean               _looping = true)
        #{
        #    WMSLocationId                   locationId;
        #    WHSLicensePlateLabelBuild       labelBuild;
        #    WHSWorkExecute                  workExecute = new WHSWorkExecute();
        #    container                       ret = conNull();
        #    container                       con = _con;
        #    int                             prevStep = _step;
        #    int                             hasError = 0;
        #    boolean                         recall;
        #    container                       tmpFieldValues;
        #    boolean                         complete;
        #    boolean                         isPutBefore;
        #    Map                             fieldValues = new Map(Types::String, Types::String);
        #    Map                             globalPass;
        #    WHSWorkId                       tmpWorkId;
        #    WHSWorkGroupingId               groupingId;
        #    WHSWorkLine                     preWorkLine = workLine;
        #    WHSWorkLine                     tmpWorkLine;
        #    WHSWorkLineCustom               workLineCustom;
        #    WHSParameters                   parameters;
        #    WHSToteReuseTable               toteReuseTable;
        #    WHSWorkGrouping                 workGrouping;
        #    WHSAnchor                       anchor;
        #    WHSCycleCountThresholdId        cycleCountThresholdId;
        #    WHSWorkId                       cycleCountWorkId;
        #    WHSWorkExecuteDisplayCycleCount workExecuteDisplayCycleCount;
        #    boolean                         groupPutawayFail;
        #    WHSAuditSeqNum                  auditSeqNum;
        #    boolean                         auditComplete;
        #    boolean                         mustCaptureMoreDims;
        #    WHSWorkAuditTemplateLine        workAuditTemplateLine;
        #    WHSWorkAuditCaptureData         workAuditCaptureData;
        #    WHSTargetLicensePlateId         targetLicensePlateId;
        #    int                             startInfologLine;
        #    WHSRFMenuItemTable              menuItemTable;
        #    WHSOverrideTargetLP             overrideTargetLP;
        #    WHSWorkTypeCustom               workTypeCustom;
        #    WHSData                         data;
        #    str                             validateUserDirectField;
        #    WHSRFPassthrough                prevPass;
        #    InventDim                       inventDim;
        #    ItemId                          itemId;
        #
        #    globalPass = pass;
        #    pass = WHSRFPassthrough::create(conPeek(_con, 2));
        #    pass = this.combineMaps(globalPass, pass);
        #
        #    if (pass.exists(#AutoConfirm))
        #    {
        #        pass.remove(#AutoConfirm);
        #    }
        #
        #    if (pass.exists(#MenuItem))
        #    {
        #        menuItemTable = WHSRFMenuItemTable::find(pass.lookup(#MenuItem));
        #
        #        anchor = menuItemTable.Anchor;
        #        overrideTargetLP = menuItemTable.OverrideTargetLP;
        #        if (WHSRFAutoConfirm::isVerifyQtyConfirmationEnabled(menuItemTable.MenuItemName, WHSWorkType::Pick))
        #        {
        #            pass.insert(#PickQtyConfirmationEnabled, '1');
        #        }
        #    }
        #
        #    if (workLine.isFirstWorkLine()                          &&
        #        (!pass.exists(#AuditWorkId)                         ||
        #         pass.lookup(#AuditWorkId) != workLine.WorkId)   &&
        #        WHSWorkAuditTemplateTable::evaluateWorkAuditBreak(WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).WorkAuditTemplateId,
        #                                                          workTable,
        #                                                          pass.lookup(#MenuItem),
        #                                                          WHSAuditBreakEvent::Prior,
        #                                                          pass.lookupStr(#WorkGroupingId)))
        #    {
        #        if (pass.exists(#DetermineStep))
        #        {
        #            pass.remove(#DetermineStep);
        #        }
        #
        #        step  = #WorkAuditTemplate;
        #        recall = true;
        #        pass.insert(#AuditWorkId, workLine.WorkId);
        #    }
        #
        #    if (workLine.isFirstWorkLine() && _looping)
        #    {
        #        workExecute.updateWorkStatus(workLine.WorkId, workLine.LineNum, userId);
        #        step = conPeek(conPeek(ret, 1), 2);
        #        pass = new WHSRFPassthrough(Types::String, Types::String);
        #        pass = WHSRFPassthrough::create(conPeek(ret, 2));
        #    }
        #    else if (pass.exists(#DetermineStep))
        #    {
        #        workExecute.updateWorkStatus(workLine.WorkId, workLine.LineNum, userId);
        #        [ret, recall] = this.getStep(con, _mode);
        #        pass.insert(#AutoConfirm, 1);
        #    }
        #    else
        #    {
        #        hasError = this.hasError(con);
        #
        #        if (step)
        #        {
        #            try
        #            {
        #                startInfologLine = infologLine() + 1;
        #                if (hasError)
        #                {
        #                    con = conDel(con, 3, 1);
        #                    con = this.clearErrors(con);
        #                }
        #
        #                if (step != #OverrideStep1 && step != #OverrideStep2 && step != #NoLocation &&
        #                    step != #ReceivingExceptionStep1 && step != #ReceivingExceptionStep2    &&
        #                    step != #SplitWork && step != #ShortPick && step != #ShortPickConf      &&
        #                    step != #RFPickingComment && step != #AssignSerialStep && step != #WorkAuditTemplate &&
        #                    step != #SplitPutWork && _buttonClicked != #RFNoLocation && _buttonClicked != #RFOverrideLP)
        #                {
        #                    if (step == #Pick)
        #                    {
        #                        if (!this.validateNonSerialInventory(workLine))
        #                        {
        #                            throw error("@WAX5563");
        #                        }
        #                    }
        #
        #                    [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
        #                    fieldValues = WHSRFPassthrough::create(tmpFieldValues);
        #                    pass = this.combineMaps(pass, fieldValues);
        #                    [ret, complete] = this.processFieldValues(con, fieldValues);
        #
        #                    if (!complete && step != #OverpickStep)
        #                    {
        #                        if (pass.exists(#TargetLicensePlateId) && pass.lookup(#TargetLicensePlateId) == '')
        #                        {
        #                            pass.remove(#TargetLicensePlateId);
        #                        }
        #
        #                        return [ret, step, recall, pass.pack()];
        #                    }
        #                    else if (WHSInventTable::captureSerial(workLine.ItemId) == WHSRFWhenToCapture::Picking
        #                         && (workTable.WorkTransType                        == WHSWorkTransType::Sales
        #                         ||  workTable.WorkTransType                        == WHSWorkTransType::ProdPick)
        #                         &&  workLine.WorkType                              == WHSWorkType::Pick
        #                         &&  !WHSWorkLine::isPutBefore(workLine.WorkId, workLine.LineNum)
        #                         &&  !pass.exists(#AssignSerial)
        #                         &&  (InventTable::find(workLine.ItemId).whsSerialActive()
        #                         ||   InventTable::find(workLine.ItemId).salesProcessSerialActive()))
        #                    {
        #                        // If the number of existing serials and the number of serials to be captured exceed sales line qty.
        #                        if (InventTable::find(workLine.ItemId).salesProcessSerialActive()
        #                            && (abs(InventTrackingRegisterTrans::qtyPhysicalIssue(InventTransOrigin::findByInventTransId(workLine.InventTransId).RecId)) +
        #                                this.getSerialItemQty(pass.lookupStr(#LicensePlateId))) > SalesLine::findInventTransId(workline.InventTransId).QtyOrdered)
        #                    {
        #                            throw error("@SYP4861946");
        #                        }
        #
        #                        // Over picking license plate, assign serials for full license plate after confirming quantity
        #                        if (WHSWorkExecute::isPotentialOverPick(workTable, workLine))
        #                        {
        #                            step = #Pick;
        #                            // Skip any more prompt for dimensions
        #                            pass.insert(#AssignSerial, 1);
        #                        }
        #                        else
        #                        {
        #                        pass.insert(#AssignSerial, 1);
        #                        pass.insert(#SerialCounter, 1);
        #                        pass.insert(#SerialQty, this.getSerialItemQty(pass.lookupStr(#LicensePlateId)));
        #                        step = #AssignSerialStep;
        #                        ret = conNull();
        #                        ret = this.buildAssignSerial(ret);
        #                        return [ret, step, recall, pass.pack()];
        #                        }
        #                    }
        #                    if (pass.exists(#PickQtyConfirmationEnabled)
        #                        && step == #Pick
        #                        && workLine.WorkType == WHSWorkType::Pick
        #                        && pass.lookupStr(#IsLicensePlateControlled)
        #                        && pass.exists(#LicensePlateId)
        #                        && (!pass.exists(#QtyVerification)
        #                        || pass.exists(#FullQty)))
        #                    {
        #                        [ret, recall] = this.getStep(con, _mode);
        #                        pass.insert(#AutoConfirm, 1);
        #
        #                        return [ret, step, recall, pass.pack()];
        #                    }
        #                }
        #                else if (step == #AssignSerialStep
        #                    &&  _buttonClicked == #RFSerialUnreadable
        #                    &&  InventTable::find(workLine.ItemId).salesProcessSerialActive()
        #                    &&  (abs(InventTrackingRegisterTrans::qtyPhysicalIssue(InventTransOrigin::findByInventTransId(workLine.InventTransId).RecId)) +
        #                            1 + (pass.lookupNum(#SerialQty) - pass.lookupNum(#SerialCounter))) > SalesLine::findInventTransId(workline.InventTransId).QtyOrdered)
        #                {
        #                    throw error("@SYP4861946");
        #                }
        #            }
        #            catch
        #            {
        #                ret = conNull();
        #                ret = this.addErrorLabelFromInfolog(ret, startInfologLine, WHSRFColorText::Error);
        #                con = conDel(con, 1, 2);
        #                ret += con;
        #                return [ret, step, recall, pass.pack()];
        #            }
        #        }
        #
        #        startInfologLine = infologLine() + 1;
        #        switch (_step)
        #        {
        #            case #Pick:
        #                try
        #                {
        #                    if (pass.exists(#SelectBestLP))
        #                    {
        #                        ret  = conNull();
        #                        ret  = this.buildPick(ret, '', false);
        #                        pass.remove(#SelectBestLP);
        #                        break;
        #                    }
        #                    else
        #                    {
        #                        this.buildPick(ret, '', false);
        #                    }
        #
        #                    if (pass.exists(#DimPrompt))
        #                    {
        #                        ret = conNull();
        #                        ret = this.buildPick(ret, '', false);
        #                        pass.remove(#DimPrompt);
        #                        break;
        #                    }
        #
        #                    // Over picking raw material serials and capturing at picking
        #                    if (WHSWorkExecute::isPotentialOverPick(workTable, workLine)
        #                    &&  WHSInventTable::captureSerial(workLine.ItemId) == WHSRFWhenToCapture::Picking
        #                    &&  pass.lookupStr(#SkipSerialValidate) != #AssignSerialComplete)
        #                    {
        #                        pass.insert(#SerialCounter, 1);
        #                        pass.insert(#SerialQty, this.getSerialItemQty(pass.lookupStr(#LicensePlateId)));
        #                        step = #AssignSerialStep;
        #                        ret = conNull();
        #                        ret = this.buildAssignSerial(ret);
        #                        return [ret, step, recall, pass.pack()];
        #                    }
        #
        #                    targetLicensePlateId = workLine.whsWorkTable().TargetLicensePlateId;
        #
        #                    isPutBefore = WHSWorkLine::isPutBefore(workLine.WorkId, workLine.LineNum);
        #
        #                    if ((pass.exists(#LicensePlateId) && pass.lookup(#LicensePlateId) != '') || isPutBefore)
        #                    {
        #                        if (!targetLicensePlateId)
        #                        {
        #                            if (!this.shouldHandleByLP())
        #                            {
        #                                WHSWorkTable::addTargetLicensePlate(workLine.WorkId, pass.lookup(#LicensePlateId));
        #                            }
        #
        #                            workLine = workExecute.pickFromLicensePlate(pass.lookup(#LicensePlateId),
        #                                                                    workLine.WorkId,
        #                                                                    workLine.LineNum,
        #                                                                    userId,
        #                                                                    this.createInventDimFromPass(),
        #                                                                    pass.lookup(#LicensePlateId),
        #                                                                    pass.exists(#AssignSerial) ? true : false,
        #                                                                    overrideTargetLP,
        #                                                                    false,
        #                                                                    this.shouldHandleByLP());
        #                        }
        #                        else if (isPutBefore)
        #                        {
        #                            workLine = workExecute.pickFromLicensePlate(pass.lookup(#LicensePlateId),
        #                                                                    workLine.WorkId,
        #                                                                    workLine.LineNum,
        #                                                                    userId,
        #                                                                    null,
        #                                                                    pass.lookup(#TargetLicensePlateId));
        #                        }
        #                        else
        #                        {
        #                            if (!this.shouldHandleByLP() && pass.exists(#TargetLicensePlateId))
        #                            {
        #                                WHSWorkTable::addTargetLicensePlate(workLine.WorkId, pass.lookup(#TargetLicensePlateId));
        #                            }
        #
        #                            workLine = workExecute.pickFromLicensePlate(pass.lookup(#LicensePlateId),
        #                                                                    workLine.WorkId,
        #                                                                    workLine.LineNum,
        #                                                                    userId,
        #                                                                    this.createInventDimFromPass(),
        #                                                                    pass.lookupStr(#TargetLicensePlateId),
        #                                                                    pass.exists(#AssignSerial) ? true : false,
        #                                                                    NoYes::No,
        #                                                                    false,
        #                                                                    this.shouldHandleByLP());
        #                        }
        #
        #                        if (workLine.AskForNewLicensePlate)
        #                        {
        #                            ret = conNull();
        #                            ret = this.buildPick(ret);
        #
        #                            if (workTable.WorkTransType == WHSWorkTransType::Invent  &&
        #                                pass.exists(#TargetLicensePlateId))
        #                            {
        #                                pass.remove(#TargetLicensePlateId);
        #                            }
        #
        #                            recall = false;
        #                        }
        #                    }
        #                    else
        #                    {
        #                        workLine = workExecute.pickNonLicensePlateCheckDigit(workLine.WorkId,
        #                                                                             workLine.LineNum,
        #                                                                             workLine.ItemId,
        #                                                                             workLine.QtyRemain,
        #                                                                             workLine.UnitId,
        #                                                                             userId,
        #                                                                             this.createInventDimFromPass(),
        #                                                                             pass.lookupStr(#TargetLicensePlateId),
        #                                                                             pass.exists(#AssignSerial) ? true : false);
        #                        if (pass.exists(#TargetLicensePlateId))
        #                        {
        #                            WHSWorkTable::addTargetLicensePlate(workLine.WorkId, pass.lookup(#TargetLicensePlateId));
        #                        }
        #                    }
        #
        #                    if (!workLine.AskForNewLicensePlate)
        #                    {
        #                        ret = this.determineRestart(con);
        #
        #                        if (pass.exists(#AssignSerial))
        #                        {
        #                            pass.remove(#AssignSerial);
        #                        }
        #                    }
        #
        #                    if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
        #                    {
        #                        throw error("@WAX1459");
        #                    }
        #                    if (!workLine.AskForNewLicensePlate)
        #                    {
        #                        recall = true;
        #                    }
        #
        #                    // If pick completed and menu item allows, evaluate cycle count thresholds
        #                    if (!WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).DisableCycleCountThreshold && preWorkLine.LineNum != workLine.LineNum)
        #                    {
        #                        cycleCountThresholdId = WHSCycleCountCreateThreshold::processCycleCountThreshold(preWorkLine.WorkId, preWorkLine.LineNum);
        #
        #                        // Check to see if an immediate count needs to be executed
        #                        if (WHSCycleCountThreshold::find(cycleCountThresholdId).ImmediateCycleCount)
        #                        {
        #                            // Find open cycle count work for the location
        #                            cycleCountWorkId = WHSWorkTable::findCycleCountByLocation(WHSWorkUserSession::find(userId).InventLocationId, preWorkLine.wmsLocationId);
        #
        #                            if (cycleCountWorkId)
        #                            {
        #                                if (step == #StepOne)
        #                                {
        #                                    step = WHSCycleCountThreshold::getImmediateCountStep(WHSRFMenuItemTable::getWHSWorkExecuteMode(WHSRFMenuItemTable::find(pass.lookup(#MenuItem))));
        #                                    pass.insert(#DetermineStep, 1);
        #                                    pass.insert(#Recall, 1);
        #                                }
        #
        #                                // Store off passthrough to be used after count is complete
        #                                WHSWorkUserSession::setPrevPass(pass.lookup(#UserId), pass.pack());
        #
        #                                pass = this.resetPassthrough(ret, false);
        #                                pass.insert(#WorkId, cycleCountWorkId);
        #                                pass.insert(#LineNum, 1);
        #                                pass.insert(#PrevCountStep, step);
        #                                step = 0;
        #                                recall = false;
        #
        #                                workExecuteDisplayCycleCount = WHSWorkExecuteDisplayCycleCount::construct();
        #                                ret = conDel(ret, 1, 2);
        #                                ret = this.updateModeStepPass(ret, mode, step, pass);
        #                                ret = workExecuteDisplayCycleCount.displayForm(ret, _buttonClicked);
        #                                pass = WHSRFPassthrough::create(conPeek(ret, 2));
        #                            }
        #                        }
        #                    }
        #
        #                    // Clean license plate ID if pick completed and the new work line is also a pick
        #                    if (preWorkLine.LineNum     != workLine.LineNum
        #                        && workLine.WorkType    == WHSWorkType::Pick)
        #                    {
        #                        pass.remove(#LicensePlateId);
        #                    }
        #                }
        #                catch
        #                {
        #                    if (workLine.WorkType == WHSWorkType::Pick)
        #                    {
        #                        pass.remove(#LicensePlateId);
        #                    }
        #
        #                    if (workLine.AskForNewLicensePlate
        #                    ||  (!targetLicensePlateId
        #                    &&   workLine.whsWorkTable().TargetLicensePlateId))
        #                    {
        #                        WHSWorkTable::addTargetLicensePlate(workLine.WorkId, '');
        #                    }
        #
        #                    ret = conNull();
        #                    ret = this.addErrorLabelFromInfolog(ret, startInfologLine, WHSRFColorText::Error);
        #                    ret = this.buildPick(ret, '');
        #                }
        #                break;
        #
        #            case #Put:
        #                try
        #                {
        #                    if (workLine.WorkType == WHSWorkType::Put)
        #                    {
        #                        if (pass.lookup(#WMSLocationId) != workLine.wmsLocationId
        #                        &&  workLine.WMSLocationId      != '')
        #                        {
        #                            ret = this.addErrorLabel(conNull(), "@WAX2962", WHSRFColorText::Error);
        #                            ret = this.buildPut(ret);
        #                            step = #Put;
        #                            break;
        #                        }
        #                        else if (pass.lookup(#WMSLocationId) != ''
        #                             &&  workLine.WMSLocationId      == '')
        #                        {
        #                            workExecute.updateWorkLineLocation(pass.lookup(#WorkId), pass.lookupNum(#LineNum), pass.lookup(#WMSLocationId), pass.lookup(#UserId));
        #                            workLine.reread();
        #                            ret = this.buildPut(conNull());
        #
        #                            step = #Put;
        #                            break;
        #                        }
        #                        else if (_buttonClicked == #RFOverrideLP)
        #                        {
        #                            if (pass.exists(#GroupPutaway)
        #                            &&  !pass.exists(#GroupPutawayFail))
        #                            {
        #                                ret = this.buildGroupedPutaway(conNull(), true);
        #                                break;
        #                            }
        #
        #                            ret = this.buildPut(conNull(), '', true);
        #                            break;
        #                        }
        #                        else if (_buttonClicked == #RFNoLocation)
        #                        {
        #                            ret = this.buildPut(conNull(), '', false, _newLocationId);
        #                            break;
        #                        }
        #                        // Group putaway for one line, if qty does not match must have been split put first
        #                        else if (pass.exists(#GroupPutawayConfirm)
        #                             &&  workLine.InventQtyWork != workLine.InventQtyRemain)
        #                        {
        #                            pass.remove(#GroupPutawayConfirm);
        #                            ret = this.buildPut(conNull());
        #                            break;
        #                        }
        #                    }
        #
        #                    parameters = WHSParameters::find();
        #
        #                    tmpWorkLine = WHSWorkLine::getPrevOppositeWorkLine(workLine.WorkId,
        #                                                                       workLine.LineNum,
        #                                                                       workLine.WorkType);
        #
        #                    if (anchor && !workLine.IsAnchored)
        #                    {
        #                        workExecute.anchorWork(pass.lookup(#WorkId), workLine.wmsLocationId, workLine.wmsLocationId, WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).AnchorBy);
        #                    }
        #
        #                    if (pass.exists(#TargetLicensePlateId))
        #                    {
        #                        // Check to see if the early tote reuse is turned on and we are putting to a packing station
        #                        if (parameters.ToteReuse && workLine.getLocationProfileId() == parameters.PackingLocType)
        #                        {
        #                            // Create a record in the toteReuseTable
        #                            toteReuseTable = WHSToteReuseTable::addNewRecord(workLine.WorkId, pass.lookup(#TargetLicensePlateId));
        #                            // Change the LicensePlate passthrough to the newly generated LicensePlateId.
        #                            pass.insert(#TargetLicensePlateId, toteReuseTable.TmpToteId);
        #                        }
        #
        #                        // Close work's container
        #                        if (!WHSWorkLine::isPutBefore(workLine.WorkId, workLine.LineNum))
        #                        {
        #                            WHSContainerTable::determineContainerClose(workLine.WorkId);
        #                        }
        #
        #                        workLine = workExecute.putAwayToLocation(workLine.WorkId,
        #                                                                 workLine.LineNum,
        #                                                                 workLine.wmsLocationId,
        #                                                                 tmpWorkLine.InventQtyWork > workLine.InventQtyWork ? WHSWorkPutFlow::SplitQuantity :
        #                                                                                                                      WHSWorkPutFlow::MoveAll,
        #                                                                 userId,
        #                                                                 pass.lookupStr(#LicensePlateId),
        #                                                                 pass.lookupStr(#TargetLicensePlateId),
        #                                                                 this.shouldHandleByLP());
        #                    }
        #                    else
        #                    {
        #                        // Check to see if the early tote reuse is turned on and we are putting to a packing station
        #                        if (parameters.ToteReuse && workLine.getLocationProfileId() == parameters.PackingLocType)
        #                        {
        #                            // Create a record in the toteReuseTable
        #                            toteReuseTable = WHSToteReuseTable::addNewRecord(workLine.WorkId, pass.lookup(#LicensePlateId));
        #                            // Change the LicensePlate passthrough to the newly generated LicensePlateId.
        #                            pass.insert(#LicensePlateId, toteReuseTable.TmpToteId);
        #                        }
        #
        #                        // Close work's container
        #                        if (!WHSWorkLine::isPutBefore(workLine.WorkId, workLine.LineNum))
        #                        {
        #                            WHSContainerTable::determineContainerClose(workLine.WorkId);
        #                        }
        #
        #                        workLine = workExecute.putAwayToLocation(workLine.WorkId,
        #                                                                 workLine.LineNum,
        #                                                                 workLine.wmsLocationId,
        #                                                                 tmpWorkLine.InventQtyWork > workLine.InventQtyWork ? WHSWorkPutFlow::SplitQuantity :
        #                                                                                                                      WHSWorkPutFlow::MoveAll,
        #                                                                 userId,
        #                                                                 pass.lookupStr(#SourceLicensePlateId),
        #                                                                 pass.lookupStr(#LicensePlateId),
        #                                                                 this.shouldHandleByLP());
        #                    }
        #
        #                    if (pass.exists(#WorkId))
        #                    {
        #                        tmpWorkId = pass.lookup(#WorkId);
        #                    }
        #                    if (pass.exists(#WorkGroupingId))
        #                    {
        #                        groupingId = pass.lookup(#WorkGroupingId);
        #                    }
        #                    if (pass.exists(#GroupPutawayFail))
        #                    {
        #                        groupPutawayFail = true;
        #                    }
        #                    // If we are in a group put that hasn't failed and overriding the LP need to save it off for next line.
        #                    else if (pass.exists(#GroupPutaway))
        #                    {
        #                        targetLicensePlateId = pass.lookupStr(#TargetLicensePlateId);
        #                    }
        #
        #                    validateUserDirectField = pass.lookupStr(#ValidateUserDirectField);
        #                    ret = this.determineRestart(con);
        #                    if (pass.lookupStr(#ValidateUserDirectField) == "")
        #                    {
        #                        pass.insert(#ValidateUserDirectField, validateUserDirectField);
        #                    }
        #
        #                    if (targetLicensePlateId)
        #                    {
        #                        pass.insert(#TargetLicensePlateId, targetLicensePlateId);
        #                    }
        #
        #                    if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
        #                    {
        #                        throw error("@WAX1459");
        #                    }
        #
        #                    recall = true;
        #
        #                    pass.insert(#PrevWorkId, tmpWorkId);
        #                    pass.insert(#WorkGroupingId, groupingId);
        #
        #                    if (groupPutawayFail)
        #                    {
        #                        pass.insert(#GroupPutawayFail, 1);
        #                    }
        #                }
        #                catch
        #                {
        #                    ret = conNull();
        #                    ret = this.addErrorLabelFromInfolog(ret, startInfologLine, WHSRFColorText::Error);
        #                    ret = this.buildPut(ret, '');
        #                }
        #                break;
        #
        #            case #CustomConfirmation:     // Custom Work Confirmation
        #                try
        #                {
        #                    workTypeCustom = WHSWorkTypeCustom::find(workLine.WorkTypeCustomCode);
        #
        #                    if (workTypeCustom.CaptureData)
        #                    {
        #                        data = conPeek(conPeek(con, 4), #data);
        #                        if (!data)
        #                        {
        #                            // With CaptureData set to Yes data is required
        #                            throw error("@WAX1080");
        #                        }
        #                        workLineCustom.WorkId   = workLine.WorkId;
        #                        workLineCustom.LineNum  = workLine.LineNum;
        #                        workLineCustom.rfLabel  = WHSWorkTypeCustom::find(workLine.WorkTypeCustomCode).rfLabel;
        #                        workLineCustom.Data     = data;
        #                        workLineCustom.insert();
        #                    }
        #
        #                    // Actual custom method invocation.
        #                    if (workTypeCustom.WorkTypeCustomMethod)
        #                    {
        #                        WHSWorkTypeCustom::callCustomMethod(workTypeCustom.WorkTypeCustomMethod, workLine.WorkId, data);
        #                    }
        #
        #                    tmpWorkId = workLine.WorkId;
        #                    workLine = workExecute.confirmCustomWork(pass.lookup(#WorkId), pass.lookupNum(#LineNum), userId);
        #                    ret = this.determineRestart(con);
        #                    if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
        #                    {
        #                        throw error("@WAX1459");
        #                    }
        #
        #                    recall = true;
        #                }
        #                catch
        #                {
        #                    ret = this.addErrorLabelFromInfolog(ret, startInfologLine, WHSRFColorText::Error);
        #                    ret = this.buildConfirmScreen(ret, WHSWorkTypeCustom::find(WHSWorkLine::find(pass.lookup(#WorkId), pass.lookupNum(#LineNum)).WorkTypeCustomCode).WorkTypeCustomDesc);
        #                }
        #                break;
        #
        #            case #StatusChange: // Status Change
        #                try
        #                {
        #                    WHSWorkQuarantine::changeLPStatusByWorkLine(workLine, WHSWorkTypeStatusChange::find(workLine.statusChangeCode()).InventStatusId);
        #                    workLine = workExecute.confirmCustomWork(pass.lookup(#WorkId), pass.lookupNum(#LineNum), userId);
        #                    ret = this.determineRestart(con);
        #                    if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
        #                    {
        #                        throw error("@WAX1459");
        #                    }
        #
        #                    recall = true;
        #                }
        #                catch
        #                {
        #                    ret = this.addErrorLabelFromInfolog(ret, startInfologLine, WHSRFColorText::Error);
        #                }
        #                break;
        #
        #            case #Print:     // Print
        #                try
        #                {
        #                    if (!pass.exists(#Confirmation))
        #                    {
        #                        labelBuild = new WHSLicensePlateLabelBuild(pass.lookup(#WorkId), WHSWorkLine::find(pass.lookup(#WorkId), pass.lookupNum(#LineNum)), '', pass.lookup(#UserId));
        #                        labelBuild.buildLicensePlateLabels();
        #                    }
        #                    else
        #                    {
        #                        pass.remove(#Confirmation);
        #                    }
        #                    workLine = workExecute.confirmCustomWork(pass.lookup(#WorkId), pass.lookupNum(#LineNum), userId);
        #                    ret = this.determineRestart(con);
        #                    if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
        #                    {
        #                        throw error("@WAX1459");
        #                    }
        #                    recall = true;
        #                }
        #                catch
        #                {
        #                    ret = this.addErrorLabelFromInfolog(ret, startInfologLine, WHSRFColorText::Error);
        #                }
        #                break;
        #
        #            case #NoLocation:     // No Location on Work
        #                try
        #                {
        #                    if (!pass.exists(#NoValidation))
        #                    {
        #                        if (workLine.WorkType == WHSWorkType::Put && pass.lookup(#WMSLocationId) != workLine.wmsLocationId)
        #                        {
        #                            ret = conNull();
        #                            ret = this.addErrorLabel(ret, "@WAX2962", WHSRFColorText::Error);
        #                            ret = this.buildPut(ret);
        #                            if (pass.exists(#NoOverrideButton))
        #                            {
        #                                pass.remove(#NoOverrideButton);
        #                            }
        #                            pass.insert(#WMSLocationId, workLine.wmsLocationId);
        #                            step = #Put;
        #                            break;
        #                        }
        #
        #                        pass.insert(#WMSLocationId, conPeek(conPeek(con, 4), #data));
        #
        #                        if (pass.lookup(#WMSLocationId) == '')
        #                        {
        #                            pass.insert(#WMSLocationId, workLine.wmsLocationId);
        #                            throw error("@WAX1160");
        #                        }
        #
        #                        locationId = WMSLocation::whsGetLocationId(pass.lookup(#WMSLocationId), WHSWorkUserSession::find(userId).InventLocationId);
        #                        if (!locationId)
        #                        {
        #                            pass.insert(#WMSLocationId, workLine.wmsLocationId);
        #                            throw error("@WAX755");
        #                        }
        #                        else
        #                        {
        #                            pass.insert(#WMSLocationId, locationId);
        #                        }
        #
        #                        if (workLine.WorkType == WHSWorkType::Put    &&
        #                            !workExecute.validateLocationChange(WHSWorkUserSession::find(userId).InventLocationId, pass.lookup(#WMSLocationId), pass.lookup(#ItemId), _workLine))
        #                        {
        #                            pass.insert(#WMSLocationId, workLine.wmsLocationId);
        #                            throw error("@WAX755");
        #                        }
        #
        #                        if (pass.exists(#GroupPutaway))
        #                        {
        #                            workExecute.overrideGroupPutaway(pass.lookupStr(#WorkGroupingId),
        #                                                             pass.lookup(#WMSLocationId),
        #                                                             pass.lookup(#UserId),
        #                                                             workLine.WorkId,
        #                                                             workLine.LineNum);
        #
        #                            pass.remove(#GroupPutaway);
        #                        }
        #                        else
        #                        {
        #                            workExecute.updateWorkLineLocation(pass.lookup(#WorkId), pass.lookupNum(#LineNum), pass.lookup(#WMSLocationId), pass.lookup(#UserId));
        #                            workLine.reread();
        #
        #                            // If work line is now closed need to find next work line
        #                            if (workLine.WorkStatus == WHSWorkStatus::Closed)
        #                            {
        #                                workLine = workExecute.getFirstOpenLine(pass.lookup(#WorkId), userId);
        #                                pass.insert(#LineNum, workLine.LineNum);
        #                                workExecute.updateWorkStatus(workLine.WorkId, workLine.LineNum, userId);
        #                            }
        #                        }
        #
        #                        if (workLine.WorkType == WHSWorkType::Put && WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).GroupPutaway)
        #                        {
        #                            pass.insert(#PrevStep, #OverrideStep2);
        #                        }
        #
        #                        // Begin achoring if needed
        #                        if (anchor)
        #                        {
        #                            workExecute.anchorWork(pass.lookup(#WorkId),
        #                                                   pass.lookup(#WMSLocationId),
        #                                                   pass.lookupStr(#OverrideFromPutLocation),
        #                                                   WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).AnchorBy);
        #                        }
        #
        #                        if (pass.exists(#OverrideFromPutLocation))
        #                        {
        #                            pass.remove(#OverrideFromPutLocation);
        #                        }
        #
        #                        if (mode == WHSWorkExecuteMode::PickPack)
        #                        {
        #                            pass.insert(#PickPackOverride, 1);
        #                        }
        #
        #                        if (pass.exists(#SuggestLocation))
        #                        {
        #                            pass.remove(#SuggestLocation);
        #                        }
        #
        #                        step = #StepOne;
        #                        recall = true;
        #                    }
        #                    else
        #                    {
        #                        if (workLine.WorkType == WHSWorkType::Pick && !_newLocationId && pass.exists(#UserPutLocation))
        #                        {
        #                            ret = this.addErrorLabel(ret, "@WAX2213", WHSRFColorText::Error);
        #                        }
        #                        ret = this.buildGetLocation(ret, '', _newLocationId);
        #                        pass.remove(#NoValidation);
        #                        pass.insert(#UserPutLocation, 1);
        #                    }
        #                }
        #                catch
        #                {
        #                    ret = this.addErrorLabelFromInfolog(ret, startInfologLine, WHSRFColorText::Error);
        #                    ret = this.buildGetLocation(ret);
        #                    pass.insert(#UserPutLocation, 1);
        #                    pass.insert(#WMSLocationId, workLine.wmsLocationId);
        #                }
        #                break;
        #
        #            case #GetSourceLP:    // Get Source License Plate
        #                try
        #                {
        #                    pass.insert(#SourceLicensePlateId, conPeek(conPeek(con, 4 + hasError), #data));
        #                    if (pass.lookup(#SourceLicensePlateId))
        #                    {
        #                        if (!workExecute.validateChildLicensePlate(pass.lookup(#WorkId), pass.lookupNum(#LineNum), pass.lookup(#SourceLicensePlateId)))
        #                        {
        #                            throw error("@WAX756");
        #                        }
        #                        ret = conPoke(ret, 2, pass.pack());
        #                        step = pass.lookup(#PrevStep);
        #                        recall = true;
        #                    }
        #                    else
        #                    {
        #                        throw error("@WAX756");
        #                    }
        #                }
        #                catch
        #                {
        #                    ret = this.addErrorLabelFromInfolog(ret, startInfologLine, WHSRFColorText::Error);
        #                    ret = this.buildGetLicensePlate(ret, "@WAX800");
        #                }
        #                break;
        #
        #            case #ReceivingExceptionStep1:     // Get Exception
        #                try
        #                {
        #                    if (pass.exists(#RunningQty))
        #                    {
        #                        pass.remove(#RunningQty);
        #                    }
        #                    if (pass.exists(#QtyReceived))
        #                    {
        #                        pass.remove(#QtyReceived);
        #                    }
        #                    ret = this.buildReceivingExceptions(ret);
        #                    step = #ReceivingExceptionStep2;
        #                }
        #                catch
        #                {
        #                    ret = this.addErrorLabelFromInfolog(ret, startInfologLine, WHSRFColorText::Error);
        #                    ret = this.buildReceivingExceptions(ret);
        #                }
        #                break;
        #
        #            case #ReceivingExceptionStep2:     // Receiving Exception
        #                try
        #                {
        #                    pass.insert(#ReceivingExceptionDesc, conPeek(conPeek(con, 3 + hasError), #data));
        #                    if (!pass.exists(#PONum))
        #                    {
        #                        pass.insert(#PONum, '');
        #                    }
        #                    if (!pass.exists(#POLineNum))
        #                    {
        #                        pass.insert(#POLineNum, 0);
        #                    }
        #
        #                    if (_buttonClicked == #RFDone) // Done
        #                    {
        #                        step = #StepOne;
        #                        pass.insert(#RebuildForm, '1');
        #                    }
        #                    else    // Next Exception
        #                    {
        #                        workExecute.createReceivingException(WHSUOMStructure::find(pass.lookupStr(#LicensePlateId), WHSModule::Purch),
        #                                                             pass.lookup(#ReceivingExceptionDesc),
        #                                                             _userId,
        #                                                             pass.lookup(#PONum),
        #                                                             pass.lookupNum(#POLineNum));
        #
        #                        ret = this.buildReceivingExceptions(ret);
        #                    }
        #                }
        #                catch
        #                {
        #                    ret = this.addErrorLabelFromInfolog(ret, startInfologLine, WHSRFColorText::Error);
        #                    ret = this.buildReceivingExceptions(ret);
        #                }
        #                break;
        #
        #            case #OverrideStep1:     // Override
        #                try
        #                {
        #                    if (workLine.WorkType == WHSWorkType::Put && pass.lookup(#WMSLocationId) != workLine.wmsLocationId)
        #                    {
        #                        ret = conNull();
        #                        ret = this.addErrorLabel(ret, "@WAX2962", WHSRFColorText::Error);
        #                        ret = this.buildPut(ret);
        #                        if (pass.exists(#NoOverrideButton))
        #                        {
        #                            pass.remove(#NoOverrideButton);
        #                        }
        #                        pass.insert(#WMSLocationId, workLine.wmsLocationId);
        #                        step = #Put;
        #                        break;
        #                    }
        #
        #                    if (pass.exists(#WriteOverride))
        #                    {
        #                        pass.remove(#WriteOverride);
        #                        pass.insert(#OverrideDesc, conPeek(conPeek(con, 3 + hasError), #data));
        #                        workExecute.createWorkException(pass.lookup(#WorkId), pass.lookupNum(#LineNum), userId, pass.lookup(#OverrideDesc), workLine.wmsLocationId);
        #                    }
        #                    pass.insert(#NoOverrideButton, 1);
        #                    ret = conNull();
        #                    ret = this.buildWorkExceptions(ret);
        #                    step = #OverrideStep2;
        #                }
        #                catch
        #                {
        #                    ret = this.addErrorLabelFromInfolog(ret, startInfologLine, WHSRFColorText::Error);
        #                    ret = this.buildWorkExceptions(ret);
        #                }
        #                break;
        #
        #            case #OverrideStep2:     // Override
        #                try
        #                {
        #                    if (workLine.WorkType == WHSWorkType::Put && pass.lookup(#WMSLocationId) != workLine.wmsLocationId)
        #                    {
        #                        ret = conNull();
        #                        ret = this.addErrorLabel(ret, "@WAX2962", WHSRFColorText::Error);
        #                        ret = this.buildPut(ret);
        #                        if (pass.exists(#NoOverrideButton))
        #                        {
        #                            pass.remove(#NoOverrideButton);
        #                        }
        #                        pass.insert(#WMSLocationId, workLine.wmsLocationId);
        #                        step = #Put;
        #                        break;
        #                    }
        #
        #                    if (!pass.exists(#SuggestLocation))
        #                    {
        #                        pass.insert(#OverrideDesc, conPeek(conPeek(con, 3 + hasError), #data));
        #                        workExecute.createWorkException(pass.lookup(#WorkId), pass.lookupNum(#LineNum), userId, pass.lookup(#OverrideDesc), workLine.wmsLocationId);
        #                    }
        #                    if (pass.exists(#NoOverrideButton))
        #                    {
        #                        pass.remove(#NoOverrideButton);
        #                    }
        #                    if (workLine.WorkType == WHSWorkType::Pick && !_newLocationId && pass.exists(#PrevStep))
        #                    {
        #                        ret = this.addErrorLabel(ret, "@WAX2213", WHSRFColorText::Error);
        #                    }
        #                    ret = this.buildGetLocation(ret, '', _newLocationId);
        #                    pass.insert(#PrevStep, step);
        #                    step = #NoLocation;
        #
        #                    if (workLine.WorkType == WHSWorkType::Put)
        #                    {
        #                        pass.insert(#OverrideFromPutLocation, workLine.wmsLocationId);
        #                    }
        #                }
        #                catch
        #                {
        #                    ret = this.addErrorLabelFromInfolog(ret, startInfologLine, WHSRFColorText::Error);
        #                    ret = this.buildWorkExceptions(ret);
        #                }
        #                break;
        #
        #            case #ShortPick:
        #                try
        #                {
        #                    if (!pass.exists(#Initiation))
        #                    {
        #                        [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
        #                        fieldValues = WHSRFPassthrough::create(tmpFieldValues);
        #                        pass = this.combineMaps(pass, fieldValues);
        #                        [ret, complete] = this.processFieldValues(con, fieldValues);
        #
        #                        if (complete && pass.exists(#ShortPickReason) && pass.lookup(#ShortPickReason) == '')
        #                        {
        #                            complete = false;
        #                        }
        #
        #                        if (this.hasError(con))
        #                        {
        #                            ret = con;
        #                            break;
        #                        }
        #                    }
        #                    else
        #                    {
        #                        if (workLine.isFirstPick() && workLine.InventQtyRemain == workLine.InventQtyWork)
        #                        {
        #                            workTable = WHSWorkTable::addTargetLicensePlate(workLine.WorkId, '');
        #
        #                            if (pass.exists(#TargetLicensePlateId))
        #                            {
        #                                pass.remove(#TargetLicensePlateId);
        #                            }
        #                        }
        #
        #                        if (pass.exists(#LicensePlateId))
        #                        {
        #                            pass.remove(#LicensePlateId);
        #                        }
        #
        #                        pass.insert(#SelectedValue, '');
        #
        #                        ret = conNull();
        #                        ret = this.buildShortPick(ret);
        #                    }
        #
        #                    if (!pass.exists(#Initiation) && complete)
        #                    {
        #                        ret = conNull();
        #                        ret = this.buildShortPickConf(ret);
        #                        step = #ShortPickConf;
        #                    }
        #                    else if (!pass.exists(#Initiation))
        #                    {
        #                        ret = conNull();
        #                        ret = this.buildShortPick(ret);
        #                    }
        #
        #                    if (pass.exists(#Initiation))
        #                    {
        #                        pass.remove(#Initiation);
        #                    }
        #                }
        #                catch
        #                {
        #                    ret = conNull();
        #                    ret = this.addErrorLabelFromInfolog(ret, startInfologLine, WHSRFColorText::Error);
        #                    ret = this.buildShortPick(ret);
        #                }
        #                break;
        #
        #            case #SplitWork:    // Split Work
        #                try
        #                {
        #                    noFullButton = true;
        #
        #                    if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).AllowFullSplit)
        #                    {
        #                        [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
        #                        fieldValues = WHSRFPassthrough::create(tmpFieldValues);
        #                        pass = this.combineMaps(pass, fieldValues);
        #
        #                        if (pass.exists(#FullQty))
        #                        {
        #                            [ret, complete] = this.processFieldValues(con, fieldValues);
        #
        #                            if (this.hasError(con) || !complete)
        #                            {
        #                                ret = con;
        #                                break;
        #                            }
        #                        }
        #                        else
        #                        {
        #                            ret = this.buildGetFullQty(ret);
        #                            pass.insert(#FullQty, '');
        #                            // Break because we need user to input the fullQty to process the split.
        #                            break;
        #                        }
        #                    }
        #                    // Split the work where fullQty is the qty on the current work line to be picked when using allow full split.
        #                    pass.insert(#WorkId, WHSWorkTable::splitWork(pass.lookup(#WorkId),
        #                                                                 pass.lookupNum(#LineNum),
        #                                                                 pass.lookupNum(#FullQty),
        #                                                                 WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem)).WorkerKeepsOrigWork,
        #                                                                 userId));
        #                    workLine = workExecute.getFirstOpenLine(pass.lookup(#WorkId), pass.lookup(#UserId));
        #                    if (complete)
        #                    {
        #                        // Update the pass being used to build up the pick screen to contain the qty being entered as the new verfied qty.
        #                        prevPass = WHSRFPassthrough::create(conPeek(con, 2));
        #                        prevPass.insert(#PrevStep, #SplitWork);
        #                        prevPass.insert(#QtyVerification, workLine.QtyRemain);
        #                        con = conPoke(con, 2, prevPass.pack());
        #                    }
        #                    // Remove the fullQty from the pass through as the work has already been split at this point.
        #                    pass.remove(#FullQty);
        #
        #                    if (mode == WHSWorkExecuteMode::UserGrouping ||
        #                        mode == WHSWorkExecuteMode::SystemGrouping)
        #                    {
        #                        select firstonly forupdate workGrouping
        #                            where workGrouping.WorkId           == workLine.WorkId   &&
        #                                  workGrouping.WorkGroupingId   == pass.lookup(#WorkGroupingId);
        #
        #                        if (workGrouping.RecId != 0)
        #                        {
        #                            ttsbegin;
        #                            workGrouping.WorkId = pass.lookup(#WorkId);
        #                            workGrouping.update();
        #                            ttscommit;
        #                        }
        #                    }
        #                    else if (mode == WHSWorkExecuteMode::PickPack)
        #                    {
        #                        if (pass.exists(#TargetWorkId) && pass.lookup(#TargetWorkId) == workLine.WorkId)
        #                        {
        #                            pass.insert(#TargetWorkId, pass.lookup(#WorkId));
        #                        }
        #
        #                        pass.insert(#PickPackOverride, 1);
        #                        pass.remove(#FullQty);
        #
        #                        con = conPoke(con, 2, pass.pack());
        #                    }
        #
        #                    ret = this.determineRestart(con);
        #
        #                    if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).AllowFullSplit)
        #                    {
        #                        workExecute.updateWorkStatus(workLine.WorkId, workLine.LineNum, userId);
        #                        workTable = WHSWorkTable::find(pass.lookup(#WorkId));
        #                        [ret, step , recall, con] = this.processWorkLine(workLine,
        #                                                        ret,
        #                                                        this.getWorkExecuteModeFromWorkTransType(workTable.WorkTransType, workTable.TargetLicensePlateId),
        #                                                        #Pick,
        #                                                        _userId,
        #                                                        _newLocationId,
        #                                                        #RFOK,
        #                                                        false);
        #                    }
        #                    recall = true;
        #                }
        #                catch
        #                {
        #                    ret = this.addErrorLabelFromInfolog(ret, startInfologLine, WHSRFColorText::Error);
        #                    pass = this.resetPassthrough(con, false);
        #                    ret = conPoke(con, 2, pass.pack());
        #                    step = #Restart;
        #                    recall = true;
        #                }
        #                break;
        #
        #            case #ShortPickConf:
        #
        #                try
        #                {
        #                    if (pass.exists(#SuggestLocation))  // User clicked Suggest Location
        #                    {
        #                        ret = conNull();
        #                        ret = this.buildGetLocation(ret, '', _newLocationId);
        #                        pass.insert(#PrevStep, step);
        #                        step = #NoLocation;
        #                    }
        #                    else                                // User clicked OK
        #                    {
        #                        mustCaptureMoreDims = this.buildNextDimensionCaptureControl(conNull(), this.createInventDimFromPass(), pass.lookupStr(#ItemId), pass.lookupNum(#QtyToPick)) != conNull();
        #
        #                        workLine = workExecute.executeShortPick(pass.lookup(#WorkId),
        #                                                                pass.lookupNum(#LineNum),
        #                                                                pass.lookup(#ShortPickReason),
        #                                                                pass.lookupNum(#QtyToPick),
        #                                                                pass.lookup(#UOM),
        #                                                                userId,
        #                                                                pass.exists(#LicensePlateId) ? pass.lookupStr(#LicensePlateId) :
        #                                                                                               pass.lookupStr(#TargetLicensePlateId),
        #                                                                mustCaptureMoreDims);
        #                        prevPass = pass;
        #
        #                        ret = this.determineRestart(con);
        #
        #                        if (mustCaptureMoreDims)
        #                        {
        #                            // Update the pass being used to build up the pick screen so that already entered values are used.
        #                            pass = WHSRFPassthrough::create(conPeek(ret, 2));
        #                            pass.insert(#PrevStep, #ShortPickConf);
        #                            pass.remove(#DimTrackingDelay);
        #                            pass.insert(#TargetLicensePlateId, prevPass.lookupStr(#TargetLicensePlateId));
        #                            pass.insert(#LicensePlateId, prevPass.lookupStr(#LicensePlateId));
        #                            con = conPoke(con, 2, pass.pack());
        #                        }
        #
        #                        if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
        #                        {
        #                            throw error("@WAX1459");
        #                        }
        #
        #                        if (pass.exists(#QtyToPick))
        #                        {
        #                            pass.remove(#QtyToPick);
        #                        }
        #
        #                        recall = true;
        #                    }
        #                }
        #                catch
        #                {
        #                    ret = conNull();
        #                    ret = this.addErrorLabelFromInfolog(ret, startInfologLine, WHSRFColorText::Error);
        #                    ret = this.buildShortPick(ret);
        #                }
        #                break;
        #
        #            case #RFPickingComment:
        #                step = #StepOne;
        #                pass.insert(#CommentsDisplayed, 1);
        #                recall = true;
        #                break;
        #
        #            case #AssignSerialStep:
        #                try
        #                {
        #                    [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
        #                    fieldValues = WHSRFPassthrough::create(tmpFieldValues);
        #                    pass = this.combineMaps(pass, fieldValues);
        #                    [ret, complete] = this.processFieldValues(con, fieldValues);
        #
        #                    if (this.hasError(con))
        #                    {
        #                        ret = con;
        #                        break;
        #                    }
        #
        #                    if (complete
        #                    ||  _buttonClicked == #RFSerialUnreadable)
        #                    {
        #                        this.createAssignSerialDimTracking(_buttonClicked);
        #
        #                        if (pass.lookupNum(#SerialCounter) < pass.lookupNum(#SerialQty))
        #                        {
        #                            pass.insert(#SerialCounter, pass.lookupNum(#SerialCounter) + 1);
        #
        #                            ret = conNull();
        #                            ret = this.buildAssignSerial(ret);
        #                        }
        #                        else
        #                        {
        #                            step = #Pick;
        #                            pass.remove(#SerialCounter);
        #                            pass.remove(#SerialQty);
        #                            // marks serial as completed, it's used in last build pick step to skip any more prompt for dimensions
        #                            pass.insert(#SkipSerialValidate, #AssignSerialComplete);
        #                            ret = [[mode,step], pass.pack()];
        #                            ret = this.updateModeStepPass(ret, mode, step, pass);
        #                            return this.processWorkLine(workLine, ret, mode, step, userId, _newLocationId, _buttonClicked, _looping);
        #                        }
        #                    }
        #                }
        #                catch
        #                {
        #                    ret = conNull();
        #                    ret = this.buildAssignSerial(ret);
        #                }
        #                break;
        #
        #            case #WorkAuditTemplate:
        #                try
        #                {
        #                    pass.insert(#AuditTemplateId, WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).WorkAuditTemplateId);
        #
        #                    if (!pass.exists(#AuditSeqNum))
        #                    {
        #                        pass.insert(#AuditSeqNum, WHSWorkAuditTemplateTable::getNextTemplateLine(pass.lookup(#AuditTemplateId)).AuditSeqNum);
        #                    }
        #                    // If Audit Seq Num already exists, previous audit function was Capture Data or Display
        #                    else
        #                    {
        #                        workAuditTemplateLine = WHSWorkAuditTemplateLine::find(pass.lookup(#AuditTemplateId), pass.lookup(#AuditSeqNum));
        #
        #                        if (workAuditTemplateLine.AuditBreakFunction == WHSAuditBreakFunction::CaptureData)
        #                        {
        #                            pass.insert(#CustomData, conPeek(conPeek(con, 4), #data));
        #
        #                            if (pass.lookup(#CustomData) != '')
        #                            {
        #                                // Insert data into our audit custom data table
        #                                workAuditCaptureData = WHSWorkAuditCaptureData::create(workTable.WorkId,
        #                                                                                       pass.lookup(#AuditTemplateId),
        #                                                                                       pass.lookup(#AuditSeqNum),
        #                                                                                       pass.lookup(#CustomData));
        #                            }
        #                            else
        #                            {
        #                                // User did not scan anything
        #                                ret = _con;
        #                                break;
        #                            }
        #                        }
        #
        #                        if (!workAuditTemplateLine.WorkAuditTemplateCustomMethod)
        #                        {
        #                            // If not using a custom method on captured data, move on to remaining audit functions
        #                            workAuditTemplateLine = WHSWorkAuditTemplateTable::getNextTemplateLine(pass.lookup(#AuditTemplateId), pass.lookup(#AuditSeqNum));
        #
        #                            if (workAuditTemplateLine.RecId != 0)
        #                            {
        #                                pass.insert(#AuditSeqNum, workAuditTemplateLine.AuditSeqNum);
        #                            }
        #                            else
        #                            {
        #                                pass.insert(#AuditSeqNum, str2int(pass.lookup(#AuditSeqNum)) + 1);
        #                            }
        #                        }
        #                    }
        #
        #                    // Execute Audit Template functions
        #                    [auditSeqNum, auditComplete] = WHSWorkAuditTemplateExecute::execute(pass.lookup(#AuditTemplateId),
        #                                                                                        pass.lookup(#AuditSeqNum),
        #                                                                                        workTable,
        #                                                                                        workAuditCaptureData.RecId);
        #
        #                    // If Capture Data or Display Function, screen must be presented to user
        #                    if (!auditComplete)
        #                    {
        #                        pass.insert(#AuditSeqNum, auditSeqNum);
        #
        #                        ret = conNull();
        #                        ret = this.buildWorkAuditTemplate(ret);
        #                    }
        #                    else
        #                    {
        #                        pass.remove(#AuditSeqNum);
        #
        #                        if (WHSWorkAuditTemplateTable::find(pass.lookup(#AuditTemplateId)).AuditBreakEvent == WHSAuditBreakEvent::Prior)
        #                        {
        #                            if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).PickPack)
        #                            {
        #                                pass.insert(#PickPackOverride, 1);
        #                            }
        #                            step = #StepOne;
        #                            recall = true;
        #                        }
        #                        else
        #                        {
        #                            pass.remove(#AuditWorkId);
        #                            step = #Restart;
        #                            recall = true;
        #                        }
        #                    }
        #                }
        #                catch
        #                {
        #                    ret = conNull();
        #                    ret = this.addErrorLabelFromInfolog(ret, startInfologLine, WHSRFColorText::Error);
        #                    ret = this.addOkButton(ret);
        #                    ret = this.addCancelButton(ret, 1, true);
        #                }
        #                break;
        #
        #            case #SplitPutWork:
        #                try
        #                {
        #                    [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
        #                    fieldValues = WHSRFPassthrough::create(tmpFieldValues);
        #                    pass = this.combineMaps(pass, fieldValues);
        #                    [ret, complete] = this.processFieldValues(con, fieldValues);
        #
        #                    if (this.hasError(con))
        #                    {
        #                        // Pass would have user Id in location if it rebuilt the split put screen
        #                        // This is needed to verify serial id in the correct location
        #                        pass.insert(#WMSLocationId, WHSWorkLine::getPrevOppositeWorkLine(workLine.WorkId, workLine.LineNum, workLine.WorkType).UserId);
        #
        #                        ret = con;
        #                        break;
        #                    }
        #
        #                    if (_buttonClicked != #RFSplitPut)
        #                    {
        #                        if (complete)
        #                        {
        #                            inventDim = this.createInventDimFromPass();
        #                            inventDim.wMSLocationId = WHSWorkLine::getPrevOppositeWorkLine(workLine.WorkId, workLine.LineNum, workLine.WorkType).UserId;
        #                            inventDim = InventDim::findOrCreate(inventDim);
        #
        #                            itemId = workLine.ItemId;
        #
        #                            // Process work
        #                            workLine = workExecute.putPartialAwayToLocation(workLine.WorkId,
        #                                                                            workLine.LineNum,
        #                                                                            pass.lookup(#QtyToPut),
        #                                                                            workLine.WMSLocationId,
        #                                                                            userId,
        #                                                                            pass.lookupStr(#TargetLicensePlateId),
        #                                                                            inventDim.inventDimId);
        #
        #                            recall = true;
        #
        #
        #                            tmpWorkId = pass.lookupStr(#WorkId);
        #
        #                            ret = this.determineRestart(con);
        #
        #                            this.removeTrackingDimensionsFromPass(itemId);
        #
        #                            pass.insert(#PrevWorkId, tmpWorkId);
        #                            pass.remove(#CurrentQty);
        #                        }
        #                        else
        #                        {
        #                            ret = this.buildSplitPut(conNull());
        #                        }
        #                    }
        #                    else
        #                    {
        #                        // When entering split screen for first time, these should be blank.
        #                        pass.insert(#TargetLicensePlateId, '');
        #                        pass.remove(#QtyToPut);
        #
        #                        ret = this.buildSplitPut(conNull());
        #                    }
        #                }
        #                catch
        #                {
        #                    ret = this.addErrorLabelFromInfolog(conNull(), startInfologLine, WHSRFColorText::Error);
        #                    ret = this.buildSplitPut(ret);
        #                }
        #                break;
        #
        #            case #OverpickStep:
        #                if (!pass.exists(#Initiation) || !pass.exists(#QtyToPick) || pass.lookupReal(#QtyToPick) <= 0)
        #                {
        #                    ret = this.buildOverpickScreen(conNull());
        #                    pass.insert(#Initiation, 1);
        #                }
        #                else
        #                {
        #                    try
        #                    {
        #                        if (workExecute.executeOverPick(workLine,
        #                                                    workTable,
        #                                                    WHSWorkExecuteDisplay::str2numDisplay(pass.lookupStr(#QtyToPick)),
        #                                                    pass.lookupStr(#UOM),
        #                                                    userId,
        #                                                    pass.lookupStr(#MenuItem)))
        #                        {
        #                            pass.remove(#Initiation);
        #                            step = pass.lookup(#PrevStep);
        #                            workLine.reread();
        #                            // Display pick screen with updated quantities.
        #                            ret = this.buildPick(conNull(), '', false);
        #                        }
        #                        else
        #                        {
        #                            // If over pick did not succeed then display the error message and rebuild screen.
        #                            ret = this.addErrorLabelFromInfolog(conNull(), startInfologLine, WHSRFColorText::Error);
        #                            ret = this.buildOverpickScreen(ret);
        #                        }
        #                    }
        #                    catch
        #                    {
        #                        ret = this.addErrorLabelFromInfolog(conNull(), startInfologLine, WHSRFColorText::Error);
        #                        ret = this.buildOverpickScreen(ret);
        #                    }
        #                }
        #                break;
        #        }
        #    }
        #
        #    // Evaluate work audit templates after work completion
        #    if (step == #Restart            &&
        #        step != #WorkAuditTemplate  &&
        #        !pass.exists(#AuditWorkId)  &&
        #        !auditComplete              &&
        #        WHSWorkAuditTemplateTable::evaluateWorkAuditBreak(WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).WorkAuditTemplateId,
        #                                                          workTable,
        #                                                          pass.lookup(#MenuItem),
        #                                                          WHSAuditBreakEvent::Completion,
        #                                                          pass.lookupStr(#WorkGroupingId)))
        #    {
        #        step  = #WorkAuditTemplate;
        #        recall = true;
        #        pass.insert(#AuditWorkId, tmpWorkId);
        #    }
        #
        #    if (WHSRFAutoConfirm::isAutoConfirmationEnabled(pass.lookup(#MenuItem), preWorkLine.WorkType)                       &&
        #                                                    pass.exists(#AutoConfirm)                                           &&
        #                                                    !((mode == WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate  ||
        #                                                       mode == WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate) &&
        #                                                       preWorkLine.LineNum == 1))
        #    {
        #        pass.remove(#AutoConfirm);
        #        ret = this.updateModeStepPass(ret, mode, step, pass);
        #        return this.processWorkLine(workLine, ret, mode, step, userId, _newLocationId, _buttonClicked, _looping);
        #    }
        #    else if (pass.exists(#GroupPutawayConfirm))
        #    {
        #        pass.remove(#AutoConfirm);
        #        ret = this.updateModeStepPass(ret, mode, step, pass);
        #        return this.processWorkLine(workLine, ret, mode, step, userId, _newLocationId, _buttonClicked, _looping);
        #    }
        #
        #    return [ret, step, recall, pass.pack()];
        #}
      ENDSOURCE
      SOURCE #promptForNegativeBatch
        #/// <summary>
        #/// Method determines if RF user needs to be prompted for batch Id based on negative inventory setup
        #/// </summary>
        #/// <param name="_dimField">
        #/// The current invent dim field we are evaluating to be built on RF screen
        #/// </param>
        #/// <param name="_inventDim">
        #/// The inventDim holding values predetermined by the work.
        #/// </param>
        #/// <param name="_itemId">
        #/// The Id of the item which determines if the inventory is allowed to go negative
        #/// </param>
        #/// <returns>
        #/// true if the user needs to be prompted for batch Id; otherwise false
        #/// </returns>
        #private boolean promptForNegativeBatch(
        #    FieldId     _dimField,
        #    InventDim   _inventDim,
        #    ItemId      _itemId)
        #{
        #    WMSLocation location;
        #    boolean     ret;
        #
        #    location = _inventDim.wmsLocation();
        #
        #    if (_dimField == fieldNum(InventDim, InventBatchId)
        #    &&  !location.whsLocationIsLPControlled()
        #    &&  InventTable::find(_itemId).whsAllowPhysNeg()
        #    &&  location.whsLocationProfile().AllowNegative)
        #    {
        #        ret = true;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #rebuildBatchDisposition
        #/// <summary>
        #///     If an error occurs, rebuild the batch disposition combo box on the RF screen.
        #/// </summary>
        #/// <param name="_con">
        #///     The current RF container variable.
        #/// </param>
        #/// <param name="_controlName">
        #///     The name used to identify the RF control.
        #/// </param>
        #/// <returns>
        #///     Returns the updated RF container variable.
        #/// </returns>
        #protected container rebuildBatchDisposition(container _con, str _controlName = #BatchDisposition)
        #{
        #    container               ret = _con;
        #    str                     elements;
        #    container               batchDisposition;
        #    int                     batchDispLoc;
        #    PdsBatchDispositionCode defaultValue;
        #    PdsBatchDispositionCode selectedValue;
        #    boolean                 showBlank;
        #    ItemId                  itemId;
        #
        #    if (this.displayBatchDisposition())
        #    {
        #        itemId = pass.lookupStr(#ItemId);
        #
        #        // Get the default batch disposition code.
        #        [defaultValue, showBlank] = this.getDefaultBatchDispositionCode(itemId);
        #
        #        elements = this.buildBatchDispositionElements(showBlank);
        #
        #        // Get the location of the batch disposition combo box.
        #        batchDispLoc = this.getControlLocation(ret, _controlName);
        #
        #        if (batchDispLoc > 0)
        #        {
        #            // Find the batch disposition control within the RF container.
        #            batchDisposition = conPeek(ret, batchDispLoc);
        #
        #            // Determine the currently selected value.
        #            selectedValue = conPeek(batchDisposition, #data);
        #
        #            // Remove and reinsert the available elements and selected value for the batch disposition combo box.
        #            batchDisposition = conDel(batchDisposition, #data, 1);
        #            batchDisposition = conIns(batchDisposition, #data, elements);
        #            batchDisposition = conDel(batchDisposition, #selected, 1);
        #            batchDisposition = conIns(batchDisposition, #selected, selectedValue);
        #
        #            ret = conDel(ret, batchDispLoc, 1);
        #            ret = conIns(ret, batchDispLoc, batchDisposition);
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #rebuildDimUOM
        #/// <summary>
        #///     If an error occurs, rebuild the dim UOM combo box on the RF screen.
        #/// </summary>
        #/// <param name="_con">
        #///     The current RF container variable.
        #/// </param>
        #/// <param name="_showBlank">
        #///     A Boolean value to indicate whether a blank value should be included in the list of available options.
        #/// </param>
        #/// <param name="_controlName">
        #///     The name used to identify the RF control.
        #/// </param>
        #/// <returns>
        #///     Returns the updated RF container variable.
        #/// </returns>
        #protected container rebuildDimUOM(
        #    container   _con,
        #    boolean     _showBlank,
        #    str         _controlName = #DimUOM)
        #{
        #    container           ret = _con;
        #    str                 elements;
        #    container           dimUOM;
        #    int                 dimUOMLoc;
        #    UnitOfMeasureSymbol selectedValue;
        #    ItemId              itemId;
        #
        #    if (pass.exists(#ItemId))
        #    {
        #        itemId = pass.lookup(#ItemId);
        #    }
        #
        #    elements = this.buildUOMSequenceGroupString(itemId, _showBlank);
        #
        #    // Get the location of the dimension UOM combo box.
        #    dimUOMLoc = this.getControlLocation(ret, _controlName);
        #
        #    if (dimUOMLoc > 0)
        #    {
        #        // Find the dimension UOM control within the RF container.
        #        dimUOM = conPeek(ret, dimUOMLoc);
        #
        #        // Determine the currently selected value.
        #        selectedValue = conPeek(dimUOM, #data);
        #
        #        dimUOM  = conDel(dimUOM, #data, 1);
        #        dimUOM  = conIns(dimUOM, #data, elements);
        #        dimUOM  = conDel(dimUOM, #selected, 1);
        #        dimUOM  = conIns(dimUOM, #selected, selectedValue);
        #
        #        ret = conDel(ret, dimUOMLoc, 1);
        #        ret = conIns(ret, dimUOMLoc, dimUOM);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #rebuildUseVendBatchDates
        #/// <summary>
        #///     If an error occurs, rebuild the combo boxes on the RF screen.
        #/// </summary>
        #/// <param name="_con">
        #///     The current RF container variable.
        #/// </param>
        #/// <returns>
        #///     Returns the updated RF container variable.
        #/// </returns>
        #protected container rebuildUseVendBatchDates(container _con)
        #{
        #    container   ret = _con;
        #    str         elements;
        #    container   useVendBatchDate;
        #    container   useVendExpDate;
        #    int         useVendBatchDateLoc;
        #    int         useVendExpDateLoc;
        #
        #    elements = this.buildNoYesCombobox();
        #
        #    // Get the locations of the combo boxes used to indicate whether vendor batch date and vendor batch expiry date must be utilized.
        #    useVendBatchDateLoc = this.getControlLocation(ret, #UseVendBatchDate);
        #    useVendExpDateLoc   = this.getControlLocation(ret, #UseVendExpDate);
        #
        #    // Remove and reinsert the available selections for the vendor batch date combo box.
        #    useVendBatchDate    = conPeek(ret, useVendBatchDateLoc);
        #    useVendBatchDate    = conDel(useVendBatchDate, #data, 1);
        #    useVendBatchDate    = conIns(useVendBatchDate, #data, elements);
        #
        #    // Remove and reinsert the available selections for the vendor batch expiry date combo box.
        #    useVendExpDate  = conPeek(ret, useVendExpDateLoc);
        #    useVendExpDate  = conDel(useVendExpDate, #data, 1);
        #    useVendExpDate  = conIns(useVendExpDate, #data, elements);
        #
        #    ret = conDel(ret, useVendBatchDateLoc, 1);
        #    ret = conIns(ret, useVendBatchDateLoc, useVendBatchDate);
        #
        #    ret = conDel(ret, useVendExpDateLoc, 1);
        #    ret = conIns(ret, useVendExpDateLoc, useVendExpDate);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #removeTrackingDimensionsFromPass
        #protected void removeTrackingDimensionsFromPass(ItemId _itemId, InventDimParm _selectedTrackingDimsToRemove = null)
        #{
        #    ListEnumerator          le;
        #    FieldName               fieldName;
        #    InventDimParm           trackingDimsToRemove;
        #
        #    trackingDimsToRemove.setAllTrackingDimensions();
        #
        #    if (!_selectedTrackingDimsToRemove.isAllFlagNo())
        #    {
        #        trackingDimsToRemove = InventDimParm::andParms(trackingDimsToRemove, _selectedTrackingDimsToRemove);
        #    }
        #
        #    le = trackingDimsToRemove.selectedDimFields().getEnumerator();
        #
        #    while (le.moveNext())
        #    {
        #        fieldName = fieldId2name(tableNum(InventDim), le.current());
        #
        #        pass.remove(fieldName);
        #    }
        #}
      ENDSOURCE
      SOURCE #resetButtonClicked
        #container resetButtonClicked(container _con)
        #{
        #    container   con = _con;
        #    str         controlType;
        #    int         length;
        #    int         i;
        #
        #    length = conLen(con);
        #
        #    for (i = 1; i <= length; ++i)
        #    {
        #        controlType = conPeek(conPeek(con, i), #controlType);
        #
        #        if (controlType == #RFButton)
        #        {
        #            con = conPoke(con, i, conPoke(conPeek(con, i), #data, ''));
        #        }
        #    }
        #
        #    return con;
        #}
      ENDSOURCE
      SOURCE #resetPassthrough
        #WHSRFPassthrough resetPassthrough(container _con, boolean _useOld = true)
        #{
        #    WHSRFPassthrough    ret;
        #
        #    if (_useOld)
        #    {
        #        return WHSRFPassthrough::create(conPeek(_con, 2));
        #    }
        #
        #    ret = WHSRFPassthrough::newReset(pass);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #setBatchDetails
        #private container setBatchDetails(container _displayCon)
        #{
        #    InventBatchId               batchId;
        #
        #    if (pass.exists(#BatchId) || pass.exists(#SerialId))
        #    {
        #        return [true, _displayCon];
        #    }
        #
        #    if (this.buildControlExistsInContainer(_displayCon, #BatchId))
        #    {
        #        batchId = this.getControlDataFromContainer(_displayCon, #BatchId);
        #        if (batchId != '')
        #        {
        #            pass.insert(#BatchId, batchId);
        #
        #            // Adjust the quantity on the pass in case the container has a reduced quantity.
        #            if (this.buildControlExistsInContainer(_displayCon, #DimQty))
        #            {
        #                pass.insert(#DimQty, this.getControlDataFromContainer(_displayCon, #DimQty));
        #            }
        #
        #            // Adjust the expiry date on the pass in case the exp date has a different value.
        #            if (this.buildControlExistsInContainer(_displayCon, #ExpDate))
        #            {
        #                pass.insert(#ExpDate, this.getControlDataFromContainer(_displayCon, #ExpDate));
        #            }
        #
        #            return [true, _displayCon];
        #        }
        #    }
        #
        #    if (this.populateAutoTrackingDim(
        #            InventTrackingDimType::Batch,
        #            pass.lookup(#ItemId),
        #            pass.lookup(#PONum),
        #            PurchLine::find(pass.lookup(#PONum), pass.lookup(#POLineNum)).InventTransId,
        #            InventTransType::Purch))
        #    {
        #        // set the new batch id on the build container
        #        if (this.buildControlExistsInContainer(_displayCon, #BatchId))
        #        {
        #            _displayCon = this.setControlDataFromContainer(_displayCon, #BatchId, pass.lookup(#BatchId));
        #        }
        #
        #        // remove the expiration date control as this batch is auto-generated
        #        _displayCon = conDel(_displayCon, this.indexOfBuildControlFromContainer(_displayCon, #ExpDate), 1);
        #
        #        return [true, _displayCon];
        #    }
        #
        #    return [false, _displayCon];
        #}
      ENDSOURCE
      SOURCE #setControlDataFromContainer
        #/// <summary>
        #/// Sets the data of the control from the container which holds the controls for user display, by the name of the control.
        #/// </summary>
        #/// <param name="_displayCon">
        #/// The container which holds the controls for user display.
        #/// </param>
        #/// <param name="_controlName">
        #/// The name of the build control that needs to be set.
        #/// </param>
        #/// <param name="_newValue">
        #/// The new value of the build control that needs to be set.
        #/// </param>
        #/// <returns>
        #/// The new container with the changed data.
        #/// </returns>
        #protected container setControlDataFromContainer(container _displayCon, str _controlName, str _newValue)
        #{
        #    int             controlIndex = this.indexOfBuildControlFromContainer(_displayCon, _controlName);
        #    container       control;
        #    container       ret = _displayCon;
        #
        #    if (controlIndex > 0)
        #    {
        #        control =  conPoke(conPeek(_displayCon, controlIndex), #IndexOfDataInBuildControl, _newValue);
        #        ret = conPoke(_displayCon, controlIndex, control);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #setGlobals
        #void setGlobals(WHSWorkExecuteMode  _mode,
        #                int                 _step,
        #                WHSUserId           _userId,
        #                WHSRFPassthrough    _pass,
        #                WHSWorkLine         _workLine = null)
        #{
        #    mode        = _mode;
        #    step        = _step;
        #    userId      = _userId;
        #    pass        = _pass;
        #
        #    if (_workLine)
        #    {
        #        workLine    = _workLine;
        #    }
        #}
      ENDSOURCE
      SOURCE #shouldHandleByLP
        #/// <summary>
        #/// Checks strategy that should be used during pick/put operations for the work.
        #/// </summary>
        #/// <returns>
        #/// true if pick/put should be executed through guided lp locate strategy; otherwise, false.
        #/// </returns>
        #public boolean shouldHandleByLP()
        #{
        #    return WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).HandleByLP;
        #}
      ENDSOURCE
      SOURCE #showDisposition
        #/// <summary>
        #/// Checks, based on current work mode, whether or not a disposition code should be displayed as an option
        #/// </summary>
        #/// <param name="_dispositionTable">
        #/// Disposition record
        #/// </param>
        #/// <returns>
        #/// Boolean dictating if disposition code should be shown in RF
        #/// </returns>
        #private boolean showDisposition(WHSDispositionTable _dispositionTable)
        #{
        #    boolean ret = true;
        #
        #    switch (mode)
        #    {
        #        case WHSWorkExecuteMode::PurchaseOrderItemReceiving:
        #        case WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate:
        #        case WHSWorkExecuteMode::PurchaseOrderLineReceiving:
        #        case WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate:
        #        case WHSWorkExecuteMode::LicensePlateReceiving:
        #        case WHSWorkExecuteMode::LicensePlateReceivingAndLocate:
        #        case WHSWorkExecuteMode::LoadItemReceiving:
        #        case WHSWorkExecuteMode::LoadItemReceivingAndLocate:
        #            if (_dispositionTable.ReturnDispositionCodeId
        #            ||  (_dispositionTable.WorkTemplateCode
        #            &&   !WHSWorkTemplateTable::exist(_dispositionTable.WorkTemplateCode, WHSWorkTransType::Purch)))
        #            {
        #                ret = false;
        #            }
        #            break;
        #        case WHSWorkExecuteMode::ReturnOrder:
        #        case WHSWorkExecuteMode::ReturnOrderAndLocate:
        #            if (!_dispositionTable.ReturnDispositionCodeId)
        #            {
        #                ret = false;
        #            }
        #            break;
        #        case WHSWorkExecuteMode::ReportAsFinished:
        #        case WHSWorkExecuteMode::ReportAsFinishedAndLocate:
        #            if (_dispositionTable.ReturnDispositionCodeId
        #            ||  WHSInventStatus::find(_dispositionTable.InventStatusId).InventStatusBlocking
        #            ||  (_dispositionTable.WorkTemplateCode
        #            &&   !WHSWorkTemplateTable::exist(_dispositionTable.WorkTemplateCode, WHSWorkTransType::ProdPut)))
        #            {
        #                ret = false;
        #            }
        #            break;
        #        default:
        #            break;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #updateModeStepPass
        #protected container updateModeStepPass(container _con, WHSWorkExecuteMode _mode, int _step, WHSRFPassthrough _pass = null)
        #{
        #    container           ret = _con;
        #    WHSRFPassthrough    tmpPass = _pass;
        #    int                 i = 1;
        #
        #    if (conLen(conPeek(_con, 1)) != 2)
        #    {
        #        if (tmpPass != null)
        #        {
        #            ret = conIns(ret, 1, tmpPass.pack());
        #        }
        #        else
        #        {
        #            ret = conIns(ret, 1, conNull());
        #        }
        #        ret = conIns(ret, 1, [_mode, _step]);
        #    }
        #    else
        #    {
        #        if (tmpPass != null)
        #        {
        #            ret = conPoke(ret, 2, tmpPass.pack());
        #        }
        #        else
        #        {
        #            ret = conPoke(ret, 2, conNull());
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateCreateReceivingWork
        #/// <summary>
        #/// Determine if receiving work can be created.
        #/// </summary>
        #/// <param name="_purchLine">
        #/// The purchase order line to be received.
        #/// </param>
        #/// <returns>
        #/// True if work can be created, otherwise false.
        #/// </returns>
        #protected boolean validateCreateReceivingWork(PurchLine _purchLine)
        #{
        #    boolean     ret;
        #    WHSASNItem  asnItem;
        #    WHSLoadLine loadLine;
        #
        #    // Perform ASN item blocking validation.
        #    if (pass.exists(#SkipASNItemValidation) && pass.lookupStr(#SkipASNItemValidation) == _purchLine.InventTransId)
        #    {
        #        ret = true;
        #    }
        #    else
        #    {
        #        select firstOnly RecId from asnItem
        #                exists join loadLine
        #                    where loadLine.RecId == asnItem.LoadLineRefRecId
        #                        && loadLine.InventTransId == _purchLine.InventTransId
        #                        && loadLine.InventTransType == InventTransType::Purch;
        #
        #        if (asnItem.RecId != 0)
        #        {
        #            if (WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem)).BlockReceivingASNItem == NoYes::Yes)
        #            {
        #                ret = checkFailed("@SYP4882166");
        #            }
        #            else
        #            {
        #                pass.insert(#SkipASNItemValidation, _purchLine.InventTransId);
        #                ret = checkFailed(strFmt("@SYP4882167", "@SYS5473"));
        #            }
        #
        #        }
        #        else
        #        {
        #            // Even if the there is no associated ASN item, skip PO line on future validation checks.
        #            pass.insert(#SkipASNItemValidation, _purchLine.InventTransId);
        #            ret = true;
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateNonSerialInventory
        #/// <summary>
        #/// Validates that there is enough non-serial inventory to complete the work.
        #/// </summary>
        #/// <param name="_workLine">
        #/// The work to be validated.
        #/// </param>
        #/// <returns>
        #/// True if there is no serial inventory; otherwise false.
        #/// </returns>
        #/// <remarks>
        #/// In this method false is returned when inventory is found because finding inventory is considered
        #/// the invalid scenario.
        #/// </remarks>
        #public boolean validateNonSerialInventory(WHSWorkLine _workLine)
        #{
        #    boolean            ret = true;
        #    InventDim          inventDim;
        #    InventDim          inventDimSelect;
        #    InventSum          inventSum;
        #    InventDimParm      inventDimParm;
        #    WHSRFWhenToCapture whenToCapture;
        #
        #    whenToCapture = WHSInventTable::captureSerial(_workLine.ItemId);
        #
        #    if (!WHSWorkLine::isPutBefore(_workLine.WorkId, _workLine.LineNum)
        #        && (whenToCapture == WHSRFWhenToCapture::Picking
        #        || whenToCapture  == WHSRFWhenToCapture::Packing))
        #    {
        #
        #        inventDim   = InventDim::find(_workLine.InventDimId);
        #        inventDim.InventSerialId = '';
        #        inventDimParm.initFromInventDim(inventDim);
        #
        #        select sum(PhysicalInvent) from inventSum
        #            #InventDimExistsJoin(inventSum.InventDimId, inventDimSelect, inventDim, inventDimParm) &&
        #            inventDimSelect.InventSerialId == '';
        #
        #        if (inventSum.PhysicalInvent < _workLine.InventQtyRemain)
        #        {
        #            ret = false;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #authenticateSession
        #/// <summary>
        #/// Performs authentication of the incoming request.
        #/// </summary>
        #/// <param name="_con">
        #/// Inputs received from the remote client.
        #/// </param>
        #/// <returns>
        #/// Input container which passes the validation process or
        #/// empty one if validation fails.
        #/// </returns>
        #public static container authenticateSession(container _con)
        #{
        #    // Added back to SYP
        #    WHSRFPassthrough        pass;
        #    WHSUserId               userId = '';
        #    WHSWorkUserSessionId    userSessionId = emptyGuid();
        #    WHSWorkUserSession      workUserSession;
        #    int                     mode = 0;
        #    int                     step = 0;
        #    boolean                 isWebRequest = false;
        #
        #    // No data...
        #    if (!_con)
        #    {
        #        return _con;
        #    }
        #
        #    mode = conPeek(conPeek(_con, #StateInfo), #StateInfoMode);
        #    step = conPeek(conPeek(_con, #StateInfo), #StateInfoStep);
        #
        #    // Default mode indicates that the request comes
        #    // from web service and all the data should be retrieved
        #    // from the session database.
        #    if (mode == WHSWorkExecuteMode::WebRequestDefault)
        #    {
        #        isWebRequest = true;
        #        mode = WHSWorkExecuteMode::Login;
        #        step = 0;
        #        _con = conPoke(_con, #StateInfo, [mode, step]);
        #    }
        #
        #    // No session authentication data.
        #    // (that's propagated through the passthrough)
        #    if (conLen(conPeek(_con, #PassthroughInfo)) == 0)
        #    {
        #        if (mode != WHSWorkExecuteMode::Login)
        #        {
        #            return conNull();
        #        }
        #
        #        return _con;
        #    }
        #
        #    pass = WHSRFPassthrough::create(conPeek(_con, #PassthroughInfo));
        #
        #    if (pass.exists(#UserId))
        #    {
        #        userId = pass.lookup(#UserId);
        #    }
        #
        #    if (pass.exists(#UserSessionId))
        #    {
        #        userSessionId = str2guid(pass.lookup(#UserSessionId));
        #    }
        #
        #    if (!userId || !userSessionId)
        #    {
        #        // Login has no userId and sessionId setup
        #        // so if any of them is set we should better
        #        // not pass it through (something is wrong)
        #        if (userId || userSessionId)
        #        {
        #            return conNull();
        #        }
        #
        #        // The only allowed request which can be passed
        #        // with additional data is login request.
        #        // if it's different, something is wrong
        #        // so we don't allow to login.
        #        if (mode != WHSWorkExecuteMode::Login)
        #        {
        #            return conNull();
        #        }
        #
        #        // Data doesn't contain any authentication
        #        // information but is a login request.
        #        if (isWebRequest)
        #        {
        #            // Web requests should not contain any
        #            // pass through information except for
        #            // authentication data.
        #            pass = WHSRFPassthrough::newEmpty();
        #            _con = conPoke(_con, #PassThroughInfo, pass.pack());
        #        }
        #
        #        return _con;
        #    }
        #
        #    // At this point we know we have some authentication data.
        #    workUserSession = WHSWorkUserSession::find(userId);
        #
        #    // Non-existent session
        #    if (!workUserSession || workUserSession.UserSessionId != userSessionId)
        #    {
        #        return conNull();
        #    }
        #
        #    // It is an expensive operation to set the language so we only change if the is a difference.
        #    if (workUserSession.LanguageId
        #    &&  workUserSession.LanguageId != infolog.language())
        #    {
        #        infolog.language(workUserSession.LanguageId);
        #    }
        #
        #    if (isWebRequest)
        #    {
        #        mode = workUserSession.WorkExecuteMode;
        #        step = workUserSession.WorkExecuteStep;
        #        pass = WHSRFPassthrough::create(workUserSession.WorkExecutePassThrough);
        #        pass.insert(#UserId, userId);
        #        pass.insert(#UserSessionId, guid2str(userSessionId));
        #    }
        #
        #    if (!workUserSession.InventLocationId)
        #    {
        #        WHSWorkUserSession::updateWarehouse(userId, WHSWorkUser::find(userId).UserDefaultWarehouse);
        #    }
        #
        #
        #    pass.insert(#InventLocationId, workUserSession.InventLocationId);
        #    pass.insert(#InventSiteId, InventLocation::find(workUserSession.InventLocationId).InventSiteId);
        #
        #    if (workUserSession.PrevPass != conNull())
        #    {
        #        mode = WHSWorkExecuteMode::CycleCounting;
        #    }
        #
        #    _con = conPoke(_con, #StateInfo, [mode, step]);
        #    _con = conPoke(_con, #PassThroughInfo, pass.pack());
        #
        #    return _con;
        #}
      ENDSOURCE
      SOURCE #construct
        #static WHSWorkExecuteDisplay construct(WHSWorkExecuteMode _mode)
        #{
        #    switch (_mode)
        #    {
        #        case WHSWorkExecuteMode::Menu                                   : return WHSWorkExecuteDisplayMenu::construct();
        #        case WHSWorkExecuteMode::Login                                  : return WHSWorkExecuteDisplayLogin::construct();
        #        case WHSWorkExecuteMode::UserDirected                           : return WHSWorkExecuteDisplayUserDirected::construct();
        #        case WHSWorkExecuteMode::SystemDirected                         : return WHSWorkExecuteDisplayUserDirected::construct();
        #        case WHSWorkExecuteMode::Movement                               : return WHSWorkExecuteDisplayMovement::construct();
        #        case WHSWorkExecuteMode::MovementByTemplate                     : return WHSWorkExecuteDisplayMovementByTemplate::construct();
        #        case WHSWorkExecuteMode::Quarantine                             : return WHSWorkExecuteDisplayQuarantine::construct();
        #        case WHSWorkExecuteMode::CycleCounting                          : return WHSWorkExecuteDisplayCycleCount::construct();
        #        case WHSWorkExecuteMode::PurchaseOrderLineReceiving             : return WHSWorkExecuteDisplayPOLineReceiving::construct();
        #        case WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate    : return WHSWorkExecuteDisplayPOLineReceiving::construct();
        #        case WHSWorkExecuteMode::PurchaseOrderItemReceiving             : return WHSWorkExecuteDisplayPOItemReceiving::construct();
        #        case WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate    : return WHSWorkExecuteDisplayPOItemReceiving::construct();
        #        case WHSWorkExecuteMode::LicensePlateReceiving                  : return WHSWorkExecuteDisplayLPReceiving::construct();
        #        case WHSWorkExecuteMode::LicensePlateReceivingAndLocate         : return WHSWorkExecuteDisplayLPReceiving::construct();
        #        case WHSWorkExecuteMode::ReportAsFinished                       : return WHSWorkExecuteDisplayReportAsFinished::construct();
        #        case WHSWorkExecuteMode::ReportAsFinishedAndLocate              : return WHSWorkExecuteDisplayReportAsFinished::construct();
        #        case WHSWorkExecuteMode::KanbanPut                              : return WHSWorkExecuteDisplayKanbanPut::construct();
        #        case WHSWorkExecuteMode::KanbanPutAndLocate                     : return WHSWorkExecuteDisplayKanbanPut::construct();
        #        case WHSWorkExecuteMode::PickPack                               : return WHSWorkExecuteDisplayPickPack::construct();
        #        case WHSWorkExecuteMode::UserGrouping                           : return WHSWorkExecuteDisplayUserGrouping::construct();
        #        case WHSWorkExecuteMode::SystemGrouping                         : return WHSWorkExecuteDisplaySystemGrouping::construct();
        #        case WHSWorkExecuteMode::ValidatedUserDirected                  : return WHSWorkExecuteDisplayValidateUserDirect::construct();
        #        case WHSWorkExecuteMode::AdjustmentIn                           : return WHSWorkExecuteDisplayAdjustIn::construct();
        #        case WHSWorkExecuteMode::AdjustmentOut                          : return WHSWorkExecuteDisplayAdjustOut::construct();
        #        case WHSWorkExecuteMode::ChangeWarehouse                        : return WHSWorkExecuteDisplayChangeWarehouse::construct();
        #        case WHSWorkExecuteMode::InquiryLicensePlate                    : return WHSWorkExecuteDisplayInquiryLP::construct();
        #        case WHSWorkExecuteMode::InquiryLocation                        : return WHSWorkExecuteDisplayInquiryLocation::construct();
        #        case WHSWorkExecuteMode::About                                  : return WHSWorkExecuteDisplayAbout::construct();
        #        case WHSWorkExecuteMode::FlushNumSeqCache                       : return WHSWorkExecuteDisplayFlushNumSeqCache::construct();
        #        case WHSWorkExecuteMode::StartProdOrder                         : return WHSWorkExecuteDisplayProdStart::construct();
        #        case WHSWorkExecuteMode::ProductionScrap                        : return WHSWorkExecuteDisplayProdScrap::construct();
        #        case WHSWorkExecuteMode::ProdLastPallet                         : return WHSWorkExecuteDisplayProdLastPallet::construct();
        #        case WHSWorkExecuteMode::LicensePlateLoading                    : return WHSWorkExecuteDisplayLicensePlateLoad::construct();
        #        case WHSWorkExecuteMode::InquiryItem                            : return WHSWorkExecuteDisplayInquiryItem::construct();
        #        case WHSWorkExecuteMode::ReprintLabel                           : return WHSWorkExecuteDisplayReprintLabel::construct();
        #        case WHSWorkExecuteMode::SpotCycleCounting                      : return WHSWorkExecuteDisplaySpotCycleCounting::construct();
        #        case WHSWorkExecuteMode::ReturnOrder                            : return WHSWorkExecuteDisplayReturnOrder::construct();
        #        case WHSWorkExecuteMode::ReturnOrderAndLocate                   : return WHSWorkExecuteDisplayReturnOrder::construct();
        #        case WHSWorkExecuteMode::WarehouseTransfer                      : return WHSWorkExecuteDisplayWarehouseTransfer::construct();
        #        case WHSWorkExecuteMode::ClusterPicking                         : return WHSWorkExecuteDisplayClusterPicking::construct();
        #        case WHSWorkExecuteMode::LoadItemReceiving                      : return WHSWorkExecuteDisplayLoadItemReceiving::construct();
        #        case WHSWorkExecuteMode::LoadItemReceivingAndLocate             : return WHSWorkExecuteDisplayLoadItemReceiving::construct();
        #        case WHSWorkExecuteMode::TransferOrderItemReceiving             : return WHSWorkExecuteDisplayTOItemReceiving::construct();
        #        case WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate    : return WHSWorkExecuteDisplayTOItemReceiving::construct();
        #        case WHSWorkExecuteMode::TransferOrderLineReceiving             : return WHSWorkExecuteDisplayTOLineReceiving::construct();
        #        case WHSWorkExecuteMode::TransferOrderLineReceivingAndLocate    : return WHSWorkExecuteDisplayTOLineReceiving::construct();
        #        case WHSWorkExecuteMode::LicensePlateBuild                      : return WHSWorkExecuteDisplayLicensePlateBuild::construct();
        #        case WHSWorkExecuteMode::LicensePlateBreak                      : return WHSWorkExecuteDisplayLicensePlateBreak::construct();
        #        case WHSWorkExecuteMode::CycleCountGrouping                     : return WHSWorkExecuteDisplayCycleCountGrouping::construct();
        #        case WHSWorkExecuteMode::DriverCheckIn                          : return WHSWorkExecuteDisplayDriverCheckInOut::construct();
        #        case WHSWorkExecuteMode::DriverCheckOut                         : return WHSWorkExecuteDisplayDriverCheckInOut::construct();
        #        case WHSWorkExecuteMode::ChangeBatchDisposition                 : return WHSWorkExecuteDisplayChangeBatchDisp::construct();
        #        case WHSWorkExecuteMode::PackToNestedLPs                        : return WHSWorkExecuteDisplayPackToNestedLPs::construct();
        #        case WHSWorkExecuteMode::ConfirmationDialog                     : return WHSWorkExecuteDisplayConfirmationDialog::construct();
        #        case WHSWorkExecuteMode::WorkList                               : return WHSWorkExecuteDisplayListWork::construct();
        #        default                                                         : throw error("@WAX1238");
        #    }
        #}
      ENDSOURCE
      SOURCE #createXML
        #private static XML createXML(container _con)
        #{
        #    container                   con = _con;
        #    container                   subCon;
        #    int                         length;
        #    XML                         result;
        #    int                         i;
        #    System.Xml.XmlTextWriter    xmlTextWriter;
        #    System.IO.StringWriter      stringWriter;
        #    System.Text.StringBuilder   stringBuilder;
        #
        #    WHSRFPassthrough pass;
        #
        #    length = conLen(con);
        #
        #    // Initialize a blank XML document
        #    stringWriter = new System.IO.StringWriter();
        #    xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter);
        #    xmlTextWriter.set_Formatting(System.Xml.Formatting::None);
        #    xmlTextWriter.WriteProcessingInstruction(#XmlXml, #XmlVersion);
        #
        #    // Check if container has any authentication data and controls. If not the return blank XML
        #    if (length >= #PassThroughInfo)
        #    {
        #        xmlTextWriter.WriteStartElement(#XMLParentNode);
        #        xmlTextWriter.WriteStartElement(#XMLControlsNode, #XMLControlsNode);
        #        // Controls
        #        for (i = #ControlsStart; i <= length; ++i)
        #        {
        #            xmlTextWriter.WriteStartElement(#XMLControlNode, '');
        #            subCon = conPeek(con, i);
        #            xmlTextWriter.WriteAttributeString(#XMLControlCtrlType, conPeek(subCon, #controlType));
        #            xmlTextWriter.WriteAttributeString(#XMLControlName, conPeek(subCon, #name));
        #            xmlTextWriter.WriteAttributeString(#XMLControlLabel, conPeek(subCon, #label));
        #            xmlTextWriter.WriteAttributeString(#XMLControlNewLine, int2str(conPeek(subCon, #newLine)));
        #            xmlTextWriter.WriteAttributeString(#XMLControlData, WHSWorkExecuteDisplay::prepareControlData(conPeek(subCon, #data)));
        #            xmlTextWriter.WriteAttributeString(#XMLControlType, conPeek(subCon, #type));
        #            xmlTextWriter.WriteAttributeString(#XMLControlLength, int2str(conPeek(subCon, #length)));
        #            xmlTextWriter.WriteAttributeString(#XMLControlError, conPeek(subCon, #error));
        #            xmlTextWriter.WriteAttributeString(#XMLControlDefaultButton, int2str(conPeek(subCon, #defaultButton)));
        #            xmlTextWriter.WriteAttributeString(#XMLControlEnabled, int2str(conPeek(subCon, #enabled)));
        #            xmlTextWriter.WriteAttributeString(#XMLControlSelected, conPeek(subCon, #selected));
        #            xmlTextWriter.WriteAttributeString(#XMLControlColor, conPeek(subCon, #color));
        #            xmlTextWriter.WriteEndElement();
        #        }
        #        xmlTextWriter.WriteEndElement();
        #
        #        // Pass through
        #        subCon = conPeek(con, #PassthroughInfo);
        #        if (conLen(subCon) > 0)
        #        {
        #            pass = WHSRFPassthrough::create(subCon);
        #
        #            if (pass.exists(#UserId) && pass.exists(#UserSessionId))
        #            {
        #                xmlTextWriter.WriteStartElement(#XMLAuthenticationNode);
        #                xmlTextWriter.WriteAttributeString(#XMLAuthNodeUserId, pass.lookup(#UserId));
        #                xmlTextWriter.WriteAttributeString(#XMLAuthNodeSessionId, pass.lookup(#UserSessionId));
        #                xmlTextWriter.WriteEndElement();
        #            }
        #
        #            // The infolog.language is updated at session authentication
        #            xmlTextWriter.WriteStartElement(#XMLUserCulture);
        #            XmlTextWriter.WriteString(infolog.language());
        #            xmlTextWriter.WriteEndElement();
        #        }
        #        xmlTextWriter.WriteEndElement();
        #    }
        #
        #    stringBuilder = stringWriter.GetStringBuilder();
        #    result = stringBuilder.ToString();
        #    xmlTextWriter.Close();
        #    return result;
        #}
        #
      ENDSOURCE
      SOURCE #dictTypeForTableField
        #/// <summary>
        #///    Retrieves the type of a table field.
        #/// </summary>
        #/// <param name="_tableId">
        #///    The table ID of the field.
        #/// </param>
        #/// <param name="_fieldId">
        #///    The field ID.
        #/// </param>
        #/// <returns>
        #///    The type of the field; otherwise, null.
        #/// </returns>
        #/// <remarks>
        #///    The method will return null for fields that are not based on extended data types,
        #///    for example enums.
        #/// </remarks>
        #protected static DictType dictTypeForTableField(
        #    TableId _tableId,
        #    FieldId _fieldId)
        #{
        #    DictTable   dictTable;
        #    DictField   dictField;
        #    DictType    dictType;
        #
        #    if (   _tableId
        #        && _fieldId)
        #    {
        #        dictTable = new DictTable(_tableId);
        #        if (dictTable)
        #        {
        #            dictField = new DictField(dictTable.id(),_fieldId);
        #            if (dictField)
        #            {
        #                if (dictField.typeId())
        #                {
        #                    dictType = new DictType(dictField.typeId());
        #                }
        #            }
        #        }
        #    }
        #
        #    return dictType;
        #}
      ENDSOURCE
      SOURCE #generateWorkUserDisplaySettingsXML
        #static XML generateWorkUserDisplaySettingsXML()
        #{
        #    XmlDocument                 xmlDocument = XmlDocument::newBlank();
        #    XmlNode                     xmlNode;
        #    XmlNode                     settingsNode;
        #    XmlNode                     settingNode;
        #    XmlNode                     nameNode;
        #    XmlNode                     cssFileNode;
        #    XmlNode                     criteriaNode;
        #    XmlNode                     defaultNode;
        #    XmlNode                     viewNode;
        #    XmlNode                     hotkeysNode;
        #    WHSWorkUserDisplaySettings  whsWorkUserDisplaySettings;
        #    xInfo                       xInfo = new xInfo();
        #
        #    xmlNode = xmlDocument.createElement(#Configurations);
        #    xmlDocument.appendChild(xmlNode);
        #
        #    settingsNode = xmlDocument.createElement(#DisplaySettings);
        #    xmlNode.appendChild(settingsNode);
        #
        #    while select whsWorkUserDisplaySettings
        #    {
        #        settingNode = xmlDocument.createElement(#DisplaySetting);
        #        settingsNode.appendChild(settingNode);
        #
        #        nameNode = xmlDocument.createElement(fieldStr(WHSWorkUserDisplaySettings, Name));
        #        nameNode.text(whsWorkUserDisplaySettings.Name);
        #        settingNode.appendChild(nameNode);
        #
        #        cssFileNode = xmlDocument.createElement(fieldStr(WHSWorkUserDisplaySettings, css));
        #        cssFileNode.text(whsWorkUserDisplaySettings.css);
        #        settingNode.appendChild(cssFileNode);
        #
        #        criteriaNode = xmlDocument.createElement(fieldStr(WHSWorkUserDisplaySettings, Criteria));
        #        criteriaNode.text(whsWorkUserDisplaySettings.Criteria);
        #        settingNode.appendChild(criteriaNode);
        #
        #        defaultNode = xmlDocument.createElement(fieldStr(WHSWorkUserDisplaySettings, Default));
        #        defaultNode.text(int2str(whsWorkUserDisplaySettings.Default));
        #        settingNode.appendChild(defaultNode);
        #
        #        viewNode = xmlDocument.createElement(fieldStr(WHSWorkUserDisplaySettings, View));
        #        viewNode.text(whsWorkUserDisplaySettings.View);
        #        settingNode.appendChild(viewNode);
        #
        #        hotkeysNode = xmlDocument.createElement(fieldStr(WHSWorkUserDisplaySettings, Hotkeys));
        #        hotkeysNode.text(whsWorkUserDisplaySettings.Hotkeys);
        #        settingNode.appendChild(hotkeysNode);
        #    }
        #
        #    return xmlDocument.xml();
        #}
      ENDSOURCE
      SOURCE #getBatchExpDate
        #/// <summary>
        #/// Gets the batch expiration date of the current batch entered in the RF device, either from
        #/// the created <c>InventBatch</c> record if there is any or from the <c>WHSInventBatchReceiptDetails</c> record.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The current item ID.
        #/// </param>
        #/// <param name="_inventBatchId">
        #/// The current batch ID.
        #/// </param>
        #/// <param name="_receiptId">
        #/// The current receipt ID.
        #/// </param>
        #/// <returns>
        #/// The expiration date of the current batch if there is any specified and if the batch is already created
        #/// or registered in the <c>WHSInventBatchReceiptDetails</c> record.
        #/// </returns>
        #/// <remarks>
        #/// The batches during the RF processing are only registered in the related <c>WHSInventBatchReceiptDetails</c> record
        #/// and in case the same batch is scanned (eg. for batch/serial enabeld items when receiving different serials on the same batch)
        #/// the expiration date should be the same as the one entered the first time.
        #/// </remarks>
        #public static InventBatchExpDate getBatchExpDate(
        #                                ItemId          _itemId,
        #                                InventBatchId   _inventBatchId,
        #                                WHSReceiptId    _receiptId)
        #{
        #    InventBatchExpDate expDate;
        #    InventBatch        inventBatch;
        #
        #    inventBatch = InventBatch::find(_inventBatchId, _itemId);
        #
        #    if (inventBatch)
        #    {
        #        expDate = inventBatch.ExpDate;
        #    }
        #    else
        #    {
        #        expDate = WHSInventBatchReceiptDetails::find(_receiptId, _itemId, _inventBatchId).ExpDate;
        #    }
        #
        #    return expDate;
        #}
      ENDSOURCE
      SOURCE #getNextForm
        #public static server container getNextForm(container _con)
        #{
        #    return conPeek(WHSWorkExecuteDisplay::getNextFormState(_con), 1);
        #}
      ENDSOURCE
      SOURCE #getNextFormHandHeld
        #/// <summary>
        #/// Generates the next form state XML based on the given form state.
        #/// </summary>
        #/// <param name="_xml">
        #/// The current form state as XML.
        #/// </param>
        #/// <returns>
        #/// The next form state as XML.
        #/// </returns>
        #public static str getNextFormHandHeld(str _xml)
        #{
        #    container               con;
        #
        #    con = WHSWorkExecuteDisplay::readXML(_xml);
        #    return WHSWorkExecuteDisplay::getNextFormXML(con);
        #}
      ENDSOURCE
      SOURCE #getNextFormState
        #/// <summary>
        #/// Generates the next form state based on the given form state.
        #/// </summary>
        #/// <param name="_con">
        #/// A container with the current form state.
        #/// </param>
        #/// <returns>
        #/// A container with a form state container as the first element
        #/// and an XML representation of the form state, if it was created,
        #/// as the second element.
        #/// </returns>
        #private static server container getNextFormState(container _con)
        #{
        #    WHSWorkExecuteDisplay   workExecuteDisplay;
        #    WHSWorkActivity         workActivity;
        #    WHSMenuItemName         menuItemName;
        #    WHSWorkGrouping         workGrouping;
        #    container               tmp;
        #    container               ret;
        #    container               formContainer;
        #    WHSRFPassthrough        tmpPass;
        #    WHSRFPassthrough        pass;
        #    WHSRFMenuItemTable      menuItem;
        #    int                     mode = 0;
        #    int                     step = 0;
        #    str                     buttonClicked = '';
        #    str                     xmlState = '';
        #
        #    // Session authentication
        #    container               con = WHSWorkExecuteDisplay::authenticateSession(_con);
        #    boolean                 updateSession = false;
        #    WHSUserId               userId = '';
        #    WHSWorkUserSessionId    userSessionId = emptyGuid();
        #
        #
        #    // Read out variables
        #    if (con)
        #    {
        #        mode = conPeek(conPeek(con, #StateInfo), #StateInfoMode);
        #        step = conPeek(conPeek(con, #StateInfo), #StateInfoStep);
        #
        #        tmp = conPeek(con, #PassthroughInfo);
        #        if (conLen(tmp) > 0)
        #        {
        #            pass = WHSRFPassthrough::create(tmp);
        #        }
        #    }
        #
        #    if (!pass)
        #    {
        #       pass = WHSRFPassthrough::newEmpty();
        #    }
        #
        #    if (pass.exists(#UserId))
        #    {
        #        userId = pass.lookup(#UserId);
        #        if (userId && pass.exists(#UserSessionId))
        #        {
        #            userSessionId = str2guid(pass.lookup(#UserSessionId));
        #            updateSession = true;
        #        }
        #    }
        #
        #    workExecuteDisplay = WHSWorkExecuteDisplay::construct(mode);
        #    buttonClicked = workExecuteDisplay.getButtonClicked(con);
        #    workActivity = WHSRFMenuItemTable::find(buttonClicked).WorkActivity;
        #
        #    if (buttonClicked == #RFCancel || workActivity == WHSWorkActivity::LogOff || (buttonClicked == #RFYes && pass.exists(#Confirmresult)))
        #    {
        #        if (pass && pass.exists(#WorkId))
        #        {
        #            // If in a work group need unlock all work
        #            if (pass.exists(#WorkGroupingId))
        #            {
        #                while select WorkId from workGrouping
        #                    where workGrouping.WorkGroupingId == pass.lookup(#WorkGroupingId)
        #                {
        #                    WHSWorkTable::lockUnlockWork(workGrouping.WorkId, '');
        #                    WHSWorkTable::unskipPutLines(workGrouping.WorkId);
        #                }
        #            }
        #            else
        #            {
        #                WHSWorkTable::lockUnlockWork(pass.lookup(#WorkId), '');
        #                WHSWorkTable::unskipPutLines(pass.lookup(#WorkId));
        #            }
        #
        #            if (mode == WHSWorkExecuteMode::MovementByTemplate)
        #            {
        #                // Delete Work if we cancel on the first pick of a Movement By Template
        #                if (!pass.exists(#LineNum) || WHSWorkLine::find(pass.lookup(#WorkId), pass.lookupNum(#LineNum)).isFirstPick())
        #                {
        #                    ttsbegin;
        #
        #                    WHSWorkTable::cancelWork(pass.lookup(#WorkId));
        #                    WHSWorkTable::find(pass.lookup(#WorkId), true).delete();
        #
        #                    ttscommit;
        #                }
        #            }
        #            else if (mode == WHSWorkExecuteMode::ClusterPicking && pass.exists(#ClusterId))
        #            {
        #                // Cleanup cluster if user cancels during creation
        #                WHSWorkClusterTable::cleanupCluster(pass.lookup(#ClusterId));
        #            }
        #            else if ((mode == WHSWorkExecuteMode::SystemGrouping    ||
        #                      mode == WHSWorkExecuteMode::UserGrouping)     &&
        #                     pass.exists(#WorkGroupingId))
        #            {
        #                WHSWorkGrouping::cleanupWorkGrouping(pass.lookup(#WorkGroupingId));
        #            }
        #        }
        #
        #        if (pass.exists(#CameFromWorkList))
        #        {
        #            pass.insert(#MenuItem, pass.lookup(#CameFromWorkList));
        #            menuItem = WHSRFMenuItemTable::find(pass.lookup(#CameFromWorkList));
        #            mode = WHSRFMenuItemTable::getWHSWorkExecuteMode(menuItem);
        #            workExecuteDisplay = null;
        #
        #            con = conPoke(con, #StateInfo, [mode, 0]);
        #        }
        #
        #        menuItemName = pass.lookupStr(#MenuItem);
        #        menuItem = WHSRFMenuItemTable::find(menuItemName);
        #
        #        if (!menuItem.ConfirmCancel || step == 1)
        #        {
        #            pass = WHSRFPassthrough::newEmpty();
        #            pass.insert(#UserId, userId);
        #            pass.insert(#UserSessionId, guid2str(userSessionId));
        #            pass.insert(#MenuItem, menuItemName);
        #            con = conPoke(con, #PassthroughInfo, pass.pack());
        #        }
        #
        #        if (workActivity == WHSWorkActivity::LogOff)
        #        {
        #            WHSWorkUserSession::deleteSession(userId);
        #            if (pass.exists(#UserId))
        #            {
        #                pass.remove(#UserId);
        #                pass.remove(#UserSessionId);
        #            }
        #            con = conNull();
        #            mode = WHSWorkExecuteMode::Login;
        #            step = 0;
        #            buttonClicked = '';
        #            updateSession = false;
        #            userId = '';
        #            userSessionId = emptyGuid();
        #            workExecuteDisplay = WHSWorkExecuteDisplay::construct(mode);
        #        }
        #        else
        #        {
        #            if (mode == WHSWorkExecuteMode::About || step == 1 || menuItem.MenuItemDirectedBy == WHSMenuItemDirectedBy::SystemDirected ||
        #                mode == WHSWorkExecuteMode::CycleCounting || mode == WHSWorkExecuteMode::CycleCountingReview || mode == WHSWorkExecuteMode::ClusterPicking ||
        #                (step == 3 && mode == WHSWorkExecuteMode::PurchaseOrderLine) ||
        #                (step == 2 && (mode == WHSWorkExecuteMode::MovementLicensePlate) || (mode == WHSWorkExecuteMode::QuarantineLicensePlate)))
        #            {
        #                mode = WHSWorkExecuteMode::Menu;
        #                step = 0;
        #                con = conPoke(con, #StateInfo, [mode, step]);
        #                workExecuteDisplay = WHSWorkExecuteDisplay::construct(mode);
        #            }
        #            else if (!menuItem.ConfirmCancel)
        #            {
        #                step = 0;
        #                tmp = conPoke(conPeek(con, #StateInfo), #StateInfoStep, step);
        #                con = conPoke(con, #StateInfo, tmp);
        #            }
        #        }
        #    }
        #
        #    if (buttonClicked == #RFBack)   // Back
        #    {
        #        mode = WHSWorkExecuteMode::Menu;
        #        step = 0;
        #        workExecuteDisplay = WHSWorkExecuteDisplay::construct(mode);
        #    }
        #
        #    // Process the correct flow based on the mode/step combination.
        #    if (!workExecuteDisplay)
        #    {
        #        workExecuteDisplay = WHSWorkExecuteDisplay::construct(mode);
        #    }
        #
        #    workExecuteDisplay.setGlobals(mode, step, userId, pass);
        #    formContainer = workExecuteDisplay.displayForm(con, buttonClicked);
        #    formContainer = workExecuteDisplay.clearClickedButtons(formContainer);
        #
        #    if (mode == WHSWorkExecuteMode::Login && conLen(conPeek(formContainer, #PassthroughInfo)) > 0)
        #    {
        #        tmpPass = WHSRFPassthrough::create(conPeek(formContainer, #PassthroughInfo));
        #        if (!updateSession)
        #        {
        #            updateSession = tmpPass.exists(#OverrideSession);
        #            if (updateSession)
        #            {
        #                tmpPass.remove(#OverrideSession);
        #                formContainer = conPoke(formContainer, #PassthroughInfo, tmpPass.pack());
        #            }
        #        }
        #        else
        #        {
        #            updateSession = !workExecuteDisplay.hasError(formContainer);
        #        }
        #    }
        #
        #
        #    if (updateSession)
        #    {
        #        xmlState = WHSWorkExecuteDisplay::createXML(formContainer);
        #        // The current session language is set on the session authentication step
        #        WHSWorkExecuteDisplay::updateWorkUserSession(userId, formContainer, '', xmlState);
        #    }
        #
        #    ret = [formContainer, xmlState];
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getNextFormXML
        #/// <summary>
        #/// Generates the next form state XML based on the given form state.
        #/// </summary>
        #/// <param name="_con">
        #/// A container with the current form state.
        #/// </param>
        #/// <returns>
        #/// A form state as XML.
        #/// </returns>
        #public static server str getNextFormXML(container _con)
        #{
        #    container   nextFormStateCon;
        #    str         ret;
        #
        #    nextFormStateCon = WHSWorkExecuteDisplay::getNextFormState(_con);
        #
        #    // if the form state is returned as XML then use it, otherwise create it.
        #    if(conLen(nextFormStateCon) > 1 && conPeek(nextFormStateCon, 2) != '')
        #    {
        #        ret = conPeek(nextFormStateCon, 2);
        #    }
        #    else
        #    {
        #        ret = WHSWorkExecuteDisplay::createXML(conPeek(nextFormStateCon, 1));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #num2StrDisplay
        #/// <summary>
        #/// Method to convert real number value into a string version to be used during RF processing.
        #/// </summary>
        #/// <param name="_num">
        #/// The real number value that will be converted into a string.
        #/// </param>
        #/// <returns>
        #/// A string representing the passed in real number value.
        #/// </returns>
        #public static str num2StrDisplay(real _num)
        #{
        #    System.Decimal bigNumber;
        #    str            result;
        #
        #    bigNumber = System.Decimal::Parse(num2str(_num, 1, numOfDec(_num), DecimalSeparator::Dot, ThousandSeparator::None), System.Globalization.CultureInfo::get_InvariantCulture());
        #
        #    result = System.Convert::ToString(bigNumber,  System.Globalization.CultureInfo::CreateSpecificCulture(infolog.language()));
        #
        #    return result;
        #}
      ENDSOURCE
      SOURCE #prepareControlData
        #private static str prepareControlData(anytype _data)
        #{
        #    str result = _data;
        #
        #    switch (typeOf(_data))
        #    {
        #        case Types::Integer:
        #        case Types::Int64:
        #        case Types::Real:
        #            result = WHSWorkExecuteDisplay::num2StrDisplay(_data);
        #            break;
        #    }
        #
        #    return result;
        #}
      ENDSOURCE
      SOURCE #readXML
        #/// <summary>
        #/// Parses given XML document into the internal
        #/// data container format.
        #/// </summary>
        #/// <param name="_xmlString">
        #/// XML to parse.
        #/// </param>
        #/// <returns>
        #/// Data container with current state information.
        #/// </returns>
        #protected static container readXML(XML _xmlString)
        #{
        #    System.IO.StringReader      stringReader = new System.IO.StringReader(_xmlString);
        #    System.Xml.XmlTextReader    reader =  new System.Xml.XmlTextReader(stringReader);
        #    Map                         elementMap = new Map(Types::String, Types::String);
        #    int                         noOfControls = 0;
        #    str                         elementName;
        #    int                         i = 0;
        #    container                   controlCon;
        #    container                   con;
        #    WHSRFPassthrough            pass = new WHSRFPassthrough(Types::String, Types::String);
        #
        #    #define.EmptyXML('<?xml version=\"1.0\" encoding=\"utf-8\"?>')
        #
        #    // Local method for generating a key for the element map
        #    str makeKey(str _key1, str _key2)
        #    {
        #        return _key1 + '#' + _key2;
        #    }
        #
        #    // Local method to map elements attributes
        #    void mapAttributes(str _elementName)
        #    {
        #        boolean moreAttr;
        #        str     attrName;
        #        str     attrValue;
        #
        #        // Map the element itself
        #        elementMap.insert(_elementName, '');
        #
        #        // Map attributes if any
        #        moreAttr = reader.MoveToFirstAttribute();
        #        while (moreAttr)
        #        {
        #            attrName = reader.get_Name();
        #            attrValue = reader.get_Value();
        #            elementMap.insert(makeKey(_elementName, attrName), attrValue);
        #            moreAttr = reader.MoveToNextAttribute();
        #        }
        #    }
        #
        #    // Local method to get the attribute value.
        #    str getAttributeValue(str _elementName, str _attrName)
        #    {
        #        return elementMap.lookup(makeKey(_elementName, _attrName));
        #    }
        #
        #    // Start reading XML
        #    try
        #    {
        #        if (!_xmlString || _xmlString == #EmptyXML)
        #        {
        #            return con;
        #        }
        #
        #        // Read through the XML and get all the elements and associated attributes
        #        while (reader.Read())
        #        {
        #            if (reader.get_NodeType() == System.Xml.XmlNodeType::Element)
        #            {
        #                elementName = reader.get_Name();
        #                switch (elementName)
        #                {
        #                    case #XMLParentNode:
        #                    case #XMLAuthenticationNode:
        #                        mapAttributes(elementName);
        #                        break;
        #                    case #XMLControlNode:
        #                        mapAttributes(makeKey(elementName, int2str(noOfControls)));
        #                        noOfControls++;
        #                        break;
        #                }
        #            }
        #        }
        #
        #        // Add the Mode/Step to the container
        #        con = conIns(con, #StateInfo, [WHSWorkExecuteMode::WebRequestDefault, 0]);
        #
        #        // Add the Pass Through data to the container
        #        if (elementMap.exists(#XMLAuthenticationNode))
        #        {
        #            pass.insert(#UserId, getAttributeValue(#XMLAuthenticationNode, #XMLAuthNodeUserId));
        #            pass.insert(#UserSessionId, getAttributeValue(#XMLAuthenticationNode, #XMLAuthNodeSessionId));
        #        }
        #        con = conIns(con, #PassthroughInfo, pass.pack());
        #
        #        // Add the Controls to the container
        #        for (i = 0; i < noOfControls; i++)
        #        {
        #            elementName = makeKey(#XMLControlNode, int2str(i));
        #            controlCon = conNull();
        #            controlCon = conIns(controlCon, 1, getAttributeValue(elementName, #XMLControlCtrlType),
        #                                               getAttributeValue(elementName, #XMLControlName),
        #                                               getAttributeValue(elementName, #XMLControlLabel),
        #                                               getAttributeValue(elementName, #XMLControlNewLine),
        #                                               getAttributeValue(elementName, #XMLControlData),
        #                                               getAttributeValue(elementName, #XMLControlType),
        #                                               getAttributeValue(elementName, #XMLControlLength),
        #                                               getAttributeValue(elementName, #XMLControlError),
        #                                               getAttributeValue(elementName, #XMLControlDefaultButton),
        #                                               getAttributeValue(elementName, #XMLControlEnabled),
        #                                               getAttributeValue(elementName, #XMLControlSelected),
        #                                               getAttributeValue(elementName, #XMLControlColor));
        #            con = conIns(con, i + #ControlsStart, controlCon);
        #        }
        #    }
        #    catch
        #    {
        #        // if XML is not valid return empty container this will redirect user to the login screen.
        #        con = conNull();
        #    }
        #
        #    return con;
        #}
      ENDSOURCE
      SOURCE #str2numDisplay
        #/// <summary>
        #/// Method to convert string values representing numbers into real values.
        #/// </summary>
        #/// <param name="_str">
        #/// The string representing a number that will be converted.
        #/// </param>
        #/// <returns>
        #/// A real number value converted from the passed in string.
        #/// </returns>
        #/// <remarks>
        #/// The empty string will be converted to 0.0.
        #///</remarks>
        #public static real str2numDisplay(str _str)
        #{
        #    real ret;
        #
        #    // Added back to SYP
        #    // The X++ compiler raises a syntax error if a method starts with a .NET method call,
        #    // this empty statement resolves the error.
        #    ;
        #
        #    if (_str && !System.Decimal::TryParse(
        #            _str,
        #            System.Globalization.NumberStyles::Number,
        #            System.Globalization.CultureInfo::CreateSpecificCulture(infolog.language()),
        #            byRef ret))
        #    {
        #        throw error(strfmt("@SYP4861617", _str, typeOf(ret)));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #str2realDisplay
        #/// <summary>
        #/// Method to convert string values representing numbers into real values.
        #/// </summary>
        #/// <param name="_str">
        #/// The string representing a number that will be converted.
        #/// </param>
        #/// <returns>
        #/// A real number value converted from the passed in string.
        #/// </returns>
        #public static real str2realDisplay(str _str)
        #{
        #    real ret;
        #    System.Decimal decimal;
        #    str            decimalStr;
        #    boolean        isParsed;
        #
        #    // Added back to SYP
        #    // The X++ compiler raises a syntax error if a method starts with a .NET method call,
        #    // this empty statement resolves the error.
        #    ;
        #
        #    isParsed = System.Decimal::TryParse(
        #        _str,
        #        System.Globalization.NumberStyles::Number,
        #        System.Globalization.CultureInfo::CreateSpecificCulture(infolog.language()),
        #        byRef decimal);
        #
        #    if (!isParsed)
        #    {
        #       ret = 0;
        #    }
        #    else
        #    {
        #        decimalStr = System.Convert::ToString(decimal, System.Globalization.CultureInfo::get_InvariantCulture());
        #
        #        ret = str2num(decimalStr);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #updateWorkUserSession
        #/// <summary>
        #/// Updates data in the given user session
        #/// or creates new one if session doesn't exist.
        #/// </summary>
        #/// <param name="_userId">
        #/// Identifier of the user.
        #/// </param>
        #/// <param name="_con">
        #/// Data container.
        #/// </param>
        #/// <param name="_inventLocationId">
        #/// Inventory location value to be set on the session.
        #/// </param>
        #/// <param name="_xml">
        #/// form state XML.
        #/// </param>
        #/// <param name="_languageId">
        #/// The language ID of the user session.
        #/// </param>
        #/// <returns>
        #/// Session that has been updated or created.
        #/// </returns>
        #protected static WHSWorkUserSession updateWorkUserSession(
        #                                                    WHSUserId           _userId,
        #                                                    container           _con,
        #                                                    InventLocationId    _inventLocationId = '',
        #                                                    str                 _xml = '',
        #                                                    LanguageId          _languageId = infolog.language())
        #{
        #    container stateData = conPeek(_con, #StateInfo);
        #
        #    if(_xml == '')
        #    {
        #        _xml = WHSWorkExecuteDisplay::createXML(_con);
        #    }
        #
        #    return WHSWorkUserSession::createOrUpdate(_userId,
        #                                                conPeek(stateData, #StateInfoMode),
        #                                                conPeek(stateData, #StateInfoStep),
        #                                                conPeek(_con, #PassThroughInfo),
        #                                                _languageId,
        #                                                _xml,
        #                                                _inventLocationId);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: MCR

; Microsoft Dynamics AX Macro: WHSRF unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #WHSRF
    #// types
    ##define.TypeString('String')
    ##define.TypeDate('Date')
    ##define.TypeTime('Time')
    ##define.TypeInt('Integer')
    ##define.TypeInt64('Int64')
    ##define.TypeReal('Real')
    ##define.TypeUndefined('Undefined')
    ##define.TypeOther('Other')
    #
    #// security
    ##define.PswdKeyGenFuncIterations(1000)
    #
    #// Used for RF Menu and Menu Item setup
    ##define.MenuItemCtrl('Menu Item')
    ##define.MenuCtrl('Menu')
    #
    #// Used for WHS form control types
    ##define.RFButton('button')
    ##define.RFLabel('label')
    ##define.RFText('text')
    ##define.RFPassword('password')
    ##define.RFListbox('listbox')
    ##define.RFCombobox('combobox')
    ##define.RFError('error')
    #
    #// Used for WHS form control names
    ##define.LocOrLP('LocOrLP')
    ##define.ItemId('ItemId')
    ##define.ItemName('ItemName')
    ##define.Qty('Qty')
    ##define.CurrentQty('CurrentQty')
    ##define.QtyUOM('QtyUOM')
    ##define.WMSLocationId('WMSLocationId')
    ##define.LocVerification('LocVerification')
    ##define.LicensePlateId('LicensePlateId')
    ##define.UOM('UOM')
    ##define.WorkId('WorkId')
    ##define.ProdId('ProdId')
    ##define.KanbanCardId('KanbanCardId')
    ##define.KanbanId('KanbanId')
    ##define.KanbanOrCardId('KanbanOrCardId')
    ##define.CheckDigit('CheckDigit')
    ##define.BatchId('InventBatchId')
    ##define.SerialId('InventSerialId')
    ##define.ProfileId_RU('InventProfileId_RU')
    ##define.OwnerId_RU('InventOwnerId_RU')
    ##define.GtdId_RU('InventGtdId_RU')
    ##define.SizeId('InventSizeId')
    ##define.ColorId('InventColorId')
    ##define.ConfigId('ConfigId')
    ##define.StyleId('InventStyleId')
    ##define.RFDescription1('RFDescription1')
    ##define.RFDescription2('RFDescription2')
    ##define.RFQtyLabel('RFQtyLabel')
    ##define.ToLocation('ToLocation')
    ##define.InventoryStatus('InventStatusId')
    ##define.LineNum('LineNum')
    ##define.PONum('PONum')
    ##define.LoadId('LoadId')
    ##define.LPLoop('LPLoop')
    ##define.CurrentUOM('CurrentUOM')
    ##define.RunningQty('RunningQty')
    ##define.RecvLocationId('RecvLocationId')
    ##define.RecvException('RecvException')
    ##define.AdjustmentType('WHSAdjustmentType')
    ##define.CycleCountUOM1('CycleCountUOM1')
    ##define.CycleCountUOM2('CycleCountUOM2')
    ##define.CycleCountUOM3('CycleCountUOM3')
    ##define.CycleCountUOM4('CycleCountUOM4')
    ##define.CycleCountQty1('CycleCountQty1')
    ##define.CycleCountQty2('CycleCountQty2')
    ##define.CycleCountQty3('CycleCountQty3')
    ##define.CycleCountQty4('CycleCountQty4')
    ##define.DimPrompt('DimPrompt')
    ##define.BatchLoop('BatchLoop')
    ##define.ExpDate('ExpDate')
    ##define.BatchQty('BatchQty')
    ##define.BatchUOM('BatchUOM')
    ##define.DimQty('DimQty')
    ##define.DimRunningQty('DimRunningQty')
    ##define.DimUOM('DimUOM')
    ##define.Disposition('Disposition')
    ##define.BatchQtyToPick('BatchQtyToPick')
    ##define.BatchQtyPicked('BatchQtyPicked')
    ##define.Custom('Custom')
    ##define.LPTotal('LPTotal')
    ##define.QtyScrapped('QtyScrapped')
    ##define.QtyToScrap('QtyToScrap')
    ##define.QtyVerification('QtyVerification')
    ##define.ClusterPickQtyVerification('ClusterPickQtyVerification')
    ##define.QtyVerifyUOM('QtyVerifyUOM')
    ##define.GroupingLabel('GroupingLabel')
    ##define.Comments('Comments')
    ##define.FullQty('FullQty')
    ##define.SerialLoop('SerialLoop')
    ##define.RMANum('RMANum')
    ##define.ToWarehouse('ToWarehouse')
    ##define.Scan('Scan')
    ##define.ClusterId('ClusterId')
    ##define.PositionName('PositionName')
    ##define.ClusterSort('ClusterSort')
    ##define.TONum('TONum')
    ##define.TOLineNum('TOLineNum')
    ##define.ParentLP('ParentLP')
    ##define.RFTitle('RFTitle')
    ##define.ChildLP('ChildLP')
    ##define.StartLocationId('StartLocationId')
    ##define.ZoneId('ZoneId')
    ##define.WorkPoolId('WorkPoolId')
    ##define.CheckInOutId('CheckInOutId')
    ##define.Carrier('Carrier')
    ##define.VendBatchInfo('VendorBatchInfo')
    ##define.VendBatchDate('VendBatchDate')
    ##define.UseVendBatchDate('UseVendBatchDate')
    ##define.VendExpDate('VendExpDate')
    ##define.UseVendExpDate('UseVendExpDate')
    ##define.CountryOfOrigin1('CountryOfOrigin1')
    ##define.CountryOfOrigin2('CountryOfOrigin2')
    ##define.VendBatchId('VendBatchId')
    ##define.Potency('Potency')
    ##define.BatchRFLabel('BatchRFLabel')
    ##define.PotencyRFLabel('PotencyRFLabel')
    ##define.BaseAttributeId('BaseAttributeId')
    ##define.Information('Information')
    ##define.BatchDisposition('BatchDisposition')
    ##define.BatchDispositionDefault('BatchDispositionDefault')
    ##define.FromBatchDisposition('FromBatchDisposition')
    ##define.ProductConfirmation('ProductConfirmation')
    ##define.ConfirmTitle('ConfirmTitle')
    ##define.ConfirmText('ConfirmText')
    ##define.LastBox('LastBox')
    #
    #// Used for WHS form buttons
    ##define.RFException('Exception')
    ##define.RFNextException('NextException')
    ##define.RFOverride('Override')
    ##define.RFDrop('Drop')
    ##define.RFSkip('Skip')
    ##define.RFBack('Back')
    ##define.RFCancel('Cancel')
    ##define.RFOK('OK')
    ##define.RFSplit('Split')
    ##define.RFFull('Full')
    ##define.RFDone('Done')
    ##define.RFNoLocation('NoLocation')
    ##define.RFShortPick('ShortPick')
    ##define.RFMoveLP('MoveLP')
    ##define.RFFinished('Finished')
    ##define.RFAddLP('AddLP')
    ##define.RFPass('Pass')
    ##define.RFYes('Yes')
    ##define.RFNo('No')
    ##define.RFPrev('PrevPage')
    ##define.RFNext('NextPage')
    ##define.RFFilter('FilterTransType')
    ##define.RFApplyFilter('ApplyFilter')
    ##define.RFSerialUnreadable('UnreadableSerial')
    ##define.RFSplitPut('SplitPut')
    ##define.RFOverrideLP('OverrideLP')
    ##define.RFOverpick('Overpick')
    #
    #// Used for passthrough data on the RF
    ##define.UserId('UserId')
    ##define.UserSessionId('UserSessionId')
    ##define.WorkComplete('WorkComplete')
    ##define.NextStep('NextStep')
    ##define.HasDimensions('HasDimensions')
    ##define.Post('Post')
    ##define.NewLicensePlateId('NewLicensePlateId')
    ##define.ManualStopException('ManualStopException')
    ##define.WriteException('WriteException')
    ##define.WriteOverride('WriteOverride')
    ##define.LineNum('LineNum')
    ##define.SuggestLocation('SuggestLocation')
    ##define.ExcludedLocations('ExcludedLocations')
    ##define.PrevStep('PrevStep')
    ##define.CreateWork('CreateWork')
    ##define.DetermineStep('DetermineStep')
    ##define.NewWarehouse('NewWarehouse')
    ##define.WorkLineRecId('WorkLineRecId')
    ##define.InventLocationId('InventLocationId')
    ##define.InventSiteId('InventSiteId')
    ##define.InventDimId('InventDimId')
    ##define.LicensePlateControlled('LicensePlateControlled')
    ##define.IsSupervisor('IsSupervisor')
    ##define.LicensePlateErrorCount('LicensePlateErrorCount')
    ##define.FullInventDimId('FullInventDimId')
    ##define.ScannedItemId('ScannedItemId')
    ##define.ItemErrorCount('ItemErrorCount')
    ##define.ScannedQty('ScannedQty')
    ##define.ShowDone('ShowDone')
    ##define.QtyErrorCount('QtyErrorCount')
    ##define.ProdTableLocationLPControlled('ProdTableLocationLPControlled')
    ##define.TargetLicensePlateId('TargetLicensePlateId')
    ##define.NoExceptionButton('NoExceptionButton')
    ##define.NoOverrideButton('NoOverrideButton')
    ##define.FromLicensePlateId('FromLicensePlateId')
    ##define.ToLicensePlateId('ToLicensePlateId')
    ##define.MoveLicensePlateId('MoveLicensePlateId')
    ##define.MenuItem('MenuItem')
    ##define.ByLicensePlate('ByLicensePlate')
    ##define.FromInventDimId('FromInventDimId')
    ##define.ToInventDimId('ToInventDimId')
    ##define.Confirmation('Confirmation')
    ##define.SingleItem('SingleItem')
    ##define.ToLocationId('ToLocationId')
    ##define.NonToLP('NonToLP')
    ##define.Counter('Counter')
    ##define.POLineNum('POLineNum')
    ##define.OrderNum('OrderNum')
    ##define.POUOM('POUOM')
    ##define.GetAnother('GetAnother')
    ##define.MaxUOMQty('MaxUOMQty')
    ##define.MaxUOM('MaxUOM')
    ##define.ReceivingUOMInMaxUOM('ReceivingUOMInMaxUOM')
    ##define.NewInventStatusName('NewInventStatusName')
    ##define.Remove('Remove')
    ##define.Recall('Recall')
    ##define.Id('Id')
    ##define.SourceLicensePlateId('SourceLicensePlateId')
    ##define.WorkPutFlow('WorkPutFlow')
    ##define.ReceivingExceptionDesc('ReceivingExceptionDesc')
    ##define.OverrideDesc('OverrideDesc')
    ##define.QtyLeft('QtyLeft')
    ##define.WHSWorkTypeCustomCode('WHSWorkTypeCustomCode')
    ##define.IsMultiSKU('IsMultiSKU')
    ##define.IsLicensePlateControlled('IsLicensePlateControlled')
    ##define.QtyOrig('QtyOrig')
    ##define.QtyTotal('QtyTotal')
    ##define.QtyLeft('QtyLeft')
    ##define.AlreadyHaveLP('AlreadyHaveLP')
    ##define.CustomCode('CustomCode')
    ##define.MultipleItem('MultipleItem')
    ##define.AOS('AOS')
    ##define.Company('Company')
    ##define.Version('Version')
    ##define.SignIn('SignIn')
    ##define.Password('Password')
    ##define.Login('Login')
    ##define.NumLP('NumLP')
    ##define.TotalQty('TotalQty')
    ##define.TotalUnitId('UnitId')
    ##define.CurrentLP('CurrentLP')
    ##define.Unitization('Unitization')
    ##define.Initiation('Initiation')
    ##define.SelectBestLP('SelectBestLP')
    ##define.InProcess('InProcess')
    ##define.TargetWorkId('TargetWorkId')
    ##define.DoingWork('DoingWork')
    ##define.NoValidation('NoValidation')
    ##define.WorkGroupingId('WorkGroupingId')
    ##define.ShowExceptionButton('ShowExceptionButton')
    ##define.HideExceptionButton('HideExceptionButton')
    ##define.NoCancelButton('NoCancelButton')
    ##define.AddCancel('AddCancel')
    ##define.AddButtons('AddButtons')
    ##define.RebuildForm('RebuildForm')
    ##define.Scan('Scan')
    ##define.UserGroupPut('UserGroupPut')
    ##define.PrevWorkId('PrevWorkId')
    ##define.PrevGroupingId('PrevGroupingId')
    ##define.OrigLP('OrigLP')
    ##define.SplittingLP('SplittingLP')
    ##define.SelectedValue('SelectedValue')
    ##define.SelectedValueUOM('SelectedValueUOM')
    ##define.FromInventoryStatus('FromInventoryStatus')
    ##define.SelectedFromValue('SelectedFromValue')
    ##define.QtyToPut('QtyToPut')
    ##define.QtyToPick('QtyToPick')
    ##define.QtyShort('QtyShort')
    ##define.ShortPickReason('ShortPickReason')
    ##define.AutoConfirm('AutoConfirm')
    ##define.SystemPopulated('SystemPopulated')
    ##define.UserPutLocation('UserPutLocation')
    ##define.MoveLP('MoveLP')
    ##define.RetryCounter('RetryCounter')
    ##define.OverrideSession('OverrideSession')
    ##define.ItemInfo('ItemInfo')
    ##define.BatchRunningQty('BatchRunningQty')
    ##define.BatchList('BatchList')
    ##define.BatchQtyList('BatchQtyList')
    ##define.ExpDateList('ExpDateList')
    ##define.AddDoneButton('AddDoneButton')
    ##define.DisplayBatch('DisplayBatch')
    ##define.QtyReceived('QtyReceived')
    ##define.ValidateUserDirectField('ValidateUserDirectField')
    ##define.SelectedAdjustmentType('SelectedAdjustmentType')
    ##define.OverrideFromPutLocation('OverrideFromPutLocation')
    ##define.GroupingWorkNum('GroupingWorkNum')
    ##define.GroupingWorkTotal('GroupingWorkTotal')
    ##define.CommentsDisplayed('CommentsDisplayed')
    ##define.PickPackOverride('PickPackOverride')
    ##define.SessionBatchId('SessionBatchId')
    ##define.SessionLineNum('SessionLineNum')
    ##define.DefaultDataFound('DefaultDataFound')
    ##define.DimTrackingDelay('DimTrackingDelay')
    ##define.SerialCounter('SerialCounter')
    ##define.SerialList('SerialList')
    ##define.SerialQty('SerialQty')
    ##define.AssignSerial('AssignSerial')
    ##define.SkipSerialValidate('SkipSerialValidate')
    ##define.FirstPassFail('FirstPassFail')
    ##define.ClusterProfile('ClusterProfile')
    ##define.PositionCounter('PositionCounter')
    ##define.ClusterPosition('ClusterPosition')
    ##define.SkipWorkId('SkipWorkId')
    ##define.MoveNest('MoveNest')
    ##define.SelectedWorkPoolId('SelectedWorkPoolId')
    ##define.PrevCountStep('PrevCountStep')
    ##define.GroupPutaway('GroupPutaway')
    ##define.GroupPutawayConfirm('GroupPutawayConfirm')
    ##define.GroupPutawayFail('GroupPutawayFail')
    ##define.FEFOWarnLP('FEFOWarnLP')
    ##define.FEFOWarnBatch('FEFOWarnBatch')
    ##define.AuditSeqNum('AuditSeqNum')
    ##define.AuditTemplateId('AuditTemplateId')
    ##define.CustomData('CustomData')
    ##define.AuditWorkId('AuditWorkId')
    ##define.VendBatchInfoEntered('VendBatchInfoEntered')
    ##define.VendBatchAttemptNo('VendBatchAttemptNo')
    ##define.ReceiptId('ReceiptId')
    ##define.PotencyValueWarn('PotencyValueWarn')
    ##define.ResetBatchDisposition('ResetBatchDisposition')
    ##define.BatchDispositionWarn('BatchDispositionWarn')
    ##define.UseSelectedBatchDispCode('UseSelectedBatchDispCode')
    ##define.UseSelectedDimUOM('UseSelectedDimUOM')
    ##define.SkipPotencyValidation('SkipPotencyValidation')
    ##define.AssignSerialComplete('1')
    ##define.ItemInventDimId('ItemInventDimId')
    ##define.SkipASNItemValidation('SkipASNItemValidation')
    ##define.ConfirmResult('ConfirmResult')
    ##define.PrevMode('PrevMode')
    ##define.CaptureSerial('CaptureSerial')
    ##define.WorkListSavedID('WorkListSavedID')
    ##define.CameFromWorkList('CameFromWorkList')
    ##define.SortOrder('SortOrder')
    ##define.SortField('SortField')
    ##define.Filter('Filter')
    #
    #// Used for the default black color of all text controls
    ##define.RFColorDefault('#000000')
    #
    #// Used for the ASCII value of 'A'
    ##define.AsciiA(65)
    #
    #// Used for limiting inquiry screens
    ##define.MaxInquiry(25)
    #
    #// Used for limiting vendor batch details screens
    ##define.MaxVendBatchAttempts(2)
    #
    #// Used to convert string values to date values
    ##define.DateFormat(213)
    #
    #// Used to locate RF error controls
    ##define.RFErrorLoc(3)
    #
    #// Used to locate the the starting location of the RF field controls
    ##define.FieldControlStartLoc(3)
    #
    #// Used to indicate steps in the RF flow
    ##define.TrackingDimDetailsStep(3)
    ##define.VendBatchDetailsStep(5)
    #
    #// Used to indicate steps in the batch disposition change RF flow
    ##define.InitializeBatchDispChange(0)
    ##define.ProcessBatchDispChange(1)
    #
    #// Other
    ##define.RFPick('Pick')
    ##define.RFPut('Put')
    ##define.LPLoad('LPLoad')
    ##define.Str('str')
    ##define.Date('date')
    ##define.ProdIdLabel('ProdIdLabel')
    ##define.Field('field')
    ##define.ProdScrap('ProdScrap')
    ##define.ClosePallet('ClosePallet')
    ##define.Enter('Enter')
    ##define.Configuration('Configuration')
    ##define.Configurations('Configurations')
    ##define.DisplaySetting('DisplaySetting')
    ##define.DisplaySettings('DisplaySettings')
    ##define.Size('size')
    ##define.PurchId('PurchId')
    ##define.WHSWorkId('WHSWorkId')
    ##define.WHSWorkLicensePlateId('WHSWorkLicensePlateId')
    ##define.WHSReceivingException('WHSReceivingException')
    ##define.Vendor('vendor')
    ##define.Int('int')
    ##define.ReasonString('ReasonString')
    ##define.WHSWorkException('WHSWorkException')
    ##define.Controls('controls')
    ##define.ModeStep('ModeStep')
    ##define.Mode('mode')
    ##define.Step('step')
    ##define.PassThrough('PassThrough')
    ##define.Control('Control')
    ##define.QtyWork('QtyWork')
    ##define.InventQtyWork('InventQtyWork')
    ##define.AdjustmentIn('AdjustmentIn')
    ##define.AdjustmentOut('AdjustmentOut')
    ##define.InventLocation('InventLocation')
    ##define.AddLPOrFinish('AddLPOrFinish')
    ##define.CycleCount('CycleCount')
    ##define.Movement('Movement')
    ##define.From('From')
    ##define.To('To')
    #
    #// Used in the XML Protocol
    ##define.XMLParentNode('ParentNode')
    ##define.XMLAuthenticationNode('Auth')
    ##define.XMLAuthNodeUserId('userId')
    ##define.XMLAuthNodeSessionId('sessionId')
    ##define.XMLControlsNode('Controls')
    ##define.XMLControlNode('Control')
    ##define.XMLControlCtrlType('controlType')
    ##define.XMLControlName('name')
    ##define.XMLControlData('data')
    ##define.XMLControlLabel('label')
    ##define.XMLControlNewLine('newLine')
    ##define.XMLControlType('type')
    ##define.XMLControlLength('length')
    ##define.XMLControlError('error')
    ##define.XMLControlDefaultButton('defaultButton')
    ##define.XMLControlSelected('selected')
    ##define.XMLControlColor('color')
    ##define.XMLControlEnabled('enabled')
    ##define.XMLUserCulture('UserCulture')
    #
    #//Paging
    ##define.DefaultPageSize(10)
    ##define.PageIndex('PageIndex')
    ##define.TotalRecords('TotalRecords')
  ENDSOURCE
  PROPERTIES
    Origin              #{F7D8F2ED-E4B9-47FF-9425-91A13BC8F5A8}
  ENDPROPERTIES
  

***Element: DBE

; Microsoft Dynamics AX Enumtype : AZ_DateType unloaded
; --------------------------------------------------------------------------------
  ENUMTYPEVERSION 1
  
  ENUMTYPE #AZ_DateType
    PROPERTIES
      Name                #AZ_DateType
      UseEnumValue        #Yes
      Origin              #{BF1A7945-448A-4C9C-A246-BF81409632F9}
    ENDPROPERTIES
    
    TYPEELEMENTS
      #YDDD
      PROPERTIES
        Name                #YDDD
        Label               #YDDD
        EnumValue           #0
      ENDPROPERTIES
      
      #DDD5
      PROPERTIES
        Name                #DDD5
        Label               #DDD5
        EnumValue           #1
      ENDPROPERTIES
      
      #YYMMDD
      PROPERTIES
        Name                #YYMMDD
        Label               #YYMMDD
        EnumValue           #2
      ENDPROPERTIES
      
      #DDMMYY
      PROPERTIES
        Name                #DDMMYY
        Label               #DDMMYY
        EnumValue           #3
      ENDPROPERTIES
      
      #YYYYMMDD
      PROPERTIES
        Name                #YYYYMMDD
        Label               #YYYYMMDD
        EnumValue           #4
      ENDPROPERTIES
      
    ENDTYPEELEMENTS
  ENDENUMTYPE
  

***Element: UTS

; Microsoft Dynamics AX String: BarcodeConfigId unloaded
; --------------------------------------------------------------------------------
  USERTYPEVERSION 6
  
  USERTYPE #BarcodeConfigId
  STRING
    PROPERTIES
      Name                #BarcodeConfigId
      Label               #Barcode Configuration
      Origin              #{0E7ADDF9-B335-4328-A1E2-506496E39CD2}
      ReferenceTable      #AZ_BatchConfig
      StringSize          #25
    ENDPROPERTIES
    
    TYPEELEMENTS
    ENDTYPEELEMENTS
    
    TYPEREFERENCES
    ENDTYPEREFERENCES
    
    TYPELOOKUPS
      TYPELOOKUP LOOKUP
      PROPERTIES
        Table               #AZ_BatchConfig
        RelatedField        #BarcodeConfigId
      ENDPROPERTIES
      
    ENDTYPELOOKUPS
    
  ENDUSERTYPE
  

***Element: UTS

; Microsoft Dynamics AX String: InventBatchId unloaded
; --------------------------------------------------------------------------------
  USERTYPEVERSION 6
  
  USERTYPE #InventBatchId
  STRING
    PROPERTIES
      Name                #InventBatchId
      Label               #@SYS53635
      HelpText            #@SYS53637
      FormHelp            #InventBatchIdLookup
      DisplayLength       #50
      ConfigurationKey    #LogisticsBasic
      Origin              #{290D061F-0000-1000-8597-9F0A31C65161}
      LegacyId            #1567
      Extends             #InventBatchSerialId
      StringSize          #50
      ChangeCase          #None
    ENDPROPERTIES
    
    TYPEELEMENTS
    ENDTYPEELEMENTS
    
    TYPEREFERENCES
      TYPEREFERENCETYPE DATASET
      PROPERTIES
        Table               #InventBatch
        RelatedField        #inventBatchId
      ENDPROPERTIES
      
    ENDTYPEREFERENCES
    
    TYPELOOKUPS
    ENDTYPELOOKUPS
    
  ENDUSERTYPE
  

***Element: UTS

; Microsoft Dynamics AX String: InventBatchSerialId unloaded
; --------------------------------------------------------------------------------
  USERTYPEVERSION 6
  
  USERTYPE #InventBatchSerialId
  STRING
    PROPERTIES
      Name                #InventBatchSerialId
      Label               #@SYS54029
      HelpText            #@SYS7892
      DisplayLength       #50
      ConfigurationKey    #LogisticsBasic
      Origin              #{291301E8-0000-1000-E9C9-626AE2F4CEB7}
      LegacyId            #488
      StringSize          #50
      ChangeCase          #None
    ENDPROPERTIES
    
    TYPEELEMENTS
    ENDTYPEELEMENTS
    
    TYPEREFERENCES
    ENDTYPEREFERENCES
    
    TYPELOOKUPS
    ENDTYPELOOKUPS
    
  ENDUSERTYPE
  

***Element: UTS

; Microsoft Dynamics AX String: VendProdCode unloaded
; --------------------------------------------------------------------------------
  USERTYPEVERSION 6
  
  USERTYPE #VendProdCode
  STRING
    PROPERTIES
      Name                #VendProdCode
      Label               #Vendor Product Code
      Origin              #{1636B2ED-97EB-42C7-A438-514F75B2880F}
      StringSize          #20
    ENDPROPERTIES
    
    TYPEELEMENTS
    ENDTYPEELEMENTS
    
    TYPEREFERENCES
    ENDTYPEREFERENCES
    
    TYPELOOKUPS
    ENDTYPELOOKUPS
    
  ENDUSERTYPE
  

***Element: DBT

; Microsoft Dynamics AX Table : AZ_BatchConfig unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #AZ_BatchConfig
    EnforceFKRelation 1
    PROPERTIES
      Name                #AZ_BatchConfig
      CreateRecIdIndex    #Yes
      PrimaryIndex        #SurrogateKey
      ClusterIndex        #SurrogateKey
      Origin              #{8B24CEB3-56AA-49C6-B017-D33B8A2FAAB0}
    ENDPROPERTIES
    
    FIELDS
      FIELD #AZ_DateType
        ENUM
        PROPERTIES
          Name                #AZ_DateType
          Label               #Date Format
          Table               #AZ_BatchConfig
          Origin              #{6D2D0BA0-B11E-4138-9648-71BC7CA16981}
          EnumType            #AZ_DateType
        ENDPROPERTIES
        
      FIELD #BarcodeConfigId
        STRING
        PROPERTIES
          Name                #BarcodeConfigId
          Label               #Configurtion ID
          Table               #AZ_BatchConfig
          Origin              #{740F9CC7-23FD-40E3-B9B8-3FFCCB9F70C4}
          ExtendedDataType    #BarcodeConfigId
          StringSize          #25
        ENDPROPERTIES
        
      FIELD #DateCharlength
        INT
        PROPERTIES
          Name                #DateCharlength
          Label               #No. of Char (Date)
          Table               #AZ_BatchConfig
          Origin              #{200FD5BC-B48D-400B-A953-21204DD07C28}
        ENDPROPERTIES
        
      FIELD #DateCharStart
        INT
        PROPERTIES
          Name                #DateCharStart
          Label               #Start Char from (Date)
          Table               #AZ_BatchConfig
          Origin              #{8AB89518-789C-4DC3-95E2-77EB5125B6B1}
        ENDPROPERTIES
        
      FIELD #ProdCharLength
        INT
        PROPERTIES
          Name                #ProdCharLength
          Label               #No of Char (Product)
          Table               #AZ_BatchConfig
          Origin              #{8B555256-1C8D-4547-B0C0-3D7F279F0709}
        ENDPROPERTIES
        
      FIELD #ProdCharStart
        INT
        PROPERTIES
          Name                #ProdCharStart
          Label               #Start Char from (Product)
          Table               #AZ_BatchConfig
          Origin              #{69DBA3BB-2C26-43BD-8EE1-12019FC743A5}
        ENDPROPERTIES
        
      FIELD #WeightCharLength
        INT
        PROPERTIES
          Name                #WeightCharLength
          Label               #No of Char (Weight)
          Table               #AZ_BatchConfig
          Origin              #{91A55A3F-FDAC-404C-B0E6-49FFD663617A}
        ENDPROPERTIES
        
      FIELD #WeightCharStart
        INT
        PROPERTIES
          Name                #WeightCharStart
          Label               #Char Start from (Weight)
          Table               #AZ_BatchConfig
          Origin              #{A7063E35-36AC-424F-BA50-BA3DCAFD0426}
        ENDPROPERTIES
        
      FIELD #WeightFactor
        INT
        PROPERTIES
          Name                #WeightFactor
          Label               #Weight Factor (/)
          Table               #AZ_BatchConfig
          Origin              #{41BEA211-0E0D-4DC7-BBF1-94F1F45EF10E}
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
    ENDGROUPS
    
    INDICES
      #ConfigId
      PROPERTIES
        Name                #ConfigId
        AllowDuplicates     #No
        Origin              #{966770ED-4B58-40E1-A682-2B982A97BA22}
      ENDPROPERTIES
      
      INDEXFIELDS
        #BarcodeConfigId
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #Find
        #Static AZ_BatchConfig Find(BarcodeConfigId    _BarcodeConfigId, Boolean     _ForUpdate)
        #{
        #    AZ_BatchConfig      _BatchConfig;
        #
        #    _BatchConfig.selectForUpdate(_ForUpdate);
        #
        #    if (_BatchConfig)
        #    {
        #        select firstonly _BatchConfig
        #            where _BatchConfig.BarcodeConfigId == _BarcodeConfigId;
        #
        #    }
        #
        #    return _BatchConfig;
        #
        #}
      ENDSOURCE
      SOURCE #GetBatchQty
        #Public Static Real GetBatchQty(InventBatchId      _BatchId, BarcodeConfigId     _BarcodeConfigId)
        #{
        #   InventQty        BatchQty;
        #   AZ_BatchConfig   _BatchConfig;
        #
        #
        #   select firstOnly _BatchConfig where _BatchConfig.BarcodeConfigId == _BarcodeConfigId;
        #
        #
        #    if ( _BatchConfig.WeightFactor > 0)
        #    {
        #    BatchQty = str2num (subStr(_BatchId, _BatchConfig.WeightCharStart,_BatchConfig.WeightCharLength))/_BatchConfig.WeightFactor;
        #    }
        #
        #    return BatchQty;
        #}
      ENDSOURCE
      SOURCE #GetPackingDate
        #Public static Date GetPackingDate(InventBatchId     _BatchId, BarcodeConfigId     _ConfigId)
        #{
        #  Date                  _Packingdate;
        #  AZ_BatchConfig        _BatchConfig;
        #  AZ_DateType           _DateType;
        #  str                   cYear;
        #  int                   iYear;
        #  int                   JulianDay;
        #
        #
        #  select firstOnly  _BatchConfig where  _BatchConfig.BarcodeConfigId == _ConfigId;
        #
        #    // use for Julian date with 1 digit of year
        #    if( _BatchConfig.AZ_DateType == AZ_DateType::YDDD)
        #    {
        #     cYear = strFmt("201%1",subStr(_BatchId,_BatchConfig.DateCharStart,1));
        #
        #     _Packingdate = mkDate(1,1,str2int(cYear))+str2num(subStr(_BatchId,_BatchConfig.DateCharStart+1,3));
        #
        #    }
        #
        #   // use for Julian date +500
        #
        #   if (_BatchConfig.AZ_DateType == AZ_DateType::DDD5)
        #    {
        #        JulianDay = str2int(subStr(_BatchId, _BatchConfig.DateCharStart,_BatchConfig.DateCharlength));
        #
        #        if (year(systemDateGet()) mod 2 == 0)
        #        {
        #            _Packingdate = mkDate(1,1,year(systemDateGet()))+ (JulianDay - 500) ;
        #        }
        #        else
        #        {
        #            _Packingdate = mkDate(1,1,year(systemDateGet())) + JulianDay;
        #        }
        #
        #    }
        #
        #    //use for datetype DDMMYY
        #    If (_BatchConfig.AZ_DateType == AZ_DateType::DDMMYY)
        #    {
        #       _Packingdate = mkDate(str2int(subStr(_BatchId,_BatchConfig.DateCharStart,2)),
        #                             str2int(subStr(_BatchId,_BatchConfig.DateCharStart +2,2)),
        #                             str2int(subStr(_BatchId,_BatchConfig.DateCharStart +4,2))+2000);
        #    }
        #
        #
        #    // Use for date type YYMMDD
        #    if (_BatchConfig.AZ_DateType == AZ_DateType::YYMMDD)
        #    {
        #        _Packingdate = mkDate(str2int(subStr(_BatchId,_BatchConfig.DateCharStart +4,2)),
        #                              str2int(subStr(_BatchId,_BatchConfig.DateCharStart +2,2)),
        #                              str2int(subStr(_BatchId,_BatchConfig.DateCharStart,2))+2000);
        #    }
        #
        #    // USe for date type YYYYMMDD
        #
        #    if (_BatchConfig.AZ_DateType == AZ_DateType::YYYYMMDD)
        #    {
        #        _Packingdate = mkDate(str2int(subStr(_BatchId, _BatchConfig.DateCharStart+7,2)),
        #                              str2int(subStr(_BatchId, _BatchConfig.DateCharStart+5,2)),
        #                              str2int(subStr(_BatchId,_BatchConfig.DateCharStart,6)));
        #
        #    }
        #
        #
        #    if (!_Packingdate && _Packingdate > systemDateGet())
        #    {
        #        _Packingdate = systemDateGet();
        #    }
        #
        #    return _Packingdate;
        #
        #
        #
        #}
      ENDSOURCE
      SOURCE #GetProductCode
        #Public Static str GetProductCode(InventBatchId  _batchId, BarcodeConfigId   _configId)
        #{
        #   AZ_BatchConfig       _BatchConfig;
        #   str                  _VendProdCode;
        #
        #    select firstOnly _BatchConfig where _BatchConfig.BarcodeConfigId == _ConfigId;
        #
        #    if (_BatchConfig)
        #    {
        #
        #        _VendProdCode = subStr(_batchId , _BatchConfig.ProdCharStart, _BatchConfig.ProdCharLength);
        #
        #    }
        #
        #    return _VendProdCode;
        #
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : InventBatch unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #InventBatch
    EnforceFKRelation 0
    PROPERTIES
      Name                #InventBatch
      Label               #@SYS54381
      FormRef             #InventBatch
      TitleField1         #inventBatchId
      TitleField2         #itemId
      ConfigurationKey    #LogisticsBasic
      SecurityKey         #InventTables
      CacheLookup         #NotInTTS
      TableGroup          #WorksheetHeader
      PrimaryIndex        #itemBatchIdx
      ClusterIndex        #itemBatchIdx
      DeveloperDocumentation  #@SYS123943
      Origin              #{2C0B02F0-0000-1000-8597-9F577E744261}
      LegacyId            #752
    ENDPROPERTIES
    
    FIELDS
      FIELD #BatchQty
        REAL
        PROPERTIES
          Name                #BatchQty
          Table               #InventBatch
          Origin              #{B02B9FEE-F54C-4F07-AED6-DE04DF5F1E12}
          ExtendedDataType    #InventQty
        ENDPROPERTIES
        
      FIELD #DEL_PdsBlocked
        ENUM
        PROPERTIES
          Name                #DEL_PdsBlocked
          Label               #@SYS13688
          AllowEditOnCreate   #No
          AllowEdit           #No
          ConfigurationKey    #SysDeletedObjects41
          Table               #InventBatch
          Origin              #{2A0E4E24-02F0-1000-A879-C2D85E6EC951}
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #description
        STRING
        PROPERTIES
          Name                #description
          Table               #InventBatch
          Origin              #{F88C5106-EBD6-4EAC-99A3-D247795854B6}
          LegacyId            #6
          ExtendedDataType    #InventBatchTxt
          StringSize          #(Memo)
        ENDPROPERTIES
        
      FIELD #expDate
        DATE
        PROPERTIES
          Name                #expDate
          Table               #InventBatch
          Origin              #{B8498494-B59D-42DC-A39D-4617652B55C6}
          LegacyId            #2
          ExtendedDataType    #InventBatchExpDate
        ENDPROPERTIES
        
      FIELD #inventBatchId
        STRING
        PROPERTIES
          Name                #inventBatchId
          Mandatory           #Yes
          AllowEdit           #No
          Table               #InventBatch
          Origin              #{B4956CC4-D3F2-4F34-99BD-C6917F77920C}
          LegacyId            #1
          ExtendedDataType    #InventBatchId
          StringSize          #50
        ENDPROPERTIES
        
      FIELD #itemId
        STRING
        PROPERTIES
          Name                #itemId
          Mandatory           #Yes
          AllowEdit           #No
          Table               #InventBatch
          IgnoreEDTRelation   #Yes
          Origin              #{9041FDA5-6D3F-48C6-80C0-29DD1DE28FFD}
          LegacyId            #4
          ExtendedDataType    #ItemId
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #PdsBestBeforeDate
        DATE
        PROPERTIES
          Name                #PdsBestBeforeDate
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventBatch
          Origin              #{0D41F479-8306-455C-9C17-545F6648C11D}
          ExtendedDataType    #PdsBestBeforeDate
        ENDPROPERTIES
        
      FIELD #PdsCountryOfOrigin1
        STRING
        PROPERTIES
          Name                #PdsCountryOfOrigin1
          Table               #InventBatch
          Origin              #{6D383E93-BBDE-4058-BCD4-461730B3BFB9}
          ExtendedDataType    #PdsCountryOfOrigin1
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #PdsCountryOfOrigin2
        STRING
        PROPERTIES
          Name                #PdsCountryOfOrigin2
          Table               #InventBatch
          Origin              #{279F67BB-803B-434E-82D9-BD15161996A5}
          ExtendedDataType    #PdsCountryOfOrigin2
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #PdsDispositionCode
        STRING
        PROPERTIES
          Name                #PdsDispositionCode
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventBatch
          Origin              #{DC7C2336-4252-404C-AB86-953B1876BA96}
          ExtendedDataType    #PdsDispositionCode
        ENDPROPERTIES
        
      FIELD #PdsFinishedGoodsDateTested
        DATE
        PROPERTIES
          Name                #PdsFinishedGoodsDateTested
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventBatch
          Origin              #{96078662-779D-449C-980E-B2CAE33A90AB}
          ExtendedDataType    #PdsFinishedGoodsDateTested
        ENDPROPERTIES
        
      FIELD #PDSInheritBatchAttrib
        ENUM
        PROPERTIES
          Name                #PDSInheritBatchAttrib
          AllowEdit           #No
          Table               #InventBatch
          Origin              #{2205B5F5-E0D0-446B-B76D-D4039BD6DDF2}
          ExtendedDataType    #PDSInheritBatchAttrib
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PDSInheritedShelfLife
        ENUM
        PROPERTIES
          Name                #PDSInheritedShelfLife
          Table               #InventBatch
          Origin              #{3C528AD5-CAC8-4B65-B612-0FEDF439E827}
          ExtendedDataType    #PDSInheritShelfLife
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PdsSameLot
        ENUM
        PROPERTIES
          Name                #PdsSameLot
          Visible             #No
          Table               #InventBatch
          Origin              #{AE665582-FE0A-4799-AB88-27E821247063}
          ExtendedDataType    #PdsSameLot
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PdsShelfAdviceDate
        DATE
        PROPERTIES
          Name                #PdsShelfAdviceDate
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventBatch
          Origin              #{87D40FEF-F958-4A97-A181-1D57F6B6F516}
          ExtendedDataType    #PdsShelfAdviceDate
        ENDPROPERTIES
        
      FIELD #PdsUseVendBatchDate
        ENUM
        PROPERTIES
          Name                #PdsUseVendBatchDate
          Table               #InventBatch
          Origin              #{C5A8403F-2B7D-4BE2-9573-EAA6BE358A9A}
          ExtendedDataType    #PdsUseVendBatchDate
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PdsUseVendBatchExp
        ENUM
        PROPERTIES
          Name                #PdsUseVendBatchExp
          Table               #InventBatch
          Origin              #{706124D9-D3A2-4624-A7EB-3BDC8D7D6BCB}
          ExtendedDataType    #PdsUseVendBatchExp
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PdsVendBatchDate
        DATE
        PROPERTIES
          Name                #PdsVendBatchDate
          Table               #InventBatch
          Origin              #{B5A8A912-B189-4DF6-940A-C24474B3651E}
          ExtendedDataType    #PdsVendBatchDate
        ENDPROPERTIES
        
      FIELD #PdsVendBatchId
        STRING
        PROPERTIES
          Name                #PdsVendBatchId
          Table               #InventBatch
          Origin              #{41FFFBB7-BE1F-44DF-97CC-2CACA35F3EE3}
          ExtendedDataType    #PdsVendBatchId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #PdsVendExpiryDate
        DATE
        PROPERTIES
          Name                #PdsVendExpiryDate
          Table               #InventBatch
          Origin              #{5B806071-D06B-4093-AAC1-F5E1B32B74FE}
          ExtendedDataType    #PdsVendExpiryDate
        ENDPROPERTIES
        
      FIELD #prodDate
        DATE
        PROPERTIES
          Name                #prodDate
          AllowEdit           #No
          Table               #InventBatch
          Origin              #{034FD526-D3DC-44B4-B077-CACA5F62D04F}
          LegacyId            #5
          ExtendedDataType    #InventBatchProdDate
        ENDPROPERTIES
        
      FIELD #VendProdCode
        STRING
        PROPERTIES
          Name                #VendProdCode
          Table               #InventBatch
          Origin              #{6F62E826-FF12-469A-8351-1A4FB4CB13EA}
          ExtendedDataType    #VendProdCode
          StringSize          #20
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #inventBatchId
          #expDate
          #itemId
          #prodDate
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Description
        PROPERTIES
          Name                #Description
          Label               #@SYS7576
        ENDPROPERTIES
        
        GROUPFIELDS
          #description
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #DispositionDescription
        PROPERTIES
          Name                #DispositionDescription
          Label               #@PRO175
        ENDPROPERTIES
        
        GROUPFIELDS
          #inventBatchId
          #PdsDispositionCode
          #dispositionDescription
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #DispositionStatus
        PROPERTIES
          Name                #DispositionStatus
          Label               #@PRO175
        ENDPROPERTIES
        
        GROUPFIELDS
          #PdsDispositionCode
          #pdsDispositionStatus
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Identification
        PROPERTIES
          Name                #Identification
          Label               #@SYS5711
        ENDPROPERTIES
        
        GROUPFIELDS
          #inventBatchId
          #itemId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PdsDisposition
        PROPERTIES
          Name                #PdsDisposition
          Label               #@PRO175
        ENDPROPERTIES
        
        GROUPFIELDS
          #inventBatchId
          #PdsDispositionCode
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PDSGenealogy
        PROPERTIES
          Name                #PDSGenealogy
          Label               #@PSC182
        ENDPROPERTIES
        
        GROUPFIELDS
          #PDSInheritedShelfLife
          #PDSInheritBatchAttrib
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PDSPotency
        PROPERTIES
          Name                #PDSPotency
          Label               #@PSC61
        ENDPROPERTIES
        
        GROUPFIELDS
          #PDSOnHandQty
          #PDSActiveQty
          #PDSBaseAttribute
          #PDSBaseValue
          #PDSBaseAttributeValue
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PdsShelfLife
        PROPERTIES
          Name                #PdsShelfLife
          Label               #@PRO945
        ENDPROPERTIES
        
        GROUPFIELDS
          #prodDate
          #PdsShelfAdviceDate
          #PdsBestBeforeDate
          #expDate
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PdsVendorBatch
        PROPERTIES
          Name                #PdsVendorBatch
          Label               #@PDS1357
        ENDPROPERTIES
        
        GROUPFIELDS
          #PdsVendBatchDate
          #PdsUseVendBatchDate
          #PdsVendExpiryDate
          #PdsUseVendBatchExp
          #PdsCountryOfOrigin1
          #PdsCountryOfOrigin2
          #PdsVendBatchId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Properties
        PROPERTIES
          Name                #Properties
          Label               #@SYS10344
        ENDPROPERTIES
        
        GROUPFIELDS
          #prodDate
          #PdsShelfAdviceDate
          #PdsBestBeforeDate
          #expDate
          #PdsFinishedGoodsDateTested
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #QualityManagement
        PROPERTIES
          Name                #QualityManagement
          Label               #@SYS113616
        ENDPROPERTIES
        
        GROUPFIELDS
          #qualityOrderStatusDisplay
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #VendorBatchTrace
        PROPERTIES
          Name                #VendorBatchTrace
          Label               #@PDS1357
        ENDPROPERTIES
        
        GROUPFIELDS
          #PdsVendBatchDate
          #PdsVendExpiryDate
          #PdsCountryOfOrigin1
          #PdsCountryOfOrigin2
          #PdsVendBatchId
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #batchIdx
      PROPERTIES
        Name                #batchIdx
        Origin              #{2B080001-02F0-1000-6261-746368496478}
        LegacyId            #1
      ENDPROPERTIES
      
      INDEXFIELDS
        #inventBatchId
      ENDINDEXFIELDS
      
      #itemBatchIdx
      PROPERTIES
        Name                #itemBatchIdx
        AllowDuplicates     #No
        AlternateKey        #Yes
        Origin              #{2B0C0002-02F0-1000-610A-2867A6737463}
        LegacyId            #2
      ENDPROPERTIES
      
      INDEXFIELDS
        #itemId
        #inventBatchId
      ENDINDEXFIELDS
      
      #ItemVendBatchIdx
      PROPERTIES
        Name                #ItemVendBatchIdx
        Origin              #{87B3B84D-29AD-4291-A289-ECCED3BBBC96}
      ENDPROPERTIES
      
      INDEXFIELDS
        #itemId
        #PdsVendBatchId
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #InventTable
        PROPERTIES
          Name                #InventTable
          Table               #InventTable
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Composition
          UseDefaultRoleNames #Yes
          CreateNavigationPropertyMethods           #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #itemId
            RelatedField        #ItemId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PdsCountryOfOrigin1
        PROPERTIES
          Name                #PdsCountryOfOrigin1
          Table               #LogisticsAddressCountryRegion
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #PdsCountryOfOrigin1
          Role                #InventBatch
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PdsCountryOfOrigin1
            RelatedField        #CountryRegionId
            SourceEDT           #PdsCountryOfOrigin1
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PdsCountryOfOrigin2
        PROPERTIES
          Name                #PdsCountryOfOrigin2
          Table               #LogisticsAddressCountryRegion
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #PdsCountryOfOrigin2
          Role                #InventBatch
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PdsCountryOfOrigin2
            RelatedField        #CountryRegionId
            SourceEDT           #PdsCountryOfOrigin2
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PdsDispositionMaster
        PROPERTIES
          Name                #PdsDispositionMaster
          Table               #PdsDispositionMaster
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PdsDispositionCode
            RelatedField        #DispositionCode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
      #SalesInvoiceTmp(InventBatch)
      PROPERTIES
        Table               #SalesInvoiceTmp
        DeleteAction        #Restricted
        Relation            #InventBatch
      ENDPROPERTIES
      
      #MCRCustCreditTable(BatchId)
      PROPERTIES
        Table               #MCRCustCreditTable
        DeleteAction        #Restricted
        Relation            #BatchId
      ENDPROPERTIES
      
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #bufferPdsVendBatchInfo
        #/// <summary>
        #///     Retrives a buffer containing the vendor batch information attached to the <c>InventBatch</c> record.
        #/// </summary>
        #/// <returns>
        #///     An uncommited buffer of the <c>PdsVendBatchInfo</c> table.
        #/// </returns>
        #public PdsVendBatchInfo bufferPdsVendBatchInfo()
        #{
        #    PdsVendBatchInfo bufferPdsVendBatchInfo;
        #
        #    bufferPdsVendBatchInfo.CountryOfOrigin1 = this.PdsCountryOfOrigin1;
        #    bufferPdsVendBatchInfo.CountryOfOrigin2 = this.PdsCountryOfOrigin2;
        #    bufferPdsVendBatchInfo.UseVendBatchDate = this.PdsUseVendBatchDate;
        #    bufferPdsVendBatchInfo.UseVendBatchExp  = this.PdsUseVendBatchExp;
        #    bufferPdsVendBatchInfo.VendBatchDate    = this.PdsVendBatchDate;
        #    bufferPdsVendBatchInfo.VendExpiryDate   = this.PdsVendExpiryDate;
        #    bufferPdsVendBatchInfo.VendBatchId      = this.PdsVendBatchId;
        #
        #    return bufferPdsVendBatchInfo;
        #}
      ENDSOURCE
      SOURCE #checkInventBailee_RU
        #public boolean checkInventBailee_RU()
        #{
        #    boolean ok = true;
        #    ;
        #    if (this.hasInventBaileeTrans_RU())
        #    {
        #        ok = checkFailed("@GLS115698");
        #    }
        #    if (this.hasInventBaileeCalcItemSetup_RU())
        #    {
        #        ok = checkFailed("@GLS115699");
        #    }
        #    return ok;
        #}
        #
      ENDSOURCE
      SOURCE #dispositionDescription
        #/// <summary>
        #///    Gets the description for the disposition of the current batch.
        #/// </summary>
        #/// <returns>
        #///    The disposition description for the current batch.
        #/// </returns>
        #public display PdsDescription dispositionDescription()
        #{
        #    PdsDescription      ret = '';
        #
        #    if (this.PdsDispositionCode && hasFieldAccess(tableNum(InventBatch), fieldNum(InventBatch, PdsDispositionCode), AccessType::View))
        #    {
        #        ret = PdsDispositionMaster::find(this.PdsDispositionCode).Description;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getPotencyBatchManagementDisplayValues
        #/// <summary>
        #/// Retrieves the information related to the quantity management of the batch.
        #/// </summary>
        #/// <returns>
        #/// A <c>container</c> with:
        #/// <list type="bullet">
        #///     <item><description>The potency value specified for the batch.</description></item>
        #///     <item><description>The target value of the potency attribute.</description></item>
        #///     <item><description>The available on-hand inventory for the batch.</description></item>
        #///     <item><description>The active available on-hand for the batch.</description></item>
        #/// </list>; or a container with empty values if the related item is not potency-enabled.
        #/// </returns>
        #public server container getPotencyBatchManagementDisplayValues()
        #{
        #    PDSBaseAttributeId      baseAttributeId;
        #    PDSBaseAttributeValues  batchActualAttributeValue;
        #    PDSBaseValue            baseAttributeTargetValue;
        #    PDSAvailableQty         batchAvailableQuantityOnHand;
        #    PDSNormalizedQty        batchActiveQuantityOnHand;
        #
        #    if (this.itemId && this.inventBatchId)
        #    {
        #        baseAttributeId = InventTable::find(this.itemId).PDSBaseAttributeId;
        #        if (baseAttributeId)
        #        {
        #            batchActualAttributeValue = this.pdsBaseAttributeValue();
        #            baseAttributeTargetValue  = this.pdsBaseValue();
        #            batchAvailableQuantityOnHand = this.pdsOnHandQty();
        #            if (batchAvailableQuantityOnHand && batchActualAttributeValue)
        #            {
        #                batchActiveQuantityOnHand = PDSBalanceIngredient::selectIngredient(PDSIngredientTypeEnum::Active).normalizeQty(this.InventBatchId, batchAvailableQuantityOnHand, this);
        #            }
        #        }
        #    }
        #    return [batchActualAttributeValue, baseAttributeTargetValue, batchAvailableQuantityOnHand, batchActiveQuantityOnHand];
        #}
      ENDSOURCE
      SOURCE #hasAnyInventTrans
        #/// <summary>
        #///    Gets a value indicating if this inventory batch has any inventory transactions.
        #/// </summary>
        #/// <returns>
        #///    true if this inventory batch has any inventory transactions; otherwise, false.
        #/// </returns>
        #public boolean hasAnyInventTrans()
        #{
        #    InventTrans inventTrans;
        #    InventDim   inventDim;
        #
        #    select firstOnly RecId from inventDim
        #        where inventDim.InventBatchId       == this.InventBatchId
        #        exists join inventTrans
        #            where inventTrans.InventDimId   == inventDim.InventDimId
        #                  && inventTrans.ItemId     == this.ItemId;
        #
        #    return inventDim.RecId != 0;
        #}
      ENDSOURCE
      SOURCE #hasInventBaileeCalcItemSetup_RU
        #public boolean hasInventBaileeCalcItemSetup_RU()
        #{
        #    InventBaileeCalcSetup_RU    inventBaileeCalcSetup;
        #    ;
        #    select firstonly RecId from inventBaileeCalcSetup
        #        where inventBaileeCalcSetup.CalcItemId == this.ItemId;
        #
        #    return inventBaileeCalcSetup.RecId ? true : false;
        #}
        #
      ENDSOURCE
      SOURCE #hasInventBaileeTrans_RU
        #public boolean hasInventBaileeTrans_RU()
        #{
        #    InventTrans         inventTrans;
        #    InventDim           inventDim;
        #    InventProfile_RU    inventProfile;
        #    ;
        #    select firstonly RecId from inventTrans
        #        where inventTrans.ItemId                == this.ItemId
        #    join TableId from inventDim
        #        where inventDim.InventDimId             == inventTrans.InventDimId &&
        #              inventDim.InventBatchId           == this.InventBatchId
        #    join TableId from inventProfile
        #        where inventProfile.InventProfileId     == inventDim.InventProfileId_RU
        #           && inventProfile.InventProfileType   == InventProfileType_RU::Bailee;
        #
        #    return inventTrans.RecId ? true : false;
        #}
        #
      ENDSOURCE
      SOURCE #hasOpenInventSum
        #boolean hasOpenInventSum()
        #{
        #    InventSum   inventSum;
        #    InventDim   inventDim;
        #
        #    select forceplaceholders firstonly RecId from inventDim
        #        index hint BatchIdIdx
        #        where inventDim.InventBatchId   == this.InventBatchId
        #    join TableId from inventSum
        #        index hint DimIdIdx
        #        where inventSum.InventDimId     == inventDim.InventDimId    &&
        #              inventSum.Closed          == NoYes::No                &&
        #              inventSum.ItemId          == this.ItemId;
        #
        #    return inventDim.RecId ? true : false;
        #}
      ENDSOURCE
      SOURCE #initFromCaller
        #client void initFromCaller(Args args)
        #{
        #    InventMovement  inventMovement;
        #    FormRun         callerForm;
        #    Object          caller;
        #    int             h;
        #
        #    if (this.RecId || !args || !args.caller())
        #    {
        #        return;
        #    }
        #
        #    caller = args.caller();
        #
        #    // check if caller is not a FormRun
        #    if (!SysDictClass::isEqualOrSuperclass(classIdGet(caller),classNum(FormRun)))
        #    {
        #        return;
        #    }
        #
        #    callerForm  = args.caller();
        #
        #    if (callerForm.name() == formStr(WMSJournalReception))
        #    {
        #        for (h = 1; h <= callerForm.dataSourceCount(); h++)
        #        {
        #            if (callerForm.dataSource(h).cursor().TableId == tableNum(WMSJournalTrans))
        #            {
        #                this.initFromWMSJournalTrans(callerForm.dataSource(h).cursor() as WMSJournalTrans);
        #                return;
        #            }
        #        }
        #    }
        #
        #    for (h = 1; h <= callerForm.dataSourceCount(); h++)
        #    {
        #        inventMovement = InventMovement::constructNoThrow(callerForm.dataSource(h).cursor());
        #        if (inventMovement)
        #        {
        #            break;
        #        }
        #    }
        #    if (inventMovement)
        #    {
        #        this.initFromInventMovement(inventMovement);
        #    }
        #    else if (callerForm.args() && callerForm.args().caller())
        #    {
        #        this.initFromCaller(callerForm.args());
        #    }
        #}
      ENDSOURCE
      SOURCE #initFromInventMovement
        #void initFromInventMovement(InventMovement inventMovement, InventTrans _inventTrans = null)
        #{
        #    PdsVendBatchInfo    localVendBatchInfo = inventMovement.pdsVendBatchInfo();
        #
        #    this.ItemId     = inventMovement.itemId();
        #
        #    this.pdsInitFromVendBatchDetails(localVendBatchInfo);
        #
        #    // set ProdDate here only if it was not set based on the item, batch and vendor batch info
        #    if (!this.PdsUseVendBatchDate)
        #    {
        #        this.ProdDate   = inventMovement.batchProdDate(_inventTrans);
        #    }
        #
        #    this.pdsCreateAttribute(inventMovement.pdsGetBaseValue());
        #    inventMovement.pdsInheritBatchData(this, _inventTrans);
        #}
      ENDSOURCE
      SOURCE #initFromInventTrans
        #void initFromInventTrans(InventTrans _inventTrans)
        #{
        #    InventTable     inventTable;
        #
        #    this.ItemId     = _inventTrans.ItemId;
        #
        #    if (#PdsShelfEnabled)
        #    {
        #        inventTable = InventTable::find(this.ItemId);
        #        this.PdsFinishedGoodsDateTested = this.ProdDate;
        #
        #        this.pdsSetShelfLifeBestBeforeFields(inventTable);
        #    }
        #
        #    // set ProdDate here only if it was not set based on the item and batch shelf life info
        #    if (!this.PdsUseVendBatchDate)
        #    {
        #        this.ProdDate   = _inventTrans.DateExpected;
        #    }
        #}
      ENDSOURCE
      SOURCE #initFromWMSJournalTrans
        #void initFromWMSJournalTrans(WMSJournalTrans wmsJournalTrans)
        #{
        #    this.ItemId     = wmsJournalTrans.ItemId;
        #}
      ENDSOURCE
      SOURCE #insert
        #public void insert()
        #{
        #    PdsDispositionCode  pdsDispositionCode;
        #    InventTable         inventTable;
        #    AZ_BatchConfig      AZ_BatchConfig;
        #    date                _PackingDate;
        #    InventQty           _BatchQty;
        #
        #
        #
        #
        #
        #
        #    if (#PdsShelfEnabled)
        #    {
        #        inventTable         = InventTable::find(this.ItemId);
        #        pdsDispositionCode  = inventTable.modelGroup().PdsDispositionCode;
        #
        #        _packingDate = AZ_BatchConfig::GetPackingDate(this.inventBatchId, inventTable::find(this.itemId,false).BarcodeConfigId);
        #
        #        _BatchQty = AZ_BatchConfig::GetBatchQty(this.inventBatchId, inventTable::find(this.itemId,false).BarcodeConfigId);
        #
        #        this.BatchQty = _BatchQty;
        #
        #        this.prodDate = _PackingDate;
        #        this.VendProdCode = AZ_BatchConfig::GetProductCode(this.inventBatchId, inventTable::find(this.itemId,false).BarcodeConfigId);
        #
        #
        #        if (this.PdsUseVendBatchDate && this.PdsVendBatchDate)
        #        {
        #
        #             this.ProdDate = this.PdsVendBatchDate;
        #
        #        }
        #
        #        if (    !this.ExpDate
        #            ||  this.isExpDateConflictingWithShelLifeInternal(inventTable))
        #        {
        #            if (this.PdsUseVendBatchExp && this.PdsVendExpiryDate)
        #            {
        #                this.ExpDate = this.PdsVendExpiryDate;
        #            }
        #            else if (this.ProdDate && inventTable.PdsShelfLife)
        #            {
        #                this.ExpDate = this.ProdDate + inventTable.PdsShelfLife;
        #            }
        #        }
        #
        #        if (inventTable.isShelfLifeItem())
        #        {
        #            if (!this.PdsBestBeforeDate && this.ExpDate)
        #            {
        #                this.PdsBestBeforeDate = this.ExpDate - inventTable.PdsBestBefore;
        #            }
        #
        #            if (!this.PdsFinishedGoodsDateTested && this.ProdDate)
        #            {
        #                this.PdsFinishedGoodsDateTested = this.ProdDate;
        #            }
        #
        #            if (!this.PdsShelfAdviceDate && this.PdsFinishedGoodsDateTested && inventTable.PdsShelfAdvice)
        #            {
        #                this.PdsShelfAdviceDate = this.PdsFinishedGoodsDateTested + inventTable.PdsShelfAdvice;
        #            }
        #        }
        #
        #        if (!this.PdsDispositionCode)
        #        {
        #            if (PdsDispositionMaster::exist(pdsDispositionCode))
        #            {
        #                this.PdsDispositionCode = pdsDispositionCode;
        #            }
        #        }
        #    }
        #
        #    super();
        #}
        #
      ENDSOURCE
      SOURCE #inventOnhand
        #// AOSRunMode::server
        #public server InventOnhand inventOnhand()
        #{
        #    return  InventOnhand::newInventBatch(this);
        #}
      ENDSOURCE
      SOURCE #inventOnhandPhysicalDetailed
        #// AOSRunMode::server
        #public server InventDimOnHand_Physical inventOnhandPhysicalDetailed()
        #{
        #    InventDim                   inventDimCriteria;
        #    InventDimParm               inventDimParmCriteria;
        #    InventDimParm               inventDimParmOnHandLevel;
        #    InventDimOnHand_Physical    inventDimOnHand_Physical;
        #
        #    inventDimCriteria.InventBatchId         = this.InventBatchId;
        #    inventDimParmCriteria.InventBatchIdFlag = NoYes::Yes;
        #    inventDimParmOnHandLevel.ItemIdFlag     = NoYes::Yes;
        #    inventDimParmOnHandLevel.setAllInventDim();
        #    inventDimOnHand_Physical = InventDimOnHand_Physical::newPhysical(   this.ItemId,
        #                                                                        inventDimCriteria,
        #                                                                        inventDimParmCriteria,
        #                                                                        InventDimOnHandLevel::SpecPositive,
        #                                                                        inventDimParmOnHandLevel);
        #
        #    return inventDimOnHand_Physical;
        #}
      ENDSOURCE
      SOURCE #inventOnhandQty
        #/// <summary>
        #///     Sets the internal on hand buffer based on parameters specified earlier.
        #/// </summary>
        #/// <returns>
        #///     Internal on hand buffer.
        #/// </returns>
        #// AOSRunMode::server
        #public server InventOnHandQty inventOnhandQty()
        #{
        #    return  InventOnHandQty::newInventBatch(this);
        #}
      ENDSOURCE
      SOURCE #isExpDateConflictingWithShelLife
        #/// <summary>
        #/// Indicates whether the shelf life of an item is respected in the batch production and expiry dates.
        #/// </summary>
        #/// <returns>
        #/// true if the dates disrespect the shelf life; otherwise false.
        #/// </returns>
        #public boolean isExpDateConflictingWithShelLife()
        #{
        #    return this.isExpDateConflictingWithShelLifeInternal(InventTable::find(this.ItemId));
        #}
      ENDSOURCE
      SOURCE #isExpDateConflictingWithShelLifeInternal
        #/// <summary>
        #/// Indicates whether the shelf life of an item is respected in the batch production and expiry dates.
        #/// </summary>
        #/// <param name="_inventTable">
        #/// The item associated with the batch.
        #/// </param>
        #/// <returns>
        #/// true if the dates disrespect the shelf life; otherwise false.
        #/// </returns>
        #/// <remarks>
        #/// The related <c>InventTable</c> record under validation is required to be the one referenced on the
        #/// <c>ItemId</c> field.
        #/// </remarks>
        #private boolean isExpDateConflictingWithShelLifeInternal(InventTable _inventTable)
        #{
        #    boolean ret = false;
        #
        #    if (    this.ExpDate
        #        &&  this.ProdDate
        #        &&  _inventTable.isShelfLifeItem()) // includes check for configKey
        #    {
        #        ret = (_inventTable.PdsShelfLife != (this.ExpDate - this.ProdDate));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #pdsActiveQty
        #/// <summary>
        #/// Gets the active quantity for the current batch.
        #/// </summary>
        #/// <returns>
        #/// The current on hand quantity adjusted by the active potency value.
        #/// </returns>
        #[SysClientCacheDataMethodAttribute(false)]
        #public server display PDSNormalizedQty pdsActiveQty()
        #{
        #    if (!InventTable::isPotencyItem(this.itemId))
        #    {
        #        return 0;
        #    }
        #    return PDSBalanceIngredient::selectIngredient(PDSIngredientTypeEnum::Active).normalizeQty(this.InventBatchId, this.pdsOnHandQty(), this);
        #}
      ENDSOURCE
      SOURCE #pdsBaseAttribute
        #/// <summary>
        #/// Gets the base potency attribute for the item of this batch.
        #/// </summary>
        #/// <returns>
        #/// The base potency attribute ID.
        #/// </returns>
        #[SysClientCacheDataMethodAttribute(false)]
        #public display PDSBaseAttributeId pdsBaseAttribute()
        #{
        #    return InventTable::find(this.itemId).PDSBaseAttributeId;
        #}
      ENDSOURCE
      SOURCE #pdsBaseAttributeValue
        #/// <summary>
        #/// Gets the actual value of the base attribute for this batch.
        #/// </summary>
        #/// <returns>
        #/// The actual value of the base attribute.
        #/// </returns>
        #[SysClientCacheDataMethodAttribute(false)]
        #public display PDSBaseAttributeValues pdsBaseAttributeValue()
        #{
        #    PDSBaseAttributeId itemBaseAttributeId = InventTable::find(this.itemId).PDSBaseAttributeId;
        #    if (itemBaseAttributeId == '')
        #    {
        #        return '';
        #    }
        #    return PdsBatchAttributes::find(this.ItemId, this.InventBatchId, itemBaseAttributeId).PdsBatchAttribValue;
        #}
      ENDSOURCE
      SOURCE #pdsBaseValue
        #/// <summary>
        #/// Gets the target value of the base attribute for the base potency attribute for the item.
        #/// </summary>
        #/// <returns>
        #/// The value of the base attribute for the base potency attribute for the item.
        #/// </returns>
        #[SysClientCacheDataMethodAttribute(false)]
        #public display PDSBaseValue pdsBaseValue()
        #{
        #    PDSBaseAttributeId itemBaseAttributeId = InventTable::find(this.itemId).PDSBaseAttributeId;
        #    if (itemBaseAttributeId == '')
        #    {
        #        return '';
        #    }
        #    return PdsBatchAttribByItem::findItemId(this.itemId, itemBaseAttributeId, TableGroupAll::Table).PDSBaseValue;
        #}
      ENDSOURCE
      SOURCE #pdsBatchAttribCheckMandatory
        #public server boolean pdsBatchAttribCheckMandatory()
        #{
        #    PdsBatchAttribByItem        byItem;
        #    PdsBatchAttribByAttribGroup byGroup;
        #    PdsBatchAttrib              batchAttrib;
        #    boolean                     ret = false;
        #
        #    select firstonly RecId
        #        from   byItem
        #        where  byItem.PdsBatchAttribCode == TableGroupAll::Table
        #            && byItem.PdsBatchAttribItemId == this.ItemId
        #        join   RecId
        #        from   batchAttrib
        #        where  batchAttrib.PdsBatchAttribId == byItem.PdsBatchAttribRelation
        #            && batchAttrib.PdsMandatory;
        #
        #    if (byItem.RecId)
        #    {
        #        ret = true;
        #    }
        #
        #    select firstonly RecId
        #        from   byItem
        #        where  byItem.PdsBatchAttribCode == TableGroupAll::GroupId
        #            && byItem.PdsBatchAttribItemId  == this.ItemId
        #        join   PdsBatchAttribAttribId
        #        from   byGroup
        #        where  byGroup.PdsBatchAttribGroupId == byItem.PdsBatchAttribRelation
        #        join   RecId
        #        from   batchAttrib
        #        where  batchAttrib.PdsBatchAttribId == byGroup.PdsBatchAttribAttribId
        #            && batchAttrib.PdsMandatory;
        #
        #    if (byItem.RecId)
        #    {
        #        ret = true;
        #    }
        #
        #    select firstonly RecId
        #        from   byItem
        #        where  byItem.PdsBatchAttribCode == TableGroupAll::All
        #            && byItem.PdsBatchAttribItemId == this.ItemId;
        #
        #    if (byItem.RecId)
        #    {
        #        select firstonly RecId
        #            from batchAttrib
        #            where batchAttrib.PdsMandatory;
        #
        #        if (batchAttrib.RecId)
        #        {
        #            ret = true;
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #pdsBatchAttribMandatory
        #public server PdsBatchAttributes pdsBatchAttribMandatory()
        #{
        #    PdsBatchAttribByItem        byItem;
        #    PdsBatchAttribByAttribGroup byGroup;
        #    PdsBatchAttrib              batchAttrib;
        #    PdsBatchAttributes          batchAttributes;
        #
        #    while select RecId
        #        from   byItem
        #        where  byItem.PdsBatchAttribCode == TableGroupAll::Table
        #            && byItem.PdsBatchAttribItemId == this.ItemId
        #        join   PdsBatchAttribId
        #        from   batchAttrib
        #        where  batchAttrib.PdsBatchAttribId == byItem.PdsBatchAttribRelation
        #            && batchAttrib.PdsMandatory
        #    {
        #        batchAttributes = PdsBatchAttributes::find(this.ItemId,
        #                this.InventBatchId, batchAttrib.PdsBatchAttribId);
        #        if (!batchAttributes.PdsBatchAttribValue)
        #        {
        #            return batchAttributes;
        #        }
        #    }
        #    while select RecId
        #        from   byItem
        #        where  byItem.PdsBatchAttribCode == TableGroupAll::GroupId
        #            && byItem.PdsBatchAttribItemId  == this.ItemId
        #        join   RecId
        #        from   byGroup
        #        where  byGroup.PdsBatchAttribGroupId == byItem.PdsBatchAttribRelation
        #        join   PdsBatchAttribId
        #        from   batchAttrib
        #        where  batchAttrib.PdsBatchAttribId == byGroup.PdsBatchAttribAttribId
        #            && batchAttrib.PdsMandatory
        #    {
        #        batchAttributes = PdsBatchAttributes::find(this.ItemId,
        #                this.InventBatchId, batchAttrib.PdsBatchAttribId);
        #        if (!batchAttributes.PdsBatchAttribValue)
        #        {
        #            return batchAttributes;
        #        }
        #    }
        #
        #    select firstonly RecId
        #        from   byItem
        #        where  byItem.PdsBatchAttribCode == TableGroupAll::All
        #            && byItem.PdsBatchAttribItemId == this.ItemId;
        #
        #    if (byItem.RecId)
        #    {
        #        while select PdsBatchAttribId
        #            from batchAttrib
        #            where batchAttrib.PdsMandatory
        #        {
        #            batchAttributes = PdsBatchAttributes::find(this.ItemId,
        #                    this.InventBatchId, batchAttrib.PdsBatchAttribId);
        #            if (!batchAttributes.PdsBatchAttribValue)
        #            {
        #                return batchAttributes;
        #            }
        #        }
        #    }
        #
        #    return null;
        #}
      ENDSOURCE
      SOURCE #pdsBatchAttribValidateMandatory
        #public server boolean pdsBatchAttribValidateMandatory()
        #{
        #    PdsBatchAttribByItem        byItem;
        #    PdsBatchAttribByAttribGroup byGroup;
        #    PdsBatchAttrib              batchAttrib;
        #    PdsBatchAttributes          batchAttributes;
        #
        #    boolean ret = true;
        #
        #    while select RecId
        #        from   byItem
        #        where  byItem.PdsBatchAttribCode == TableGroupAll::Table
        #            && byItem.PdsBatchAttribItemId == this.ItemId
        #        join   PdsBatchAttribId
        #        from   batchAttrib
        #        where  batchAttrib.PdsBatchAttribId == byItem.PdsBatchAttribRelation
        #            && batchAttrib.PdsMandatory
        #    {
        #        batchAttributes = PdsBatchAttributes::find(this.ItemId,
        #                this.InventBatchId, batchAttrib.PdsBatchAttribId);
        #        if (!batchAttributes.PdsBatchAttribValue)
        #        {
        #            ret = false;
        #        }
        #    }
        #    while select RecId
        #        from   byItem
        #        where  byItem.PdsBatchAttribCode == TableGroupAll::GroupId
        #            && byItem.PdsBatchAttribItemId  == this.ItemId
        #        join   RecId
        #        from   byGroup
        #        where  byGroup.PdsBatchAttribGroupId == byItem.PdsBatchAttribRelation
        #        join   PdsBatchAttribId
        #        from   batchAttrib
        #        where  batchAttrib.PdsBatchAttribId == byGroup.PdsBatchAttribAttribId
        #            && batchAttrib.PdsMandatory
        #    {
        #        batchAttributes = PdsBatchAttributes::find(this.ItemId,
        #                this.InventBatchId, batchAttrib.PdsBatchAttribId);
        #        if (!batchAttributes.PdsBatchAttribValue)
        #        {
        #            ret = false;
        #        }
        #    }
        #
        #    select firstonly RecId
        #        from   byItem
        #        where  byItem.PdsBatchAttribCode == TableGroupAll::All
        #            && byItem.PdsBatchAttribItemId == this.ItemId;
        #
        #    if (byItem.RecId)
        #    {
        #        while select PdsBatchAttribId
        #            from batchAttrib
        #            where batchAttrib.PdsMandatory
        #        {
        #            batchAttributes = PdsBatchAttributes::find(this.ItemId,
        #                    this.InventBatchId, batchAttrib.PdsBatchAttribId);
        #            if (!batchAttributes.PdsBatchAttribValue)
        #            {
        #                ret = false;
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #pdsBatchAttribValues
        #/// <summary>
        #/// Indicates whether the inventory batch has at least one batch attribute value.
        #/// </summary>
        #/// <returns>
        #/// A <c>NoYes::Yes</c> enumeration value if the batch has at least one batch attribute value;
        #/// otherwise, a <c>NoYes::No</c> enumeration value.
        #/// </returns>
        #// BP Deviation Documented
        #public display PdsBatchAttribValues pdsBatchAttribValues()
        #{
        #    PdsBatchAttributes  batchAttributes;
        #    boolean             ret = false;
        #
        #    if (#PdsBatchAttribEnabled)
        #    {
        #        if (hasTableAccess(
        #                tableNum(PdsBatchAttributes),
        #                AccessType::View))
        #        {
        #            select firstonly RecId
        #                from batchAttributes
        #                where  batchAttributes.InventBatchId == this.InventBatchId
        #                    && batchAttributes.PdsBatchAttribValue != '';
        #
        #            ret = batchAttributes.RecId != 0;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #pdsCheckVendBatchInfo
        #/// <summary>
        #/// Validates that the current vendor batch information matches the current container values.
        #/// </summary>
        #/// <param name="_vendBatchInfo">
        #/// A container that contains the vendor batch information.
        #/// </param>
        #/// <returns>
        #/// true if the information in the container matches the current batch information; otherwise false .
        #/// </returns>
        #public boolean pdsCheckVendBatchInfo(container _vendBatchInfo)
        #{
        #    boolean     ret = true;
        #
        #    #PdsVendBatchPos
        #
        #    if (this.RecId && InventTable::find(this.ItemId).isShelfLifeItem())
        #    {
        #        if (ret && conLen(_vendBatchInfo) >= #vendBatchDtPos)
        #        {
        #            ret = this.PdsVendBatchDate == conPeek(_vendBatchInfo,#vendBatchDtPos);
        #        }
        #
        #        if (ret && conLen(_vendBatchInfo) >= #useVendDtPos)
        #        {
        #            ret = this.PdsUseVendBatchDate == conPeek(_vendBatchInfo,#useVendDtPos);
        #        }
        #
        #        if (ret && conLen(_vendBatchInfo) >= #expiryPos)
        #        {
        #            ret = this.PdsVendExpiryDate == conPeek(_vendBatchInfo,#expiryPos);
        #        }
        #
        #        if (ret && conLen(_vendBatchInfo) >= #useExpiryPos)
        #        {
        #            ret = this.PdsUseVendBatchExp == conPeek(_vendBatchInfo,#useExpiryPos);
        #        }
        #
        #        if (ret && conLen(_vendBatchInfo) >= #ctry1Pos)
        #        {
        #            ret = this.PdsCountryOfOrigin1 == conPeek(_vendBatchInfo,#ctry1Pos);
        #        }
        #
        #        if (ret && conLen(_vendBatchInfo) >= #ctry2Pos)
        #        {
        #            ret = this.PdsCountryOfOrigin2 == conPeek(_vendBatchInfo,#ctry2Pos);
        #        }
        #
        #        if (ret && conLen(_vendBatchInfo) >= #vendBatchIdPos)
        #        {
        #            ret = this.PdsVendBatchId == conPeek(_vendBatchInfo,#vendBatchIdPos);
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #pdsCreateAttribute
        #/// <summary>
        #/// Creates the default potency attribute using the specified actual value.
        #/// </summary>
        #/// <param name="_value">
        #/// The actual value for the potency attribute to create.
        #/// </param>
        #public void pdsCreateAttribute(PDSBaseValue _value)
        #{
        #    PdsBatchAttribByItem attrib;
        #    PdsBatchAttributes   value;
        #
        #    if (!_value)
        #    {
        #        return;
        #    }
        #
        #    attrib = InventTable::pdsFindBaseAttribute(this.ItemId);
        #    if (attrib && !PdsBatchAttributes::exist(this.ItemId, this.InventBatchId, attrib.PdsBatchAttribRelation))
        #    {
        #        ttsBegin;
        #
        #        value.initValue();
        #        value.InventBatchId         = this.InventBatchId;
        #        value.PdsBatchAttribId      = attrib.PdsBatchAttribRelation;
        #        value.ItemId                = this.ItemId;
        #        value.PdsBatchAttribValue   = attrib.pdsBatchAttrib().locale2Storage(_value);
        #        value.insert();
        #
        #        ttsCommit;
        #    }
        #}
      ENDSOURCE
      SOURCE #pdsDispositionStatus
        #/// <summary>
        #/// Gets the batch disposition status that is associated to the <c>InventBatch</c> record.
        #/// </summary>
        #/// <returns>
        #/// The disposition status associated with the <c>InventBatch</c> record.
        #/// </returns>
        #//BP Deviation Documented
        #public display PdsBatchDispositionStatus pdsDispositionStatus()
        #{
        #    PdsBatchDispositionStatus   status = PdsStatus::NotApplicable;
        #
        #    if (hasFieldAccess(
        #            tableNum(InventBatch),
        #            fieldNum(InventBatch,PdsDispositionCode),
        #            AccessType::View)
        #        &&  this.PdsDispositionCode)
        #    {
        #        status = PdsDispositionMaster::find(this.PdsDispositionCode).Status;
        #    }
        #
        #    return status;
        #}
      ENDSOURCE
      SOURCE #pdsEffectiveExpiryDate
        #/// <summary>
        #/// Retrieves the effective shelf life expiration date for this batch.
        #/// </summary>
        #/// <returns>
        #/// The effective expiration date for the batch; otherwise, null .
        #/// </returns>
        #/// <remarks>
        #/// This method retrieves the shelf life effective expiration date based on the item model group. The
        #/// batch expires at midnight on the day that is returned by this method.If shelf life is not enabled
        #/// or not used for the item that the batch is associated to or if no expiration date is assigned, and
        #/// then this returns null. Otherwise, this method selects the appropriate expiration date for the
        #/// batch based on the FEFO rule in the item model group, either expiry date or best before date.Note
        #/// that the expiry date that is returned based on the best before date is the actual date on which the
        #/// batch will expire.
        #/// </remarks>
        #public date pdsEffectiveExpiryDate()
        #{
        #    InventModelGroup    modelGroup;
        #    date                expiryDate = dateNull();
        #
        #    if (#PdsShelfEnabled)
        #    {
        #        modelGroup = InventTable::find(this.ItemId).modelGroup();
        #        if (modelGroup.PdsCheck
        #            && modelGroup.PdsPickCriteria == PdsPickCriteria::BestBeforeDate)
        #        {
        #            expiryDate = this.PdsBestBeforeDate - 1;
        #        }
        #        else
        #        {
        #            expiryDate = this.ExpDate;
        #        }
        #    }
        #
        #    return expiryDate;
        #}
      ENDSOURCE
      SOURCE #pdsInitFromVendBatchDetails
        #/// <summary>
        #/// Updates the vendor information about the batch from the specified vendor details.
        #/// </summary>
        #/// <param name="_pdsVendBatchInfo">
        #/// The vendor batch information to use for the update.
        #/// </param>
        #/// <param name="_allowEmptyData">
        #/// A Boolean value that indicates that empty data can be set on the batch.
        #/// </param>
        #public void pdsInitFromVendBatchDetails(
        #    PdsVendBatchInfo _pdsVendBatchInfo,
        #    boolean          _allowEmptyData   = false)
        #{
        #    InventTable inventTable = InventTable::find(this.ItemId);
        #
        #    if ((!_pdsVendBatchInfo.isNullOrEmpty()) || _allowEmptyData)
        #    {
        #        // copy the batch life information
        #        this.PdsVendBatchDate    = _pdsVendBatchInfo.VendBatchDate;
        #        this.PdsUseVendBatchDate = _pdsVendBatchInfo.UseVendBatchDate;
        #
        #        this.PdsVendExpiryDate   = _pdsVendBatchInfo.VendExpiryDate;
        #        this.PdsUseVendBatchExp  = _pdsVendBatchInfo.UseVendBatchExp;
        #
        #        //initialiaze all the dates
        #        this.pdsSetShelfLifeBestBeforeFields(inventTable);
        #
        #        // separate the vendor details from the shelf life here
        #        this.PdsCountryOfOrigin1 = _pdsVendBatchInfo.CountryOfOrigin1;
        #        this.PdsCountryOfOrigin2 = _pdsVendBatchInfo.CountryOfOrigin2;
        #        this.PdsVendBatchId      = _pdsVendBatchInfo.VendBatchId;
        #    }
        #}
      ENDSOURCE
      SOURCE #pdsIsBatchBlocked
        #[SysObsoleteAttribute('This method does not properly check the self-life dates for blocking and should no longer be used.', true)]
        #public boolean pdsIsBatchBlocked()
        #{
        #    throw error(Error::wrongUseOfFunction(funcName()));
        #}
      ENDSOURCE
      SOURCE #pdsOnHandQty
        #/// <summary>
        #/// Gets the on-hand quantity for the current batch.
        #/// </summary>
        #/// <returns>
        #/// The current on-hand quantity.
        #/// </returns>
        #[SysClientCacheDataMethodAttribute(false)]
        #public server display PDSAvailableQty pdsOnHandQty()
        #{
        #    return InventOnhand::newInventBatch(this).availPhysical();
        #}
      ENDSOURCE
      SOURCE #pdsSetShelfLifeBestBeforeFields
        #/// <summary>
        #/// Sets the shelf life date fields if the dates of the vendor are used.
        #/// </summary>
        #/// <param name="_inventTable">
        #/// An <c>InventTable</c> record that is used for the item that is listed in the <c>InventBatch</c>
        #/// record; otherwise, the current record.
        #/// </param>
        #/// <param name="_updateNull">
        #/// A Boolean value that indicates whether to update the date if no production date has been set.
        #/// </param>
        #/// <remarks>
        #/// This method will indicate whether to use vendor date fields to a <c>NoYes::Yes</c> value. If so the
        #/// corresponding field will be updated and the related shelf life date field will be recalculated
        #/// based on this information.
        #/// </remarks>
        #public void pdsSetShelfLifeBestBeforeFields(
        #    InventTable _inventTable = InventTable::find(this.ItemId),
        #    boolean     _updateNull  = false)
        #{
        #    if (this.ProdDate == dateNull() && _updateNull)
        #    {
        #        this.ProdDate = systemDateGet();
        #        this.PdsFinishedGoodsDateTested = this.ProdDate;
        #    }
        #
        #    if (this.PdsUseVendBatchDate)
        #    {
        #        this.ProdDate = this.PdsVendBatchDate;
        #    }
        #
        #    if (!this.pdsInheritedShelfLife)
        #    {
        #        if (_inventTable.PdsShelfLife)
        #        {
        #            if (this.PdsUseVendBatchExp)
        #            {
        #                this.ExpDate = this.PdsVendExpiryDate;
        #            }
        #            else if (this.ProdDate != dateNull())
        #            {
        #                this.ExpDate = this.ProdDate + _inventTable.PdsShelfLife;
        #            }
        #        }
        #
        #        if ((this.ExpDate != dateNull()) && this.ExpDate != this.orig().ExpDate)
        #        {
        #            this.PdsBestBeforeDate = this.ExpDate - _inventTable.PdsBestBefore;
        #        }
        #
        #        if (this.PdsUseVendBatchDate && _inventTable.PdsShelfAdvice)
        #        {
        #            this.PdsShelfAdviceDate = this.PdsVendBatchDate + _inventTable.PdsShelfAdvice;
        #        }
        #        else if ((this.PdsFinishedGoodsDateTested != dateNull()) && _inventTable.PdsShelfAdvice)
        #        {
        #            this.PdsShelfAdviceDate = this.PdsFinishedGoodsDateTested + _inventTable.PdsShelfAdvice;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #pdsUpdateVendBatch
        #/// <summary>
        #/// Resets the vendor batch values when the batch dates are changed.
        #/// </summary>
        #public void pdsUpdateVendBatch()
        #{
        #    if (#PdsShelfEnabled)
        #    {
        #        if (this.ProdDate != this.orig().ProdDate)
        #        {
        #            this.PdsUseVendBatchDate = NoYes::No;
        #        }
        #
        #        if (this.ExpDate != this.orig().ExpDate)
        #        {
        #            this.PdsUseVendBatchExp  = NoYes::No;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #pdsValidateBestBeforeDate
        #public boolean pdsValidateBestBeforeDate(TransDate _bestBeforeDate = dateNull())
        #{
        #    boolean     ret = true;
        #    TransDate   testDate = _bestBeforeDate;
        #
        #    if (#PdsShelfEnabled)
        #    {
        #        if (!testDate)
        #        {
        #            testDate = this.PdsBestBeforeDate;
        #        }
        #
        #        if (testDate > this.ExpDate)
        #        {
        #            ret = checkFailed("@PRO1973");
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #pdsValidateCntryofOrigin
        #/// <summary>
        #/// Indicates whether the two countries or regions of origin are the same.
        #/// </summary>
        #/// <returns>
        #/// true if the country or region is not the same; otherwise false .
        #/// </returns>
        #/// <remarks>
        #/// If the two fields are the same then an error will be issued.
        #/// </remarks>
        #public boolean pdsValidateCntryofOrigin()
        #{
        #    boolean ret = true;
        #
        #    if (this.PdsCountryOfOrigin1 && this.PdsCountryOfOrigin2)
        #    {
        #        if (this.PdsCountryOfOrigin1 == this.PdsCountryOfOrigin2)
        #        {
        #            ret = checkFailed("@PDS1356");
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #pdsValidateExpiryDate
        #public boolean pdsValidateExpiryDate(TransDate _expiryDate = dateNull())
        #{
        #    boolean     ret = true;
        #    TransDate   testDate = _expiryDate;
        #
        #    if (#PdsShelfEnabled)
        #    {
        #        if (!testDate)
        #        {
        #            testDate = this.ExpDate;
        #        }
        #
        #        if (this.PdsBestBeforeDate > testDate)
        #        {
        #            ret = checkFailed("@PRO1974");
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #qualityOrderStatusDisplay
        #/// <summary>
        #///    Returns the status of the associated quality orders.
        #/// </summary>
        #/// <returns>
        #///    The current quality order status.
        #/// </returns>
        #display InventTestOrderStatusDisplay qualityOrderStatusDisplay()
        #{
        #    InventQualityOrderTable    orderTable;
        #    InventDim                  inventDim;
        #
        #    if (!InventParameters::find().UseQualityManagement)
        #    {
        #        return InventTestOrderStatusDisplay::None;
        #    }
        #
        #    select firstonly orderTable
        #        order by OrderStatus
        #        where orderTable.ReferenceType == InventTestReferenceType::Inventory
        #           && orderTable.ItemId        == this.ItemId
        #            exists join inventDim
        #            where   inventDim.InventDimId   == orderTable.InventDimId
        #                 && inventDim.InventBatchId == this.InventBatchId;
        #
        #    return orderTable ? orderTable.statusDisplay() : InventTestOrderStatusDisplay::None;
        #}
      ENDSOURCE
      SOURCE #renamePrimaryKey
        #void renamePrimaryKey()
        #{
        #    InventDimRenameDimValue inventDimRenameDimValue = InventDimRenameDimValue::newInventBatch(this);
        #
        #    if (inventDimRenameDimValue.validate())
        #    {
        #        ttsbegin;
        #        inventDimRenameDimValue.run();
        #        ttscommit;
        #
        #        if (this.isFormDataSource())
        #        {
        #            inventDimRenameDimValue.updateCallerForm(this.dataSource());
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #update
        #/// <summary>
        #///    Updates a table.
        #/// </summary>
        #/// <exception cref="M:Exception::Error">
        #///    Quality management is used for the company and an open quality order exists for this batch.
        #/// </exception>
        #public void update()
        #{
        #    if (InventParameters::find().UseQualityManagement &&
        #        this.qualityOrderStatusDisplay() == InventTestOrderStatusDisplay::Open)
        #    {
        #        throw error("@SYS113930");
        #    }
        #
        #    if (!this.pdsValidateBestBeforeDate())
        #    {
        #        throw error(strFmt("@SYS85685", tableId2pname(tableNum(InventBatch))));
        #    }
        #
        #    super();
        #}
      ENDSOURCE
      SOURCE #updateBaseBatchAttribValue
        #/// <summary>
        #///     Updates the base attribute value for the inventory batch.
        #/// </summary>
        #/// <param name="_attributeValue">
        #///     The specified attribute value.
        #/// </param>
        #public void updateBaseBatchAttribValue(PdsBatchAttribValue _attributeValue)
        #{
        #    PdsBatchAttribByItem    attribByItem;
        #    PdsBatchAttributes      attribValue;
        #
        #    attribByItem = InventTable::pdsFindBaseAttribute(this.ItemId);
        #
        #    if (attribByItem.RecId != 0)
        #    {
        #        if (!attribByItem.pdsCheckAttribCriteria(_attributeValue))
        #        {
        #            // The above call issues error on the infolog when the validation fails.
        #            throw error("@SYS18447");
        #        }
        #
        #        ttsbegin;
        #
        #        attribValue = PdsBatchAttributes::find(this.ItemId, this.InventBatchId, attribByItem.PdsBatchAttribRelation, true);
        #
        #        if (attribValue)
        #        {
        #            attribValue.PdsBatchAttribValue = _attributeValue;
        #
        #            if (!attribValue.PdsBatchAttribId)
        #            {
        #                attribValue.PdsBatchAttribId = attribByItem.PdsBatchAttribRelation;
        #            }
        #
        #            attribValue.update();
        #        }
        #        else
        #        {
        #            attribValue.initValue();
        #            attribValue.ItemId              = this.ItemId;
        #            attribValue.InventBatchId       = this.InventBatchId;
        #            attribValue.PdsBatchAttribId    = attribByItem.PdsBatchAttribRelation;
        #            attribValue.PdsBatchAttribValue = _attributeValue;
        #            attribValue.insert();
        #        }
        #
        #        ttscommit;
        #    }
        #}
      ENDSOURCE
      SOURCE #validateBatchDispCodeForPicking
        #/// <summary>
        #///     Validates that the selected batch is available for picking.
        #/// </summary>
        #/// <param name="_workTransType">
        #///     The work transaction type.
        #/// </param>
        #/// <returns>
        #///     Returns true if the batch is available for picking.
        #/// </returns>
        #public boolean validateBatchDispCodeForPicking(WHSWorkTransType _workTransType)
        #{
        #    boolean                 ret = true;
        #    PdsDispositionMaster    pdsDispositionMaster;
        #
        #    pdsDispositionMaster = PdsDispositionMaster::find(this.PdsDispositionCode);
        #
        #    switch (_workTransType)
        #    {
        #        case WHSWorkTransType::KanbanPick:
        #        case WHSWorkTransType::ProdPick:
        #            if (pdsDispositionMaster.PdsProdBlockPick)
        #            {
        #                ret = false;
        #            }
        #            break;
        #        case WHSWorkTransType::Sales:
        #            if (pdsDispositionMaster.PdsSalesBlockPick)
        #            {
        #                ret = false;
        #            }
        #            break;
        #        case WHSWorkTransType::TransferIssue:
        #            if (pdsDispositionMaster.PdsTransBlockPick)
        #            {
        #                ret = false;
        #            }
        #            break;
        #        default:
        #            break;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateDelete
        #public boolean validateDelete()
        #{
        #    boolean ret;
        #
        #    ret = super();
        #
        #    if (this.hasOpenInventSum())
        #    {
        #        ret = checkFailed(strFmt("@SYS79457", tablePName(InventSum)));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateField
        #public boolean validateField(FieldId _fieldIdToCheck)
        #{
        #    // <GEERU>
        #    #ISOCountryRegionCodes
        #    // </GEERU>
        #
        #    boolean ret;
        #
        #    ret = super(_fieldIdToCheck);
        #
        #    // <GEERU>
        #    if (ret && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        #    {
        #        switch (_fieldIdToCheck)
        #        {
        #            case fieldNum(InventBatch, ExpDate):
        #            case fieldNum(InventBatch, ProdDate):
        #                ret = this.checkInventBailee_RU() && ret;
        #                break;
        #        }
        #    }
        #    // </GEERU>
        #
        #    if (ret && #PdsShelfEnabled)
        #    {
        #        switch (_fieldIdToCheck)
        #        {
        #            case fieldNum(InventBatch,PdsVendBatchDate):
        #                if (this.PdsVendBatchDate > systemDateGet())
        #                {
        #                    ret = checkFailed("@PRO2230");
        #                }
        #                break;
        #            case fieldNum(InventBatch,PdsUseVendBatchDate):
        #                if (this.PdsUseVendBatchDate
        #                    && this.PdsVendBatchDate == dateNull())
        #                {
        #                    ret = checkFailed("@PRO2231");
        #                }
        #                break;
        #            case fieldNum(InventBatch,PdsVendExpiryDate):
        #                if (this.PdsVendExpiryDate <= systemDateGet())
        #                {
        #                    ret = checkFailed("@PDS1353");
        #                }
        #                if (this.PdsVendExpiryDate <= this.PdsVendBatchDate)
        #                {
        #                    ret = checkFailed("@PDS1351");
        #                }
        #                break;
        #            case fieldNum(InventBatch,PdsUseVendBatchExp):
        #                if (this.PdsUseVendBatchExp
        #                    && this.PdsVendExpiryDate == dateNull())
        #                {
        #                    ret = checkFailed("@PDS1352");
        #                }
        #                break;
        #            case fieldNum(InventBatch,PdsCountryOfOrigin1):
        #            //Fall through
        #            case fieldNum(InventBatch,PdsCountryOfOrigin2):
        #                ret = this.pdsValidateCntryofOrigin();
        #                break;
        #        }
        #    }
        #
        #    return ret;
        #}
        #
        #
      ENDSOURCE
      SOURCE #validateWrite
        #public boolean validateWrite()
        #{
        #    boolean ret;
        #
        #    ret = super();
        #
        #    ret = ret
        #        && this.pdsValidateBestBeforeDate();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkExist
        #static boolean checkExist(
        #    ItemId          itemId,
        #    InventBatchId   batchId)
        #{
        #    if (itemId && batchId && ! InventBatch::exist(itemId,batchId))
        #    {
        #        return checkFailed(strFmt(InventBatch::txtNotExist(),batchId,itemId));
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #createFromMovement
        #/// <summary>
        #///  Create  <c>InventBatch</c> with the specified batch number.
        #/// </summary>
        #/// <param name="_inventBatchId">
        #///  The batch number ID.
        #/// </param>
        #/// <param name="_movement">
        #///  The movement with the batch number.
        #/// </param>
        #/// <param name="_inventTrans">
        #///  The inventory transaction with the batch number.
        #/// </param>
        #public static void createFromMovement(
        #                                InventBatchId _inventBatchId,
        #                                InventMovement _movement,
        #                                InventTrans _inventTrans)
        #{
        #    InventBatch inventBatch;
        #
        #    ttsbegin;
        #    if (_inventBatchId && !InventBatch::exist(_movement.itemId(), _inventBatchId))
        #    {
        #        inventBatch.InventBatchId = _inventBatchId;
        #        inventBatch.initFromInventMovement(_movement, _inventTrans);
        #        inventBatch.pdsInitFromVendBatchDetails(_movement.pdsVendBatchInfo());
        #        inventBatch.insert();
        #    }
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #exist
        #static boolean exist(
        #    ItemId          itemId,
        #    InventBatchId   batchId)
        #{
        #    return (select inventBatch
        #                index hint itemBatchIdx
        #                where inventBatch.ItemId        == itemId    &&
        #                      inventBatch.InventBatchId == batchId).RecId != 0;
        #}
      ENDSOURCE
      SOURCE #existsNullDateShelfLifeBatches
        #/// <summary>
        #/// Indicates whether there are any linked batch produced that does not have a shelf life date
        #/// specified.
        #/// </summary>
        #/// <param name="_prodId">
        #/// The ID of the production order that is being reported as finished.
        #/// </param>
        #/// <returns>
        #/// true if any batch exists for a shelf-life item without any date specified; otherwise, false.
        #/// </returns>
        #public static boolean existsNullDateShelfLifeBatches(ProdId _prodId)
        #{
        #    ProdParmReportFinished  prodParmRAF;
        #    InventTable             inventTable;
        #    InventDim               inventDim;
        #    InventBatch             inventBatch;
        #
        #    if (#PdsShelfEnabled && _prodId)
        #    {
        #        //select the first unprocessed RAF line for the specified order
        #        select firstonly RecId, InventDimId from prodParmRAF
        #            where   prodParmRAF.ProdId           == _prodId
        #                &&  prodParmRAF.ExecutedDateTime == utcDateTimeNull()
        #                &&  prodParmRAF.QtyGood > 0
        #        //that has a batch number identified
        #        join  InventDimId, InventBatchId    from inventDim
        #            where   inventDim.InventBatchId  != ''
        #                &&  inventDim.InventDimId    == prodParmRAF.InventDimId
        #        //and that batch has a null production date
        #        join  InventBatchId, ItemId         from inventBatch
        #            where   inventBatch.InventBatchId == inventDim.InventBatchId
        #            &&      inventBatch.ProdDate      == dateNull()
        #        //and is connected to a shelf life item
        #        join  ItemId, PdsShelfLife          from inventTable
        #            where   inventTable.ItemId        == inventBatch.ItemId
        #            &&      inventTable.ItemId        == prodParmRAF.ItemId
        #            &&      inventTable.PdsShelfLife != 0;
        #    }
        #
        #    return (prodParmRAF.RecId != 0);
        #}
      ENDSOURCE
      SOURCE #find
        #static InventBatch find(InventBatchId _inventBatchId, ItemId _itemId, boolean _forupdate = false)
        #{
        #    InventBatch inventBatch;
        #
        #    inventBatch.selectForUpdate(_forupdate);
        #
        #    if (_inventBatchId)
        #    {
        #        select firstonly inventBatch
        #            index hint itemBatchIdx
        #            where inventBatch.ItemId            == _itemId
        #               && inventBatch.InventBatchId     == _inventBatchId;
        #
        #    }
        #
        #    return inventBatch;
        #}
      ENDSOURCE
      SOURCE #lookupVendBatchId
        #/// <summary>
        #/// Creates a standard lookup dialog with the vendor batch numbers available for the selected item or batch.
        #/// </summary>
        #/// <param name="_itemId">
        #/// Product number.
        #/// </param>
        #/// <param name="_inventBatchId">
        #/// Batch number; optional.
        #/// </param>
        #/// <param name="_formControl">
        #/// Control for which the lookup needs to be enabled.
        #/// </param>
        #/// <remarks>
        #/// <para>If the specified batch number is blank the lookup will show all vendor batch numbers available for the item.</para>
        #/// </remarks>
        #public static void lookupVendBatchId(ItemId _itemId, InventBatchId _inventBatchId, FormControl _formControl)
        #{
        #    InventBatch::vendBatchIdLookup(_itemId, _inventBatchId, _formControl).performFormLookup();
        #}
      ENDSOURCE
      SOURCE #mcrLookupAll
        #/// <summary>
        #/// Looks up all batches.
        #/// </summary>
        #/// <param name="lookupCtrl">
        #/// The control on which to perform the look up.
        #/// </param>
        #public client static void mcrLookupAll(
        #    FormStringControl   lookupCtrl    )
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventBatch), lookupCtrl);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(InventBatch));
        #
        #    sysTableLookup.addLookupfield(fieldNum(InventBatch, InventBatchId));
        #    sysTableLookup.addLookupfield(fieldNum(InventBatch, ProdDate));
        #    sysTableLookup.addLookupfield(fieldNum(InventBatch, ExpDate));
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #mcrLookupByGroup
        #/// <summary>
        #///  Looks up all batches for an itemGroup.
        #/// </summary>
        #/// <param name="lookupCtrl">
        #/// The control on which the look up has to be performed.
        #/// </param>
        #/// <param name="_itemGroupId">
        #/// The item group ID to be used for the look up.
        #/// </param>
        #public client static void mcrLookupByGroup(
        #    FormStringControl lookupCtrl,
        #    ItemGroupId _itemGroupId)
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventBatch), lookupCtrl);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    qbdsInventbatch;
        #    QueryBuildDataSource    qbdsInventTable;
        #    QueryBuildDataSource    qbdsInventItemGroupItem;
        #    QueryBuildRange         qbdsRangeItemGroup;
        #
        #    qbdsInventbatch = query.addDataSource(tableNum(InventBatch));
        #    qbdsInventbatch.orderMode(OrderMode::GroupBy);
        #    qbdsInventbatch.addSortField(fieldNum(InventBatch, InventBatchId));
        #
        #    // Item joined to batch
        #    qbdsInventTable = qbdsInventbatch.addDataSource(tableNum(InventTable));
        #    qbdsInventTable.addLink(fieldNum(InventBatch, ItemId), fieldNum(InventTable , ItemId));
        #
        #    // Group joined to item, filter by item group
        #    qbdsInventItemGroupItem = qbdsInventTable.addDataSource(tableNum(InventItemGroupItem));
        #    qbdsInventItemGroupItem.addLink(fieldNum(InventTable, ItemId), fieldNum(InventItemGroupItem, ItemId));
        #    qbdsInventItemGroupItem.addLink(fieldNum(InventTable, DataAreaId), fieldNum(InventItemGroupItem, DataAreaId));
        #    qbdsRangeItemGroup = qbdsInventItemGroupItem.addRange(fieldNum(InventItemGroupItem, ItemGroupId));
        #    qbdsRangeItemGroup.value(queryValue(_itemGroupId));
        #
        #    // Initialize lookup
        #    sysTableLookup.addLookupfield(fieldNum(InventBatch, InventBatchId));
        #    sysTableLookup.addLookupfield(fieldNum(InventBatch, ProdDate));
        #    sysTableLookup.addLookupfield(fieldNum(InventBatch, ExpDate));
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #mcrLookupByItem
        #/// <summary>
        #/// Looks up all batches for a given <c>IemID</c>.
        #/// </summary>
        #/// <param name="lookupCtrl">
        #///  The control on which the look up is performed.
        #/// </param>
        #/// <param name="_itemId">
        #/// The <c>ItemID</c> for which to perform the look up.
        #/// </param>
        #public client static void mcrLookupByItem(
        #    FormStringControl   lookupCtrl,
        #    ItemId  _itemId    )
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventBatch), lookupCtrl);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(InventBatch));
        #    QueryBuildRange         queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventBatch, ItemId));
        #
        #    queryBuildRange.value(_itemId);
        #    sysTableLookup.addLookupfield(fieldNum(InventBatch, InventBatchId));
        #    sysTableLookup.addLookupfield(fieldNum(InventBatch, ProdDate));
        #    sysTableLookup.addLookupfield(fieldNum(InventBatch, ExpDate));
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #pdsCheckDisposition
        #/// <summary>
        #/// Checks the disposition master settings and displays the selected options in an infolog.
        #/// </summary>
        #/// <param name="_inventBatchId">
        #/// The batch id.
        #/// </param>
        #/// <param name="_itemId">
        #/// The item id.
        #/// </param>
        #/// <param name="_displayType">
        #/// The type of disposition options to show; optional.
        #/// </param>
        #/// <remarks>
        #/// The method no longer returns a boolean value indicating if lines were added to the infolog.
        #/// Use the Global::infologLine() API determine if lines were added.
        #/// </remarks>
        #public static void pdsCheckDisposition(InventBatchId _inventBatchId,
        #    ItemId              _itemId,
        #    PdsDispDisplayType  _displayType = PdsDispDisplayType::Blocked)
        #{
        #    InventBatch             inventBatch;
        #    PdsDispositionMaster    dispMaster;
        #    str                     strInitBlocked;
        #    container               strBlocked;
        #    str                     strInitAvailable;
        #    container               strAvailable;
        #    int                     i;
        #
        #    inventBatch = InventBatch::find(_inventBatchId,_itemId);
        #
        #    if (!inventBatch)
        #    {
        #        return;
        #    }
        #
        #    if (inventBatch.PdsDispositionCode
        #        && inventBatch.pdsDispositionStatus() == PdsStatus::Unavailable)
        #    {
        #        select firstonly dispMaster
        #            where  dispMaster.DispositionCode == inventBatch.PdsDispositionCode
        #                && dispMaster.Status == PdsStatus::Unavailable;
        #
        #        if (dispMaster)
        #        {
        #            setPrefix(strFmt("@PRO906",_inventBatchId,_itemId));
        #            strInitBlocked      = "@PRO2106";
        #            strInitAvailable    = "@PRO2107";
        #
        #            [strBlocked,strAvailable] = dispMaster.getDispositionFields();
        #
        #            switch (_displayType)
        #            {
        #                case PdsDispDisplayType::Both:
        #                    setPrefix(strInitAvailable);
        #                    for (i = 1; i <= conLen(strAvailable); i++)
        #                    {
        #                        info(conPeek(strAvailable,i));
        #                    }
        #
        #                    setPrefix(strInitBlocked);
        #                    for (i = 1; i <= conLen(strBlocked); i++)
        #                    {
        #                        info(conPeek(strBlocked,i));
        #                    }
        #                    break;
        #                case PdsDispDisplayType::Available:
        #                    setPrefix(strInitAvailable);
        #                    for (i = 1; i <= conLen(strAvailable); i++)
        #                    {
        #                        info(conPeek(strAvailable,i));
        #                    }
        #                    break;
        #                case PdsDispDisplayType::Blocked:
        #                    setPrefix(strInitBlocked);
        #                    for (i = 1; i <= conLen(strBlocked); i++)
        #                    {
        #                        info(conPeek(strBlocked,i));
        #                    }
        #                    break;
        #            }
        #
        #        }
        #    }
        #
        #}
      ENDSOURCE
      SOURCE #pdsCheckExpiryDate
        #/// <summary>
        #/// Verifies that the batch shelf life has not, or will not expire before the date provided.
        #/// </summary>
        #/// <param name="_inventBatchId">
        #/// The batch ID for which to verify the expiration date.
        #/// </param>
        #/// <param name="_itemId">
        #/// The item ID for which to verify the expiration date.
        #/// </param>
        #/// <param name="_date">
        #/// A date value that will be used to verify that the expiration date is beyond this date.
        #/// </param>
        #/// <param name="_displayMsg">
        #/// A Boolean value that indicates whether a message will be returned if the batch is found to be
        #/// expired.
        #/// </param>
        #/// <param name="_custId">
        #/// The customer account can be provided for sales order validation. This will allow for the retrieval
        #/// of sellable days information.
        #/// </param>
        #/// <param name="_override">
        #/// Determines whether the expiration check will be done.
        #/// </param>
        #/// <param name="_orderInventDim">
        #/// The <c>InventDim</c> record for a sales order that will be used as part of the sellable days search.
        #/// </param>
        #/// <returns>
        #/// true if the batch is still valid for the date provided; otherwise false .
        #/// </returns>
        #/// <remarks>
        #/// The expiration check will be conducted based on the parameters of the item's InventModelGroup. This
        #/// will determine whether the check has to be done and against which batch date the check will be
        #/// conducted.
        #/// </remarks>
        #public static boolean pdsCheckExpiryDate(
        #    InventBatchId   _inventBatchId,
        #    ItemId          _itemId,
        #    date            _date = systemDateGet(),
        #    boolean         _displayMsg = true,
        #    CustAccount     _custId = '',
        #    PdsOverrideFEFO _override = false,
        #    InventDim       _orderInventDim = null)
        #{
        #    InventTable         inventTable;
        #    InventModelGroup    inventModelGroup;
        #    InventBatch         inventBatch;
        #    date                checkDate;
        #    PdsSellableDays     pdsDays = 0;
        #    boolean             ret = true;
        #    InventDim           orderInventDim;
        #
        #    void batchExpired(FieldId _fieldId)
        #    {
        #        SysDictField    sd;
        #        ;
        #
        #        if (_displayMsg)
        #        {
        #            if (pdsDays > 0)
        #            {
        #                info(strFmt("@PRO2200",pdsDays));
        #            }
        #
        #            sd  = new SysDictField(tableNum(InventBatch),_fieldId);
        #            ret = checkFailed(strFmt("@PRO2199",
        #                                         _inventBatchId,
        #                                         sd.label()));
        #        }
        #        else
        #        {
        #            ret = false;
        #        }
        #    }
        #    ;
        #
        #    if (!_override)
        #    {
        #        inventTable = InventTable::find(_itemId);
        #        inventBatch = InventBatch::find(_inventBatchId,_itemId);
        #        inventModelGroup = InventTable::find(_itemId).modelGroup();
        #
        #        if (inventBatch && inventTable.isShelfLifeItem())
        #        {
        #            if (_custId)
        #            {
        #                //pdsDays = CustTable::find(_custId).PdsSellableDays;
        #                if (!_orderInventDim)
        #                {
        #                    orderInventDim
        #                        = InventDim::find(InventDim::inventDimIdBlank());
        #                }
        #                else
        #                {
        #                    orderInventDim = _orderInventDim;
        #                }
        #
        #                pdsDays = PdsCustSellableDays::findValidRec(
        #                            _itemId,
        #                            _custId,
        #                            orderInventDim).SellableDays;
        #
        #            }
        #
        #            if (!prmisDefault(_date))
        #            {
        #                checkDate = _date + pdsDays;
        #            }
        #
        #            if (!inventModelGroup.PdsCheck || inventModelGroup.PdsPickCriteria == PdsPickCriteria::ExpiryDate)
        #            {
        #                if (checkDate > inventBatch.ExpDate
        #                    && inventBatch.ExpDate != dateNull())
        #                {
        #                    batchExpired(fieldNum(InventBatch,ExpDate));
        #                }
        #            }
        #            else
        #            {
        #                if (checkDate >= inventBatch.PdsBestBeforeDate
        #                    && inventBatch.PdsBestBeforeDate != dateNull())
        #                {
        #                    batchExpired(fieldNum(InventBatch,PdsBestBeforeDate));
        #                }
        #            }
        #
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #pdsCheckNullBatchDate
        #/// <summary>
        #/// Indicates whether the product batch specified has empty shelf dates.
        #/// </summary>
        #/// <param name="_batchId">
        #/// The batch number specified.
        #/// </param>
        #/// <param name="_itemId">
        #/// The ID of the item specified.
        #/// </param>
        #/// <returns>
        #/// true if the batch has no dates and the item is shelf life; otherwise false.
        #/// </returns>
        #/// <remarks>
        #/// false if the item is not shelf life or the batch number is not specified; otherwise, true.
        #/// </remarks>
        #public static boolean pdsCheckNullBatchDate(
        #    InventBatchId   _batchId,
        #    ItemId          _itemId)
        #{
        #    InventBatch inventBatch;
        #    boolean     existsNullDateBatch = false;
        #
        #    if (_batchId && _itemId && InventTable::find(_itemId).isShelfLifeItem())
        #    {
        #        select firstonly ProdDate
        #            from inventBatch
        #            where  inventBatch.InventBatchId == _batchId
        #                && inventBatch.ItemId        == _itemId;
        #
        #        existsNullDateBatch = inventBatch.ProdDate == dateNull();
        #    }
        #
        #    return existsNullDateBatch;
        #}
      ENDSOURCE
      SOURCE #pdsCheckUnavailable
        #public static boolean pdsCheckUnavailable(InventBatchId _batchId,
        #    ItemId _itemId)
        #{
        #    InventBatch inventBatch;
        #
        #    select firstonly inventBatch
        #        where  inventBatch.InventBatchId == _batchId
        #            && inventBatch.ItemId        == _itemId;
        #
        #    return inventBatch.pdsDispositionStatus() == PdsStatus::Unavailable;
        #}
      ENDSOURCE
      SOURCE #pdsCreateSameLotBatch
        #/// <summary>
        #/// Creates a new batch for the same lot batch reservation functionality.
        #/// </summary>
        #/// <param name="_movement">
        #/// The movement record for which to create the batch.
        #/// </param>
        #/// <returns>
        #/// The created inventory batch record.
        #/// </returns>
        #public static server InventBatch pdsCreateSameLotBatch(
        #    InventMovement  _movement)
        #{
        #    InventBatch     inventBatch;
        #    InventTable     inventTable;
        #    InventNumGroup  inventNumGroupBatch;
        #
        #    NumberSeq   numberSeq;
        #
        #    inventTable = InventTable::find(_movement.itemId());
        #    try
        #    {
        #        ttsbegin;
        #        inventBatch.initValue();
        #        inventBatch.ItemId      = inventTable.ItemId;
        #        inventBatch.ProdDate    = systemDateGet();
        #        inventBatch.PdsSameLot  = NoYes::Yes;
        #
        #        if (inventTable.BatchNumGroupId
        #            && InventNumGroup::find(inventTable.BatchNumGroupId).NumberSequenceTable)
        #        {
        #            inventNumGroupBatch = InventNumGroup::find(
        #                                    inventTable.BatchNumGroupId);
        #            inventBatch.InventBatchId
        #                = inventNumGroupBatch.buildNumberParameters(
        #                    _movement.transDate(),
        #                    _movement.transRefId(),
        #                    _movement.transId(),
        #                    extendedTypeNum(InventBatchId));
        #        }
        #        else
        #        {
        #            numberSeq = NumberSeq::newGetNum(
        #                InventParameters::numRefInventBatchSerialId());
        #            inventBatch.InventBatchId = numberSeq.num();
        #        }
        #
        #        if (#PdsShelfEnabled)
        #        {
        #            inventBatch.PdsFinishedGoodsDateTested  = inventBatch.ProdDate;
        #            inventBatch.PdsUseVendBatchDate         = NoYes::No;
        #            inventBatch.PdsVendBatchDate            = dateNull();
        #            inventBatch.pdsSetShelfLifeBestBeforeFields(inventTable);
        #        }
        #
        #        inventBatch.insert();
        #
        #        if (numberSeq)
        #        {
        #            numberSeq.used();
        #        }
        #
        #        ttscommit;
        #    }
        #    catch (Exception::Error)
        #    {
        #        numberSeq.abort();
        #        throw error("@PDS579");
        #    }
        #
        #    return inventBatch;
        #}
      ENDSOURCE
      SOURCE #pdsFindOrCreateSameLotBatch
        #/// <summary>
        #/// Finds or creates a new batch for the same lot batch reservation feature.
        #/// </summary>
        #/// <param name="_movement">
        #/// The inventory movement for which to create or find the batch.
        #/// </param>
        #/// <param name="_qty">
        #/// The quantity for which to create or find the batch.
        #/// </param>
        #/// <returns>
        #/// The inventory batch that has been created for the item or, if the requirement has to be
        #/// consolidated, the inventory batch created by an earlier call to the method.
        #/// </returns>
        #public static server InventBatch pdsFindOrCreateSameLotBatch(
        #    InventMovement  _movement,
        #    InventQty       _qty)
        #{
        #    InventBatch             inventBatch;
        #    InventTrans             inventTrans;
        #    InventTrans             tmpTrans;
        #    InventTransOrigin       inventTransOrigin;
        #    InventDim               inventDim;
        #    InventDim               tmpDim;
        #    InventQty               maxBatchQty, maxQty;
        #    InventQty               maxInventQty;
        #    InventTable             inventTable = InventTable::find(_movement.itemId());
        #    boolean                 overMax = true;
        #    ReqPO                   reqPO;
        #    InventDim               reqPODim;
        #
        #    if (inventTable.modelGroup().PdsConsReq)
        #    {
        #        if (inventTable.BatchNumGroupId)
        #        {
        #            maxBatchQty = InventNumGroup::find(inventTable.BatchNumGroupId).PerQty;
        #        }
        #
        #        while select InventBatchId, RecId from inventBatch
        #            where  inventBatch.ItemId           == _movement.itemId()
        #                && inventBatch.PdsSameLot       == NoYes::Yes
        #            join TableId from inventDim
        #            where  inventDim.InventBatchId      == inventBatch.InventBatchId
        #            notexists join inventTrans
        #            where  inventTrans.ItemId           == _movement.itemId()
        #                && inventDim.InventDimId        == inventTrans.InventDimId
        #                && inventTrans.InventDimId      == inventDim.InventDimId
        #                && inventTrans.StatusIssue      == StatusIssue::None
        #                && inventTrans.StatusReceipt    != StatusReceipt::None
        #        {
        #            select RecId from reqPO
        #                join TableId from reqPODim
        #                where reqPODim.InventBatchId == inventBatch.InventBatchId
        #                && reqPODim.InventDimId      == reqPO.CovInventDimId;
        #
        #            if (reqPO.RecId)
        #            {
        #                continue;
        #            }
        #
        #            inventTransOrigin = inventTrans.inventTransOrigin();
        #            switch (inventTransOrigin.ReferenceCategory)
        #            {
        #                case InventTransType::Production :
        #                    if (inventTransOrigin.originator())
        #                    {
        #                        continue;
        #                    }
        #                    break;
        #                case InventTransType::Purch :
        #                    if (inventTransOrigin.originator())
        #                    {
        #                        continue;
        #                    }
        #                    break;
        #            }
        #
        #            select sum(Qty) from tmpTrans
        #                where  tmpTrans.ItemId == _movement.itemId()
        #                join   TableId from tmpDim
        #                where  tmpDim.InventDimId == tmpTrans.InventDimId
        #                &&     tmpDim.InventBatchId == inventBatch.InventBatchId;
        #
        #            maxInventQty = InventItemInventSetup::find(_movement.itemId(), inventDim.InventDimId).highestQty();
        #            if (maxBatchQty > 0)
        #            {
        #                if (maxInventQty > 0)
        #                {
        #                    maxQty = min(maxBatchQty,maxInventQty);
        #                }
        #                else
        #                {
        #                    maxQty = maxBatchQty;
        #                }
        #            }
        #            else
        #            {
        #                maxQty = maxInventQty;
        #            }
        #
        #            if (!maxQty || maxQty >= abs(tmpTrans.Qty) + abs(_qty))
        #            {
        #                overMax = false;
        #                break;
        #            }
        #        }
        #    }
        #
        #    if (!inventBatch.RecId && overMax)
        #    {
        #        inventBatch = InventBatch::pdsCreateSameLotBatch(_movement);
        #    }
        #
        #    return inventBatch;
        #}
      ENDSOURCE
      SOURCE #pdsLoadAttributes
        #/// <summary>
        #/// Loads batch attributes for select inventory batch.
        #/// </summary>
        #/// <param name="_batch">
        #/// The inventory batch for which attributes are created.
        #/// </param>
        #public server static void pdsLoadAttributes(InventBatch _batch)
        #{
        #    PdsBatchAttribByItem        byItem;
        #    PdsBatchAttribByAttribGroup byGroup;
        #    PdsBatchAttrib              all;
        #    PdsBatchAttributes          pdsBatchAttributes;
        #    ;
        #
        #    if (!_batch.RecId)
        #    {
        #        throw error("@PRO1677");
        #    }
        #
        #    select firstonly RecId
        #        from   byItem
        #        where  byItem.PdsBatchAttribCode    == TableGroupAll::All
        #            && byItem.PdsBatchAttribItemId  == _batch.ItemId;
        #
        #    if (byItem.RecId)
        #    {
        #        while select PdsBatchAttribId
        #            from  all
        #        {
        #            if (!PdsBatchAttributes::exist(
        #                                        _batch.ItemId,
        #                                        _batch.InventBatchId,
        #                                        all.PdsBatchAttribId))
        #            {
        #                pdsBatchAttributes.clear();
        #                pdsBatchAttributes.initValue();
        #                pdsBatchAttributes.ItemId        = _batch.ItemId;
        #                pdsBatchAttributes.InventBatchId = _batch.InventBatchId;
        #                pdsBatchAttributes.PdsBatchAttribId = all.PdsBatchAttribId;
        #                pdsBatchAttributes.insert();
        #            }
        #        }
        #    }
        #    else
        #    {
        #        while select PdsBatchAttribRelation
        #            from   byItem
        #            where  byItem.PdsBatchAttribCode   == TableGroupAll::Table
        #                && byItem.PdsBatchAttribItemId == _batch.ItemId
        #        {
        #            if (!PdsBatchAttributes::exist(
        #                    _batch.ItemId,
        #                    _batch.InventBatchId,
        #                    byItem.PdsBatchAttribRelation))
        #            {
        #                pdsBatchAttributes.clear();
        #                pdsBatchAttributes.initValue();
        #                pdsBatchAttributes.ItemId           = _batch.ItemId;
        #                pdsBatchAttributes.InventBatchId    = _batch.InventBatchId;
        #                pdsBatchAttributes.PdsBatchAttribId =
        #                    byItem.PdsBatchAttribRelation;
        #                pdsBatchAttributes.insert();
        #            }
        #        }
        #
        #        while select PdsBatchAttribRelation
        #            from   byItem
        #            where  byItem.PdsBatchAttribCode    == TableGroupAll::GroupId
        #                && byItem.PdsBatchAttribItemId  == _batch.ItemId
        #        {
        #            while select PdsBatchAttribAttribId
        #                from  byGroup
        #                where byGroup.PdsBatchAttribGroupId
        #                        == byItem.PdsBatchAttribRelation
        #            {
        #                if (!PdsBatchAttributes::exist(
        #                                            _batch.ItemId,
        #                                            _batch.InventBatchId,
        #                                            byGroup.PdsBatchAttribAttribId))
        #                {
        #                    pdsBatchAttributes.clear();
        #                    pdsBatchAttributes.initValue();
        #                    pdsBatchAttributes.ItemId           = _batch.ItemId;
        #                    pdsBatchAttributes.InventBatchId    = _batch.InventBatchId;
        #                    pdsBatchAttributes.PdsBatchAttribId =
        #                        byGroup.PdsBatchAttribAttribId;
        #                    pdsBatchAttributes.insert();
        #                }
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #pdsUpdateNullBatchDateRAF
        #/// <summary>
        #/// Updates the <c>ProdDate</c> field of the <c>InventBatch</c> record with information from the
        #/// <c>ProdParmReportFinished</c> record for those that are blank.
        #/// </summary>
        #/// <param name="_prodId">
        #/// The product ID for which to update batches.
        #/// </param>
        #server public static void pdsUpdateNullBatchDateRAF(
        #    ProdId  _prodId)
        #{
        #    InventDim               inventDim;
        #    InventBatch             inventBatch;
        #    ProdParmReportFinished  prodParmRAF;
        #    ;
        #
        #    if (#PdsShelfEnabled)
        #    {
        #        while select InventDimId, ItemId, TransDate from prodParmRAF
        #            where  prodParmRAF.ProdId == _prodId
        #                && prodParmRAF.ExecutedDateTime == utcDateTimeNull()
        #                && prodParmRAF.QtyGood > 0
        #        {
        #            ttsbegin;
        #            inventDim = InventDim::find(prodParmRAF.InventDimId);
        #            inventBatch = InventBatch::find(inventDim.InventBatchId,
        #                                            prodParmRAF.ItemId,
        #                                            true);
        #            if (inventBatch
        #                && inventBatch.ProdDate == dateNull())
        #            {
        #                inventBatch.ProdDate = prodParmRAF.TransDate;
        #                inventBatch.PdsFinishedGoodsDateTested
        #                    = prodParmRAF.TransDate;
        #
        #                inventBatch.pdsSetShelfLifeBestBeforeFields(
        #                    InventTable::find(prodParmRAF.ItemId));
        #                inventBatch.update();
        #            }
        #            ttscommit;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #pdsUpdateNullBatchDateTrans
        #/// <summary>
        #/// Updates the vendor batch information about an <c>InventBatch</c> record.
        #/// </summary>
        #/// <param name="_tmpInventTrans">
        #/// The <c>TmpInventTransWMS</c> record buffer that contains the references for the inventory batches
        #/// to update.
        #/// </param>
        #/// <param name="_itemId">
        #/// The ID of the item that the batches are associated with.
        #/// </param>
        #public static server void pdsUpdateNullBatchDateTrans(
        #    TmpInventTransWMS _tmpInventTrans,
        #    ItemId            _itemId)
        #{
        #    InventDim           inventDim;
        #    InventBatch         inventBatch;
        #    PdsVendBatchDate    vendDate;
        #    ;
        #
        #    if (#PdsShelfEnabled)
        #    {
        #        while select _tmpInventTrans
        #            where _tmpInventTrans.PdsUpdateBatchDate == PdsUpdateBatchDate::Update
        #        {
        #            ttsbegin;
        #            inventDim = InventDim::find(_tmpInventTrans.InventDimId);
        #            inventBatch = InventBatch::find(inventDim.InventBatchId,
        #                                            _itemId,
        #                                            true);
        #            if (inventBatch
        #                && inventBatch.ProdDate == dateNull())
        #            {
        #                if (_tmpInventTrans.PdsUseVendBatchDate)
        #                {
        #                    vendDate = _tmpInventTrans.PdsVendBatchDate;
        #                    inventBatch.ProdDate = vendDate;
        #                    inventBatch.PdsFinishedGoodsDateTested = vendDate;
        #                    inventBatch.PdsVendBatchDate = vendDate;
        #                    inventBatch.PdsUseVendBatchDate = true;
        #                }
        #                else
        #                {
        #                    inventBatch.ProdDate = systemDateGet();
        #                    inventBatch.PdsFinishedGoodsDateTested = systemDateGet();
        #                }
        #
        #                if (_tmpInventTrans.PdsUseVendBatchExp)
        #                {
        #                    inventBatch.PdsVendExpiryDate
        #                        = _tmpInventTrans.PdsVendExpiryDate;
        #                    inventBatch.PdsUseVendBatchExp
        #                        = _tmpInventTrans.PdsUseVendBatchExp;
        #                }
        #
        #                inventBatch.PdsCountryOfOrigin1
        #                    = _tmpInventTrans.PdsCountryOfOrigin1;
        #                inventBatch.PdsCountryOfOrigin2
        #                    = _tmpInventTrans.PdsCountryOfOrigin2;
        #                inventBatch.PdsVendBatchId = _tmpInventTrans.PdsVendBatchId;
        #
        #                inventBatch.pdsSetShelfLifeBestBeforeFields(
        #                    InventTable::find(inventBatch.ItemId));
        #                inventBatch.update();
        #
        #                info(strFmt(
        #                        "@PRO2401",
        #                        inventBatch.InventBatchId,
        #                        inventBatch.ProdDate));
        #            }
        #            ttscommit;
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #pdsValidateBestBeforeAndExpiryDate
        #public static boolean pdsValidateBestBeforeAndExpiryDate(
        #    TransDate _pdsBestBeforeDate,
        #    TransDate _expDate)
        #{
        #    boolean     ret = true;
        #
        #    if (_pdsBestBeforeDate > _expDate)
        #    {
        #        ret = false;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #txtNotExist
        #static TxtNotExist txtNotExist()
        #{
        #    return "@SYS55952";
        #}
      ENDSOURCE
      SOURCE #validateVendBatchId
        #/// <summary>
        #/// Verifies whether the specified vendor batch number is valid for the specified product or batch.
        #/// </summary>
        #/// <param name="_itemId">
        #/// Product number.
        #/// </param>
        #/// <param name="_inventBatchId">
        #/// Batch number (optional).
        #/// </param>
        #/// <param name="_vendBatchId">
        #/// Vendor batch number.
        #/// </param>
        #/// <returns>
        #/// true if the specified vendor batch number is valid; otherwise false.
        #/// </returns>
        #/// <remarks>
        #/// <para>
        #/// If the batch number parameter is not specified then the validation will succeed
        #/// if the specified vendor batch number is valid for any of the product's batches.
        #/// </para>
        #/// <para>
        #/// If the vendor batch number is not specified the validation will succeed.
        #/// </para>
        #/// </remarks>
        #public static boolean validateVendBatchId(ItemId _itemId, InventBatchId _inventBatchId, PdsVendBatchId _vendBatchId)
        #{
        #    InventBatch inventBatch;
        #
        #    if (_vendBatchId)
        #    {
        #        select firstOnly RecId from inventBatch
        #            where inventBatch.itemId == _itemId
        #                && (inventBatch.inventBatchId == _inventBatchId || !_inventBatchId)
        #                && inventBatch.PdsVendBatchId == _vendBatchId;
        #
        #        if (!inventBatch.RecId)
        #        {
        #            return checkFailed(strFmt("@SYS78966", fieldPName(InventBatch, PdsVendBatchId)));
        #        }
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #vendBatchIdLookup
        #/// <summary>
        #/// Gets a <c>SysTableLookup</c> object initialized to perform lookup of vendor batch numbers based on product number and batch.
        #/// </summary>
        #/// <param name="_itemId">
        #/// Product number.
        #/// </param>
        #/// <param name="_inventBatchId">
        #/// Batch number (optional).
        #/// </param>
        #/// <param name="_formControl">
        #/// Control for which the lookup needs to be enabled.
        #/// </param>
        #/// <returns>
        #/// A <c>SysTableLookup</c> object initialized to perform the lookup.
        #/// </returns>
        #/// <remarks>
        #/// <para>If the specified batch number is blank the lookup will show all vendor batch numbers available for the item.</para>
        #/// </remarks>
        #public static SysTableLookup vendBatchIdLookup(ItemId _itemId, InventBatchId _inventBatchId, FormControl _formControl)
        #{
        #    SysTableLookup sysTableLookup;
        #
        #    sysTableLookup = SysTableLookup::newParameters(tableNum(InventBatch), _formControl);
        #    sysTableLookup.parmUseLookupValue(true);
        #    sysTableLookup.addLookupfield(fieldNum(InventBatch, PdsVendBatchId));
        #    sysTableLookup.parmQuery(InventBatch::vendBatchIdLookupQuery(_itemId, _inventBatchId));
        #
        #    return sysTableLookup;
        #}
      ENDSOURCE
      SOURCE #vendBatchIdLookupQuery
        #private static Query vendBatchIdLookupQuery(ItemId _itemId, InventBatchId _inventBatchId)
        #{
        #    Query                   lookupQuery;
        #    QueryBuildDataSource    inventBatchQbds;
        #
        #    lookupQuery = new Query();
        #    inventBatchQbds = lookupQuery.addDataSource(tableNum(InventBatch));
        #    inventBatchQbds.addRange(fieldNum(InventBatch, ItemId)).value(queryValue(_itemId));
        #    inventBatchQbds.addRange(fieldNum(InventBatch, PdsVendBatchId)).value(SysQuery::valueNotEmptyString());
        #    inventBatchQbds.addGroupByField(fieldNum(InventBatch, PdsVendBatchId));
        #
        #    if (_inventBatchId)
        #    {
        #        inventBatchQbds.addRange(fieldNum(InventBatch, InventBatchId)).value(queryValue(_inventBatchId));
        #    }
        #
        #    return lookupQuery;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : InventTable unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #InventTable
    EnforceFKRelation 0
    PROPERTIES
      Name                #InventTable
      Label               #@SYS15649
      FormRef             #EcoResProductDetailsExtended
      ListPageRef         #EcoResProductPerCompanyListPage
      SearchLinkRefName   #EPInventTableInfo
      TitleField1         #ItemId
      TitleField2         #NameAlias
      ConfigurationKey    #LogisticsBasic
      SecurityKey         #InventTables
      CacheLookup         #Found
      CreateRecIdIndex    #Yes
      TableGroup          #Main
      PrimaryIndex        #ItemIdx
      ClusterIndex        #ItemIdx
      ModifiedDateTime    #Yes
      DEL_modifiedTime    #Yes
      ModifiedBy          #Yes
      CreatedDateTime     #Yes
      DEL_createdTime     #Yes
      CreatedBy           #Yes
      DeveloperDocumentation  #@SYS123844
      Origin              #{2C0B00AF-0000-1000-9FCA-ABE37D745461}
      LegacyId            #175
    ENDPROPERTIES
    
    FIELDS
      FIELD #ABCContributionMargin
        ENUM
        PROPERTIES
          Name                #ABCContributionMargin
          Label               #@SYS11930
          HelpText            #@SYS1505
          GroupPrompt         #@SYS5446
          Table               #InventTable
          Origin              #{FA4158A3-1EF8-4B37-88AB-0FC438B6DFAC}
          LegacyId            #52
          EnumType            #ABC
        ENDPROPERTIES
        
      FIELD #ABCRevenue
        ENUM
        PROPERTIES
          Name                #ABCRevenue
          Label               #@SYS7295
          HelpText            #@SYS6299
          GroupPrompt         #@SYS10074
          Table               #InventTable
          Origin              #{40B5A466-2167-43ED-B46A-12CD7624074A}
          LegacyId            #50
          EnumType            #ABC
        ENDPROPERTIES
        
      FIELD #ABCTieUp
        ENUM
        PROPERTIES
          Name                #ABCTieUp
          Label               #@SYS7296
          HelpText            #@SYS12390
          GroupPrompt         #@SYS14545
          Table               #InventTable
          Origin              #{82C8F108-19F6-45BE-B2FE-E07A0B868CD7}
          LegacyId            #49
          EnumType            #ABC
        ENDPROPERTIES
        
      FIELD #ABCValue
        ENUM
        PROPERTIES
          Name                #ABCValue
          Label               #@SYS10478
          HelpText            #@SYS1560
          GroupPrompt         #@SYS11762
          Table               #InventTable
          Origin              #{E8BFFBFF-A6ED-430E-A75F-95ABEA71A00A}
          LegacyId            #51
          EnumType            #ABC
        ENDPROPERTIES
        
      FIELD #AlcoholManufacturerId_RU
        STRING
        PROPERTIES
          Name                #AlcoholManufacturerId_RU
          Label               #@SYS4002801
          Table               #InventTable
          Origin              #{BAD5907C-6647-4600-BBFB-FA35405F8481}
          ExtendedDataType    #AlcoholManufacturerId_RU
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #AlcoholProductionTypeId_RU
        STRING
        PROPERTIES
          Name                #AlcoholProductionTypeId_RU
          Table               #InventTable
          Origin              #{D411C8E6-CBFF-4B56-9A2D-AD821CD3085B}
          ExtendedDataType    #AlcoholProductionTypeId_RU
        ENDPROPERTIES
        
      FIELD #AlcoholStrength_RU
        REAL
        PROPERTIES
          Name                #AlcoholStrength_RU
          Table               #InventTable
          Origin              #{68EF17D4-E409-4B55-B296-2E4DDA866D00}
          ExtendedDataType    #AlcoholStrength_RU
        ENDPROPERTIES
        
      FIELD #AltConfigId
        STRING
        PROPERTIES
          Name                #AltConfigId
          GroupPrompt         #@SYS14011
          Table               #InventTable
          Origin              #{A2C4BA9C-0ED7-4BBC-89F2-AB0F7EC41420}
          LegacyId            #44
          ExtendedDataType    #ConfigIdAlternative
        ENDPROPERTIES
        
      FIELD #AltInventColorId
        STRING
        PROPERTIES
          Name                #AltInventColorId
          Label               #@SYS308676
          HelpText            #@SYS75749
          GroupPrompt         #@SYS73726
          Table               #InventTable
          Origin              #{F2080293-6F4C-4E53-85DC-891716CAD652}
          LegacyId            #96
          ExtendedDataType    #EcoResItemColorName
        ENDPROPERTIES
        
      FIELD #AltInventSizeId
        STRING
        PROPERTIES
          Name                #AltInventSizeId
          Label               #@SYS308675
          HelpText            #@SYS75748
          GroupPrompt         #@SYS73727
          Table               #InventTable
          Origin              #{BD0859CB-B4B8-4464-A6A5-C88BC112AFEF}
          LegacyId            #95
          ExtendedDataType    #EcoResItemSizeName
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #AltInventStyleId
        STRING
        PROPERTIES
          Name                #AltInventStyleId
          Label               #@FPK270014
          HelpText            #@FPK270015
          GroupPrompt         #@FPK270000
          Table               #InventTable
          Origin              #{5554CA34-C8EB-4760-A226-C779F0F47EB6}
          ExtendedDataType    #EcoResItemStyleName
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #AltItemId
        STRING
        PROPERTIES
          Name                #AltItemId
          Table               #InventTable
          Origin              #{001220BC-3566-4B73-9639-A88A07A1EC30}
          LegacyId            #24
          ExtendedDataType    #ItemIdAlternative
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #ApproxTaxValue_BR
        REAL
        PROPERTIES
          Name                #ApproxTaxValue_BR
          Table               #InventTable
          Origin              #{177161CF-BCA7-4C32-8745-C584941B0F7D}
          ExtendedDataType    #ApproximateTaxValue_BR
        ENDPROPERTIES
        
      FIELD #AssetGroupId_RU
        STRING
        PROPERTIES
          Name                #AssetGroupId_RU
          Table               #InventTable
          Origin              #{2A0F3E83-00AF-1000-9822-5429CB7FFE77}
          LegacyId            #16003
          ExtendedDataType    #RAssetMainGroupId
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #AssetId_RU
        STRING
        PROPERTIES
          Name                #AssetId_RU
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventTable
          Origin              #{2A0A3E84-00AF-1000-E7F0-7B727449645F}
          LegacyId            #16004
          ExtendedDataType    #RAssetId
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #AutoReportFinished
        ENUM
        PROPERTIES
          Name                #AutoReportFinished
          Table               #InventTable
          Origin              #{20D6B6F6-2067-4D95-AEEC-D53673985091}
          LegacyId            #40
          ExtendedDataType    #ItemAutoReportFinished
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #BarcodeConfigId
        STRING
        PROPERTIES
          Name                #BarcodeConfigId
          Label               #Barcode Configuration
          Table               #InventTable
          Origin              #{54934E64-7E61-4690-A7E0-245F543866B9}
          ExtendedDataType    #BarcodeConfigId
          StringSize          #25
        ENDPROPERTIES
        
      FIELD #BatchMergeDateCalculationMethod
        ENUM
        PROPERTIES
          Name                #BatchMergeDateCalculationMethod
          Table               #InventTable
          Origin              #{409D50C5-DFA3-4AAC-BFBF-97376DBAF28E}
          EnumType            #InventBatchMergeDateCalculationMethod
        ENDPROPERTIES
        
      FIELD #BatchNumGroupId
        STRING
        PROPERTIES
          Name                #BatchNumGroupId
          Label               #@SYS53815
          HelpText            #@SYS1674
          Table               #InventTable
          Origin              #{9802B7A8-4456-430B-AA53-1F9133F5088C}
          LegacyId            #39
          ExtendedDataType    #InventNumGroupId
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #BOMCalcGroupId
        STRING
        PROPERTIES
          Name                #BOMCalcGroupId
          Table               #InventTable
          IgnoreEDTRelation   #Yes
          Origin              #{D0BC649A-F3E6-46CE-997E-83AF5B4AF952}
          LegacyId            #112
          ExtendedDataType    #BOMCalcGroupId
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #BOMLevel
        INT
        PROPERTIES
          Name                #BOMLevel
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventTable
          Origin              #{15088BB2-1920-4948-88B0-60D3F6805088}
          LegacyId            #38
          ExtendedDataType    #ItemBOMLevel
        ENDPROPERTIES
        
      FIELD #BOMManualReceipt
        ENUM
        PROPERTIES
          Name                #BOMManualReceipt
          Table               #InventTable
          Origin              #{01A38DE3-D2C6-4849-8ABC-1D11908FBADB}
          LegacyId            #33
          ExtendedDataType    #ItemBOMManualReceipt
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #BOMUnitId
        STRING
        PROPERTIES
          Name                #BOMUnitId
          Label               #@SYS3622
          Table               #InventTable
          Origin              #{CE47094E-54F3-4281-8C06-58D505C64C47}
          LegacyId            #16
          ExtendedDataType    #BOMUnitId
        ENDPROPERTIES
        
      FIELD #CommissionGroupId
        STRING
        PROPERTIES
          Name                #CommissionGroupId
          Label               #@SYS23785
          HelpText            #@SYS25617
          Table               #InventTable
          IgnoreEDTRelation   #Yes
          Origin              #{94121D28-298E-41AA-82EE-272DB7788654}
          LegacyId            #53
          ExtendedDataType    #CommissItemGroup
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #CostGroupId
        STRING
        PROPERTIES
          Name                #CostGroupId
          HelpText            #@SYS25616
          Table               #InventTable
          IgnoreEDTRelation   #Yes
          Origin              #{FEF9ED5F-ABDE-487D-B915-56124632F4F8}
          LegacyId            #9
          ExtendedDataType    #CostGroupId
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #CostModel
        ENUM
        PROPERTIES
          Name                #CostModel
          Table               #InventTable
          Origin              #{27C4F6C1-ABF5-4420-A37A-20A52D391CAD}
          LegacyId            #22
          ExtendedDataType    #ItemCostModel
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #CustomsExportTariffCodeTable_IN
        INT64
        PROPERTIES
          Name                #CustomsExportTariffCodeTable_IN
          Label               #@GLS5331
          HelpText            #@GLS5199
          Table               #InventTable
          CountryRegionCodes  #IN
          Origin              #{2A1F1F55-00AF-1000-398D-286BAAE30278}
          LegacyId            #8021
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #CustomsImportTariffCodeTable_IN
        INT64
        PROPERTIES
          Name                #CustomsImportTariffCodeTable_IN
          Label               #@GLS5188
          HelpText            #@GLS5198
          Table               #InventTable
          CountryRegionCodes  #IN
          Origin              #{2A1F1F56-00AF-1000-10DF-266BAAE3027C}
          LegacyId            #8022
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #DAXIntegrationKey
        GUID
        PROPERTIES
          Name                #DAXIntegrationKey
          AllowEdit           #No
          ConfigurationKey    #ProjCRMIntegration
          Table               #InventTable
          Origin              #{17052B9A-F67F-43F1-BC41-60BCA1DA0A84}
          ExtendedDataType    #ConnIntegrationKey
        ENDPROPERTIES
        
      FIELD #DefaultDimension
        INT64
        PROPERTIES
          Name                #DefaultDimension
          Table               #InventTable
          Origin              #{6E052382-7725-4862-8364-1EB45AB99BB0}
          LegacyId            #105
          ExtendedDataType    #DimensionDefault
        ENDPROPERTIES
        
      FIELD #DEL_ConfigSimilar
        ENUM
        PROPERTIES
          Name                #DEL_ConfigSimilar
          AllowEditOnCreate   #No
          AllowEdit           #No
          ConfigurationKey    #SysDeletedObjects60
          Table               #InventTable
          Origin              #{4A8B0E3E-866D-43E8-867C-679B7B7B497A}
          LegacyId            #74
          ExtendedDataType    #ItemConfigSimilar
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #DEL_Configurable
        ENUM
        PROPERTIES
          Name                #DEL_Configurable
          AllowEditOnCreate   #No
          AllowEdit           #No
          ConfigurationKey    #SysDeletedObjects60
          Table               #InventTable
          Origin              #{9F56A210-16C1-452B-90AC-42C6C6A4A796}
          LegacyId            #56
          ExtendedDataType    #ItemConfigurable
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #DEL_Dimension
        STRING
        PROPERTIES
          Name                #DEL_Dimension
          AllowEdit           #No
          Visible             #No
          ConfigurationKey    #SysDeletedObjects60
          Table               #InventTable
          Origin              #{71A597F9-7A42-4748-ABC3-631D3FC3ECEF}
          LegacyId            #21
          ExtendedDataType    #Dimension
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #DEL_DimGroupId
        STRING
        PROPERTIES
          Name                #DEL_DimGroupId
          AllowEditOnCreate   #No
          AllowEdit           #No
          ConfigurationKey    #SysDeletedObjects60
          Table               #InventTable
          IgnoreEDTRelation   #Yes
          Origin              #{A4352933-E2EA-40C2-BE21-B77FCCA340CB}
          LegacyId            #76
        ENDPROPERTIES
        
      FIELD #DEL_ExciseTariffCode_IN
        STRING
        PROPERTIES
          Name                #DEL_ExciseTariffCode_IN
          Label               #@GLS5344
          HelpText            #@GLS5236
          ConfigurationKey    #SysDeletedObjects60
          Table               #InventTable
          Origin              #{2A171F5E-00AF-1000-766E-327DAB49B0C5}
          LegacyId            #8030
          ExtendedDataType    #TariffCode_IN
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #DEL_EximProductGroup_IN
        STRING
        PROPERTIES
          Name                #DEL_EximProductGroup_IN
          HelpText            #@GLS61429
          ConfigurationKey    #SysDeletedObjects60
          Table               #InventTable
          Origin              #{2A171F50-00AF-1000-BAA2-D4B1261F46A7}
          LegacyId            #8016
          ExtendedDataType    #EximProductGroup_IN
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #DEL_ExportTariffCode_IN
        STRING
        PROPERTIES
          Name                #DEL_ExportTariffCode_IN
          Label               #@GLS5331
          HelpText            #@GLS5199
          ConfigurationKey    #SysDeletedObjects60
          Table               #InventTable
          CountryRegionCodes  #IN
          Origin              #{2A171F5D-00AF-1000-5BDC-7C7FAB49BDCB}
          LegacyId            #8029
          ExtendedDataType    #CustomsTariffCode_IN
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #DEL_FiscalLIFOGroup
        STRING
        PROPERTIES
          Name                #DEL_FiscalLIFOGroup
          HelpText            #@SYS93063
          ConfigurationKey    #SysDeletedObjects60
          Table               #InventTable
          Origin              #{D522FD85-FD03-418C-BBB2-A91B5BF85EA8}
          LegacyId            #110
          ExtendedDataType    #InventFiscalLIFOGroupId
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #DEL_FuelCode_BR
        REAL
        PROPERTIES
          Name                #DEL_FuelCode_BR
          ConfigurationKey    #SysDeletedObjects60
          Table               #InventTable
          CountryRegionCodes  #BR
          Origin              #{2A0F3E90-00AF-1000-5536-D75DC8FD2EFD}
          LegacyId            #16016
        ENDPROPERTIES
        
      FIELD #DEL_ImportTariffCode_IN
        STRING
        PROPERTIES
          Name                #DEL_ImportTariffCode_IN
          Label               #@GLS5188
          HelpText            #@GLS5198
          ConfigurationKey    #SysDeletedObjects60
          Table               #InventTable
          CountryRegionCodes  #IN
          Origin              #{2A171F5C-00AF-1000-5BDC-7C7FAF3EBDCB}
          LegacyId            #8028
          ExtendedDataType    #CustomsTariffCode_IN
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #DEL_IntrastatWeight_CZ
        REAL
        PROPERTIES
          Name                #DEL_IntrastatWeight_CZ
          ConfigurationKey    #SysDeletedObjects60
          Table               #InventTable
          Origin              #{9E76EFF3-4F39-4EF9-A7E1-877EF44CD9E6}
          LegacyId            #16006
        ENDPROPERTIES
        
      FIELD #DEL_ItemDimCombinationAutoCreate
        ENUM
        PROPERTIES
          Name                #DEL_ItemDimCombinationAutoCreate
          ConfigurationKey    #SysDeletedObjects60
          Table               #InventTable
          Origin              #{C39676D1-697A-4ABB-811F-D8D11DE84F39}
          LegacyId            #92
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #DEL_ItemGroupId
        STRING
        PROPERTIES
          Name                #DEL_ItemGroupId
          HelpText            #@SYS27685
          ConfigurationKey    #SysDeletedObjects60
          Table               #InventTable
          IgnoreEDTRelation   #Yes
          Origin              #{E6957B63-AC0F-461E-A370-E761AC3760BB}
          LegacyId            #1
          ExtendedDataType    #ItemGroupId
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #DEL_ItemIdCompany
        STRING
        PROPERTIES
          Name                #DEL_ItemIdCompany
          ConfigurationKey    #SysDeletedObjects60
          Table               #InventTable
          Origin              #{A73ED790-962B-4B1D-8F36-4A3106D47767}
          LegacyId            #94
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #DEL_ItemName
        STRING
        PROPERTIES
          Name                #DEL_ItemName
          ConfigurationKey    #SysDeletedObjects60
          Table               #InventTable
          Origin              #{2312D912-303B-4EAD-A9F9-41B1DE6D2E06}
          LegacyId            #3
          ExtendedDataType    #ItemName
          StringSize          #100
        ENDPROPERTIES
        
      FIELD #DEL_MinAverageSettle
        REAL
        PROPERTIES
          Name                #DEL_MinAverageSettle
          ConfigurationKey    #SysDeletedObjects41
          Table               #InventTable
          Origin              #{021C3D4D-8551-48D2-A223-DFF50D6D3D52}
          LegacyId            #63
        ENDPROPERTIES
        
      FIELD #DEL_ModelGroupId
        STRING
        PROPERTIES
          Name                #DEL_ModelGroupId
          ConfigurationKey    #SysDeletedObjects60
          Table               #InventTable
          IgnoreEDTRelation   #Yes
          Origin              #{835F53E4-F3D8-4145-990C-6C3131FA9FC5}
          LegacyId            #77
          ExtendedDataType    #InventModelGroupId
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #DEL_NGPCode_FR
        INT
        PROPERTIES
          Name                #DEL_NGPCode_FR
          Visible             #No
          ConfigurationKey    #SysDeletedObjects60
          Table               #InventTable
          Origin              #{016C9F9E-A8DD-4584-B518-3D719756B934}
          LegacyId            #149
          ExtendedDataType    #NGP_FR
        ENDPROPERTIES
        
      FIELD #DEL_OrigCountryRegionId
        STRING
        PROPERTIES
          Name                #DEL_OrigCountryRegionId
          ConfigurationKey    #SysDeletedObjects60
          Table               #InventTable
          IgnoreEDTRelation   #Yes
          Origin              #{4AE2AA0F-D425-4F32-B339-F7BB45AE9D5F}
          ExtendedDataType    #ItemOrigCountryRegionId
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #DEL_PdsCheckCatchWeight
        ENUM
        PROPERTIES
          Name                #DEL_PdsCheckCatchWeight
          Label               #@pro975
          HelpText            #@PRO976
          AllowEdit           #No
          Visible             #No
          ConfigurationKey    #SysDeletedObjects41
          Table               #InventTable
          Origin              #{2A174E2B-00AF-1000-34DF-3B65BFAFB943}
          ExtendedDataType    #NoYesId
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #DEL_PdsHazardous
        ENUM
        PROPERTIES
          Name                #DEL_PdsHazardous
          Label               #@SYS50768
          HelpText            #@PRO618
          AllowEditOnCreate   #No
          AllowEdit           #No
          Visible             #No
          ConfigurationKey    #SysDeletedObjects60
          Table               #InventTable
          Origin              #{2A104E23-00AF-1000-7FF4-38495571CE59}
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #DEL_ServiceCode_IN
        STRING
        PROPERTIES
          Name                #DEL_ServiceCode_IN
          HelpText            #@GLS5072
          ConfigurationKey    #SysDeletedObjects60
          Table               #InventTable
          Origin              #{2A121F5B-00AF-1000-0A21-18F953F070F8}
          LegacyId            #8027
          ExtendedDataType    #ServiceCode_IN
        ENDPROPERTIES
        
      FIELD #DEL_StopExplode
        ENUM
        PROPERTIES
          Name                #DEL_StopExplode
          ConfigurationKey    #SysDeletedObjects60
          Table               #InventTable
          Origin              #{C2070AE4-7901-48A9-9A4D-A74050F7905D}
          LegacyId            #34
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #Density
        REAL
        PROPERTIES
          Name                #Density
          Table               #InventTable
          Origin              #{986A486F-1E00-48C8-8EED-72BD0E8A6B72}
          LegacyId            #18
          ExtendedDataType    #BOMMeasureDensity
        ENDPROPERTIES
        
      FIELD #Depth
        REAL
        PROPERTIES
          Name                #Depth
          Table               #InventTable
          Origin              #{D53EB846-7447-4ABA-AD58-85AD9E184250}
          LegacyId            #14
          ExtendedDataType    #BOMMeasureDepth
        ENDPROPERTIES
        
      FIELD #DSA_IN
        ENUM
        PROPERTIES
          Name                #DSA_IN
          Label               #@GLS5341
          HelpText            #@GLS5540
          Table               #InventTable
          CountryRegionCodes  #IN
          Origin              #{AA5CC8FE-928E-4EEE-8B1A-4BF80A6CBE0B}
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #EPCManager
        REAL
        PROPERTIES
          Name                #EPCManager
          Table               #InventTable
          Origin              #{7DAE57DF-3CFC-468E-A69E-CD78A18FC644}
          LegacyId            #11
          ExtendedDataType    #EPCManager
        ENDPROPERTIES
        
      FIELD #ExceptionCode_BR
        STRING
        PROPERTIES
          Name                #ExceptionCode_BR
          Table               #InventTable
          Origin              #{2A103E8F-00AF-1000-DF56-65F06EF6F138}
          LegacyId            #16015
          ExtendedDataType    #ExceptionCode_BR
        ENDPROPERTIES
        
      FIELD #ExciseRecordType_IN
        ENUM
        PROPERTIES
          Name                #ExciseRecordType_IN
          Table               #InventTable
          Origin              #{F4188658-BB3F-4AAB-8067-5E6E19DAFFD4}
          EnumType            #ExciseRecordType_IN
        ENDPROPERTIES
        
      FIELD #ExciseTariffCodes_IN
        INT64
        PROPERTIES
          Name                #ExciseTariffCodes_IN
          Label               #@GLS5344
          HelpText            #@GLS5236
          Table               #InventTable
          CountryRegionCodes  #IN
          Origin              #{2A141F54-00AF-1000-6C8B-883F1E72DF5F}
          LegacyId            #8020
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #EximProductGroupTable_IN
        INT64
        PROPERTIES
          Name                #EximProductGroupTable_IN
          Label               #@SYS58238
          HelpText            #@GLS61429
          Table               #InventTable
          CountryRegionCodes  #IN
          Origin              #{2A181F60-00AF-1000-78D8-0A1D761F1294}
          LegacyId            #8032
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #FiscalLIFOAvoidCalc
        ENUM
        PROPERTIES
          Name                #FiscalLIFOAvoidCalc
          Table               #InventTable
          Origin              #{E199A767-FE3E-4949-B11E-B42101F292F3}
          LegacyId            #108
          ExtendedDataType    #InventFiscalLIFOAvoidCalc
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #FiscalLIFONormalValue
        REAL
        PROPERTIES
          Name                #FiscalLIFONormalValue
          Table               #InventTable
          Origin              #{80358CBC-FE9C-4F89-9B90-34FA47DA5D25}
          LegacyId            #109
          ExtendedDataType    #InventFiscalLIFONormalValue
        ENDPROPERTIES
        
      FIELD #FiscalLIFONormalValueCalc
        ENUM
        PROPERTIES
          Name                #FiscalLIFONormalValueCalc
          Table               #InventTable
          Origin              #{931A801E-CB96-4186-A354-6C836B17669E}
          LegacyId            #111
          EnumType            #InventFiscalLIFONormalValueCalc
        ENDPROPERTIES
        
      FIELD #ForecastDMPInclude
        ENUM
        PROPERTIES
          Name                #ForecastDMPInclude
          Table               #InventTable
          Origin              #{08063C05-F6F9-4B7F-A426-0EC50D127340}
          LegacyId            #97
          ExtendedDataType    #ForecastDMPInclude
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #grossDepth
        REAL
        PROPERTIES
          Name                #grossDepth
          Label               #@SYS50291
          HelpText            #@SYS50292
          Table               #InventTable
          Origin              #{0EA47374-DF81-4518-85BF-0F5C7D6C97C3}
          LegacyId            #67
          ExtendedDataType    #InventDepth
        ENDPROPERTIES
        
      FIELD #grossHeight
        REAL
        PROPERTIES
          Name                #grossHeight
          Label               #@SYS50287
          HelpText            #@SYS50288
          Table               #InventTable
          Origin              #{6FB361AD-61CC-4927-8128-DBCE3C475F9E}
          LegacyId            #70
          ExtendedDataType    #InventHeight
        ENDPROPERTIES
        
      FIELD #grossWidth
        REAL
        PROPERTIES
          Name                #grossWidth
          Label               #@SYS50289
          HelpText            #@SYS50290
          Table               #InventTable
          Origin              #{15CF51D5-217E-42FE-96B8-106DDBCCB7F1}
          LegacyId            #69
          ExtendedDataType    #InventWidth
        ENDPROPERTIES
        
      FIELD #Height
        REAL
        PROPERTIES
          Name                #Height
          Table               #InventTable
          Origin              #{97585DA5-6A75-495B-966C-AADD1186E43D}
          LegacyId            #6
          ExtendedDataType    #BOMMeasureHeight
        ENDPROPERTIES
        
      FIELD #ICMSOnService_BR
        ENUM
        PROPERTIES
          Name                #ICMSOnService_BR
          Table               #InventTable
          Origin              #{2A103E92-00AF-1000-4F1F-78E025F0DB2E}
          LegacyId            #16018
          ExtendedDataType    #ICMSonService_BR
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #Intracode
        STRING
        PROPERTIES
          Name                #Intracode
          Table               #InventTable
          IgnoreEDTRelation   #Yes
          Origin              #{4F67AEEF-A63A-47C9-AB2E-526E12F06C88}
          LegacyId            #26
          ExtendedDataType    #IntrastatItemCodeId
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #IntrastatExclude
        ENUM
        PROPERTIES
          Name                #IntrastatExclude
          Label               #@SYS23992
          HelpText            #@GLS107670
          ConfigurationKey    #ForeignTrade
          Table               #InventTable
          CountryRegionCodes  #CZ,EE,HU,LT,LV,PL
          Origin              #{BDAA004C-B7CB-4851-B1A1-9F79518FC3D1}
          LegacyId            #16005
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #IntrastatProcId_CZ
        STRING
        PROPERTIES
          Name                #IntrastatProcId_CZ
          Table               #InventTable
          CountryRegionCodes  #CZ
          IgnoreEDTRelation   #Yes
          Origin              #{D28F1B75-E224-468C-9A2B-1ECAF81A42D6}
          LegacyId            #16007
          ExtendedDataType    #IntrastatProcId
        ENDPROPERTIES
        
      FIELD #IntraUnit
        REAL
        PROPERTIES
          Name                #IntraUnit
          Table               #InventTable
          Origin              #{6DFEE75C-0CF0-4B06-8676-7AAB35122199}
          LegacyId            #37
          ExtendedDataType    #IntrastatConvert
        ENDPROPERTIES
        
      FIELD #InventFiscalLIFOGroup
        INT64
        PROPERTIES
          Name                #InventFiscalLIFOGroup
          HelpText            #@SYS93063
          Table               #InventTable
          Origin              #{44E8B08E-9A8E-43B9-A222-B35CA5E4E7F6}
          LegacyId            #123
          ExtendedDataType    #InventFiscalLIFOGroupRecId
        ENDPROPERTIES
        
      FIELD #InventProductType_BR
        STRING
        PROPERTIES
          Name                #InventProductType_BR
          HelpText            #@GLS750
          Table               #InventTable
          Origin              #{2A141F48-00AF-1000-A561-AD8E6C24FACA}
          LegacyId            #8008
          ExtendedDataType    #InventProductTypeId_BR
        ENDPROPERTIES
        
      FIELD #ItemBuyerGroupId
        STRING
        PROPERTIES
          Name                #ItemBuyerGroupId
          Table               #InventTable
          IgnoreEDTRelation   #Yes
          Origin              #{7D30F9E3-23FD-42FF-9C02-B4A2A1CB1BA2}
          LegacyId            #78
          ExtendedDataType    #ItemBuyerGroupId
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #ItemDimCostPrice
        ENUM
        PROPERTIES
          Name                #ItemDimCostPrice
          Table               #InventTable
          Origin              #{1AF09AD8-BC23-412C-8A42-C412F41E2089}
          LegacyId            #93
          ExtendedDataType    #ItemDimCostPrice
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #ItemId
        STRING
        PROPERTIES
          Name                #ItemId
          Mandatory           #Yes
          AllowEdit           #No
          Table               #InventTable
          Origin              #{106EC86E-2FB0-469A-ACFE-9825F40E867B}
          LegacyId            #2
          ExtendedDataType    #ItemId
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #ItemPriceToleranceGroupId
        STRING
        PROPERTIES
          Name                #ItemPriceToleranceGroupId
          Table               #InventTable
          IgnoreEDTRelation   #Yes
          Origin              #{8863F3B1-62E8-4112-AA64-9325A7FB0B97}
          LegacyId            #17
          ExtendedDataType    #ItemPriceToleranceGroupId
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #ItemTaggingLevel
        ENUM
        PROPERTIES
          Name                #ItemTaggingLevel
          Table               #InventTable
          Origin              #{F5CD1B4D-D04E-4773-B99F-5A27B168C813}
          LegacyId            #101
          EnumType            #RFIDItemTaggingLevel
        ENDPROPERTIES
        
      FIELD #ItemType
        ENUM
        PROPERTIES
          Name                #ItemType
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventTable
          Origin              #{E19FE2E7-6860-489E-A822-587226467C75}
          LegacyId            #4
          EnumType            #ItemType
        ENDPROPERTIES
        
      FIELD #MarkupCode_RU
        STRING
        PROPERTIES
          Name                #MarkupCode_RU
          Table               #InventTable
          IgnoreEDTRelation   #Yes
          Origin              #{2A0D0000-00AF-1000-D94E-F4A30179506F}
          ExtendedDataType    #MarkupCodeVend_RU
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #MatchingPolicy
        ENUM
        PROPERTIES
          Name                #MatchingPolicy
          Table               #InventTable
          Origin              #{F4F7CB62-D2CF-4417-B2F5-0AC1351BD176}
          LegacyId            #25
          EnumType            #PurchMatchingPolicyWithNotSetOption
        ENDPROPERTIES
        
      FIELD #MCRPackedExtensions
        QUEUE
        PROPERTIES
          Name                #MCRPackedExtensions
          SaveContents        #No
          Visible             #No
          Table               #InventTable
          Origin              #{D62CD33A-CC91-43DC-83C1-B5B6DE1DFB01}
          ExtendedDataType    #SysExtensionSerializerPackedContainer
        ENDPROPERTIES
        
      FIELD #MinimumPalletQuantity
        REAL
        PROPERTIES
          Name                #MinimumPalletQuantity
          Table               #InventTable
          Origin              #{233898C7-2C98-4BB3-AAC1-89D8C467422B}
          LegacyId            #28
          ExtendedDataType    #WMSMinimumPalletQuantity
        ENDPROPERTIES
        
      FIELD #NameAlias
        STRING
        PROPERTIES
          Name                #NameAlias
          Table               #InventTable
          AliasFor            #ItemId
          Origin              #{6B2A2EA2-1F4D-4E68-9FFD-5696F29D568B}
          LegacyId            #64
          ExtendedDataType    #ItemNameAlias
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #NetWeight
        REAL
        PROPERTIES
          Name                #NetWeight
          Table               #InventTable
          Origin              #{1CDE267E-6D4C-487D-8444-09C8262F883C}
          LegacyId            #13
          ExtendedDataType    #ItemNetWeight
        ENDPROPERTIES
        
      FIELD #NGPCodesTable_FR
        INT64
        PROPERTIES
          Name                #NGPCodesTable_FR
          Table               #InventTable
          Origin              #{A0AFD2E3-7B55-46AC-8B92-18552A9B483B}
          LegacyId            #152
          ExtendedDataType    #NGPCodesTableFRId
        ENDPROPERTIES
        
      FIELD #NRTaxGroup_LV
        STRING
        PROPERTIES
          Name                #NRTaxGroup_LV
          Table               #InventTable
          Origin              #{B60E5DFA-E544-4F7F-8DF5-A9AF8EB18AD0}
          ExtendedDataType    #LvNRTaxGroup
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #OrigCountryRegionId
        STRING
        PROPERTIES
          Name                #OrigCountryRegionId
          Table               #InventTable
          IgnoreEDTRelation   #Yes
          Origin              #{C609C0AE-ECAD-4349-AC15-22FDF040370A}
          LegacyId            #41
          ExtendedDataType    #ItemOrigCountryRegionId
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #OrigCountyId
        STRING
        PROPERTIES
          Name                #OrigCountyId
          Table               #InventTable
          Origin              #{E907A6CB-4F29-48A4-930D-E696DBA282C8}
          LegacyId            #155
          ExtendedDataType    #ItemOrigCountyId
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #OrigStateId
        STRING
        PROPERTIES
          Name                #OrigStateId
          Table               #InventTable
          Origin              #{D0EFA09E-44C1-49A0-8BA8-B39A9E210B62}
          LegacyId            #82
          ExtendedDataType    #ItemOrigStateId
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #PackagingGroupId
        STRING
        PROPERTIES
          Name                #PackagingGroupId
          Table               #InventTable
          IgnoreEDTRelation   #Yes
          Origin              #{61A47711-FF64-413E-95EB-A2657A8CCBE2}
          LegacyId            #87
          ExtendedDataType    #ItemPackagingGroupId
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #Packing_RU
        STRING
        PROPERTIES
          Name                #Packing_RU
          Table               #InventTable
          Origin              #{2A0A3E82-00AF-1000-F6DE-6B78696E675F}
          LegacyId            #16002
          ExtendedDataType    #ItemPackingType_RU
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #PalletTagging
        ENUM
        PROPERTIES
          Name                #PalletTagging
          Table               #InventTable
          Origin              #{99692748-088C-4A6D-9C3B-8565F0DCD810}
          LegacyId            #100
          ExtendedDataType    #RFIDPalletTagging
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PBAAutoStart
        ENUM
        PROPERTIES
          Name                #PBAAutoStart
          ConfigurationKey    #PBA_ProductBuilder
          Table               #InventTable
          Origin              #{B92BC4DF-0497-4207-8DE2-6748B0520F85}
          LegacyId            #8005
          ExtendedDataType    #PBAAutostart
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PBAHideApproval
        ENUM
        PROPERTIES
          Name                #PBAHideApproval
          Table               #InventTable
          Origin              #{799F2E40-D016-4F3D-B4D6-581290C36BE5}
          LegacyId            #8004
          ExtendedDataType    #PBAHideApproval
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PBAHideDialog
        ENUM
        PROPERTIES
          Name                #PBAHideDialog
          Table               #InventTable
          Origin              #{C6F4D3AB-0096-4C76-BB4D-01346A485A0B}
          LegacyId            #8003
          ExtendedDataType    #PBAHideDialog
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PBAInventItemGroupId
        STRING
        PROPERTIES
          Name                #PBAInventItemGroupId
          Table               #InventTable
          IgnoreEDTRelation   #Yes
          Origin              #{E8543822-BE73-40C8-97FF-EE5735E209DC}
          LegacyId            #8002
          ExtendedDataType    #PBAInventItemGroupId
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #PBAItemAutoGenerated
        ENUM
        PROPERTIES
          Name                #PBAItemAutoGenerated
          Table               #InventTable
          Origin              #{E6EEB528-E93C-4036-8D29-8D0AA9224053}
          LegacyId            #29
          ExtendedDataType    #PBAItemAutoGenerated
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PBAItemConfigurable
        ENUM
        PROPERTIES
          Name                #PBAItemConfigurable
          Label               #@SYS40402
          HelpText            #@SYS40510
          AllowEditOnCreate   #No
          AllowEdit           #No
          ConfigurationKey    #PBA_ProductBuilder
          Table               #InventTable
          Origin              #{FDCAFAA6-B951-4307-A0B3-6D895721F856}
          LegacyId            #8001
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PBAMandatoryConfig
        ENUM
        PROPERTIES
          Name                #PBAMandatoryConfig
          ConfigurationKey    #PBA_ProductBuilder
          Table               #InventTable
          Origin              #{E17BC41D-EA92-4B26-A98A-ADFC2AAE469F}
          LegacyId            #8006
          ExtendedDataType    #PBAMandatoryConfig
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PDSBaseAttributeId
        STRING
        PROPERTIES
          Name                #PDSBaseAttributeId
          Table               #InventTable
          Origin              #{A40D07B7-E9A8-435E-85D5-255316D54C3B}
          ExtendedDataType    #PDSBaseAttributeId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #PdsBestBefore
        INT
        PROPERTIES
          Name                #PdsBestBefore
          Label               #@PDS257
          HelpText            #@PDS258
          Table               #InventTable
          Origin              #{A99BEF33-9EAC-4B77-AB01-34C4EC973C57}
          ExtendedDataType    #PdsLeadTimeBest
        ENDPROPERTIES
        
      FIELD #PdsCWWMSMinimumPalletQty
        REAL
        PROPERTIES
          Name                #PdsCWWMSMinimumPalletQty
          Table               #InventTable
          Origin              #{76BBFDB1-2199-4608-BB6A-6DC55FBD9A82}
          LegacyId            #16038
          ExtendedDataType    #PdsCWMinimumPalletQty
        ENDPROPERTIES
        
      FIELD #PdsCWWMSQtyPerLayer
        REAL
        PROPERTIES
          Name                #PdsCWWMSQtyPerLayer
          Table               #InventTable
          Origin              #{ED6406BC-382F-4680-AC84-2AC831EAE7E0}
          LegacyId            #16039
          ExtendedDataType    #PdsCWQtyPerLayer
        ENDPROPERTIES
        
      FIELD #PdsCWWMSStandardPalletQty
        REAL
        PROPERTIES
          Name                #PdsCWWMSStandardPalletQty
          Table               #InventTable
          Origin              #{21E7A14D-5D0D-4903-9ECE-BC1A2C185438}
          LegacyId            #16037
          ExtendedDataType    #PdsCwStandardPalletQty
        ENDPROPERTIES
        
      FIELD #PdsFreightAllocationGroupId
        STRING
        PROPERTIES
          Name                #PdsFreightAllocationGroupId
          Table               #InventTable
          Origin              #{30471084-ACCF-44EA-9CCC-2C6AB9DE3AC0}
          ExtendedDataType    #PdsFreightAllocationGroupId
        ENDPROPERTIES
        
      FIELD #PdsItemRebateGroupId
        STRING
        PROPERTIES
          Name                #PdsItemRebateGroupId
          Table               #InventTable
          Origin              #{79962109-0112-4E2C-BF59-1A4D3F703315}
          ExtendedDataType    #PdsItemRebateGroupId
        ENDPROPERTIES
        
      FIELD #PDSPotencyAttribRecording
        ENUM
        PROPERTIES
          Name                #PDSPotencyAttribRecording
          Table               #InventTable
          Origin              #{EA25BD54-3400-4DB8-BCC4-3F9056580C6D}
          EnumType            #PDSPotencyAttribRecordingEnum
        ENDPROPERTIES
        
      FIELD #PdsShelfAdvice
        INT
        PROPERTIES
          Name                #PdsShelfAdvice
          Label               #@PDS255
          HelpText            #@PDS256
          Table               #InventTable
          Origin              #{26925988-AC67-4391-952B-D7FCD5FB5C19}
          ExtendedDataType    #PdsLeadTimeAdvice
        ENDPROPERTIES
        
      FIELD #PdsShelfLife
        INT
        PROPERTIES
          Name                #PdsShelfLife
          Label               #@PRO67
          Table               #InventTable
          Origin              #{89CEF929-4825-4480-A2D8-E1C971F7C67E}
          ExtendedDataType    #PdsLeadTimeLife
        ENDPROPERTIES
        
      FIELD #PDSTargetFactor
        REAL
        PROPERTIES
          Name                #PDSTargetFactor
          Table               #InventTable
          Origin              #{9853DAF6-7E6C-4FBA-8323-11C18CEDA9B3}
          ExtendedDataType    #PDSTargetFactor
        ENDPROPERTIES
        
      FIELD #PdsVendorCheckItem
        ENUM
        PROPERTIES
          Name                #PdsVendorCheckItem
          Table               #InventTable
          Origin              #{F6DC719D-C260-422F-864A-278A516CF27A}
          EnumType            #PdsVendorCheckItem
        ENDPROPERTIES
        
      FIELD #Phantom
        ENUM
        PROPERTIES
          Name                #Phantom
          Table               #InventTable
          Origin              #{3FA7D284-94F5-462A-A8D8-980644B7E11B}
          LegacyId            #36
          ExtendedDataType    #ItemPhantom
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #PKWiUCode_PL
        STRING
        PROPERTIES
          Name                #PKWiUCode_PL
          Table               #InventTable
          Origin              #{2A0C3E88-00AF-1000-F7BD-59B4FD4E6F64}
          LegacyId            #16008
          ExtendedDataType    #PlPKWiUCode
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #PmfPlanningItemId
        STRING
        PROPERTIES
          Name                #PmfPlanningItemId
          Table               #InventTable
          Origin              #{B33DAA42-B7EE-4B77-8A51-5086133CE008}
          ExtendedDataType    #PmfPlanningItemId
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #PmfProductType
        ENUM
        PROPERTIES
          Name                #PmfProductType
          Table               #InventTable
          Origin              #{3C40D04F-ACDC-447E-8AAB-3CED8FE43ABB}
          EnumType            #PmfProductType
        ENDPROPERTIES
        
      FIELD #PmfYieldPct
        REAL
        PROPERTIES
          Name                #PmfYieldPct
          Label               #@PRO131
          Table               #InventTable
          Origin              #{BB90D1C8-CE66-4A0A-B093-034EE7FBE98F}
          ExtendedDataType    #PmfYieldPct
        ENDPROPERTIES
        
      FIELD #PrimaryVendorId
        STRING
        PROPERTIES
          Name                #PrimaryVendorId
          Table               #InventTable
          IgnoreEDTRelation   #Yes
          Origin              #{ED3337BA-E756-4298-BF2B-2ACC8AF77F50}
          LegacyId            #12
          ExtendedDataType    #ItemPrimaryVendId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #ProdFlushingPrincip
        ENUM
        PROPERTIES
          Name                #ProdFlushingPrincip
          Table               #InventTable
          Origin              #{6D6DDA33-74AF-451F-8B2E-81ACE7D27E93}
          LegacyId            #27
          EnumType            #ProdFlushingPrincipItem
        ENDPROPERTIES
        
      FIELD #ProdGroupId
        STRING
        PROPERTIES
          Name                #ProdGroupId
          Table               #InventTable
          IgnoreEDTRelation   #Yes
          Origin              #{6DD59B69-B76D-4416-8F60-AFC30BDD3B33}
          LegacyId            #65
          ExtendedDataType    #ItemProdGroupId
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #ProdPoolId
        STRING
        PROPERTIES
          Name                #ProdPoolId
          Table               #InventTable
          IgnoreEDTRelation   #Yes
          Origin              #{4FEA4B16-E99B-4735-B355-BFCE713A09A8}
          LegacyId            #47
          ExtendedDataType    #ItemProdPoolId
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #Product
        INT64
        PROPERTIES
          Name                #Product
          Mandatory           #Yes
          AllowEditOnCreate   #No
          AllowEdit           #No
          Table               #InventTable
          Origin              #{08DAAD96-3EE5-4101-B7D5-499B45FD0411}
          LegacyId            #98
          ExtendedDataType    #EcoResProductRecId
        ENDPROPERTIES
        
      FIELD #projCategoryId
        STRING
        PROPERTIES
          Name                #projCategoryId
          Label               #@SYS6114
          Table               #InventTable
          IgnoreEDTRelation   #Yes
          Origin              #{3BF69E66-739C-4C08-85F1-6EA44A36A9CB}
          LegacyId            #66
          ExtendedDataType    #ProjCategoryId
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #PropertyId
        STRING
        PROPERTIES
          Name                #PropertyId
          Table               #InventTable
          IgnoreEDTRelation   #Yes
          Origin              #{1F855696-57F6-4018-B034-96ACA8BC79E9}
          LegacyId            #48
          ExtendedDataType    #PropertyIdItem
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #PurchModel
        ENUM
        PROPERTIES
          Name                #PurchModel
          Table               #InventTable
          Origin              #{7FC6B453-C0FB-47DD-BC6D-0533C6E8C566}
          LegacyId            #5
          ExtendedDataType    #ItemPurchModel
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #qtyPerLayer
        REAL
        PROPERTIES
          Name                #qtyPerLayer
          Table               #InventTable
          Origin              #{AA4AD51F-49CB-49A8-B8C0-5EFDD5392130}
          LegacyId            #72
          ExtendedDataType    #WMSQtyPerLayer
        ENDPROPERTIES
        
      FIELD #ReqGroupId
        STRING
        PROPERTIES
          Name                #ReqGroupId
          HelpText            #@SYS6456
          Table               #InventTable
          IgnoreEDTRelation   #Yes
          Origin              #{6BB68BB3-0AC3-4920-8FE2-34D45D4092A9}
          LegacyId            #10
          ExtendedDataType    #ReqGroupId
        ENDPROPERTIES
        
      FIELD #SADRateCode_PL
        STRING
        PROPERTIES
          Name                #SADRateCode_PL
          Table               #InventTable
          IgnoreEDTRelation   #Yes
          Origin              #{B2D072A3-8B80-4057-BDA7-7C734EE1ADFC}
          ExtendedDataType    #PlSADRateCode
        ENDPROPERTIES
        
      FIELD #SalesContributionRatio
        REAL
        PROPERTIES
          Name                #SalesContributionRatio
          Table               #InventTable
          Origin              #{A2D72EE3-F354-44D0-83E1-34AA8D457D31}
          LegacyId            #61
          ExtendedDataType    #ItemSalesContributionRatio
        ENDPROPERTIES
        
      FIELD #SalesModel
        ENUM
        PROPERTIES
          Name                #SalesModel
          Table               #InventTable
          Origin              #{657B8A84-0C71-4493-B40F-E4BFA853A92B}
          LegacyId            #8
          ExtendedDataType    #ItemSalesModel
          EnumType            #SalesPriceModel
        ENDPROPERTIES
        
      FIELD #SalesPercentMarkup
        REAL
        PROPERTIES
          Name                #SalesPercentMarkup
          Table               #InventTable
          Origin              #{32B136FE-A211-41C5-A71E-3D1D019F9A43}
          LegacyId            #60
          ExtendedDataType    #ItemSalesPercentMarkup
        ENDPROPERTIES
        
      FIELD #SalesPriceModelBasic
        ENUM
        PROPERTIES
          Name                #SalesPriceModelBasic
          Table               #InventTable
          Origin              #{B45516EA-92A5-479A-BD6E-023FF190CD69}
          LegacyId            #62
          EnumType            #SalesPriceModelBasic
        ENDPROPERTIES
        
      FIELD #ScrapConst
        REAL
        PROPERTIES
          Name                #ScrapConst
          HelpText            #@SYS73406
          Table               #InventTable
          Origin              #{CA2CFCBE-4C57-492B-B05F-0141CFD907DF}
          LegacyId            #89
          ExtendedDataType    #ScrapConst
        ENDPROPERTIES
        
      FIELD #ScrapVar
        REAL
        PROPERTIES
          Name                #ScrapVar
          HelpText            #@SYS73407
          Table               #InventTable
          Origin              #{238C066C-57CC-401A-949A-85D3B0BA8BC5}
          LegacyId            #88
          ExtendedDataType    #ScrapVar
        ENDPROPERTIES
        
      FIELD #SerialNumGroupId
        STRING
        PROPERTIES
          Name                #SerialNumGroupId
          Label               #@SYS53816
          HelpText            #@SYS53817
          Table               #InventTable
          Origin              #{B9092C6E-54C5-4A18-BD61-48F1BD94C542}
          LegacyId            #75
          ExtendedDataType    #InventNumGroupId
          StringSize          #30
        ENDPROPERTIES
        
      FIELD #ServiceCodeTable_IN
        INT64
        PROPERTIES
          Name                #ServiceCodeTable_IN
          Label               #@GLS5065
          HelpText            #@GLS5072
          Table               #InventTable
          CountryRegionCodes  #IN
          Origin              #{2A131F5F-00AF-1000-0D1C-E0C49497D078}
          LegacyId            #8031
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #SkipIntraCompanySync_RU
        ENUM
        PROPERTIES
          Name                #SkipIntraCompanySync_RU
          Table               #InventTable
          Origin              #{2A170000-00AF-1000-4FBE-8B3F060E7D1A}
          ExtendedDataType    #SkipIntraCompanySync_RU
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #sortCode
        INT
        PROPERTIES
          Name                #sortCode
          HelpText            #@SYS56625
          Table               #InventTable
          Origin              #{EDB2F227-CE72-4B53-99EC-B004EB799125}
          LegacyId            #73
          ExtendedDataType    #WMSSortCode
        ENDPROPERTIES
        
      FIELD #StandardConfigId
        STRING
        PROPERTIES
          Name                #StandardConfigId
          HelpText            #@SYS300189
          GroupPrompt         #@SYS14011
          Table               #InventTable
          Origin              #{D3B13604-7E74-49C0-8BB0-646EEFF72A97}
          LegacyId            #45
          ExtendedDataType    #ConfigIdStandard
        ENDPROPERTIES
        
      FIELD #StandardInventColorId
        STRING
        PROPERTIES
          Name                #StandardInventColorId
          Label               #@SYS308672
          HelpText            #@SYS300189
          GroupPrompt         #@SYS73726
          Table               #InventTable
          Origin              #{67E29731-B733-40EB-909B-2D665ADA501A}
          LegacyId            #90
          ExtendedDataType    #EcoResItemColorName
        ENDPROPERTIES
        
      FIELD #StandardInventSizeId
        STRING
        PROPERTIES
          Name                #StandardInventSizeId
          Label               #@SYS308673
          HelpText            #@SYS300189
          GroupPrompt         #@SYS73727
          Table               #InventTable
          Origin              #{5BF5A4AD-FD25-47BE-B7F5-4F48322173E3}
          LegacyId            #91
          ExtendedDataType    #EcoResItemSizeName
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #StandardInventStyleId
        STRING
        PROPERTIES
          Name                #StandardInventStyleId
          Label               #@FPK270016
          HelpText            #@SYS300189
          GroupPrompt         #@FPK270000
          Table               #InventTable
          Origin              #{E9C84E25-CD69-48B3-888B-3A43478FCDB3}
          ExtendedDataType    #EcoResItemStyleName
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #standardPalletQuantity
        REAL
        PROPERTIES
          Name                #standardPalletQuantity
          Table               #InventTable
          Origin              #{8EA1DAC4-A148-4280-A830-8B322759C0D4}
          LegacyId            #71
          ExtendedDataType    #WMSStandardPalletQuantity
        ENDPROPERTIES
        
      FIELD #StatisticsFactor
        REAL
        PROPERTIES
          Name                #StatisticsFactor
          Table               #InventTable
          Origin              #{C27D61E9-4A74-4B83-BC83-AA8909940DCE}
          LegacyId            #43
          ExtendedDataType    #IntrastatMarkupPct
        ENDPROPERTIES
        
      FIELD #TaraWeight
        REAL
        PROPERTIES
          Name                #TaraWeight
          Table               #InventTable
          Origin              #{AE8B17C4-D9A8-448E-B099-69E88FB0CB7B}
          LegacyId            #86
          ExtendedDataType    #ItemTaraWeight
        ENDPROPERTIES
        
      FIELD #TaxationOrigin_BR
        ENUM
        PROPERTIES
          Name                #TaxationOrigin_BR
          Table               #InventTable
          Origin              #{2A111F4D-00AF-1000-4FFF-0D5A531D52F8}
          LegacyId            #8013
          EnumType            #FITaxationOrigin_BR
        ENDPROPERTIES
        
      FIELD #TaxFiscalClassification_BR
        STRING
        PROPERTIES
          Name                #TaxFiscalClassification_BR
          HelpText            #@GLS749
          Table               #InventTable
          Origin              #{2A1A1F40-00AF-1000-C127-24344605B822}
          LegacyId            #8000
          ExtendedDataType    #TaxFiscalClassificationId_BR
        ENDPROPERTIES
        
      FIELD #TaxPackagingQty
        REAL
        PROPERTIES
          Name                #TaxPackagingQty
          Table               #InventTable
          Origin              #{8BA5C80F-3C1E-458E-B2AE-DCB6610C03DC}
          LegacyId            #79
          ExtendedDataType    #TaxPackagingQty
        ENDPROPERTIES
        
      FIELD #TaxServiceCode_BR
        STRING
        PROPERTIES
          Name                #TaxServiceCode_BR
          Table               #InventTable
          Origin              #{2A111F4E-00AF-1000-6BAE-1254F070F8F1}
          LegacyId            #8014
          ExtendedDataType    #TaxServiceCodeId_BR
        ENDPROPERTIES
        
      FIELD #UnitVolume
        REAL
        PROPERTIES
          Name                #UnitVolume
          Table               #InventTable
          Origin              #{E34BFAFB-AA8D-4B59-AC61-517EA1BCDF35}
          LegacyId            #15
          ExtendedDataType    #ItemVolume
        ENDPROPERTIES
        
      FIELD #UseAltItemId
        ENUM
        PROPERTIES
          Name                #UseAltItemId
          Label               #@SYS300190
          Table               #InventTable
          Origin              #{89F71D4C-EC2F-46F7-9032-06F2286A8E13}
          LegacyId            #23
          ExtendedDataType    #ItemUseAlternative
          EnumType            #ItemNumAlternative
        ENDPROPERTIES
        
      FIELD #VendProdCode
        STRING
        PROPERTIES
          Name                #VendProdCode
          Table               #InventTable
          Origin              #{313290A6-C482-434B-92C0-D7BA125E6D15}
          ExtendedDataType    #VendProdCode
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #Width
        REAL
        PROPERTIES
          Name                #Width
          Table               #InventTable
          Origin              #{96456E94-8E92-40C8-8EE6-9F2506EBCC18}
          LegacyId            #7
          ExtendedDataType    #BOMMeasureWidth
        ENDPROPERTIES
        
      FIELD #WMSArrivalHandlingTime
        TIME
        PROPERTIES
          Name                #WMSArrivalHandlingTime
          Table               #InventTable
          Origin              #{5E34A1B0-B270-4C07-A236-8FFB6615C3BF}
          LegacyId            #30
          ExtendedDataType    #WMSArrivalHandlingTime
        ENDPROPERTIES
        
      FIELD #WMSPalletTypeId
        STRING
        PROPERTIES
          Name                #WMSPalletTypeId
          HelpText            #@SYS57866
          Table               #InventTable
          IgnoreEDTRelation   #Yes
          Origin              #{8739D736-4FD7-4CF3-9989-E7FFC4A46048}
          LegacyId            #81
          ExtendedDataType    #WMSPalletTypeId
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #WMSPickingQtyTime
        TIME
        PROPERTIES
          Name                #WMSPickingQtyTime
          Label               #@SYS51198
          HelpText            #@SYS51199
          ConfigurationKey    #WMSAdvanced
          Table               #InventTable
          Origin              #{55EC2745-84A7-4F42-AE9C-25A0CE33B85C}
          LegacyId            #85
          ExtendedDataType    #TimeHour24
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoSummary
        PROPERTIES
          Name                #AutoSummary
        ENDPROPERTIES
        
        GROUPFIELDS
          #modelGroupId
          #Intracode
          #BOMUnitId
          #ReqGroupId
          #projCategoryId
          #itemGroupId
          #CostGroupId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemId
          #defaultProductName
          #NameAlias
          #itemGroupId
          #ItemType
          #configActive
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ABC
        PROPERTIES
          Name                #ABC
          Label               #@SYS19424
        ENDPROPERTIES
        
        GROUPFIELDS
          #ABCValue
          #ABCContributionMargin
          #ABCRevenue
          #ABCTieUp
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AlcoholDeclaration_RU
        PROPERTIES
          Name                #AlcoholDeclaration_RU
          Label               #@SYS4002797
        ENDPROPERTIES
        
        GROUPFIELDS
          #AlcoholProductionTypeId_RU
          #AlcoholManufacturerId_RU
          #AlcoholStrength_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AllFields
        PROPERTIES
          Name                #AllFields
          Label               #@SYS6047
        ENDPROPERTIES
        
        GROUPFIELDS
          #ABCContributionMargin
          #ABCRevenue
          #ABCTieUp
          #ABCValue
          #AltConfigId
          #AltInventColorId
          #AltInventSizeId
          #AltItemId
          #AutoReportFinished
          #BatchNumGroupId
          #BOMCalcGroupId
          #BOMLevel
          #BOMManualReceipt
          #BOMUnitId
          #CommissionGroupId
          #CostGroupId
          #CostModel
          #DefaultDimension
          #Density
          #Depth
          #EPCManager
          #FiscalLIFOAvoidCalc
          #FiscalLIFONormalValue
          #FiscalLIFONormalValueCalc
          #ForecastDMPInclude
          #grossDepth
          #grossHeight
          #grossWidth
          #Height
          #Intracode
          #IntraUnit
          #InventFiscalLIFOGroup
          #ItemBuyerGroupId
          #ItemDimCostPrice
          #ItemId
          #ItemPriceToleranceGroupId
          #ItemTaggingLevel
          #ItemType
          #MatchingPolicy
          #MinimumPalletQuantity
          #NameAlias
          #NetWeight
          #NGPCodesTable_FR
          #OrigCountryRegionId
          #OrigCountyId
          #OrigStateId
          #PackagingGroupId
          #PalletTagging
          #PBAAutoStart
          #PBAHideApproval
          #PBAHideDialog
          #PBAInventItemGroupId
          #PBAItemAutoGenerated
          #PBAItemConfigurable
          #PBAMandatoryConfig
          #Phantom
          #PrimaryVendorId
          #ProdFlushingPrincip
          #ProdGroupId
          #ProdPoolId
          #Product
          #projCategoryId
          #PropertyId
          #PurchModel
          #qtyPerLayer
          #ReqGroupId
          #SalesContributionRatio
          #SalesModel
          #SalesPercentMarkup
          #SalesPriceModelBasic
          #ScrapConst
          #ScrapVar
          #SerialNumGroupId
          #sortCode
          #StandardConfigId
          #StandardInventColorId
          #StandardInventSizeId
          #standardPalletQuantity
          #StatisticsFactor
          #TaraWeight
          #TaxPackagingQty
          #UnitVolume
          #UseAltItemId
          #Width
          #WMSArrivalHandlingTime
          #WMSPalletTypeId
          #WMSPickingQtyTime
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AlternativeProduct
        PROPERTIES
          Name                #AlternativeProduct
          Label               #@SYS300188
        ENDPROPERTIES
        
        GROUPFIELDS
          #UseAltItemId
          #AltItemId
          #AltConfigId
          #AltInventSizeId
          #AltInventColorId
          #AltInventStyleId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #BOM
        PROPERTIES
          Name                #BOM
          Label               #@SYS300199
        ENDPROPERTIES
        
        GROUPFIELDS
          #BOMUnitId
          #ScrapConst
          #ScrapVar
          #BOMLevel
          #Phantom
          #AutoReportFinished
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #BOMCalculation
        PROPERTIES
          Name                #BOMCalculation
          Label               #@SYS5681
        ENDPROPERTIES
        
        GROUPFIELDS
          #BOMCalcGroupId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CaseMoreInformation
        PROPERTIES
          Name                #CaseMoreInformation
          Label               #@SYS314356
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemId
          #defaultProductName
          #NameAlias
          #ItemType
          #productSubtype
          #productDimensionGroup
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Costing
        PROPERTIES
          Name                #Costing
          Label               #@SYS12539
        ENDPROPERTIES
        
        GROUPFIELDS
          #CostGroupId
          #ItemDimCostPrice
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Coverage
        PROPERTIES
          Name                #Coverage
          Label               #@SYS26726
        ENDPROPERTIES
        
        GROUPFIELDS
          #ReqGroupId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #CustomsTariff_IN
        PROPERTIES
          Name                #CustomsTariff_IN
          Label               #@GLS5189
        ENDPROPERTIES
        
        GROUPFIELDS
          #CustomsImportTariffCodeTable_IN
          #CustomsExportTariffCodeTable_IN
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #DefaultProductDimensions
        PROPERTIES
          Name                #DefaultProductDimensions
          Label               #@SYS73762
        ENDPROPERTIES
        
        GROUPFIELDS
          #StandardConfigId
          #StandardInventSizeId
          #StandardInventColorId
          #StandardInventStyleId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Deleted
        PROPERTIES
          Name                #Deleted
          Label               #@SYS4197
        ENDPROPERTIES
        
        GROUPFIELDS
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Dimension
        PROPERTIES
          Name                #Dimension
          Label               #@SYS14926
        ENDPROPERTIES
        
        GROUPFIELDS
          #DefaultDimension
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #EPC
        PROPERTIES
          Name                #EPC
          Label               #@SYS90170
        ENDPROPERTIES
        
        GROUPFIELDS
          #EPCManager
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #EPExternalItem
        PROPERTIES
          Name                #EPExternalItem
          Label               #@SYS54845
        ENDPROPERTIES
        
        GROUPFIELDS
          #defaultExternalItemId
          #defaultExternalItemDescription
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #EPItem
        PROPERTIES
          Name                #EPItem
          Label               #@SYS7407
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemType
          #itemGroupId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Excise_IN
        PROPERTIES
          Name                #Excise_IN
          Label               #@GLS5005
        ENDPROPERTIES
        
        GROUPFIELDS
          #DSA_IN
          #ExciseRecordType_IN
          #ExciseTariffCodes_IN
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ExciseTariffcode_IN
        PROPERTIES
          Name                #ExciseTariffcode_IN
          Label               #@GLS5263
        ENDPROPERTIES
        
        GROUPFIELDS
          #ExciseTariffCodes_IN
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #EximIncentiveSchemes_IN
        PROPERTIES
          Name                #EximIncentiveSchemes_IN
          Label               #@GLS61430
        ENDPROPERTIES
        
        GROUPFIELDS
          #EximProductGroupTable_IN
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #FiscalInformation_BR
        PROPERTIES
          Name                #FiscalInformation_BR
          Label               #@GLS56
        ENDPROPERTIES
        
        GROUPFIELDS
          #TaxationOrigin_BR
          #TaxFiscalClassification_BR
          #ExceptionCode_BR
          #InventProductType_BR
          #TaxServiceCode_BR
          #ICMSOnService_BR
          #ApproxTaxValue_BR
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #FiscalLIFO
        PROPERTIES
          Name                #FiscalLIFO
          Label               #@SYS93008
        ENDPROPERTIES
        
        GROUPFIELDS
          #InventFiscalLIFOGroup
          #FiscalLIFOAvoidCalc
          #FiscalLIFONormalValueCalc
          #FiscalLIFONormalValue
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #FixedAssets_RU
        PROPERTIES
          Name                #FixedAssets_RU
          Label               #@SYS12578
        ENDPROPERTIES
        
        GROUPFIELDS
          #AssetGroupId_RU
          #AssetId_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Forecast
        PROPERTIES
          Name                #Forecast
          Label               #@SYS13699
        ENDPROPERTIES
        
        GROUPFIELDS
          #ForecastDMPInclude
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ForeignTrade
        PROPERTIES
          Name                #ForeignTrade
          Label               #@SYS27650
        ENDPROPERTIES
        
        GROUPFIELDS
          #Intracode
          #IntrastatProcId_CZ
          #IntraUnit
          #StatisticsFactor
          #OrigCountryRegionId
          #OrigStateId
          #OrigCountyId
          #NGPCodesTable_FR
          #IntrastatExclude
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Groups
        PROPERTIES
          Name                #Groups
          Label               #@SYS1177
        ENDPROPERTIES
        
        GROUPFIELDS
          #itemGroupId
          #CostGroupId
          #modelGroupId
          #productDimensionGroupName
          #ReqGroupId
          #CommissionGroupId
          #BatchNumGroupId
          #SerialNumGroupId
          #ItemBuyerGroupId
          #PackagingGroupId
          #PBAInventItemGroupId
          #ItemPriceToleranceGroupId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Handling
        PROPERTIES
          Name                #Handling
          Label               #@SYS55210
        ENDPROPERTIES
        
        GROUPFIELDS
          #WMSPalletTypeId
          #standardPalletQuantity
          #PdsCWWMSStandardPalletQty
          #MinimumPalletQuantity
          #PdsCWWMSMinimumPalletQty
          #qtyPerLayer
          #PdsCWWMSQtyPerLayer
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Identification
        PROPERTIES
          Name                #Identification
          Label               #@SYS5711
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemId
          #Product
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Integration
        PROPERTIES
          Name                #Integration
          Label               #@SYS119497
        ENDPROPERTIES
        
        GROUPFIELDS
          #DAXIntegrationKey
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #IntraCompany_RU
        PROPERTIES
          Name                #IntraCompany_RU
          Label               #@GLS220550
        ENDPROPERTIES
        
        GROUPFIELDS
          #SkipIntraCompanySync_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Intrastat
        PROPERTIES
          Name                #Intrastat
          Label               #@SYS6530
        ENDPROPERTIES
        
        GROUPFIELDS
          #Intracode
          #IntrastatProcId_CZ
          #NGPCodesTable_FR
          #IntraUnit
          #StatisticsFactor
          #IntrastatExclude
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #InventPriceUpdate
        PROPERTIES
          Name                #InventPriceUpdate
          Label               #@SYS25118
        ENDPROPERTIES
        
        GROUPFIELDS
          #CostModel
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #InvoiceMatching
        PROPERTIES
          Name                #InvoiceMatching
          Label               #@SYS113690
        ENDPROPERTIES
        
        GROUPFIELDS
          #MatchingPolicy
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Item
        PROPERTIES
          Name                #Item
          Label               #@SYS7407
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemType
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ItemAlternative
        PROPERTIES
          Name                #ItemAlternative
          Label               #@SYS21956
        ENDPROPERTIES
        
        GROUPFIELDS
          #UseAltItemId
          #AltItemId
          #AltConfigId
          #AltInventSizeId
          #AltInventColorId
          #AltInventStyleId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ItemCoverage
        PROPERTIES
          Name                #ItemCoverage
          Label               #@SYS21672
        ENDPROPERTIES
        
        GROUPFIELDS
          #PrimaryVendorId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ItemData
        PROPERTIES
          Name                #ItemData
          Label               #@SYS23860
        ENDPROPERTIES
        
        GROUPFIELDS
          #UnitVolume
          #TaxPackagingQty
          #NetWeight
          #TaraWeight
          #Packing_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #MarkupCode_RU
        PROPERTIES
          Name                #MarkupCode_RU
          Label               #@SYS116804
        ENDPROPERTIES
        
        GROUPFIELDS
          #MarkupCode_RU
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Measurement
        PROPERTIES
          Name                #Measurement
          Label               #@SYS2021
        ENDPROPERTIES
        
        GROUPFIELDS
          #Height
          #Width
          #Depth
          #Density
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Name
        PROPERTIES
          Name                #Name
          Label               #@SYS7399
        ENDPROPERTIES
        
        GROUPFIELDS
          #defaultProductName
          #NameAlias
          #ItemType
          #defaultProductDescription
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #NaturalTax_LV
        PROPERTIES
          Name                #NaturalTax_LV
          Label               #@SYS4080933
        ENDPROPERTIES
        
        GROUPFIELDS
          #NRTaxGroup_LV
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Origin
        PROPERTIES
          Name                #Origin
          Label               #@SYS17860
        ENDPROPERTIES
        
        GROUPFIELDS
          #OrigCountryRegionId
          #OrigStateId
          #OrigCountyId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Packaging
        PROPERTIES
          Name                #Packaging
          Label               #@SYS300202
        ENDPROPERTIES
        
        GROUPFIELDS
          #PackagingGroupId
          #TaxPackagingQty
          #WMSPickingQtyTime
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PBAItemAutoGenerated
        PROPERTIES
          Name                #PBAItemAutoGenerated
          Label               #@SYS99919
        ENDPROPERTIES
        
        GROUPFIELDS
          #PBAItemAutoGenerated
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PdsApprovedVendor
        PROPERTIES
          Name                #PdsApprovedVendor
          Label               #@PRO1545
        ENDPROPERTIES
        
        GROUPFIELDS
          #PdsVendorCheckItem
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PdsItemCustomData
        PROPERTIES
          Name                #PdsItemCustomData
          Label               #@PRO1371
        ENDPROPERTIES
        
        GROUPFIELDS
          #PdsFreightAllocationGroupId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PdsItemData
        PROPERTIES
          Name                #PdsItemData
          Label               #@SYS23860
        ENDPROPERTIES
        
        GROUPFIELDS
          #PdsShelfAdvice
          #PdsShelfLife
          #PdsBestBefore
          #BatchMergeDateCalculationMethod
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PdsItemRebateGroup
        PROPERTIES
          Name                #PdsItemRebateGroup
          Label               #@PRO1317
        ENDPROPERTIES
        
        GROUPFIELDS
          #PdsItemRebateGroupId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PDSPotency
        PROPERTIES
          Name                #PDSPotency
          Label               #@PSC61
        ENDPROPERTIES
        
        GROUPFIELDS
          #PDSBaseAttributeId
          #PDSTargetFactor
          #PDSPotencyAttribRecording
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PhysicalDimensions
        PROPERTIES
          Name                #PhysicalDimensions
          Label               #@SYS50219
        ENDPROPERTIES
        
        GROUPFIELDS
          #grossDepth
          #grossWidth
          #grossHeight
          #UnitVolume
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PmfFormulaPlanning
        PROPERTIES
          Name                #PmfFormulaPlanning
          Label               #@PRO413
        ENDPROPERTIES
        
        GROUPFIELDS
          #PmfProductType
          #PmfPlanningItemId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PmfYield
        PROPERTIES
          Name                #PmfYield
          Label               #@PRO68
        ENDPROPERTIES
        
        GROUPFIELDS
          #PmfYieldPct
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PriceUpdate
        PROPERTIES
          Name                #PriceUpdate
          Label               #@SYS25118
        ENDPROPERTIES
        
        GROUPFIELDS
          #PurchModel
          #CostModel
          #SalesModel
          #SalesPriceModelBasic
          #SalesContributionRatio
          #SalesPercentMarkup
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ProductBuilder
        PROPERTIES
          Name                #ProductBuilder
          Label               #@SYS40122
        ENDPROPERTIES
        
        GROUPFIELDS
          #PBAItemConfigurable
          #PBAHideDialog
          #PBAHideApproval
          #PBAAutoStart
          #PBAMandatoryConfig
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ProductConfigurator
        PROPERTIES
          Name                #ProductConfigurator
          Label               #@SYS26331
        ENDPROPERTIES
        
        GROUPFIELDS
          #StandardConfigId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Production
        PROPERTIES
          Name                #Production
          Label               #@SYS4398
        ENDPROPERTIES
        
        GROUPFIELDS
          #ProdPoolId
          #ProdGroupId
          #PropertyId
          #BOMManualReceipt
          #ProdFlushingPrincip
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ProjAdministration
        PROPERTIES
          Name                #ProjAdministration
          Label               #@SYS40777
        ENDPROPERTIES
        
        GROUPFIELDS
          #projCategoryId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Project
        PROPERTIES
          Name                #Project
          Label               #@SYS4534
        ENDPROPERTIES
        
        GROUPFIELDS
          #projCategoryId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PurchaseAdministration
        PROPERTIES
          Name                #PurchaseAdministration
          Label               #@SYS40777
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemBuyerGroupId
          #ItemPriceToleranceGroupId
          #PrimaryVendorId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #PurchasePriceUpdate
        PROPERTIES
          Name                #PurchasePriceUpdate
          Label               #@SYS25118
        ENDPROPERTIES
        
        GROUPFIELDS
          #PurchModel
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #RFIDTagging
        PROPERTIES
          Name                #RFIDTagging
          Label               #@SYS90171
        ENDPROPERTIES
        
        GROUPFIELDS
          #ItemTaggingLevel
          #PalletTagging
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #SAD
        PROPERTIES
          Name                #SAD
          Label               #@GLS109238
        ENDPROPERTIES
        
        GROUPFIELDS
          #SADRateCode_PL
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #SalesAdministration
        PROPERTIES
          Name                #SalesAdministration
          Label               #@SYS40777
        ENDPROPERTIES
        
        GROUPFIELDS
          #CommissionGroupId
          #PKWiUCode_PL
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #SalesPriceUpdate
        PROPERTIES
          Name                #SalesPriceUpdate
          Label               #@SYS25118
        ENDPROPERTIES
        
        GROUPFIELDS
          #SalesModel
          #SalesPriceModelBasic
          #SalesContributionRatio
          #SalesPercentMarkup
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ServiceCode_IN
        PROPERTIES
          Name                #ServiceCode_IN
          Label               #@GLS5065
        ENDPROPERTIES
        
        GROUPFIELDS
          #ServiceCodeTable_IN
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #ShippingAndReceiving
        PROPERTIES
          Name                #ShippingAndReceiving
          Label               #@SYS300201
        ENDPROPERTIES
        
        GROUPFIELDS
          #WMSArrivalHandlingTime
          #sortCode
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #Tracking
        PROPERTIES
          Name                #Tracking
          Label               #@SYS116849
        ENDPROPERTIES
        
        GROUPFIELDS
          #BatchNumGroupId
          #SerialNumGroupId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #WarehouseManagement
        PROPERTIES
          Name                #WarehouseManagement
          Label               #@SYS50169
        ENDPROPERTIES
        
        GROUPFIELDS
          #WMSPalletTypeId
          #standardPalletQuantity
          #MinimumPalletQuantity
          #qtyPerLayer
          #sortCode
          #WMSPickingQtyTime
          #WMSArrivalHandlingTime
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #WebCategoryBrowsing
        PROPERTIES
          Name                #WebCategoryBrowsing
          Label               #@SYS74258
        ENDPROPERTIES
        
        GROUPFIELDS
          #itemGroupId
          #ItemType
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #WeightMeasurements
        PROPERTIES
          Name                #WeightMeasurements
          Label               #@SYS300200
        ENDPROPERTIES
        
        GROUPFIELDS
          #NetWeight
          #TaraWeight
          #grossWeight
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #ItemIdx
      PROPERTIES
        Name                #ItemIdx
        AllowDuplicates     #No
        AlternateKey        #Yes
        Origin              #{2B070001-00AF-1000-4974-656D49647800}
        LegacyId            #1
      ENDPROPERTIES
      
      INDEXFIELDS
        #ItemId
      ENDINDEXFIELDS
      
      #NameAliasIdx
      PROPERTIES
        Name                #NameAliasIdx
        Origin              #{2B0C0003-00AF-1000-6FA5-315FA57E6961}
        LegacyId            #3
      ENDPROPERTIES
      
      INDEXFIELDS
        #NameAlias
      ENDINDEXFIELDS
      
      #TypeIdx
      PROPERTIES
        Name                #TypeIdx
        Origin              #{2B070004-00AF-1000-5479-706549647800}
        LegacyId            #4
      ENDPROPERTIES
      
      INDEXFIELDS
        #ItemType
        #ItemId
      ENDINDEXFIELDS
      
      #ProductIdx
      PROPERTIES
        Name                #ProductIdx
        AllowDuplicates     #No
        AlternateKey        #Yes
        Origin              #{2B0A0008-00AF-1000-DC60-D37675637449}
        LegacyId            #8
      ENDPROPERTIES
      
      INDEXFIELDS
        #Product
      ENDINDEXFIELDS
      
      #InventFiscalLIFOGroupIdx
      PROPERTIES
        Name                #InventFiscalLIFOGroupIdx
        Origin              #{2B180015-00AF-1000-E74E-0C07C1B49E74}
        LegacyId            #21
      ENDPROPERTIES
      
      INDEXFIELDS
        #InventFiscalLIFOGroup
      ENDINDEXFIELDS
      
      #ExciseTariffCodes_INIdx
      PROPERTIES
        Name                #ExciseTariffCodes_INIdx
        Origin              #{2B171F42-00AF-1000-6C8B-883FD124D9C3}
        LegacyId            #8002
      ENDPROPERTIES
      
      INDEXFIELDS
        #ExciseTariffCodes_IN
      ENDINDEXFIELDS
      
      #CustomsExportTariffCodeTable_INIdx
      PROPERTIES
        Name                #CustomsExportTariffCodeTable_INIdx
        Origin              #{2B221F43-00AF-1000-C57B-8C7DAAE3022B}
        LegacyId            #8003
      ENDPROPERTIES
      
      INDEXFIELDS
        #CustomsExportTariffCodeTable_IN
      ENDINDEXFIELDS
      
      #CustomsImportTariffCodeTable_INIdx
      PROPERTIES
        Name                #CustomsImportTariffCodeTable_INIdx
        Origin              #{2B221F44-00AF-1000-9CCD-8A7DAAE3022F}
        LegacyId            #8004
      ENDPROPERTIES
      
      INDEXFIELDS
        #CustomsImportTariffCodeTable_IN
      ENDINDEXFIELDS
      
      #ServiceCodeTable_INIdx
      PROPERTIES
        Name                #ServiceCodeTable_INIdx
        Origin              #{2B161F45-00AF-1000-0D1C-E0774791348B}
        LegacyId            #8005
      ENDPROPERTIES
      
      INDEXFIELDS
        #ServiceCodeTable_IN
      ENDINDEXFIELDS
      
      #EximProductGroupTable_INIdx
      PROPERTIES
        Name                #EximProductGroupTable_INIdx
        Origin              #{2B1B1F46-00AF-1000-2B8B-0481881F1294}
        LegacyId            #8006
      ENDPROPERTIES
      
      INDEXFIELDS
        #EximProductGroupTable_IN
      ENDINDEXFIELDS
      
      #PmfProductTypePlanningItemIdx
      PROPERTIES
        Name                #PmfProductTypePlanningItemIdx
        Origin              #{84252875-9840-4702-9E4B-447A7FDD3CBA}
      ENDPROPERTIES
      
      INDEXFIELDS
        #PmfPlanningItemId
        #PmfProductType
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
      #FullTextIdx
      PROPERTIES
        Name                #FullTextIdx
        Origin              #{44ED2EAE-5DC8-48C4-B3E4-2D534B5CBC9A}
      ENDPROPERTIES
      
      FULLTEXTINDEXFIELDS
        #NameAlias
      ENDFULLTEXTINDEXFIELDS
      
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #AlcoholManufacturer_RU
        PROPERTIES
          Name                #AlcoholManufacturer_RU
          Table               #VendTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #AlcoholManufacturer
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #AlcoholManufacturerId_RU
            RelatedField        #AccountNum
            SourceEDT           #AlcoholManufacturerId_RU
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #AlcoholProductionType_RU
        PROPERTIES
          Name                #AlcoholProductionType_RU
          Table               #AlcoholProductionType_RU
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #AlcoholProductionTypeId_RU
            RelatedField        #TypeId
            SourceEDT           #AlcoholProductionTypeId_RU
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #AltEcoResColor
        PROPERTIES
          Name                #AltEcoResColor
          Table               #EcoResColor
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #AltEcoResColor
          Role                #InventTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #AltInventColorId
            RelatedField        #Name
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #AltEcoResConfiguration
        PROPERTIES
          Name                #AltEcoResConfiguration
          Table               #EcoResConfiguration
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #AltEcoResConfiguration
          Role                #InventTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #AltConfigId
            RelatedField        #Name
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #AltEcoResSize
        PROPERTIES
          Name                #AltEcoResSize
          Table               #EcoResSize
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #AltEcoResSize
          Role                #InventTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #AltInventSizeId
            RelatedField        #Name
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #AltEcoResStyle
        PROPERTIES
          Name                #AltEcoResStyle
          Table               #EcoResStyle
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #AltEcoResstyle
          Role                #InventTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #AltInventStyleId
            RelatedField        #Name
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #AlternativeInventTable
        PROPERTIES
          Name                #AlternativeInventTable
          Table               #InventTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #InventTable
          Role                #InventTable
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #AltItemId
            RelatedField        #ItemId
            SourceEDT           #ItemIdAlternative
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BatchNumGroup
        PROPERTIES
          Name                #BatchNumGroup
          Table               #InventNumGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #BatchNumGroup
          Role                #InventTable
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #BatchNumGroupId
            RelatedField        #NumGroupId
            SourceEDT           #InventNumGroupId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BOMCalcGroup
        PROPERTIES
          Name                #BOMCalcGroup
          Table               #BOMCalcGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #BOMCalcGroupId
            RelatedField        #CalcGroupId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #BOMCostGroup
        PROPERTIES
          Name                #BOMCostGroup
          Table               #BOMCostGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #CostGroupId
            RelatedField        #CostGroupId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CommissionItemGroup
        PROPERTIES
          Name                #CommissionItemGroup
          Table               #CommissionItemGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #CommissionGroupId
            RelatedField        #GroupId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustomsExportTariffCodeTable_IN
        PROPERTIES
          Name                #CustomsExportTariffCodeTable_IN
          Table               #CustomsTariffCodeTable_IN
          EntityRelationshipRole  #@GLS5331
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #CustomsTariffCodeTable_IN
          Role                #CustomsTariffCodeTable_IN_InventTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #CustomsExportTariffCodeTable_IN
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #CustomsImportTariffCodeTable_IN
        PROPERTIES
          Name                #CustomsImportTariffCodeTable_IN
          Table               #CustomsTariffCodeTable_IN
          EntityRelationshipRole  #@GLS5188
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #CustomsTariffCodeTable_IN_1
          Role                #CustomsTariffCodeTable_IN_1_InventTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #CustomsImportTariffCodeTable_IN
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #DefaultDimension
        PROPERTIES
          Name                #DefaultDimension
          Table               #DimensionAttributeValueSet
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #DimensionAttributeValueSet
          Role                #DimensionAttributeValueSet_InventTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #DefaultDimension
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #EcoResProduct
        PROPERTIES
          Name                #EcoResProduct
          Table               #EcoResProduct
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Composition
          RelatedTableRole    #EcoResProduct
          Role                #EcoResProduct_InventTable
          CreateNavigationPropertyMethods           #Yes
          NavigationPropertyMethodNameOverride                #Product
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #Product
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ExceptionCode_BR
        PROPERTIES
          Name                #ExceptionCode_BR
          Table               #ExceptionCodeTable_BR
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #TaxFiscalClassification_BR
            RelatedField        #TaxFiscalClassificationId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #ExceptionCode_BR
            RelatedField        #ExceptionCode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ExciseTariffCodes_IN
        PROPERTIES
          Name                #ExciseTariffCodes_IN
          Table               #ExciseTariffCodes_IN
          EntityRelationshipRole  #@GLS5344
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #ExciseTariffCodes_IN
          Role                #ExciseTariffCodes_IN_InventTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ExciseTariffCodes_IN
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #EximProductGroupTable_IN
        PROPERTIES
          Name                #EximProductGroupTable_IN
          Table               #EximProductGroupTable_IN
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #EximProductGroupTable_IN
          Role                #EximProductGroupTable_IN_InventTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #EximProductGroupTable_IN
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #IntrastatItemCode
        PROPERTIES
          Name                #IntrastatItemCode
          Table               #IntrastatItemCode
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #Intracode
            RelatedField        #ItemCodeId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #IntrastatStatProc
        PROPERTIES
          Name                #IntrastatStatProc
          Table               #IntrastatStatProc
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #Intracode
            RelatedField        #ItemCode_CZ
          ENDPROPERTIES
          
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #IntrastatProcId_CZ
            RelatedField        #StatProcId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #InventBuyerGroup
        PROPERTIES
          Name                #InventBuyerGroup
          Table               #InventBuyerGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ItemBuyerGroupId
            RelatedField        #Group
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #InventFiscalLIFOGroup
        PROPERTIES
          Name                #InventFiscalLIFOGroup
          Table               #InventFiscalLIFOGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #InventFiscalLIFOGroup
          Role                #InventFiscalLIFOGroup_InventTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #InventFiscalLIFOGroup
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #InventItemPriceToleranceGroup
        PROPERTIES
          Name                #InventItemPriceToleranceGroup
          Table               #InventItemPriceToleranceGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ItemPriceToleranceGroupId
            RelatedField        #ItemPriceToleranceGroupId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #InventPackagingGroup
        PROPERTIES
          Name                #InventPackagingGroup
          Table               #InventPackagingGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #PackagingGroupId
            RelatedField        #PackagingGroupId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #InventProductType_BR
        PROPERTIES
          Name                #InventProductType_BR
          Table               #InventProductTypeTable_BR
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #InventProductType_BR
            RelatedField        #ProductTypeId
            SourceEDT           #InventProductTypeId_BR
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #LvNRTaxItemGroupHeading
        PROPERTIES
          Name                #LvNRTaxItemGroupHeading
          Table               #LvNRTaxItemGroupHeading
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #NRTaxGroup_LV
            RelatedField        #GroupId
            SourceEDT           #LvNRTaxGroup
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #MarkupCodeVend
        PROPERTIES
          Name                #MarkupCodeVend
          Table               #MarkupTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Value               #2
            Table               #MarkupTable
            RelatedField        #ModuleType
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #MarkupCode_RU
            RelatedField        #MarkupCode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #NGPCodesTable_FR
        PROPERTIES
          Name                #NGPCodesTable_FR
          Table               #NGPCodesTable_FR
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          Role                #NGPCodesTable_FR
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #NGPCodesTable_FR
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #OriginCountryRegion
        PROPERTIES
          Name                #OriginCountryRegion
          Table               #LogisticsAddressCountryRegion
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #OrigCountryRegionId
            RelatedField        #CountryRegionId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #OriginCounty
        PROPERTIES
          Name                #OriginCounty
          Table               #LogisticsAddressCounty
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #OrigCountryRegionId
            RelatedField        #CountryRegionId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #OrigStateId
            RelatedField        #StateId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #OrigCountyId
            RelatedField        #CountyId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #OriginState
        PROPERTIES
          Name                #OriginState
          Table               #LogisticsAddressState
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #OrigCountryRegionId
            RelatedField        #CountryRegionId
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #OrigStateId
            RelatedField        #StateId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PBAInventItemGroup
        PROPERTIES
          Name                #PBAInventItemGroup
          Table               #PBAInventItemGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #PBAInventItemGroupId
            RelatedField        #PBAInventItemGroupId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PdsBatchAttrib
        PROPERTIES
          Name                #PdsBatchAttrib
          Table               #PdsBatchAttrib
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PDSBaseAttributeId
            RelatedField        #PdsBatchAttribId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PdsBatchAttribByItem
        PROPERTIES
          Name                #PdsBatchAttribByItem
          Table               #PdsBatchAttribByItem
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PDSBaseAttributeId
            RelatedField        #PdsBatchAttribRelation
          ENDPROPERTIES
          
          REFERENCETYPE EXTERNFIXED
          PROPERTIES
            Table               #PdsBatchAttribByItem
            RelatedField        #PdsBatchAttribCode
          ENDPROPERTIES
          
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #ItemId
            RelatedField        #PdsBatchAttribItemId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PdsFreightGroup
        PROPERTIES
          Name                #PdsFreightGroup
          Table               #PdsFreightGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PdsFreightAllocationGroupId
            RelatedField        #PdsFreightAllocationCode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PdsItemRebateGroup
        PROPERTIES
          Name                #PdsItemRebateGroup
          Table               #PdsItemRebateGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #PdsItemRebateGroup
          Role                #InventTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PdsItemRebateGroupId
            RelatedField        #PdsItemRebateGroupId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PlSADRateGroup
        PROPERTIES
          Name                #PlSADRateGroup
          Table               #PlSADRateGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #SADRateCode_PL
            RelatedField        #SADRateCode
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PmfPlanningItem
        PROPERTIES
          Name                #PmfPlanningItem
          Table               #InventTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #CoProductPlanningItem
          Role                #CoProduct
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #PmfPlanningItemId
            RelatedField        #ItemId
            SourceEDT           #PmfPlanningItemId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #PrimaryVendTable
        PROPERTIES
          Name                #PrimaryVendTable
          Table               #VendTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #PrimaryVendorId
            RelatedField        #AccountNum
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ProdGroup
        PROPERTIES
          Name                #ProdGroup
          Table               #ProdGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ProdGroupId
            RelatedField        #ProdGroupId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ProdPool
        PROPERTIES
          Name                #ProdPool
          Table               #ProdPool
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ProdPoolId
            RelatedField        #ProdPoolId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ProjCategory
        PROPERTIES
          Name                #ProjCategory
          Table               #ProjCategory
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #projCategoryId
            RelatedField        #CategoryId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #RAssetMainGroup
        PROPERTIES
          Name                #RAssetMainGroup
          Table               #RAssetMainGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #RAssetMainGroup
          Role                #InventTable
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #AssetGroupId_RU
            RelatedField        #AssetMainGroupId
            SourceEDT           #RAssetMainGroupId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #RAssetTable
        PROPERTIES
          Name                #RAssetTable
          Table               #RAssetTable
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #RAssetTable
          Role                #InventTable
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #AssetId_RU
            RelatedField        #AccountNum
            SourceEDT           #RAssetId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ReqGroup
        PROPERTIES
          Name                #ReqGroup
          Table               #ReqGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ReqGroupId
            RelatedField        #ReqGroupId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #SerialNumGroup
        PROPERTIES
          Name                #SerialNumGroup
          Table               #InventNumGroup
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #SerialNumGroup
          Role                #InventTable
          EDTRelation         #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #SerialNumGroupId
            RelatedField        #NumGroupId
            SourceEDT           #InventNumGroupId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ServiceCodeTable_IN
        PROPERTIES
          Name                #ServiceCodeTable_IN
          Table               #ServiceCodeTable_IN
          EntityRelationshipRole  #@GLS5065
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #ServiceCodeTable_IN
          Role                #ServiceCodeTable_IN_InventTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #ServiceCodeTable_IN
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #StandardEcoResColor
        PROPERTIES
          Name                #StandardEcoResColor
          Table               #EcoResColor
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #StandardEcoResColor
          Role                #InventTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #StandardInventColorId
            RelatedField        #Name
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #StandardEcoResConfiguration
        PROPERTIES
          Name                #StandardEcoResConfiguration
          Table               #EcoResConfiguration
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #StandardEcoResConfiguration
          Role                #InventTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #StandardConfigId
            RelatedField        #Name
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #StandardEcoResSize
        PROPERTIES
          Name                #StandardEcoResSize
          Table               #EcoResSize
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #StandardEcoResSize
          Role                #InventTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #StandardInventSizeId
            RelatedField        #Name
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #StandardEcoResStyle
        PROPERTIES
          Name                #StandardEcoResStyle
          Table               #EcoResStyle
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          RelatedTableRole    #StandardEcoResStyle
          Role                #InventTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #StandardInventStyleId
            RelatedField        #Name
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #TaxFiscalClassification_BR
        PROPERTIES
          Name                #TaxFiscalClassification_BR
          Table               #TaxFiscalClassification_BR
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #TaxFiscalClassification_BR
            RelatedField        #FiscalClassificationId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #TaxServiceCode_BR
        PROPERTIES
          Name                #TaxServiceCode_BR
          Table               #TaxServiceCode_BR
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #InventTable_TaxServiceCode_BR
          Role                #InventTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #TaxServiceCode_BR
            RelatedField        #ServiceCodeId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #UnitOfMeasure
        PROPERTIES
          Name                #UnitOfMeasure
          Table               #UnitOfMeasure
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #BOMUnitId
            RelatedField        #Symbol
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #WMSPalletType
        PROPERTIES
          Name                #WMSPalletType
          Table               #WMSPalletType
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
          RelatedTableRole    #WMSPalletType
          Role                #InventTable
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #WMSPalletTypeId
            RelatedField        #palletTypeId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #WrkCtrProperty
        PROPERTIES
          Name                #WrkCtrProperty
          Table               #WrkCtrProperty
          RelatedTableCardinality   #ZeroOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #PropertyId
            RelatedField        #PropertyId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
      #WHSLocationLimitVariant(InventTable)
      PROPERTIES
        Table               #WHSLocationLimitVariant
        DeleteAction        #Cascade
        Relation            #InventTable
      ENDPROPERTIES
      
      #SuppItemTable(SupplementaryInventTable)
      PROPERTIES
        Table               #SuppItemTable
        DeleteAction        #Cascade
        Relation            #SupplementaryInventTable
      ENDPROPERTIES
      
      #CaseAssociation(InventTable)
      PROPERTIES
        Table               #CaseAssociation
        DeleteAction        #Restricted
        Relation            #InventTable
      ENDPROPERTIES
      
      #InventBatchJournal(InventTable)
      PROPERTIES
        Table               #InventBatchJournal
        DeleteAction        #Restricted
        Relation            #InventTable
      ENDPROPERTIES
      
      #ImportedContentPerItem_BR(InventTable)
      PROPERTIES
        Table               #ImportedContentPerItem_BR
        DeleteAction        #Cascade
        Relation            #InventTable
      ENDPROPERTIES
      
      #TMSItemConstraint(InventTable)
      PROPERTIES
        Table               #TMSItemConstraint
        DeleteAction        #Cascade
        Relation            #InventTable
      ENDPROPERTIES
      
      #TMSInvoiceLine(InventTable)
      PROPERTIES
        Table               #TMSInvoiceLine
        DeleteAction        #Cascade
        Relation            #InventTable
      ENDPROPERTIES
      
      #WHSUOMStructure(InventTable)
      PROPERTIES
        Table               #WHSUOMStructure
        DeleteAction        #Restricted
        Relation            #InventTable
      ENDPROPERTIES
      
      #WHSPhysDimUOM(InventTable)
      PROPERTIES
        Table               #WHSPhysDimUOM
        DeleteAction        #Cascade
        Relation            #InventTable
      ENDPROPERTIES
      
      #WHSInventReserveDelta(InventTable)
      PROPERTIES
        Table               #WHSInventReserveDelta
        DeleteAction        #Cascade
        Relation            #InventTable
      ENDPROPERTIES
      
      #WHSInventFixedLocation(InventTable)
      PROPERTIES
        Table               #WHSInventFixedLocation
        DeleteAction        #Cascade
        Relation            #InventTable
      ENDPROPERTIES
      
      #WHSProductVariantFixedLocation(InventTable)
      PROPERTIES
        Table               #WHSProductVariantFixedLocation
        DeleteAction        #Cascade
        Relation            #InventTable
      ENDPROPERTIES
      
      #WHSContainerTrans(InventTable)
      PROPERTIES
        Table               #WHSContainerTrans
        DeleteAction        #Restricted
        Relation            #InventTable
      ENDPROPERTIES
      
      #WHSContainerLine(InventTable)
      PROPERTIES
        Table               #WHSContainerLine
        DeleteAction        #Restricted
        Relation            #InventTable
      ENDPROPERTIES
      
      #WHSASNItem(InventTable)
      PROPERTIES
        Table               #WHSASNItem
        DeleteAction        #Restricted
        Relation            #InventTable
      ENDPROPERTIES
      
      #WHSAccountItemStatusDefault(InventTable)
      PROPERTIES
        Table               #WHSAccountItemStatusDefault
        DeleteAction        #Cascade
        Relation            #InventTable
      ENDPROPERTIES
      
      #WHSReservationHierarchyItem(InventTable)
      PROPERTIES
        Table               #WHSReservationHierarchyItem
        DeleteAction        #Cascade
        Relation            #InventTable
      ENDPROPERTIES
      
      #TMSInventEnabled
      PROPERTIES
        Table               #TMSInventEnabled
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #WHSInventTable(InventTable)
      PROPERTIES
        Table               #WHSInventTable
        DeleteAction        #Cascade
        Relation            #InventTable
      ENDPROPERTIES
      
      #WHSInventEnabled
      PROPERTIES
        Table               #WHSInventEnabled
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #PMFSequenceItemTable(InventTable)
      PROPERTIES
        Table               #PMFSequenceItemTable
        DeleteAction        #Cascade
        Relation            #InventTable
      ENDPROPERTIES
      
      #PMFSeqReqRouteChanges
      PROPERTIES
        Table               #PMFSeqReqRouteChanges
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #PDSCompensationPrinciple(InventTableComp)
      PROPERTIES
        Table               #PDSCompensationPrinciple
        DeleteAction        #Cascade
        Relation            #InventTableComp
      ENDPROPERTIES
      
      #PDSCompensationPrinciple(InventTable)
      PROPERTIES
        Table               #PDSCompensationPrinciple
        DeleteAction        #Cascade
        Relation            #InventTable
      ENDPROPERTIES
      
      #PDSBatchAttribTransfer(InventTableRaw)
      PROPERTIES
        Table               #PDSBatchAttribTransfer
        DeleteAction        #Cascade
        Relation            #InventTableRaw
      ENDPROPERTIES
      
      #PDSBatchAttribTransfer(InventTable)
      PROPERTIES
        Table               #PDSBatchAttribTransfer
        DeleteAction        #Cascade
        Relation            #InventTable
      ENDPROPERTIES
      
      #RetailLabelGeneration
      PROPERTIES
        Table               #RetailLabelGeneration
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #MCRInventTable(InventTable)
      PROPERTIES
        Table               #MCRInventTable
        DeleteAction        #Cascade
        Relation            #InventTable
      ENDPROPERTIES
      
      #MCRInventTableIndex(InventTable)
      PROPERTIES
        Table               #MCRInventTableIndex
        DeleteAction        #Cascade
        Relation            #InventTable
      ENDPROPERTIES
      
      #SalesInvoiceTmp(MCRSalesInvTmp_InventTable)
      PROPERTIES
        Table               #SalesInvoiceTmp
        DeleteAction        #Restricted
        Relation            #MCRSalesInvTmp_InventTable
      ENDPROPERTIES
      
      #MCRUpSellItem(ItemId)
      PROPERTIES
        Table               #MCRUpSellItem
        DeleteAction        #Cascade
        Relation            #ItemId
      ENDPROPERTIES
      
      #TAMPromotionItem(InventTable)
      PROPERTIES
        Table               #TAMPromotionItem
        DeleteAction        #Restricted
        Relation            #InventTable
      ENDPROPERTIES
      
      #TAMFundInvent(ItemID)
      PROPERTIES
        Table               #TAMFundInvent
        DeleteAction        #Restricted
        Relation            #ItemID
      ENDPROPERTIES
      
      #MCRSalesStatsCustItem(InventTable)
      PROPERTIES
        Table               #MCRSalesStatsCustItem
        DeleteAction        #Restricted
        Relation            #InventTable
      ENDPROPERTIES
      
      #MCRRoyaltyItemTable(InventTable)
      PROPERTIES
        Table               #MCRRoyaltyItemTable
        DeleteAction        #Restricted
        Relation            #InventTable
      ENDPROPERTIES
      
      #MCRRoyaltyItemCode(InventTable)
      PROPERTIES
        Table               #MCRRoyaltyItemCode
        DeleteAction        #Restricted
        Relation            #InventTable
      ENDPROPERTIES
      
      #MCRPriceDiscGroupItem(inventTable)
      PROPERTIES
        Table               #MCRPriceDiscGroupItem
        DeleteAction        #Restricted
        Relation            #inventTable
      ENDPROPERTIES
      
      #MCROrderEventTable(ItemId)
      PROPERTIES
        Table               #MCROrderEventTable
        DeleteAction        #Restricted
        Relation            #ItemId
      ENDPROPERTIES
      
      #MCROrderEventTable(ItemdOfAlternateItem)
      PROPERTIES
        Table               #MCROrderEventTable
        DeleteAction        #Restricted
        Relation            #ItemdOfAlternateItem
      ENDPROPERTIES
      
      #MCRMessageAssociation(InventTable)
      PROPERTIES
        Table               #MCRMessageAssociation
        DeleteAction        #Cascade
        Relation            #InventTable
      ENDPROPERTIES
      
      #MCRItemSalesControl(InventTable)
      PROPERTIES
        Table               #MCRItemSalesControl
        DeleteAction        #Restricted
        Relation            #InventTable
      ENDPROPERTIES
      
      #MCRInstallmentSetup(InventTable)
      PROPERTIES
        Table               #MCRInstallmentSetup
        DeleteAction        #Restricted
        Relation            #InventTable
      ENDPROPERTIES
      
      #MCRHistSalesLine(InventTableOrig)
      PROPERTIES
        Table               #MCRHistSalesLine
        DeleteAction        #Restricted
        Relation            #InventTableOrig
      ENDPROPERTIES
      
      #MCRHistSalesLine(InventTable)
      PROPERTIES
        Table               #MCRHistSalesLine
        DeleteAction        #Restricted
        Relation            #InventTable
      ENDPROPERTIES
      
      #MCRCustCreditTable(InventTable)
      PROPERTIES
        Table               #MCRCustCreditTable
        DeleteAction        #Restricted
        Relation            #InventTable
      ENDPROPERTIES
      
      #MCRContinuityScheduleLine(InventTable)
      PROPERTIES
        Table               #MCRContinuityScheduleLine
        DeleteAction        #Restricted
        Relation            #InventTable
      ENDPROPERTIES
      
      #MCRContinuityCustLine(InventTable)
      PROPERTIES
        Table               #MCRContinuityCustLine
        DeleteAction        #Restricted
        Relation            #InventTable
      ENDPROPERTIES
      
      #PmfFormulaCoBy(InventTable)
      PROPERTIES
        Table               #PmfFormulaCoBy
        DeleteAction        #Restricted
        Relation            #InventTable
      ENDPROPERTIES
      
      #PmfBulkItemConv(BulkInventTable)
      PROPERTIES
        Table               #PmfBulkItemConv
        DeleteAction        #Cascade
        Relation            #BulkInventTable
      ENDPROPERTIES
      
      #PdsCatchWeightItem(InventTable)
      PROPERTIES
        Table               #PdsCatchWeightItem
        DeleteAction        #Cascade
        Relation            #InventTable
      ENDPROPERTIES
      
      #RetailLastInventTrans(InventTable)
      PROPERTIES
        Table               #RetailLastInventTrans
        DeleteAction        #Cascade
        Relation            #InventTable
      ENDPROPERTIES
      
      #PdsBatchAttribByItemCustomer(InventTable)
      PROPERTIES
        Table               #PdsBatchAttribByItemCustomer
        DeleteAction        #Cascade
        Relation            #InventTable
      ENDPROPERTIES
      
      #PdsBatchAttribByItem(InventTable)
      PROPERTIES
        Table               #PdsBatchAttribByItem
        DeleteAction        #Cascade
        Relation            #InventTable
      ENDPROPERTIES
      
      #PdsApprovedVendorList(InventTable)
      PROPERTIES
        Table               #PdsApprovedVendorList
        DeleteAction        #Cascade
        Relation            #InventTable
      ENDPROPERTIES
      
      #TaxInventVATCommodityCode_IN
      PROPERTIES
        Table               #TaxInventVATCommodityCode_IN
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #RetailInventTable
      PROPERTIES
        Table               #RetailInventTable
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #LeanCoverage(InventTable)
      PROPERTIES
        Table               #LeanCoverage
        DeleteAction        #Restricted
        Relation            #InventTable
      ENDPROPERTIES
      
      #KanbanJobPickingList(InventTable)
      PROPERTIES
        Table               #KanbanJobPickingList
        DeleteAction        #Restricted
        Relation            #InventTable
      ENDPROPERTIES
      
      #Kanban(InventTable)
      PROPERTIES
        Table               #Kanban
        DeleteAction        #Restricted
        Relation            #InventTable
      ENDPROPERTIES
      
      #InventSumDelta(InventTable)
      PROPERTIES
        Table               #InventSumDelta
        DeleteAction        #Cascade
        Relation            #InventTable
      ENDPROPERTIES
      
      #InventBaileeCalcTrans_RU
      PROPERTIES
        Table               #InventBaileeCalcTrans_RU
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #FEACCInventTable_RU
      PROPERTIES
        Table               #FEACCInventTable_RU
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #EximSionLine_IN
      PROPERTIES
        Table               #EximSionLine_IN
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #EximSionItemTable_IN
      PROPERTIES
        Table               #EximSionItemTable_IN
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #RetailInventAvailability(InventTable)
      PROPERTIES
        Table               #RetailInventAvailability
        DeleteAction        #Cascade
        Relation            #InventTable
      ENDPROPERTIES
      
      #RetailInventAvailabilityAction(InventTable)
      PROPERTIES
        Table               #RetailInventAvailabilityAction
        DeleteAction        #Cascade
        Relation            #InventTable
      ENDPROPERTIES
      
      #BOM
      PROPERTIES
        Table               #BOM
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #BOMVersion
      PROPERTIES
        Table               #BOMVersion
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #CommissionCalc
      PROPERTIES
        Table               #CommissionCalc
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #CustInvoiceTrans
      PROPERTIES
        Table               #CustInvoiceTrans
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #CustVendExternalItem
      PROPERTIES
        Table               #CustVendExternalItem
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #DocuRef
      PROPERTIES
        Table               #DocuRef
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #EcoResStorageDimensionGroupItem
      PROPERTIES
        Table               #EcoResStorageDimensionGroupItem
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #EcoResTrackingDimensionGroupItem
      PROPERTIES
        Table               #EcoResTrackingDimensionGroupItem
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #ExtCodeValueTable
      PROPERTIES
        Table               #ExtCodeValueTable
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #ForecastPurch
      PROPERTIES
        Table               #ForecastPurch
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #ForecastSales
      PROPERTIES
        Table               #ForecastSales
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #InventDimCombination
      PROPERTIES
        Table               #InventDimCombination
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #InventItemBarcode
      PROPERTIES
        Table               #InventItemBarcode
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #InventItemGroupItem
      PROPERTIES
        Table               #InventItemGroupItem
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #InventItemGTIN
      PROPERTIES
        Table               #InventItemGTIN
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #InventItemInventSetup
      PROPERTIES
        Table               #InventItemInventSetup
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #InventItemLocation
      PROPERTIES
        Table               #InventItemLocation
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #InventItemPrice
      PROPERTIES
        Table               #InventItemPrice
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #InventItemPriceSim
      PROPERTIES
        Table               #InventItemPriceSim
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #InventItemPurchSetup
      PROPERTIES
        Table               #InventItemPurchSetup
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #InventItemSalesSetup
      PROPERTIES
        Table               #InventItemSalesSetup
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #InventItemSetupSupplyType
      PROPERTIES
        Table               #InventItemSetupSupplyType
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #InventJournalTrans
      PROPERTIES
        Table               #InventJournalTrans
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #InventModelGroupItem
      PROPERTIES
        Table               #InventModelGroupItem
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #InventPosting
      PROPERTIES
        Table               #InventPosting
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #InventProdcomSetup
      PROPERTIES
        Table               #InventProdcomSetup
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #InventSum
      PROPERTIES
        Table               #InventSum
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #InventTableModule
      PROPERTIES
        Table               #InventTableModule
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #InventTestAssociationTable
      PROPERTIES
        Table               #InventTestAssociationTable
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #InventTestItemQualityGroup
      PROPERTIES
        Table               #InventTestItemQualityGroup
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #InventTrans
      PROPERTIES
        Table               #InventTrans
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #JournalizingDefinitionPayablesTrans
      PROPERTIES
        Table               #JournalizingDefinitionPayablesTrans
      ENDPROPERTIES
      
      #PriceDiscTable
      PROPERTIES
        Table               #PriceDiscTable
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #ProdBOM
      PROPERTIES
        Table               #ProdBOM
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #ProdTable
      PROPERTIES
        Table               #ProdTable
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #PurchLine
      PROPERTIES
        Table               #PurchLine
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #PurchPriceTolerance
      PROPERTIES
        Table               #PurchPriceTolerance
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #ReqItemTable
      PROPERTIES
        Table               #ReqItemTable
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #ReqTrans
      PROPERTIES
        Table               #ReqTrans
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #RouteOpr
      PROPERTIES
        Table               #RouteOpr
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #RouteVersion
      PROPERTIES
        Table               #RouteVersion
        DeleteAction        #Cascade
      ENDPROPERTIES
      
      #SalesLine
      PROPERTIES
        Table               #SalesLine
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #SalesQuotationLine(InventTable)
      PROPERTIES
        Table               #SalesQuotationLine
        DeleteAction        #Restricted
        Relation            #InventTable
      ENDPROPERTIES
      
      #VendInvoiceTrans
      PROPERTIES
        Table               #VendInvoiceTrans
        DeleteAction        #Restricted
      ENDPROPERTIES
      
      #VendItemMatchingPolicy
      PROPERTIES
        Table               #VendItemMatchingPolicy
        DeleteAction        #Cascade
      ENDPROPERTIES
      
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #approximateTaxValue_BR
        #/// <summary>
        #/// Retrieves the approximate tax value for the current item
        #/// </summary>
        #/// <returns>
        #/// The approximate tax value for the current item
        #/// </returns>
        #public ApproximateTaxValue_BR approximateTaxValue_BR()
        #{
        #    if (this.ApproxTaxValue_BR)
        #    {
        #        return this.ApproxTaxValue_BR;
        #    }
        #    else if (this.ExceptionCode_BR)
        #    {
        #        return this.TaxationOrigin_BR == FITaxationOrigin_BR::National ?
        #                                  ExceptionCodeTable_BR::approximateTaxValueNational(this.ExceptionCode_BR, this.TaxFiscalClassification_BR)
        #                                : ExceptionCodeTable_BR::approximateTaxValueImported(this.ExceptionCode_BR, this.TaxFiscalClassification_BR);
        #
        #    }
        #    else
        #    {
        #        return this.TaxationOrigin_BR == FITaxationOrigin_BR::National ?
        #                                              TaxFiscalClassification_BR::approximateTaxValueNational(this.TaxFiscalClassification_BR)
        #                                            : TaxFiscalClassification_BR::approximateTaxValueImported(this.TaxFiscalClassification_BR);
        #    }
        #}
      ENDSOURCE
      SOURCE #bomCalcGroup
        #public BOMCalcGroup bomCalcGroup()
        #{
        #    BOMCalcGroup    bomCalcGroup;
        #
        #    if (this.bomCalcGroupId)
        #    {
        #        bomCalcGroup = BOMCalcGroup::find(this.bomCalcGroupId);
        #
        #        if (!bomCalcGroup)
        #        {
        #            warning(strFmt("@SYS94157", this.bomCalcGroupId, this.ItemId), '', InventTable::infoActionBOMCalcGroup(this.ItemId, this));
        #        }
        #    }
        #
        #    // fallback to inventory parameters if not found on items
        #    if (!bomCalcGroup)
        #    {
        #        bomCalcGroup = BOMParameters::bomCalcGroup();
        #    }
        #
        #    return bomCalcGroup;
        #}
      ENDSOURCE
      SOURCE #bomId
        #public BOMId bomId(
        #    TransDate   _searchDate,
        #    FromQty     _searchQty,
        #    InventDim   _searchInventDim)
        #{
        #    return BOMVersion::findActive(this.ItemId,_searchDate, _searchQty, _searchInventDim).bomId;
        #}
      ENDSOURCE
      SOURCE #bomIdConstruction
        #public BOMId bomIdConstruction(
        #    BOMRouteVersionSelect   _bomRouteVersionSelect,
        #    TransDate               _searchDate,
        #    FromQty                 _searchQty,
        #    InventDim               _searchInventDim)
        #{
        #
        #    BOMVersion  bomVersion;
        #
        #    if (!this.RecId || (!this.isBOMAllowed() && !this.isFormulaAllowed()))
        #    {
        #        return '';
        #    }
        #
        #    if (_bomRouteVersionSelect == BOMRouteVersionSelect::Active || ! isConfigurationkeyEnabled(configurationKeyNum(BOMVersion)))
        #    {
        #        return this.bomId(_searchDate, _searchQty, _searchInventDim);
        #    }
        #
        #    select firstonly RecId, bomId from bomVersion
        #        where bomVersion.ItemId         == this.ItemId &&
        #              bomVersion.Construction   == NoYes::Yes;
        #
        #    if (_bomRouteVersionSelect == BOMRouteVersionSelect::Selected)
        #    {
        #        return bomVersion.bomId;
        #    }
        #
        #    return bomVersion.RecId ? bomVersion.bomId : this.bomId(_searchDate, _searchQty, _searchInventDim);
        #}
        #
      ENDSOURCE
      SOURCE #bomUnitId
        #public BOMUnitId bomUnitId()
        #{
        #    if (this.bomUnitId)
        #    {
        #        return this.bomUnitId;
        #    }
        #
        #    return this.inventUnitId();
        #}
      ENDSOURCE
      SOURCE #categoryName
        #/// <summary>
        #/// Display the category name of the selected category record.
        #/// </summary>
        #/// <returns>
        #/// The category name that was selected from the category lookup.
        #/// </returns>
        #public display EcoResCategoryName categoryName()
        #{
        #    return EcoResProductCategory::findCategoryByProduct(this.Product).Name;
        #}
      ENDSOURCE
      SOURCE #checkAltInventDimCombination
        #private boolean checkAltInventDimCombination()
        #{
        #    #InventDimDevelop
        #
        #    InventDim inventDim;
        #
        #    setPrefix("@SYS21956");
        #
        #    inventDim.ConfigId      = this.AltConfigId;
        #    inventDim.InventSizeId  = this.AltInventSizeId;
        #    inventDim.InventColorId = this.AltInventColorId;
        #    inventDim.InventStyleId = this.AltInventStyleId;
        #
        #    return inventDim.validateWriteProductDimensions(this.AltItemId,true);
        #}
      ENDSOURCE
      SOURCE #checkColorId
        #public boolean checkColorId(EcoResItemColorName _inventColorId, boolean _silence = false)
        #{
        #    if (!this.colorActive())
        #    {
        #        return true;
        #    }
        #
        #    return this.checkProductVariant(fieldnum(InventDim, InventColorId), _inventColorId, _silence);
        #}
      ENDSOURCE
      SOURCE #checkConfigId
        #public boolean checkConfigId(EcoResItemConfigurationName _configId, boolean _silence = false)
        #{
        #    if (! this.configActive())
        #    {
        #        return true;
        #    }
        #
        #    return this.checkProductVariant(fieldnum(InventDim, ConfigId), _configId, _silence);
        #}
        #
      ENDSOURCE
      SOURCE #checkCostGroupId
        #/// <summary>
        #/// Indicates whether the cost group type of the current cost group is correct with regard to the
        #/// product type.
        #/// </summary>
        #/// <returns>
        #/// true if cost group type is correct; otherwise, false.
        #/// </returns>
        #public boolean checkCostGroupId()
        #{
        #    boolean         ret = true;
        #
        #    if (this.CostGroupId)
        #    {
        #        ret = this.inventItemType().isCostGroupTypeValid();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkDimGroupForBatch
        #/// <summary>
        #/// Specifies whether the assigned dimension group is valid for the item.
        #/// </summary>
        #/// <returns>
        #/// True if the assigned dimension group is valid; otherwise, false.
        #/// </returns>
        #public boolean checkDimGroupForBatch()
        #{
        #    boolean ret = true;
        #
        #    if (#PdsShelfEnabled)
        #    {
        #        if ((select firstonly inventBatch
        #                where  inventBatch.ItemId == this.ItemId
        #                    && inventBatch.ExpDate).RecId != 0)
        #        {
        #            if (!this.isItemBatchActivated())
        #            {
        #                ret = checkFailed(strFmt("@PRO961", fieldPName(InventDim,InventBatchId)));
        #            }
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkFiscalLIFOValuePrevYear
        #private boolean checkFiscalLIFOValuePrevYear()
        #{
        #    InventFiscalLIFOJournalTable    inventFiscalLIFOJournalTable;
        #    InventFiscalLIFOJournalTrans    inventFiscalLIFOJournalTrans;
        #
        #    if (!this.ItemId)
        #    {
        #        return false;
        #    }
        #
        #    select sum(QtyReceipt), sum(QtyIssue) from inventFiscalLIFOJournalTrans
        #        group by ItemId
        #        where inventFiscalLIFOJournalTrans.ItemId    == this.ItemId
        #           && inventFiscalLIFOJournalTrans.ItemGroup == ItemGroup::Item
        #        exists join inventFiscalLIFOJournalTable
        #        where inventFiscalLIFOJournalTable.JournalId         == inventFiscalLIFOJournalTrans.JournalId
        #           && inventFiscalLIFOJournalTable.JournalType       == InventFiscalLIFOJournalType::FinalReport
        #           && inventFiscalLIFOJournalTable.FinalReportClosed == NoYes::Yes;
        #
        #    return (inventFiscalLIFOJournalTrans.QtyReceipt - inventFiscalLIFOJournalTrans.QtyIssue) != 0;
        #}
      ENDSOURCE
      SOURCE #checkICMSOnService_BR
        #/// <summary>
        #/// This method checks if the field ICMS on Service is checke even when the Item Type is not Service
        #/// </summary>
        #/// <returns>
        #/// Returns a error message
        #/// </returns>
        #// <GBR>
        #public boolean checkICMSOnService_BR()
        #{
        #    boolean ret;
        #    ;
        #
        #    ret = true;
        #
        #    if (this.ItemType != ItemType::Service && this.icmsOnService_BR == NoYes::Yes)
        #    {
        #        ret = checkFailed (strFmt("@SYS92012", fieldPName(InventTable, icmsOnService_BR)));
        #    }
        #
        #    return ret;
        #}
        #// </GBR>
      ENDSOURCE
      SOURCE #checkInventDimCombination
        #public boolean checkInventDimCombination()
        #{
        #    return this.checkStandardInventDimCombination() && this.checkAltInventDimCombination();
        #}
      ENDSOURCE
      SOURCE #checkMarkupCode_RU
        #public void checkMarkupCode_RU()
        #{
        #    MarkupTable markupTable;
        #
        #    if (this.isMarkupCodeEnabled_RU() && this.MarkupCode_RU)
        #    {
        #        markupTable = MarkupTable::find(MarkupModuleType::Vend, this.MarkupCode_RU);
        #
        #        if (markupTable.CustType != MarkupType::LedgerAccount || markupTable.VendType != MarkupType::CustVend)
        #        {
        #            this.MarkupCode_RU = '';
        #        }
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #checkPhantom
        #/// <summary>
        #/// Specifies whether the item is a phantom item.
        #/// </summary>
        #/// <returns>
        #/// True if the item is a phantom item; otherwise, false.
        #/// </returns>
        #public boolean checkPhantom()
        #{
        #    return this.Phantom;
        #}
      ENDSOURCE
      SOURCE #checkPlanningItemCost
        #/// <summary>
        #/// Specifies whether the cost allocation for a planning item is valid.
        #/// </summary>
        #/// <param name="_bomVersion">
        #/// The <c>BOMVersion</c> record to check the cost allocation for.
        #/// </param>
        #/// <returns>
        #/// True if the cost allocation is valid; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// The cost allocation of co-products associated with formula version for a planning item
        #/// must add up to 100% as the planning item cannot have any cost allocated to it.
        #/// </remarks>
        #public server boolean checkPlanningItemCost(BOMVersion _bomVersion = null)
        #{
        #    BOMVersion                  bomVersion;
        #    boolean                     ret = true;
        #    PmfCostAllocationPct        pct;
        #    #define.PMF_DEC4ROUND(4)
        #
        #    if (this.PmfProductType == PmfProductType::MainItem)
        #    {
        #        if (!_bomVersion)
        #        {
        #            while select bomId from bomVersion
        #                where bomVersion.ItemId == this.ItemId
        #                    && bomVersion.Approved  == NoYes::Yes
        #                    && bomVersion.Active    == NoYes::Yes
        #            {
        #                pct = bomVersion.pmfTotalCostAlloc();
        #
        #                if (decRound(100-pct,#PMF_DEC4Round)!= 0)
        #                {
        #                    ret = checkFailed(strFmt("@PRO2332",bomVersion.bomId));
        #                }
        #            }
        #        }
        #        else
        #        {
        #            pct = _bomVersion.pmfTotalCostAlloc();
        #
        #            if (decRound(100-pct,#PMF_DEC4Round)!= 0)
        #            {
        #                ret = checkFailed(strFmt("@PRO2332",bomVersion.bomId));
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkProductType
        #/// <summary>
        #/// Specifies whether the assigned production type is valid for service or purchased items.
        #/// </summary>
        #/// <returns>
        #/// True if the production type is valid; otherwise, false.
        #/// </returns>
        #public boolean checkProductType()
        #{
        #    boolean     ret = true;
        #
        #    if (#PmfEnabled)
        #    {
        #        if (this.PmfProductType != PmfProductType::None)
        #        {
        #            ret = false;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkProductVariant
        #private server boolean checkProductVariant(FieldId _dimensionField, str _dimensionValue, boolean _silence = false)
        #{
        #    boolean         result;
        #    container       key = [this.Product, _dimensionField, _dimensionValue];
        #    UnknownNoYes    cache = SysTransactionScopeCache::get(funcName(), key, UnknownNoYes::Unknown);
        #
        #
        #    switch (cache)
        #    {
        #        case UnknownNoYes::Yes:
        #            result = true;
        #            break;
        #
        #        case UnknownNoYes::Unknown:
        #            result = EcoResProductVariantDimValue::newEcoResProductVariantDimValue(_dimensionField).checkExist(this.Product, _dimensionValue, _silence);
        #
        #            //Only cache when true, to avoid suppressing error messages for future callers
        #            if (result)
        #            {
        #                SysTransactionScopeCache::set(funcName(), key, UnknownNoYes::Yes);
        #            }
        #            break;
        #
        #        default:
        #            Debug::assert(false); // Should never get here
        #            break;
        #    }
        #
        #    return result;
        #}
      ENDSOURCE
      SOURCE #checkProjCategoryId
        #public boolean checkProjCategoryId()
        #{
        #    boolean          ret            = true;
        #    ProjCategory     projCategory;
        #
        #    if (this.ProjCategoryId)
        #    {
        #        projCategory = ProjCategory::find(this.ProjCategoryId);
        #
        #        if (projCategory.CategoryType != ProjCategoryType::Item)
        #        {
        #            ret = checkFailed(strFmt("@SYS54897",this.ProjCategoryId));
        #        }
        #        ret = ret && projCategory.validateIfInactiveAllowed();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkRefInventTrans
        #public boolean checkRefInventTrans(InventTrans _inventTrans)
        #{
        #    if (this.ItemId != _inventTrans.ItemId)
        #    {
        #        return checkFailed(strFmt("@SYS7549"));
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkSizeId
        #public boolean checkSizeId(EcoResItemSizeName _inventSizeId, boolean _silence = false)
        #{
        #    if (!this.sizeActive())
        #    {
        #        return true;
        #    }
        #
        #    return this.checkProductVariant(fieldnum(InventDim, InventSizeId), _inventSizeId, _silence);
        #}
      ENDSOURCE
      SOURCE #checkStandardInventDimCombination
        #private boolean checkStandardInventDimCombination()
        #{
        #    InventDim inventDim;
        #
        #    setPrefix("@SYS73762");
        #
        #    inventDim.InventDimFieldsMap::initProductDimensionsFrom(this);
        #
        #    return inventDim.validateWriteInventDimCombination(this.ItemId,false);
        #}
      ENDSOURCE
      SOURCE #checkStyleId
        #/// <summary>
        #///    Checks if the specified style name is valid for this item.
        #/// </summary>
        #/// <param name="_inventStyleId">
        #///    The style name
        #/// </param>
        #/// <returns>
        #///    true if the style is valid; otherwise, false.
        #/// </returns>
        #public boolean checkStyleId(EcoResItemStyleName _inventStyleId)
        #{
        #    if (!this.styleActive())
        #    {
        #        return true;
        #    }
        #
        #    return this.checkProductVariant(fieldnum(InventDim, InventStyleId), _inventStyleId, false);
        #}
      ENDSOURCE
      SOURCE #checkValid
        #public boolean checkValid(ItemId _itemId)
        #{
        #    boolean         ok = true;
        #
        #    if (! _itemId)
        #    {
        #        ok = checkFailed("@SYS16661");
        #    }
        #
        #    if (! this && _itemId)
        #    {
        #        ok = checkFailed(strFmt(InventTable::txtNotExist(), _itemId) );
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #colorActive
        #public display boolean colorActive()
        #{
        #    return EcoResProductDimGroupSetup::newItemId(this.ItemId).getFieldSetup(fieldNum(InventDim, InventColorId)).isActive();
        #}
      ENDSOURCE
      SOURCE #companyInfo
        #/// <summary>
        #/// Retrieves the <c>CompanyInfo</c> record associated with the current record.
        #/// </summary>
        #/// <returns>
        #/// The <c>CompanyInfo</c> record.
        #/// </returns>
        #public CompanyInfo companyInfo()
        #{
        #    return CompanyInfo::findDataArea(this.company());
        #}
      ENDSOURCE
      SOURCE #configActive
        #public display boolean configActive()
        #{
        #    return EcoResProductDimGroupSetup::newItemId(this.ItemId).getFieldSetup(fieldNum(InventDim, ConfigId)).isActive();
        #}
      ENDSOURCE
      SOURCE #copyDimension
        #/// <summary>
        #/// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
        #/// </summary>
        #/// <param name="_defaultDimension">
        #/// A dimension set to apply to the <c>defaultDimension</c> field on this table.
        #/// </param>
        #/// <param name="_dimensionCopy">
        #/// A <c>dimensionCopy</c> object that was initialized with the current buffer; optional.
        #/// </param>
        #/// <returns>
        #/// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
        #/// </returns>
        #/// <remarks>
        #/// This method makes sure that potential linked dimensions are not overwritten.
        #/// </remarks>
        #
        #public DimensionDefault copyDimension(
        #    DimensionDefault _defaultDimension,
        #    DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,
        #                                                                  this.companyInfo().RecId
        #                                                                  )
        #    )
        #{
        #    return _dimensionCopy.copy(_defaultDimension);
        #}
      ENDSOURCE
      SOURCE #costGroup
        #/// <summary>
        #/// Retrieves the cost group.
        #/// </summary>
        #/// <returns>
        #/// The cost group.
        #/// </returns>
        #/// <remarks>
        #/// If the cost group on the item is blank, the default cost group is returned.
        #/// </remarks>
        #public CostGroupId costGroup()
        #{
        #    if (this.CostGroupId)
        #    {
        #        return this.CostGroupId;
        #    }
        #    return this.inventItemType().defaultCostGroupId();
        #}
      ENDSOURCE
      SOURCE #costPcsPrice
        #public server display CostPrice costPcsPrice(
        #    InventDimId             _inventDimId                = '',   // can be = '' if setting the _inventDim buffer
        #    InventDim               _inventDim                  = null, // set this parameter for better performance if avail
        #    InventTableModule       _inventTableModuleInvent    = null, // set this parameter for better performance if avail
        #    PriceDate               _priceDate                  = systemDateGet(),
        #    boolean                 _throwError                 = false)
        #{
        #    str         cacheScope;
        #    container   cacheKey;
        #    container   cacheValue;
        #    container   notFoundValue = [''];
        #    CostPrice   result;
        #
        #    cacheScope = tableStr(InventTable) + ":" + tableMethodStr(InventTable, costPcsPrice);
        #    cacheKey = [this.ItemId,
        #                _inventDimId ? _inventDimId : (_inventDim ? _inventDim.InventDimId : ''),
        #                _inventTableModuleInvent ? enum2Value(_inventTableModuleInvent.ModuleType) : '',
        #                _priceDate];
        #    cacheValue = SysTransactionScopeCache::get(cacheScope, cacheKey, notFoundValue);
        #    if (cacheValue == notFoundValue)
        #    {
        #        result = this.inventCostPriceMap(_inventDimId,_inventDim,_inventTableModuleInvent, _priceDate ? _priceDate : systemDateGet(), '', _throwError).pcsPrice();
        #        SysTransactionScopeCache::set(cacheScope, cacheKey, [result]);
        #    }
        #    else
        #    {
        #        [result] = cacheValue;
        #    }
        #    return result;
        #}
      ENDSOURCE
      SOURCE #costPcsPriceSecCur_RU
        #//BP deviation documented
        #public server display CostPriceSecCur_RU costPcsPriceSecCur_RU(
        #    InventDimId       _inventDimId             = '',
        #    InventDim         _inventDim               = null,
        #    InventTableModule _inventTableModuleInvent = null,
        #    PriceDate         _priceDate               = systemDateGet(),
        #    boolean           _throwError              = false)
        #{
        #    str         cacheScope;
        #    container   cacheKey;
        #    container   cacheValue;
        #    container   notFoundValue = [''];
        #    CostPrice   result;
        #
        #    cacheScope = tableStr(InventTable) + ":" + tableMethodStr(InventTable, costPcsPriceSecCur_RU);
        #    cacheKey = [this.ItemId,
        #                _inventDimId ? _inventDimId : (_inventDim ? _inventDim.InventDimId : ''),
        #                _inventTableModuleInvent ? enum2Value(_inventTableModuleInvent.ModuleType) : '',
        #                _priceDate];
        #
        #    cacheValue = SysTransactionScopeCache::get(cacheScope, cacheKey, notFoundValue);
        #    if (cacheValue == notFoundValue)
        #    {
        #        result = this.inventCostPriceMapSecCur_RU(_inventDimId, _inventDim, _inventTableModuleInvent, _priceDate ? _priceDate : systemDateGet(), '', _throwError).pcsPriceSecCur_RU();
        #        SysTransactionScopeCache::set(cacheScope, cacheKey, [result]);
        #    }
        #    else
        #    {
        #        [result] = cacheValue;
        #    }
        #
        #    return result;
        #}
      ENDSOURCE
      SOURCE #custVendExternalItemDescription
        #private server CustVendExternalItemDescription custVendExternalItemDescription(
        #    ModuleInventCustVend    _moduleInventCustVend,
        #    CustVendAC              _custVendAccount)
        #{
        #    CustVendExternalItemDescription custVendExternalItemDescription;
        #    InventDim                       inventDimBlank;
        #
        #    if (_moduleInventCustVend == ModuleInventCustVend::Cust)
        #    {
        #        custVendExternalItemDescription = new CustExternalItemDescription(this.ItemId, inventDimBlank, _custVendAccount);
        #    }
        #    else
        #    {
        #        custVendExternalItemDescription = new VendExternalItemDescription(this.ItemId, inventDimBlank, _custVendAccount);
        #    }
        #    if (_custVendAccount)
        #    {
        #        custVendExternalItemDescription.findExternalDescription();
        #    }
        #
        #    return custVendExternalItemDescription;
        #}
      ENDSOURCE
      SOURCE #defaultCustVendExternalItemDescription
        #private server CustVendExternalItemDescription defaultCustVendExternalItemDescription()
        #{
        #    ModuleInventCustVend    moduleType;
        #    CustVendAC              custVendAccount;
        #
        #    if (EP::isVendor(true))
        #    {
        #        moduleType = ModuleInventCustVend::Vend;
        #        custVendAccount = DirPersonUser::current().vendAccount();
        #    }
        #    else
        #    {
        #        if (EP::isCustomer(true))
        #        {
        #            moduleType = ModuleInventCustVend::Cust;
        #            custVendAccount = DirPersonUser::current().custAccount();
        #        }
        #        else
        #        {
        #            moduleType = ModuleInventCustVend::Invent;
        #            custVendAccount = '';
        #        }
        #    }
        #
        #    return this.custVendExternalItemDescription(moduleType, custVendAccount);
        #}
      ENDSOURCE
      SOURCE #defaultExternalItemDescription
        #/// <summary>
        #///     Retrieves an external description of an item.
        #/// </summary>
        #/// <returns>
        #///     If a current user is a vendor then a description for a vendor is returned; otherwise, a description for a customer is returned.
        #/// </returns>
        #[SysClientCacheDataMethodAttribute(true)]
        #public client server display ExternalItemFreeTxt defaultExternalItemDescription()
        #{
        #    return this.defaultCustVendExternalItemDescription().externalItemFreeTxt();
        #}
      ENDSOURCE
      SOURCE #defaultExternalItemId
        #/// <summary>
        #///     Retrieves an external ID of an item.
        #/// </summary>
        #/// <returns>
        #///     If a current user is a vendor then an ID for a vendor is returned; otherwise, an ID for a customer is returned.
        #/// </returns>
        #[SysClientCacheDataMethodAttribute(true)]
        #public client server display ExternalItemId defaultExternalItemId()
        #{
        #    return this.defaultCustVendExternalItemDescription().externalItemId();
        #}
      ENDSOURCE
      SOURCE #defaultLoadHeight
        #public WMSHeight defaultLoadHeight(InventQty _qty
        #    , PdsCWInventQty _cwQty = 0
        #    )
        #{
        #    Integer  layers;
        #
        #    if (this.QtyPerLayer <= 0)
        #    {
        #        this.QtyPerLayer = 1;
        #    }
        #    if (pdsIsCWItem(this.ItemId))
        #    {
        #        if (this.PdsCWWMSQtyPerLayer <= 0)
        #        {
        #            this.PdsCWWMSQtyPerLayer = 1;
        #        }
        #        layers = real2int(trunc(_cwQty / this.PdsCWWMSQtyPerLayer));
        #        if (layers * this.PdsCWWMSQtyPerLayer < _cwQty)
        #        {
        #            layers++;
        #        }
        #    }
        #    else
        #    {
        #        layers = real2int(trunc(_qty / this.QtyPerLayer));
        #        if (layers * this.QtyPerLayer < _qty)
        #        {
        #            layers++;
        #        }
        #    }
        #
        #    return layers * this.GrossHeight;
        #}
      ENDSOURCE
      SOURCE #defaultProductDescription
        #/// <summary>
        #/// Retrieves the description of a product that this item represents.
        #/// </summary>
        #/// <returns>
        #/// The description of a product in the company language.
        #/// </returns>
        #[SysClientCacheDataMethodAttribute(true)]
        #public client server display EcoResDescription defaultProductDescription()
        #{
        #    return this.productDescription(CompanyInfo::languageId());
        #}
      ENDSOURCE
      SOURCE #defaultProductName
        #/// <summary>
        #/// Retrieves the name of a product that this item represents.
        #/// </summary>
        #/// <returns>
        #/// A name of a product in the company language.
        #/// </returns>
        #[SysClientCacheDataMethodAttribute(true)]
        #public client server display EcoResProductName defaultProductName()
        #{
        #    return this.productName(CompanyInfo::languageId());
        #}
      ENDSOURCE
      SOURCE #delete
        #public void delete()
        #{
        #    BOMTable        bomTable;
        #    BOMVersion      bomVersion;
        #    BOMVersion      bomVersion2;
        #
        #    // Check to see if the associated dimension attribute value has been used
        #    // in a way that would prevent deletion.
        #    if (!DimensionValidation::canDeleteEntityValue(this))
        #    {
        #        throw error(strFmt("@SYS134392", this.ItemId));
        #    }
        #
        #    ttsbegin;
        #
        #    // Update the associated dimension attribute value.
        #    DimensionAttributeValue::updateForEntityValueDelete(this);
        #
        #    if (!isConfigurationkeyEnabled(configurationKeyNum(BOMVersion)) && this.inventItemType().canHaveBOM())
        #    {
        #        while select bomVersion
        #                group by bomId
        #                where bomVersion.ItemId == this.ItemId
        #           notexists join bomVersion2
        #                where bomVersion2.bomId == bomVersion.bomId &&
        #                      bomVersion2.ItemId != this.ItemId
        #        {
        #            delete_from bomTable
        #                where bomTable.bomId == bomVersion.bomId;
        #        }
        #    }
        #
        #    super();
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #editTMSInventEnabled
        #/// <summary>
        #/// Gets and sets whether the item is TMS enabled
        #/// </summary>
        #/// <param name="_set">
        #/// A <c>TMSEnabled</c> indicating whether to set the value.
        #/// </param>
        #/// <param name="_tmsEnabled">
        #/// The new TMS enabled value when <paramref name="_set"/> is true.
        #/// </param>
        #/// <returns>
        #/// true if the item is TMS enabled; otherwise, false.
        #/// </returns>
        #[SysClientCacheDataMethodAttribute(true)]
        #public edit TMSEnabled editTMSInventEnabled(boolean _set, TMSEnabled _tmsEnabled)
        #{
        #    if (_set)
        #    {
        #        TMSInventEnabled::updateItem(this.ItemId, _tmsEnabled);
        #    }
        #
        #    return TMSInventEnabled::exist(this.ItemId);
        #}
      ENDSOURCE
      SOURCE #existsVendInvoiceTrans_RU
        #public boolean existsVendInvoiceTrans_RU()
        #{
        #    return (select firstonly RecId from vendInvoiceTrans
        #                where vendInvoiceTrans.ItemId == this.ItemId).RecId != 0;
        #}
        #
      ENDSOURCE
      SOURCE #externalItemDescription
        #/// <summary>
        #/// Retrieves the external description of an item.
        #/// </summary>
        #/// <param name="_moduleInventCustVend">
        #/// The module for which to retrieve a description.
        #/// </param>
        #/// <param name="_custVendAccount">
        #/// A customer or vendor account.
        #/// </param>
        #/// <returns>
        #/// An item description for a customer or a vendor.
        #/// </returns>
        #public client server ExternalItemFreeTxt externalItemDescription(
        #    ModuleInventCustVend    _moduleInventCustVend,
        #    CustVendAC              _custVendAccount)
        #{
        #    return this.custVendExternalItemDescription(
        #        _moduleInventCustVend,
        #        _custVendAccount).externalItemFreeTxt();
        #}
      ENDSOURCE
      SOURCE #externalItemId
        #/// <summary>
        #/// Retrieves the external ID of an item.
        #/// </summary>
        #/// <param name="_moduleInventCustVend">
        #/// A module for which to retrieve an external ID.
        #/// </param>
        #/// <param name="_custVendAccount">
        #/// A customer or vendor account.
        #/// </param>
        #/// <returns>
        #/// An item ID for a customer or a vendor.
        #/// </returns>
        #public client server ExternalItemId externalItemId(
        #    ModuleInventCustVend    _moduleInventCustVend,
        #    CustVendAC              _custVendAccount)
        #{
        #    return this.custVendExternalItemDescription(
        #        _moduleInventCustVend,
        #        _custVendAccount).externalItemId();
        #}
      ENDSOURCE
      SOURCE #findBomAndRouteForCoProd
        #/// <summary>
        #/// Finds a BOM and Route data for a co-product based on the search criteria.
        #/// </summary>
        #/// <param name="_bomRouteVersionSelect">
        #/// A specified <c>BOMRouteVersionSelect</c> BOM search principle.
        #/// </param>
        #/// <param name="_searchDate">
        #/// A specified date search criterion.
        #/// </param>
        #/// <param name="_searchQty">
        #///  A specified quantity search criterion.
        #/// </param>
        #/// <param name="_searchInventDim">
        #///  A specified <c>InventDim</c> search criterion.
        #/// </param>
        #/// <returns>
        #/// A <c>container</c> with a BOM and Route data for a co-product based on the search criteria.
        #/// </returns>
        #public container findBomAndRouteForCoProd(
        #    BOMRouteVersionSelect   _bomRouteVersionSelect,
        #    TransDate               _searchDate,
        #    FromQty                 _searchQty,
        #    InventDim               _searchInventDim)
        #{
        #    BOMVersion          bomVersion;
        #    RouteVersion        routeVersion;
        #    PmfFormulaCoBy      pmfFormulaCoBy;
        #    InventDim           inventDimCoBy;
        #    InventDimParm       inventDimParmCoBy;
        #    InventQty           planningItemQty;
        #
        #    if (#PmfEnabled && this.PmfProductType == PmfProductType::Co_Product && this.PmfPlanningItemId)
        #    {
        #        inventDimParmCoBy.initFromInventDim(_searchInventDim);
        #
        #        // find out the suitable route and BOM for the co-product.
        #        if (_bomRouteVersionSelect != BOMRouteVersionSelect::Active)
        #        {
        #            select firstonly bomVersion
        #                where bomVersion.ItemId == this.PmfPlanningItemId
        #                   && bomVersion.Construction == NoYes::Yes
        #                    join CostAllocationPct, CoByQty, CoByQtySerie, RecId from pmfFormulaCoBy
        #                        where pmfFormulaCoBy.ItemId             == this.ItemId
        #                           && pmfFormulaCoBy.bomVersionRefRecId == bomVersion.RecId
        #                           && pmfFormulaCoBy.CoByQty > 0
        #                        #InventDimExistsJoin(pmfFormulaCoBy.InventDimId, inventDimCoby, _searchInventDim, inventDimParmCoBy);
        #
        #            if (bomVersion)
        #            {
        #                select firstonly RouteId from routeVersion
        #                    order by FromQty
        #                    where routeVersion.ItemId == this.PmfPlanningItemId
        #                       && routeVersion.Construction == NoYes::Yes
        #                       && !(routeVersion.FromDate  > bomVersion.ToDate)
        #                       && !(routeVersion.ToDate    < bomVersion.FromDate)
        #                       && routeVersion.FromQty     >= bomVersion.FromQty;
        #            }
        #
        #            if (_bomRouteVersionSelect == BOMRouteVersionSelect::Selected)
        #            {
        #                return [bomVersion, routeVersion.RouteId, pmfFormulaCoBy];
        #            }
        #        }
        #
        #        if (!bomVersion || _bomRouteVersionSelect == BOMRouteVersionSelect::Active)
        #        {
        #            while select bomVersion
        #                order by FromQty desc
        #                where bomVersion.ItemId == this.PmfPlanningItemId
        #                   && bomVersion.Active == NoYes::Yes
        #                   && (bomVersion.FromDate  <= _searchDate || !bomVersion.FromDate)
        #                   && (bomVersion.ToDate    >= _searchDate || !bomVersion.ToDate)
        #                    join CostAllocationPct, CoByQty, CoByQtySerie, RecId from pmfFormulaCoBy
        #                        where pmfFormulaCoBy.ItemId             == this.ItemId
        #                           && pmfFormulaCoBy.bomVersionRefRecId == bomVersion.RecId
        #                           && pmfFormulaCoBy.CoByQty > 0
        #                        #InventDimExistsJoin(pmfFormulaCoBy.InventDimId, inventDimCoby, _searchInventDim, inventDimParmCoBy)
        #            {
        #                planningItemQty = _searchQty / (pmfFormulaCoBy.CoByQty / (pmfFormulaCoBy.CoByQtySerie ? pmfFormulaCoBy.CoByQtySerie : 1));
        #                if (bomVersion.FromQty <= planningItemQty)
        #                {
        #                    select firstonly RouteId from routeVersion
        #                            order by FromQty desc
        #                                where routeVersion.ItemId       == this.PmfPlanningItemId
        #                                   && bomVersion.Active         == NoYes::Yes
        #                                   && !(routeVersion.FromDate   > bomVersion.ToDate)
        #                                   && !(routeVersion.ToDate     < bomVersion.FromDate)
        #                                   && routeVersion.FromQty      <= bomVersion.FromQty;
        #                    break;
        #                }
        #            }
        #        }
        #    }
        #
        #    return [bomVersion, routeVersion.RouteId, pmfFormulaCoBy];
        #}
      ENDSOURCE
      SOURCE #getSalesPriceAgreement
        #public container getSalesPriceAgreement(
        #    InventDim           _inventDim,
        #    Qty                 _qty,
        #    UnitOfMeasureSymbol _unit,
        #    CustAccount         _accountNum,
        #    CurrencyCode        _currencyCode)
        #{
        #    return this.salesPriceAgreement(systemDateGet(), _inventDim, _qty, _unit, _accountNum, _currencyCode);
        #}
      ENDSOURCE
      SOURCE #grossVolume
        #public Volume grossVolume()
        #{
        #    return this.GrossDepth * this.GrossHeight * this.GrossWidth;
        #}
      ENDSOURCE
      SOURCE #grossWeight
        #public display ItemGrossWeight grossWeight()
        #{
        #    return this.NetWeight + this.TaraWeight;
        #}
      ENDSOURCE
      SOURCE #hasActiveAltItemId
        #/// <summary>
        #/// Specifies whether an active alternative item setup exists for this item.
        #/// </summary>
        #/// <returns>
        #/// true if an active alternative item setup exists for this item; otherwise, false.
        #/// </returns>
        #public boolean hasActiveAltItemId()
        #{
        #    return (this.AltItemId && this.UseAltItemId != ItemNumAlternative::Never);
        #}
      ENDSOURCE
      SOURCE #hasConfigs
        #public boolean hasConfigs()
        #{
        #    return EcoResProductVariantDimValue::newProductVariantDim_ConfigId().getDimValuesCount(this.Product) != 0;
        #}
      ENDSOURCE
      SOURCE #hasForecastPurch
        #public display ForecastHasPurch hasForecastPurch()
        #{
        #    return (select forecastPurch
        #                index hint ItemIdx
        #                where forecastPurch.ItemId == this.ItemId).RecId != 0;
        #}
      ENDSOURCE
      SOURCE #hasForecastSales
        #public display ForecastHasSales hasForecastSales()
        #{
        #    return (select forecastSales
        #                index hint ItemIdx
        #                where forecastSales.ItemId == this.ItemId).RecId != 0;
        #}
      ENDSOURCE
      SOURCE #hasInventTrans
        #/// <summary>
        #/// Specifies whether any inventory transactions exist for this item.
        #/// </summary>
        #/// <returns>
        #/// true if <c>InventTrans</c> table records exist for this item; otherwise false.
        #/// </returns>
        #public boolean hasInventTrans()
        #{
        #    return (select firstonly RecId from inventTrans where inventTrans.ItemId == this.ItemId).RecId != 0;
        #}
      ENDSOURCE
      SOURCE #hasProductDimensions
        #public client server boolean hasProductDimensions()
        #{
        #    InventDimParm   inventDimParm = EcoResProductDimGroupSetup::newInventTable(this).inventDimParmActiveDimensions();
        #
        #    return !inventDimParm.isAllFlagNo();
        #}
      ENDSOURCE
      SOURCE #hasTrackingDimensions
        #/// <summary>
        #///    Gets a value indicating whether any of the tracking dimensions are active or sales process active
        #/// </summary>
        #/// <returns>
        #///    True if at least one of the tracking dimensions is active or sales process active; otherwise, false.
        #/// </returns>
        #public client server boolean hasTrackingDimensions()
        #{
        #    InventDimParm inventDimParm = EcoResTrackingDimGroupSetupCache::active(this.trackingDimensionGroup());
        #    inventDimParm = InventDimParm::orParms(inventDimParm, EcoResTrackingDimGroupSetupCache::salesProcessActivated(this.trackingDimensionGroup()));
        #
        #    return !inventDimParm.isAllFlagNo();
        #}
      ENDSOURCE
      SOURCE #initFromEcoResProduct
        #/// <summary>
        #/// Initializes an <c>InventTable</c> record with the values from an <c>EcoResProduct</c> record.
        #/// </summary>
        #/// <param name="_ecoResProduct">
        #/// The <c>EcoResProduct</c> record.
        #/// </param>
        #public void initFromEcoResProduct(EcoResProduct _ecoResProduct)
        #{
        #    EcoResProductMaster ecoResProductMaster;
        #
        #    this.ItemId         = _ecoResProduct.productNumber();
        #    this.Product        = _ecoResProduct.RecId;
        #    this.NameAlias      = _ecoResProduct.SearchName;
        #    this.ItemType       = InventTable::itemTypeByProductType(_ecoResProduct.ProductType);
        #
        #    if (_ecoResProduct.PdsCWProduct)
        #    {
        #        this.PmfProductType = PmfProductType::Formula;
        #        this.PmfYieldPct    = 100.0;
        #    }
        #    else
        #    {
        #        this.PmfProductType = (this.inventItemType().canHaveBOM()
        #                                          ? PmfProductType::BOM
        #                                          : PmfProductType::None);
        #    }
        #
        #    if (_ecoResProduct is EcoResProductMaster)
        #    {
        #        ecoResProductMaster         = _ecoResProduct as EcoResProductMaster;
        #        this.pbaItemConfigurable    = ecoResProductMaster.isRuleBased();
        #    }
        #}
      ENDSOURCE
      SOURCE #initNonSpecifiedStandardProductDims
        #/// <summary>
        #/// Initializes the standard item dimensions that are not already specified.
        #/// </summary>
        #/// <param name="_inventDim">
        #/// An existing set of inventory dimensions.
        #/// </param>
        #public void initNonSpecifiedStandardProductDims(InventDim _inventDim)
        #{
        #    #InventDimDevelop
        #
        #    if (this.configActive())
        #    {
        #        _inventDim.ConfigId         = _inventDim.ConfigId ? _inventDim.ConfigId : this.StandardConfigId;
        #    }
        #    else
        #    {
        #        _inventDim.ConfigId         = '';
        #    }
        #
        #    if (this.sizeActive())
        #    {
        #        _inventDim.InventSizeId     = _inventDim.InventSizeId ? _inventDim.InventSizeId : this.StandardInventSizeId;
        #    }
        #    else
        #    {
        #        _inventDim.InventSizeId     = '';
        #    }
        #
        #    if (this.colorActive())
        #    {
        #        _inventDim.InventColorId    = _inventDim.InventColorId ? _inventDim.InventColorId : this.StandardInventColorId;
        #    }
        #    else
        #    {
        #        _inventDim.InventColorId    = '';
        #    }
        #
        #    if (this.styleActive())
        #    {
        #        _inventDim.InventStyleId    = _inventDim.InventStyleId ? _inventDim.InventStyleId : this.StandardInventStyleId;
        #    }
        #    else
        #    {
        #        _inventDim.InventStyleId    = '';
        #    }
        #}
      ENDSOURCE
      SOURCE #initPdsVendorCheckFromInventModelGroup
        #/// <summary>
        #/// Initializes the vendor check from the item model group.
        #/// </summary>
        #public void initPdsVendorCheckFromInventModelGroup()
        #{
        #    InventModelGroupItem    modelGroupRelation = InventModelGroupItem::findByItemIdLegalEntity(this.ItemId);
        #    InventModelGroup        modelGroup = InventModelGroup::find(modelGroupRelation.ModelGroupId);
        #
        #    if (modelGroup)
        #    {
        #        this.PdsVendorCheckItem = modelGroup.PdsVendorCheckItem;
        #    }
        #}
      ENDSOURCE
      SOURCE #initStandardProductDimensions
        #public void initStandardProductDimensions(InventDim _inventDim)
        #{
        #    _inventDim.InventDimFieldsMap::initProductDimensionsFrom(this);
        #}
      ENDSOURCE
      SOURCE #initValue
        #public void initValue()
        #{
        #    MCRInventTable mcrInventTable;
        #
        #    this.BOMUnitId              = InventParameters::find().DefaultUnitId;
        #    this.QtyPerLayer            = 1;
        #
        #    if (pdsIsCWItem(this.ItemId))
        #    {
        #        this.PdsCWWMSQtyPerLayer = 1;
        #    }
        #    if (this.isFormulaAllowed())
        #    {
        #        this.PmfYieldPct = 100;
        #    }
        #    if (isConfigurationkeyEnabled(configurationKeyNum(ProjCRMIntegration)))
        #    {
        #        this.daxIntegrationKey = newGuid();
        #    }
        #
        #    this.NameAlias = '';
        #    // Initialize the values for allow price adjust and allow returns on an item to Yes.
        #    mcrInventTable = this.mcrInventTable();
        #    mcrInventTable.AllowPriceAdjust = NoYes::Yes;
        #    mcrInventTable.AllowReturn = NoYes::Yes;
        #    this.mcrPackMCRInventTable(mcrInventTable);
        #}
      ENDSOURCE
      SOURCE #insert
        #public void insert(boolean _doInsert = true)
        #{
        #    RetailInventTable retailInventTable;
        #
        #    #OCCRetryCount
        #    if (_doInsert)
        #    {
        #        if (!this.pdsValidateBestBeforeDays())
        #        {
        #            throw error(strFmt(
        #                            "@SYS85685",
        #                            tableId2pname(tableNum(InventTable))));
        #        }
        #        try
        #        {
        #            ttsbegin;
        #
        #            BOMLevelCalc::checkLevelRecalcInventTable(this);
        #            if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        #            {
        #                retailInventTable.initFromInventTable(this);
        #                retailInventTable.insert();
        #            }
        #            super();
        #
        #            this.SysExtensionSerializerMap::postInsert();
        #            // Only create a full text record if not working from a temp table.
        #            if (!this.isTmp())
        #            {
        #                MCRFullTextSearch::insert(this);
        #            }
        #
        #            this.insertInventItemOrderSetup();
        #
        #            this.initPdsVendorCheckFromInventModelGroup();
        #
        #            ttscommit;
        #        }
        #        catch (Exception::Deadlock)
        #        {
        #            retry;
        #        }
        #        catch (Exception::UpdateConflict)
        #        {
        #            if (appl.ttsLevel() == 0)
        #            {
        #                if (xSession::currentRetryCount() >= #RetryNum)
        #                {
        #                    throw Exception::UpdateConflictNotRecovered;
        #                }
        #                else
        #                {
        #                    retry;
        #                }
        #            }
        #            else
        #            {
        #                throw Exception::UpdateConflict;
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #insertBOMTable
        #private server void insertBOMTable()
        #{
        #    BOMTable            bomTable;
        #    BOMVersion          bomVersion;
        #
        #    //Model group and item group must be set up in order to be able to insert BOMTable
        #    if (!this.isItemGroupSetup() || !this.isModelGroupSetup())
        #    {
        #        return;
        #    }
        #    if (!this.isFormulaOrBOMAllowed() || !this.isStocked())
        #    {
        #        return;
        #    }
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(BOMVersion)))
        #    {
        #        return;
        #    }
        #
        #    bomTable.initFromInventTable(this);
        #
        #    // Do not create if already exist
        #    if (BOMTable::find(bomTable.bomId))
        #    {
        #        return;
        #    }
        #
        #    bomTable.initFromInventTable(this);
        #    bomTable.insert();
        #    bomVersion.initFromInventTable(this);
        #    bomVersion.initFromBOMTable(bomTable);
        #    bomVersion.Active       = true;
        #    bomVersion.insert();
        #}
      ENDSOURCE
      SOURCE #insertInventItemOrderSetup
        #private server void insertInventItemOrderSetup()
        #{
        #    if (!InventItemPurchSetup::findDefault(this.ItemId))
        #    {
        #        InventItemPurchSetup::insertDefault(this.ItemId);
        #    }
        #
        #    if (!InventItemInventSetup::findDefault(this.ItemId))
        #    {
        #        InventItemInventSetup::insertDefault(this.ItemId);
        #    }
        #
        #    if (!InventItemSalesSetup::findDefault(this.ItemId))
        #    {
        #        InventItemSalesSetup::insertDefault(this.ItemId);
        #    }
        #}
      ENDSOURCE
      SOURCE #interCompanyBlockedPurch
        #public boolean  interCompanyBlockedPurch()
        #{
        #    return this.inventTableModulePurch().InterCompanyBlocked;
        #}
      ENDSOURCE
      SOURCE #interCompanyBlockedSales
        #public boolean  interCompanyBlockedSales()
        #{
        #    return this.inventTableModuleSales().InterCompanyBlocked;
        #}
      ENDSOURCE
      SOURCE #inventCostPriceMap
        #public InventPriceMap inventCostPriceMap(
        #    InventDimId             _inventDimId                = '',   // can be = '' if setting the _inventDim buffer
        #    InventDim               _inventDim                  = null, // set this parameter for better performance if avail
        #    InventTableModule       _inventTableModuleInvent    = null, // set this parameter for better performance if avail
        #    TransDate               _transDate                  = systemDateGet(),
        #    InventSiteId            _newSiteId                  = '',
        #    boolean                 _throwError                 = false)
        #{
        #    InventDimId     inventDimId;
        #
        #    void initInventDimId()
        #    {
        #        if (!_inventDimId && _inventDim)
        #        {
        #            inventDimId = _inventDim.InventDimId;
        #        }
        #        else
        #        {
        #            inventDimId =_inventDimId;
        #        }
        #
        #        if (!inventDimId)
        #        {
        #            inventDimId = InventDim::findDim(_inventDim).InventDimId;
        #        }
        #    }
        #
        #    initInventDimId();
        #    return this.modelGroup().inventModelType().inventCostPriceMap(this, inventDimId, _inventTableModuleInvent, _transDate, _newSiteId, _throwError);
        #}
      ENDSOURCE
      SOURCE #inventCostPriceMapSecCur_RU
        #public InventPriceMap inventCostPriceMapSecCur_RU(
        #    InventDimId             _inventDimId                = '',
        #    InventDim               _inventDim                  = null,
        #    InventTableModule       _inventTableModuleInvent    = null,
        #    TransDate               _transDate                  = systemDateGet(),
        #    InventSiteId            _newSiteId                  = '',
        #    boolean                 _throwError                 = false)
        #{
        #    InventPriceMap  inventPriceMap;
        #    InventDimId     inventDimId;
        #
        #    void initInventDimId()
        #    {
        #        if (!_inventDimId && _inventDim)
        #        {
        #            inventDimId = _inventDim.InventDimId;
        #        }
        #        else
        #        {
        #            inventDimId =_inventDimId;
        #        }
        #
        #        if (!inventDimId)
        #        {
        #            inventDimId = InventDim::findDim(_inventDim).InventDimId;
        #        }
        #    }
        #
        #    if (this.modelGroup().inventModelTypeSecCur_RU().stdCostBased())
        #    {
        #        inventPriceMap = InventItemPrice::stdCostFindDate(this, _transDate, _inventDimId, _inventDim, _newSiteId, _throwError);
        #    }
        #    else
        #    {
        #        initInventDimId();
        #        inventPriceMap = InventItemPrice::findCurrent(this.ItemId, CostingVersionPriceType::Cost, inventDimId, _transDate, _newSiteId);
        #
        #        if (! inventPriceMap.RecId)
        #        {
        #            inventPriceMap =_inventTableModuleInvent.RecId ? _inventTableModuleInvent : InventTableModule::find(this.ItemId,ModuleInventPurchSales::Invent);
        #        }
        #    }
        #
        #    return inventPriceMap;
        #}
      ENDSOURCE
      SOURCE #inventDimLinkedDefaultDimension
        #public DimensionDefault inventDimLinkedDefaultDimension(InventDim  _inventDim)
        #{
        #    return InventSite::changeDimension(this.DefaultDimension, _inventDim.InventSiteId);
        #}
      ENDSOURCE
      SOURCE #inventDimParmActiveDimensions
        #/// <summary>
        #///     Determines all active dimensions that belong to the current item.
        #/// </summary>
        #/// <returns>
        #///     An <c>InventDimParm</c> buffer.
        #/// </returns>
        #public server InventDimParm inventDimParmActiveDimensions()
        #{
        #    InventDimParm   inventDimParmActive;
        #
        #    InventDimGroupSetup::newInventTable(this).inventDimParmActive(inventDimParmActive);
        #    return inventDimParmActive;
        #}
      ENDSOURCE
      SOURCE #inventDimParmCovDimensions
        #public server InventDimParm inventDimParmCovDimensions()
        #{
        #    InventDimParm   inventDimParmItem;
        #
        #    inventDimParmItem.initCovPrDimension(InventDimGroupSetup::newInventTable(this));
        #    return inventDimParmItem;
        #}
      ENDSOURCE
      SOURCE #inventDimParmPrimaryDimensions
        #/// <summary>
        #/// Determines all active primary dimensions that belong to the current item.
        #/// </summary>
        #/// <returns>
        #/// An <c>InventDimParm</c> buffer.
        #/// </returns>
        #public server InventDimParm inventDimParmPrimaryDimensions()
        #{
        #    InventDimParm   inventDimParmPrimary;
        #
        #    InventDimGroupSetup::newInventTable(this).inventDimParmActivePrimaryDimension(inventDimParmPrimary);
        #    return inventDimParmPrimary;
        #}
      ENDSOURCE
      SOURCE #inventDimParmProductDimensions
        #public server InventDimParm inventDimParmProductDimensions()
        #{
        #    return EcoResProductDimGroupSetup::newInventTable(this).inventDimParmActiveDimensions();
        #}
      ENDSOURCE
      SOURCE #inventDimParmSalesProcessActiveDim
        #/// <summary>
        #///     Determines all sales process active dimensions that belong to the current item.
        #/// </summary>
        #/// <returns>
        #///     An <c>InventDimParm</c> buffer.
        #/// </returns>
        #public server InventDimParm inventDimParmSalesProcessActiveDim()
        #{
        #    InventDimParm   inventDimParm;
        #
        #    InventDimGroupSetup::newInventTable(this).inventDimParmSalesProcessActive(inventDimParm);
        #
        #    return inventDimParm;
        #}
      ENDSOURCE
      SOURCE #inventDimPrimaryDimensions
        #/// <summary>
        #/// Removes all non primary dimensions on the <c>InventDim</c> parameter.
        #/// </summary>
        #/// <param name="_inventDim">
        #/// The <c>InventDim</c> record from which to remove all non primary dimensions.
        #/// </param>
        #/// <returns>
        #/// An <c>InventDim</c> buffer that contains only primary dimensions.
        #/// </returns>
        #public server InventDim inventDimPrimaryDimensions(InventDim _inventDim)
        #{
        #    InventDimParm   inventDimParmPrimary = this.inventDimParmPrimaryDimensions();
        #
        #    _inventDim.clearNotSelectedDim(inventDimParmPrimary);
        #    return InventDim::findOrCreate(_inventDim);
        #}
      ENDSOURCE
      SOURCE #inventDimProductDimensions
        #public server InventDim inventDimProductDimensions(InventDim _inventDim)
        #{
        #    InventDimParm   inventDimParmItem = this.inventDimParmProductDimensions();
        #
        #    _inventDim.clearNotSelectedDim(inventDimParmItem);
        #    return InventDim::findOrCreate(_inventDim);
        #}
      ENDSOURCE
      SOURCE #inventInventSiteId
        #public display InventInventSiteId inventInventSiteId(InventSiteId _inventSiteId = '')
        #{
        #    return this.inventItemInventSetup().inventSiteId(_inventSiteId, this);
        #}
      ENDSOURCE
      SOURCE #inventItemGroupItem
        #/// <summary>
        #/// Retrieves the <c>InventItemGroupItem</c> record associated with the current record.
        #/// </summary>
        #/// <returns>
        #/// The <c>InventItemGroupItem</c> record.
        #/// </returns>
        #public InventItemGroupItem inventItemGroupItem()
        #{
        #    return InventItemGroupItem::findByItemIdLegalEntity(this.ItemId, this.DataAreaId);
        #}
      ENDSOURCE
      SOURCE #inventItemInventSetup
        #public InventItemInventSetup inventItemInventSetup(
        #    InventDimId _inventDimId    = InventDim::inventDimIdBlank(),
        #    boolean     _forUpdate      = false)
        #{
        #    return InventItemInventSetup::find(this.ItemId, _inventDimId, _forUpdate);
        #}
      ENDSOURCE
      SOURCE #inventItemOrderSetupMap
        #public InventItemOrderSetupMap inventItemOrderSetupMap(
        #    InventItemOrderSetupType    _setupType,
        #    InventDimId                 _inventDimId    = InventDim::inventDimIdBlank(),
        #    boolean                     _forUpdate      = false)
        #{
        #    return InventItemOrderSetupMap::find(this.ItemId, _setupType, _inventDimId, _forUpdate, this);
        #}
      ENDSOURCE
      SOURCE #inventItemPurchSetup
        #public InventItemPurchSetup inventItemPurchSetup(
        #    InventDimId     _inventDimId    = InventDim::inventDimIdBlank(),
        #    boolean         _forUpdate      = false)
        #{
        #    return InventItemPurchSetup::find(this.ItemId, _inventDimId, _forUpdate);
        #}
      ENDSOURCE
      SOURCE #inventItemSalesSetup
        #public InventItemSalesSetup inventItemSalesSetup(
        #    InventDimId _inventDimId    = InventDim::inventDimIdBlank(),
        #    boolean     _forUpdate      = false)
        #{
        #    return InventItemSalesSetup::find(this.ItemId, _inventDimId, _forUpdate);
        #}
      ENDSOURCE
      SOURCE #inventItemSetupSupplyType
        #/// <summary>
        #/// Finds the specified record in the <c>InventItemSetupSupplyType</c> record that is related to the
        #/// current item.
        #/// </summary>
        #/// <param name="_forUpdate">
        #/// A Boolean value that indicates whether to read the record for update; optional
        #/// </param>
        #/// <returns>
        #/// A <c>InventItemSetupSupplyType</c> record; otherwise, an empty buffer.
        #/// </returns>
        #public InventItemSetupSupplyType inventItemSetupSupplyType(boolean _forUpdate=false)
        #{
        #    return InventItemSetupSupplyType::find(this.ItemId,this.DataAreaId,_forUpdate);
        #}
      ENDSOURCE
      SOURCE #inventItemType
        #public InventItemType inventItemType()
        #{
        #    return InventItemType::newInventTable(this);
        #}
      ENDSOURCE
      SOURCE #inventLocationId
        #/// <summary>
        #/// Gets an inventory warehouse ID.
        #/// </summary>
        #/// <param name="_inventLocationId">
        #/// The current inventory warehouse ID.
        #/// </param>
        #/// <param name="_inventDimId">
        #/// The inventory dimension ID for which to find the settings; optional.
        #/// </param>
        #/// <param name="_inventSiteIdParent">
        #/// An inventory site ID to which the inventory warehouse belongs; optional.
        #/// </param>
        #/// <returns>
        #/// An inventory warehouse ID.
        #/// </returns>
        #/// <remarks>
        #/// The value of the <paramref name="_inventLocationId" /> parameter will be returned if it is not
        #/// empty and the mandatory warehouse parameter is not set in the inventory order settings for the
        #/// item.If the <paramref name="_inventDimId" /> parameter is not specified the default settings are
        #/// used.The <paramref name="_inventSiteIdParent" /> parameter applies only when the <paramref
        #/// name="_inventLocationId" /> parameter is specified.If the <paramref name="_inventSiteIdParent" />
        #/// and <paramref name="_inventLocationId" /> parameters are specified and no site specific settings
        #/// are found, a check whether the value of the <paramref name="_inventLocationId" /> parameter belongs
        #/// to the site that is specified by the <paramref name="_inventSiteIdParent" /> parameter will be
        #/// performed. If the check fails, an empty string will be returned; otherwise, the value of the
        #/// <paramref name="_inventLocationId" /> parameter will be returned.
        #/// </remarks>
        #
        #public display InventLocationId inventLocationId(
        #    InventLocationId    _inventLocationId   = '',
        #    InventDimId         _inventDimId        = InventDim::inventDimIdBlank(),
        #    InventSiteId        _inventSiteIdParent = '')
        #{
        #    return this.inventItemInventSetup(_inventDimId).inventLocationId(_inventLocationId, this, _inventSiteIdParent);
        #}
      ENDSOURCE
      SOURCE #inventLocationIdBOM
        #public display InventLocationId inventLocationIdBOM(
        #    InventLocationId    _inventLocationId   = '',
        #    InventDimId         _inventDimId        = InventDim::inventDimIdBlank(),
        #    InventSiteId        _inventSiteIdParent = '')
        #{
        #    return this.inventItemInventSetup(_inventDimId).inventLocationId(_inventLocationId, this, _inventSiteIdParent);
        #}
      ENDSOURCE
      SOURCE #inventLowestQty
        #/// <summary>
        #/// Returns a minimum allowed inventory order quantity.
        #/// </summary>
        #/// <param name="_inventDimId">
        #/// The inventory dimension ID; optional.
        #/// </param>
        #/// <returns>
        #/// A minimum allowed inventory order quantity.
        #/// </returns>
        #
        #public display QtyLowest inventLowestQty(InventDimId _inventDimId = InventDim::inventDimIdBlank())
        #{
        #    return this.inventItemInventSetup(_inventDimId).getLowestQty();
        #}
      ENDSOURCE
      SOURCE #inventModelGroupItem
        #/// <summary>
        #/// Retrieves the <c>InventModelGroupItem</c> record associated with the current record.
        #/// </summary>
        #/// <returns>
        #/// The <c>InventModelGroupItem</c> record.
        #/// </returns>
        #public InventModelGroupItem inventModelGroupItem()
        #{
        #    return InventModelGroupItem::findByItemIdLegalEntity(this.ItemId, this.DataAreaId);
        #}
      ENDSOURCE
      SOURCE #inventoriedPolicy
        #/// <summary>
        #/// Initializes a new instance of the <c>InventTableInventoriedPolicy</c> class.
        #/// </summary>
        #/// <returns>
        #/// A new instance of the <c>InventTableInventoriedPolicy</c> class.
        #/// </returns>
        #public InventTableInventoriedPolicy inventoriedPolicy()
        #{
        #    return InventTableInventoriedPolicy::newInventModelGroupItem(InventModelGroupItem::findByItemIdLegalEntity(this.ItemId, this.DataAreaId));
        #}
      ENDSOURCE
      SOURCE #inventStandardQty
        #/// <summary>
        #/// Gets a standard inventory order quantity.
        #/// </summary>
        #/// <param name="_inventDimId">
        #/// The inventory dimension ID settings to find; optional.
        #/// </param>
        #/// <returns>
        #/// A standard inventory order quantity.
        #/// </returns>
        #/// <remarks>
        #/// If the settings are not specified, the default settings are used.
        #/// </remarks>
        #
        #public display QtyStandard inventStandardQty(InventDimId _inventDimId = InventDim::inventDimIdBlank())
        #{
        #    return this.inventItemInventSetup(_inventDimId).getStandardQty();
        #}
      ENDSOURCE
      SOURCE #inventTableModuleInvent
        #public InventTableModule inventTableModuleInvent(boolean _forUpdate = false)
        #{
        #    return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Invent, _forUpdate);
        #}
      ENDSOURCE
      SOURCE #inventTableModulePurch
        #public InventTableModule inventTableModulePurch(boolean _forUpdate = false)
        #{
        #    return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Purch, _forUpdate);
        #}
      ENDSOURCE
      SOURCE #inventTableModuleSales
        #public InventTableModule inventTableModuleSales(boolean _forUpdate = false)
        #{
        #    return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Sales, _forUpdate);
        #}
      ENDSOURCE
      SOURCE #inventUnitId
        #public display UnitOfMeasureSymbol inventUnitId()
        #{
        #    return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Invent).UnitId;
        #}
      ENDSOURCE
      SOURCE #isActiveInSalesProcess
        #/// <summary>
        #///    Determines if the given Item belongs to a Tracking Dimension that has the "Active in Sales Process" flag enabled and item is stocked.
        #/// </summary>
        #/// <returns>
        #///    true if the Item is "Active in Sales Process; otherwise, false.
        #/// </returns>
        #public boolean isActiveInSalesProcess()
        #{
        #    return this.isStocked() && EcoResTrackingDimensionGroupItem::isItemActiveInSalesProcess(this.DataAreaId, this.ItemId);
        #}
      ENDSOURCE
      SOURCE #isBOMAllowed
        #/// <summary>
        #/// Specifies whether the item can have a BOM.
        #/// </summary>
        #/// <returns>
        #/// True if the item can have a BOM; otherwise false.
        #/// </returns>
        #public boolean isBOMAllowed()
        #{
        #    boolean ret = this.inventItemType().canHaveBOM();
        #
        #    if (ret && #PmfEnabled)
        #    {
        #        ret = this.PmfProductType == PmfProductType::BOM;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isBOMProducedByDefault
        #/// <summary>
        #/// Specifies whether the item should be produced by default with a production order.
        #/// </summary>
        #/// <returns>
        #/// True if the item is produced by default with a production order; otherwise false.
        #/// </returns>
        #public boolean isBOMProducedByDefault()
        #{
        #    return this.isBOMAllowed() && this.isProducedByDefault();
        #}
        #
      ENDSOURCE
      SOURCE #isByProduct
        #/// <summary>
        #/// Determines whether the item is a by-product.
        #/// </summary>
        #/// <returns>
        #/// true if the item is a by-product; otherwise, false.
        #/// </returns>
        #public boolean isByProduct()
        #{
        #    return this.PmfProductType == PmfProductType::By_Product;
        #}
      ENDSOURCE
      SOURCE #isCoByProduct
        #/// <summary>
        #/// Determines whether the item is a co-product or by-product.
        #/// </summary>
        #/// <returns>
        #/// True if the item is a co-product or by-product; otherwise, false.
        #/// </returns>
        #public boolean isCoByProduct()
        #{
        #    return this.isCoProduct() || this.isByProduct();
        #}
      ENDSOURCE
      SOURCE #isConfigurable
        #public boolean isConfigurable()
        #{
        #    return EcoResProductMaster::find(this.Product).isDimensionBased()
        #        && this.isBOMAllowed();
        #}
      ENDSOURCE
      SOURCE #isConstraintBasedConfigurable
        #/// <summary>
        #/// Validates that this item is configurable by constraint-based product configuration.
        #/// </summary>
        #/// <returns>
        #/// true if the item is compatible with constraint-based configuration; otherwise, false.
        #/// </returns>
        #public boolean isConstraintBasedConfigurable()
        #{
        #    return  EcoResProductMaster::find(this.Product).isConstraintBased();
        #}
      ENDSOURCE
      SOURCE #isCoProduct
        #/// <summary>
        #/// Determines whether the item is a co-product.
        #/// </summary>
        #/// <returns>
        #/// true if the item is a co-product; otherwise, false.
        #/// </returns>
        #public boolean isCoProduct()
        #{
        #    return this.PmfProductType == PmfProductType::Co_Product;
        #}
      ENDSOURCE
      SOURCE #isFormulaAllowed
        #/// <summary>
        #/// Specifies whether the item can have formula.
        #/// </summary>
        #/// <returns>
        #/// True if the item can have a formula; otherwise false.
        #/// </returns>
        #public boolean isFormulaAllowed()
        #{
        #    return (this.PmfProductType == PmfProductType::Formula || this.PmfProductType  == PmfProductType::MainItem) && this.inventItemType().canHaveBOM();
        #}
      ENDSOURCE
      SOURCE #isFormulaOrBOMAllowed
        #/// <summary>
        #/// Specifies whether the item can have a BOM or formula.
        #/// </summary>
        #/// <returns>
        #/// True if the item can have a BOM or formula; otherwise false.
        #/// </returns>
        #public boolean isFormulaOrBOMAllowed()
        #{
        #    return this.inventItemType().canHaveBOM()
        #        && (!#PmfEnabled
        #            || this.PmfProductType == PmfProductType::BOM
        #            || this.PmfProductType == PmfProductType::Formula
        #            || this.PmfProductType == PmfProductType::MainItem);
        #}
        #
      ENDSOURCE
      SOURCE #isFormulaProducedByDefault
        #/// <summary>
        #/// Specifies whether the item should be produced by default with a batch order.
        #/// </summary>
        #/// <returns>
        #/// True if the item is produced by default with a batch order; otherwise false.
        #/// </returns>
        #public boolean isFormulaProducedByDefault()
        #{
        #    return this.isFormulaOrBOMAllowed() && this.isProducedByDefault();
        #}
        #
      ENDSOURCE
      SOURCE #isItemBatchActivated
        #/// <summary>
        #/// Specifies whether the batch number inventory dimension is active for the item.
        #/// </summary>
        #/// <returns>
        #/// True if the batch number dimension is active; otherwise, false.
        #/// </returns>
        #public boolean isItemBatchActivated()
        #{
        #    EcoResTrackingDimensionGroupFldSetup  ecoResTrackingDimensionGroupFldSetup = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(this.trackingDimensionGroup(), fieldNum(InventDim, InventBatchId));
        #
        #    if (!ecoResTrackingDimensionGroupFldSetup || !ecoResTrackingDimensionGroupFldSetup.IsActive)
        #    {
        #        return false;
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #isItemGroupSetup
        #private boolean isItemGroupSetup()
        #{
        #    InventItemGroupItem    inventItemGroupItem;
        #    inventItemGroupItem = InventItemGroupItem::findByItemIdLegalEntity(this.ItemId, this.DataAreaId);
        #    return (inventItemGroupItem.RecId && inventItemGroupItem.ItemGroupId);
        #}
      ENDSOURCE
      SOURCE #isMarkupCodeEnabled_RU
        #/// <summary>
        #///     Determines whether the field MarkupCode_RU is enabled.
        #/// </summary>
        #/// <returns>
        #///     true if the item is not stocked; otherwise, false.
        #/// </returns>
        #public boolean isMarkupCodeEnabled_RU()
        #{
        #    return ! this.isStocked();
        #}
      ENDSOURCE
      SOURCE #isModelGroupSetup
        #private boolean isModelGroupSetup()
        #{
        #    InventModelGroupItem    inventModelGroupItem;
        #    inventModelGroupItem = InventModelGroupItem::findByItemIdLegalEntity(this.ItemId, this.DataAreaId);
        #    return (inventModelGroupItem.RecId && inventModelGroupItem.ModelGroupId);
        #}
      ENDSOURCE
      SOURCE #isProducedByDefault
        #/// <summary>
        #///    Determines if the item should be produced by default (default order is set to production).
        #/// </summary>
        #/// <returns>
        #///    A boolean value that specifies if the item should be produced by default.
        #/// </returns>
        #public boolean isProducedByDefault()
        #{
        #    return  this.isFormulaOrBOMAllowed() &&
        #            this.inventItemSetupSupplyType().DefaultOrderType == ReqPOType::Production;
        #}
      ENDSOURCE
      SOURCE #isProductVariantUnitConversionEnabled
        #/// <summary>
        #/// Checks whether product variant unit conversion is enabled for the item.
        #/// </summary>
        #/// <returns>
        #/// True if product variant unit conversion is enabled; otherwise, false.
        #/// </returns>
        #public boolean isProductVariantUnitConversionEnabled()
        #{
        #    EcoResProductMaster productMaster;
        #
        #    productMaster = EcoResProductMaster::find(this.Product);
        #
        #    return productMaster && productMaster.IsProductVariantUnitConversionEnabled;
        #}
      ENDSOURCE
      SOURCE #isShelfLifeItem
        #/// <summary>
        #/// Specifies whether the item is a shelf life item.
        #/// </summary>
        #/// <returns>
        #/// True if the item is a shelf life item; otherwise, false.
        #/// </returns>
        #public boolean isShelfLifeItem()
        #{
        #    boolean shelfLifeItem = false;
        #
        #    if (#PdsShelfEnabled)
        #    {
        #        shelfLifeItem = this.PdsShelfLife != 0;
        #    }
        #
        #    return shelfLifeItem;
        #}
      ENDSOURCE
      SOURCE #isStocked
        #/// <summary>
        #/// Determines whether the policy is stocked.
        #/// </summary>
        #/// <returns>
        #/// The policy as defined in the <c>InventModelGroup</c> object.
        #/// </returns>
        #/// <remarks>
        #/// Inventory transactions will exist for items or services where this method returns true.
        #/// </remarks>
        #public boolean isStocked()
        #{
        #    return this.modelGroup().isStocked();
        #}
      ENDSOURCE
      SOURCE #itemDescriptionOrName
        #/// <summary>
        #/// Retrieves the description or name of a product that this item represents.
        #/// </summary>
        #/// <param name="_languageId">
        #/// The ID of a language in which to retrieve a description or name.
        #/// </param>
        #/// <returns>
        #/// The description of a product if it exists; otherwise, the name of a product.
        #/// </returns>
        #public client server display EcoResDescription itemDescriptionOrName(LanguageId _languageId = CompanyInfo::languageId())
        #{
        #    EcoResDescription ecoResDescription = this.productDescription(_languageId);
        #    if (!ecoResDescription)
        #    {
        #        ecoResDescription = this.productName(_languageId);
        #    }
        #    return ecoResDescription;
        #}
      ENDSOURCE
      SOURCE #itemGroup
        #/// <summary>
        #/// Retrieves the item group of the current item.
        #/// </summary>
        #/// <returns>
        #/// An item group.
        #/// </returns>
        #public InventItemGroup itemGroup()
        #{
        #    return InventItemGroupItem::itemGroupByItemIdLegalEntity(this.ItemId, this.DataAreaId);
        #}
      ENDSOURCE
      SOURCE #itemGroupId
        #/// <summary>
        #/// Retrieves the item group ID of the current item.
        #/// </summary>
        #/// <returns>
        #/// An item group ID.
        #/// </returns>
        #[SysClientCacheDataMethodAttribute(true)]
        #public display ItemGroupId itemGroupId()
        #{
        #    return InventItemGroupItem::findByItemIdLegalEntity(this.ItemId, this.DataAreaId).ItemGroupId;
        #}
      ENDSOURCE
      SOURCE #itemIdAndDescription
        #/// <summary>
        #/// Retrieves the value of the <c>ItemId</c> field concatenated with the description or name of a
        #/// product that this item represents.
        #/// </summary>
        #/// <param name="_languageId">
        #/// The ID of a language in which to retrieve a description or name.
        #/// </param>
        #/// <returns>
        #/// A string with the ID of the item concatenated with a description or a name.
        #/// </returns>
        #public display EcoResDescription itemIdAndDescription(LanguageId _languageId = CompanyInfo::languageId())
        #{
        #    return this.ItemId + '\n' + this.itemDescriptionOrName(_languageId);
        #}
      ENDSOURCE
      SOURCE #itemName
        #public display ItemNameDisplay itemName(Common _common = null)
        #{
        #    InventDimCombination    inventDimCombination;
        #    InventDim               inventDim;
        #    EcoResProductName       productName;
        #    EcoResProductName       productVariantName;
        #
        #    if (_common is InventDim)
        #    {
        #        inventDim = _common as InventDim;
        #    }
        #
        #    productName = this.defaultProductName();
        #    if (!inventDim.anyProductDimensionSpecified())
        #    {
        #        return productName;
        #    }
        #
        #    inventDimCombination = InventDimCombination::findByInventDim(this.ItemId, inventDim);
        #    if (inventDimCombination.RecId)
        #    {
        #        productVariantName = inventDimCombination.defaultProductName();
        #    }
        #    return productVariantName
        #            ? productName + ' / ' + productVariantName
        #            : productName;
        #}
      ENDSOURCE
      SOURCE #mcrGetProductMaster
        #/// <summary>
        #///     Retrieves the product master for the current item.
        #/// </summary>
        #/// <returns>
        #///     The <c>EcoResProductMaster</c> record for the current item.
        #/// </returns>
        #public EcoResProductMaster mcrGetProductMaster()
        #{
        #    return EcoResProductMaster::find(this.Product);
        #}
      ENDSOURCE
      SOURCE #mcrInventTable
        #/// <summary>
        #///     Retrieves the packed table <c>MCRInventTable</c>.
        #/// </summary>
        #/// <returns>
        #///     The packed <c>MCRInventTable</c>.
        #/// </returns>
        #public MCRInventTable mcrInventTable()
        #{
        #    return this.SysExtensionSerializerMap::getExtensionTable(tableNum(MCRInventTable));
        #}
      ENDSOURCE
      SOURCE #mcrInventUnitOfMeasureClass
        #/// <summary>
        #///     Retrieves the unit of measure class for the current item's unit ID.
        #/// </summary>
        #/// <returns>
        #///     The unit of measure for the current item's unit ID.
        #/// </returns>
        #public UnitOfMeasureClass mcrInventUnitOfMeasureClass()
        #{
        #    return UnitOfMeasure::findBySymbol(this.inventUnitId()).UnitOfMeasureClass;
        #}
      ENDSOURCE
      SOURCE #mcrPackMCRInventTable
        #/// <summary>
        #///     Packs the extended <c>MCRInventTable</c> after setting the record ID
        #///     on the current record.
        #/// </summary>
        #/// <param name="_mcrInventTable">
        #///     The passed <c>MCRInventTable</c> record associated with the current record.
        #/// </param>
        #public void mcrPackMCRInventTable(MCRInventTable _mcrInventTable)
        #{
        #    _mcrInventTable.InventTable = this.RecId;
        #    this.SysExtensionSerializerMap::packExtensionTable(_mcrInventTable);
        #}
      ENDSOURCE
      SOURCE #mergeDimension
        #/// <summary>
        #/// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
        #/// field of this table and the specified dimension set.
        #/// </summary>
        #/// <param name="_primaryDefaultDimension">
        #/// The first dimension set to merge with the current <c>defaultDimension</c> field of this table.
        #/// </param>
        #/// <param name="_secondaryDefaultDimension">
        #/// The second dimension set to merge with the current <c>defaultDimension</c> field of this table;
        #/// optional.
        #/// </param>
        #/// <param name="_dimensionMerge">
        #/// A <c>dimensionMerge</c> object that was initialized with the current buffer; optional.
        #/// </param>
        #/// <returns>
        #/// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field of
        #/// this table and the specified dimension set.
        #/// </returns>
        #/// <remarks>
        #/// This method makes sure that potential linked dimensions are not overwritten when they are merged.
        #/// </remarks>
        #
        #public DimensionDefault mergeDimension(
        #    DimensionDefault _primaryDefaultDimension,
        #    DimensionDefault _secondaryDefaultDimension = 0,
        #    DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
        #                                                                    this.companyInfo().RecId
        #                                                                    )
        #    )
        #{
        #    return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
        #}
      ENDSOURCE
      SOURCE #modelGroup
        #/// <summary>
        #/// Retrieves an item model group for the current item.
        #/// </summary>
        #/// <returns>
        #/// An item model group.
        #/// </returns>
        #public InventModelGroup modelGroup()
        #{
        #    return InventModelGroupItem::modelGroupByItemIdLegalEntity(this.ItemId, this.DataAreaId);
        #}
      ENDSOURCE
      SOURCE #modelGroupId
        #/// <summary>
        #/// Retrieves the ID of an item model group for an item.
        #/// </summary>
        #/// <returns>
        #/// The ID of an item model group.
        #/// </returns>
        #[SysClientCacheDataMethodAttribute(true)]
        #public display InventModelGroupId modelGroupId()
        #{
        #    return InventModelGroupItem::findByItemIdLegalEntity(this.ItemId, this.DataAreaId).ModelGroupId;
        #}
      ENDSOURCE
      SOURCE #modifiedFieldValue
        #public void modifiedFieldValue(
        #    FieldName _fieldName,
        #    int _arrayIndex = 1)
        #{
        #    #InventDimDevelop
        #
        #    super(_fieldName, _arrayIndex);
        #
        #    switch (_fieldName)
        #    {
        #        case fieldStr(InventTable, AltItemId):
        #            this.AltConfigId         = '';
        #            this.AltInventColorId    = '';
        #            this.AltInventStyleId    = '';
        #            this.AltInventSizeId     = '';
        #            break;
        #
        #        case fieldStr(InventTable, Phantom):
        #            if (this.Phantom)
        #            {
        #                this.AutoReportFinished = NoYes::No;
        #            }
        #            break;
        #
        #        case fieldStr(InventTable, OrigCountryRegionId):
        #            this.OrigStateId = '';
        #            break;
        #
        #        case fieldStr(InventTable, pbaAutoStart):
        #            if (this.pbaAutoStart)
        #            {
        #                this.pbaMandatoryConfig = NoYes::No;
        #            }
        #            break;
        #
        #        case fieldStr(InventTable, pbaMandatoryConfig):
        #            if (this.pbaMandatoryConfig)
        #            {
        #                this.pbaAutoStart = NoYes::No;
        #            }
        #            break;
        #
        #        case fieldStr(InventTable, ItemType):
        #            if (this.ItemType == ItemType::Service)
        #            {
        #                this.FiscalLIFOAvoidCalc = NoYes::Yes;
        #                this.PalletTagging       = NoYes::No;
        #                this.ItemTaggingLevel    = RFIDItemTaggingLevel::None;
        #                // <GEERU>
        #                this.checkMarkupCode_RU();
        #                // </GEERU>
        #            }
        #            break;
        #
        #        case fieldStr(InventTable, PmfProductType):
        #            if (   this.PmfProductType != PmfProductType::BOM
        #                && this.PmfProductType != PmfProductType::Formula
        #                && this.checkPhantom())
        #            {
        #                this.Phantom = NoYes::No;
        #            }
        #
        #            if (   this.PmfProductType     != PmfProductType::Co_Product
        #                && this.PmfProductType  != PmfProductType::By_Product)
        #            {
        #                this.PmfPlanningItemId = '';
        #            }
        #
        #            if (this.isFormulaAllowed())
        #            {
        #                if (this.PmfYieldPct <= 0)
        #                {
        #                    this.PmfYieldPct = 100;
        #                }
        #            }
        #            else if (this.PmfYieldPct)
        #            {
        #                this.PmfYieldPct = 0;
        #            }
        #            break;
        #
        #        case fieldStr(InventTable, pdsBaseAttributeId):
        #            if (this.pdsBaseAttributeId == '')
        #            {
        #                this.pdsTargetFactor = 0;
        #            }
        #            else
        #            {
        #                this.pdsTargetFactor = str2num(this.pdsBaseValueDisplay());
        #            }
        #            break;
        #
        #        // <GEERU>
        #        case fieldStr(InventTable, MarkupCode_RU):
        #            this.checkMarkupCode_RU();
        #            break;
        #        // </GEERU>
        #
        #        // <GEECZ>
        #        case fieldStr(InventTable, Intracode):
        #            if (this.IntrastatProcId_CZ && !IntrastatStatProc::exist(this.Intracode, this.IntrastatProcId_CZ))
        #            {
        #                this.IntrastatProcId_CZ = '';
        #            }
        #        // </GEECZ>
        #    }
        #}
        #
        #
      ENDSOURCE
      SOURCE #pdsBaseValueDisplay
        #/// <summary>
        #/// Gets the base value from <c>PdsBatchAttributeByItem</c> table.
        #/// </summary>
        #/// <returns>
        #/// The base value for item and base attribute combination if found.
        #/// </returns>
        #[SysClientCacheDataMethodAttribute(true)]
        #public display PDSBaseValue pdsBaseValueDisplay()
        #{
        #    PdsBatchAttribByItem    attribByItem;
        #
        #    if (this.pdsBaseAttributeId != '')
        #    {
        #        select firstonly pdsBaseValue
        #            from attribByItem
        #            where  attribByItem.PdsBatchAttribItemId    == this.ItemId
        #                && attribByItem.PdsBatchAttribCode      == TableGroupAll::Table
        #                && attribByItem.PdsBatchAttribRelation  == this.pdsBaseAttributeId;
        #    }
        #
        #    return attribByItem.pdsBaseValue;
        #}
      ENDSOURCE
      SOURCE #pdsBatchLookup
        #/// <summary>
        #/// Displays a lookup selection for batch attributes that can be used as the potency attribute.
        #/// </summary>
        #/// <param name="_formControl">
        #/// The control for which lookup is performed.
        #/// </param>
        #/// <param name="_filterstr">
        #/// The filter to reduce list of data shown.
        #/// </param>
        #/// <param name="_datasource">
        #/// The datasource for the current record to enable filtering.
        #/// </param>
        #public client void pdsBatchLookup(
        #    FormStringControl   _formControl,
        #    str                 _filterstr,
        #    FormDataSource      _datasource)
        #{
        #    SysTableLookup          lookup;
        #    boolean                 filter =  SysTableLookup::filterLookupPreRun(_formControl, _formControl, _datasource);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    qbds;
        #
        #    lookup = SysTableLookup::newParameters(tableNum(PdsBatchAttrib), _formControl);
        #    qbds = query.addDataSource(tableNum(PdsBatchAttrib));
        #    qbds.addRange(fieldNum(PdsBatchAttrib, PdsBatchAttribType)).value(SysQuery::value(PdsBatchAttribType::Integer));
        #    qbds.addRange(fieldNum(PdsBatchAttrib, PdsBatchAttribType)).value(SysQuery::value(PdsBatchAttribType::Realnumber));
        #    lookup.parmQuery(query);
        #    lookup.addLookupfield(fieldNum(PdsBatchAttrib, PdsBatchAttribId));
        #    lookup.performFormLookup();
        #
        #    SysTableLookup::filterLookupPostRun(filter, _filterstr, _formControl, _datasource);
        #}
      ENDSOURCE
      SOURCE #pdsCheck
        #/// <summary>
        #/// Specifies whether the shelf life tests should be executed for the item.
        #/// </summary>
        #/// <returns>
        #/// True if the shelf life tests must be executed; otherwise, false.
        #/// </returns>
        #public PdsCheck pdsCheck()
        #{
        #    return #PdsShelfEnabled && this.modelGroup().PdsCheck;
        #}
      ENDSOURCE
      SOURCE #pdsCheckApprovedVendorList
        #/// <summary>
        #/// Specifies whether the item has an approved vendor list.
        #/// </summary>
        #/// <returns>
        #/// True if the item has a valid approved vendor list; otherwise, false.
        #/// </returns>
        #private boolean pdsCheckApprovedVendorList()
        #{
        #    PdsApprovedVendorListCheck  avlCheck;
        #    boolean                     ret = true;
        #
        #    avlCheck = PdsApprovedVendorListCheck::newFromTable(this);
        #    ret = avlCheck.validateCheck();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #pdsCheckCWItemSetup
        #/// <summary>
        #///    Checks whether the catch weigh has been completely defined.
        #/// </summary>
        #/// <returns>
        #///    true if the item has been defined; otherwise false.
        #/// </returns>
        #public boolean pdsCheckCWItemSetup()
        #{
        #    boolean ret = true;
        #
        #    if (this.productHasCWSetup() && !this.pdsCWItem())
        #    {
        #        ret = checkFailed("@PDS1969");
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #pdsCheckSameLot
        #/// <summary>
        #/// Specifies whether the item can be used for the same lot batch reservation.
        #/// </summary>
        #/// <returns>
        #/// true if the item can be used for the same lot batch reservation functionality; otherwise, false
        #/// </returns>
        #public boolean pdsCheckSameLot()
        #{
        #    EcoResTrackingDimGroupSetup      ecoResTrackingDimGroupSetup = EcoResTrackingDimGroupSetup::newDimensionGroup(this.trackingDimensionGroup());
        #
        #    return this.modelGroup().PdsSameLot
        #        && ecoResTrackingDimGroupSetup.getFieldSetup(fieldNum(InventDim,InventBatchId)).isActive()
        #        && ecoResTrackingDimGroupSetup.getFieldSetup(fieldNum(InventDim,InventBatchId)).isCoveragePlanByDimensionEnabled()
        #        && ! ecoResTrackingDimGroupSetup.getFieldSetup(fieldNum(InventDim,InventSerialId)).isActive();
        #}
      ENDSOURCE
      SOURCE #pdsCWCheckBatchNumGroupId
        #/// <summary>
        #/// Specifies whether the assigned batch number group is valid for a catch weight item.
        #/// </summary>
        #/// <returns>
        #/// True if the batch number group is valid; otherwise, false.
        #/// </returns>
        #public boolean pdsCWCheckBatchNumGroupId()
        #{
        #    InventNumGroup      numGroup;
        #    boolean             ret = true;
        #
        #    if (this.BatchNumGroupId)
        #    {
        #        numGroup = InventNumGroup::find(this.BatchNumGroupId);
        #        if (numGroup.PerQty)
        #        {
        #            ret = checkFailed(strFmt("@PDS116", fieldPName(InventTable,BatchNumGroupId)));
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #pdsCWCheckItemType
        #/// <summary>
        #/// Specifies whether the item and production type are valid for a catch weight item.
        #/// </summary>
        #/// <returns>
        #/// True if the item and production type are valid for a catch weight item; otherwise, false.
        #/// </returns>
        #public boolean pdsCWCheckItemType()
        #{
        #    boolean ret = true;
        #
        #    if (#PdsCatchWeightEnabled)
        #    {
        #        if (this.PmfProductType == PmfProductType::BOM
        #            || this.ItemType    == ItemType::Service)
        #        {
        #            ret = checkFailed("@PDS117");
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #pdsCWCheckSerialNumGroupId
        #/// <summary>
        #/// Specifies whether the assigned serial number group is valid for a catch weight item.
        #/// </summary>
        #/// <returns>
        #/// True if the assigned serial number group is valid for a catch weight item; otherwise, false.
        #/// </returns>
        #public boolean pdsCWCheckSerialNumGroupId()
        #{
        #    InventNumGroup      numGroup;
        #    boolean             ret = true;
        #
        #    if (this.SerialNumGroupId)
        #    {
        #        numGroup = InventNumGroup::find(this.SerialNumGroupId);
        #        if (numGroup.PerQty)
        #        {
        #            ret = checkFailed(strFmt("@PDS116", fieldPName(InventTable,SerialNumGroupId)));
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #pdsCWItem
        #/// <summary>
        #/// Specifies whether the item is a catch weight item.
        #/// </summary>
        #/// <returns>
        #/// True if the item is a catch weight item; otherwise, false.
        #/// </returns>
        #//BP Deviation Documented
        #public display NoYes pdsCWItem()
        #{
        #    return pdsIsCWItem(this.ItemId);
        #}
      ENDSOURCE
      SOURCE #pdsDefaultOrderType
        #/// <summary>
        #///     Gets the default order type of the product, for the current legal entity.
        #/// </summary>
        #/// <returns>
        #///     The default order type of the product
        #/// </returns>
        #[SysClientCacheDataMethodAttribute(true)]
        #public display ReqPOType pdsDefaultOrderType()
        #{
        #    return this.inventItemSetupSupplyType().DefaultOrderType;
        #}
      ENDSOURCE
      SOURCE #pdsEffectExpiryDate
        #/// <summary>
        #/// Gets the effective expiry date for this item.
        #/// </summary>
        #/// <param name="_prodDate">
        #/// The base date to calculate the effective date from.
        #/// </param>
        #/// <returns>
        #/// The effective expiry date for the item.
        #/// </returns>
        #public date pdsEffectExpiryDate(date _prodDate)
        #{
        #    date                expDate;
        #
        #    if (#PdsShelfEnabled && this.PdsShelfLife)
        #    {
        #        expDate = _prodDate + this.pdsExpiryDays();
        #    }
        #
        #    return expDate;
        #}
      ENDSOURCE
      SOURCE #pdsExpiryDays
        #/// <summary>
        #/// Gets the number of days until an inventory batch for this item expires.
        #/// </summary>
        #/// <returns>
        #/// The number of days until an inventory batch expires.
        #/// </returns>
        #public PdsLeadTimeLife pdsExpiryDays()
        #{
        #    InventModelGroup    modelGroup;
        #    PdsLeadTimeLife     expDays;
        #
        #    if (#PdsShelfEnabled && this.PdsShelfLife)
        #    {
        #        expDays = this.PdsShelfLife;
        #
        #        modelGroup = this.modelGroup();
        #
        #        if (modelGroup.PdsCheck && modelGroup.PdsPickCriteria == PdsPickCriteria::BestBeforeDate)
        #        {
        #            expDays -= (this.PdsBestBefore + 1);
        #        }
        #    }
        #
        #    return expDays;
        #}
      ENDSOURCE
      SOURCE #pdsIsBestBeforeMandatory
        #/// <summary>
        #///     Checks if this product must have a best before date defined.
        #/// </summary>
        #/// <returns>
        #///     true if the item is shelf life capable, the model group has FEFO logic defined and pick criteria is set to best before date.
        #/// </returns>
        #public boolean pdsIsBestBeforeMandatory()
        #{
        #    InventModelGroupItem    modelGroupItem  = InventModelGroupItem::findByItemIdLegalEntity(this.ItemId);
        #    InventModelGroup        modelGroup      = InventModelGroup::find(modelGroupItem.ModelGroupId);
        #
        #    return this.pdsIsShelfLifeCapable()
        #        && (modelGroup.PdsCheck == NoYes::Yes)
        #        && (modelGroup.PdsPickCriteria == PdsPickCriteria::BestBeforeDate);
        #}
      ENDSOURCE
      SOURCE #pdsIsShelfLifeCapable
        #/// <summary>
        #///     Checks if this product allows editing of shelf Life information.
        #/// </summary>
        #/// <returns>
        #///     true if the item has batch dimension active, is not a service item and is marked as a stocked product.
        #/// </returns>
        #public boolean pdsIsShelfLifeCapable()
        #{
        #    InventModelGroupItem    modelGroupItem  = InventModelGroupItem::findByItemIdLegalEntity(this.ItemId);
        #    InventModelGroup        modelGroup      = InventModelGroup::find(modelGroupItem.ModelGroupId);
        #
        #    return #PdsShelfEnabled
        #        && this.isItemBatchActivated()
        #        && (this.ItemType != ItemType::Service)
        #        && modelGroup   // is defined
        #        && modelGroup.isStocked();
        #}
      ENDSOURCE
      SOURCE #pdsIsShelfLifeMandatory
        #/// <summary>
        #///     Checks if this product must have a shelf Life date defined.
        #/// </summary>
        #/// <returns>
        #///     true if the item is shelf life capable, the model group has FEFO logic defined and pick criteria is set to expiry date.
        #/// </returns>
        #public boolean pdsIsShelfLifeMandatory()
        #{
        #    InventModelGroupItem    modelGroupItem  = InventModelGroupItem::findByItemIdLegalEntity(this.ItemId);
        #    InventModelGroup        modelGroup      = InventModelGroup::find(modelGroupItem.ModelGroupId);
        #
        #    return this.pdsIsShelfLifeCapable()
        #        && (modelGroup.PdsCheck == NoYes::Yes)
        #        && (modelGroup.PdsPickCriteria == PdsPickCriteria::ExpiryDate);
        #}
      ENDSOURCE
      SOURCE #pdsMRCRegulatedMaterial
        #/// <summary>
        #/// Specifies whether the item is a regulated material.
        #/// </summary>
        #/// <returns>
        #/// The <c>NoYes::Yes</c> value if the item is a regulated material; otherwise the <c>NoYes::No</c> enumeration value.
        #/// </returns>
        #//BP Deviation documented
        #public display NoYes pdsMRCRegulatedMaterial()
        #{
        #    NoYes ret;
        #
        #    ret = PdsMRCRegulatedCountry::isRegulated(this.ItemId);
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #pdsMRCRestrictedMaterial
        #/// <summary>
        #/// Specifies whether the item is a restricted material.
        #/// </summary>
        #/// <returns>
        #/// The <c>NoYes::Yes</c> enumeration value if the item is a restricted material;
        #/// otherwise, the <c>NoYes::No</c> enumeration value.
        #/// </returns>
        #//BP Deviation documented
        #public display NoYes pdsMRCRestrictedMaterial()
        #{
        #    NoYes ret;
        #
        #    ret = PdsMRCRestrictedListByItem::checkItemIsRestricted(this.ItemId);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #pdsQualOrdWarning
        #/// <summary>
        #/// Shows a warning for additional requirements.
        #/// </summary>
        #/// <remarks>
        #/// These additional requirements do not prohibit the saving of the item record.
        #/// </remarks>
        #public void pdsQualOrdWarning()
        #{
        #    if (this.pdsPotencyAttribRecording == PDSPotencyAttribRecordingEnum::Quality
        #        && this.orig().pdsPotencyAttribRecording != PDSPotencyAttribRecordingEnum::Quality)
        #    {
        #        warning("@PSC235");
        #        warning("@PSC236");
        #        warning("@PSC237");
        #    }
        #}
      ENDSOURCE
      SOURCE #pdsValidateBestBeforeDays
        #/// <summary>
        #/// Specifies whether the best before days field is valid for the item.
        #/// </summary>
        #/// <returns>
        #/// True if the best before days are valid; otherwise, false.
        #/// </returns>
        #private boolean pdsValidateBestBeforeDays()
        #{
        #    boolean ret = true;
        #
        #    if (this.pdsIsShelfLifeCapable())
        #    {
        #        if (!(this.PdsBestBefore == 0 && this.PdsShelfLife == 0)
        #            && this.PdsBestBefore >= this.PdsShelfLife)
        #        {
        #            ret = checkFailed("@PRO1972");
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #pmfHasFormulaWithCoProdOutput
        #/// <summary>
        #/// Determines if the item is a formula or planning item that has additional co-product outputs.
        #/// </summary>
        #/// <returns>
        #/// true if the item is a formula or planing item that has additional co-product outputs; otherwise, false.
        #/// </returns>
        #public boolean pmfHasFormulaWithCoProdOutput()
        #{
        #    BOMVersion      bomVersion;
        #    PmfFormulaCoBy  pmfFormulaCoBy;
        #    boolean         ret = false;
        #
        #    if (this.PmfProductType == PmfProductType::MainItem)
        #    {
        #        ret = true;
        #    }
        #    else
        #    {
        #        if (this.PmfProductType == PmfProductType::Formula)
        #        {
        #            select firstonly RecId from bomVersion
        #                where bomVersion.ItemId == this.ItemId
        #                exists join pmfFormulaCoBy
        #                    where pmfFormulaCoBy.bomVersionRefRecId == bomVersion.RecId
        #                       && pmfFormulaCoBy.ProductType        == PmfProductType::Co_Product;
        #
        #            ret = (bomVersion.RecId != 0);
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #pmfImageResNo
        #/// <summary>
        #/// Gets the image resource matching the item type and production type of the item.
        #/// </summary>
        #/// <returns>
        #/// The image resource for the item.
        #/// </returns>
        #public int pmfImageResNo()
        #{
        #    #resAppl
        #    int imageResNo;
        #
        #    if (this.ItemType == ItemType::Item)
        #    {
        #        switch (this.PmfProductType)
        #        {
        #            case PmfProductType::Co_Product :
        #                imageResNo = #ImageConflictManuallyResolvedBelow;
        #                break;
        #            case PmfProductType::By_Product :
        #                imageResNo = #ImageConflictResolvableBelow;
        #                break;
        #            default :
        #                break;
        #        }
        #    }
        #    else
        #    {
        #        imageResNo = #ImageOverlayPrinterArchive;
        #    }
        #    return imageResNo;
        #}
      ENDSOURCE
      SOURCE #pmfInventProductType
        #/// <summary>
        #/// Gets the <c>PmfInventProductType</c> class that corresponds to the current <c>InventTable</c> record.
        #/// </summary>
        #/// <returns>
        #/// A <c>PmfInventProductType</c> class corresponding to the current <c>InventTable</c> record.
        #/// </returns>
        #public PmfInventProductType pmfInventProductType()
        #{
        #    return PmfInventProductType::newInventTable(this);
        #}
        #
      ENDSOURCE
      SOURCE #primaryVendorId
        #public VendAccount primaryVendorId(
        #    InventDimId     _inventDimId    = '',           // can be = '' if setting the _inventDim buffer
        #    InventDim       _inventDim      = null)         // set this parameter for better performance if avail
        #{
        #    ReqSetupDim     reqSetupDim;
        #
        #    if (! _inventDimId && prmisDefault(_inventDim))
        #    {
        #        return this.PrimaryVendorId;
        #    }
        #
        #    reqSetupDim = ReqSetupDim::newInventTable(this,_inventDimId,_inventDim);
        #
        #    if (reqSetupDim)
        #    {
        #        return reqSetupDim.primaryVendId();
        #    }
        #
        #    return this.PrimaryVendorId;
        #}
      ENDSOURCE
      SOURCE #productDescription
        #/// <summary>
        #/// Retrieves the description of the product that this item represents.
        #/// </summary>
        #/// <param name="_languageId">
        #/// The ID of a language in which to retrieve the name.
        #/// </param>
        #/// <param name="_inventDimId">
        #/// The record ID of the <c>InventDim</c> record for which to retrieve the description.
        #/// </param>
        #/// <returns>
        #/// The description of a product.
        #/// </returns>
        #/// <remarks>
        #/// The function tries to find a product variant based on the value of the <paramref
        #/// name="_inventDimId" /> parameter.If the product variant is found then the description is returned;
        #/// Otherwise, the description of a product that this item represents is returned.
        #/// </remarks>
        #public client server EcoResDescription productDescription(
        #    LanguageId      _languageId,
        #    InventDimId     _inventDimId = InventDim::inventDimIdBlank())
        #{
        #    EcoResProductRecId  productRecId;
        #    InventDim           inventDim;
        #
        #    //check if a variant
        #    if (!prmisDefault(_inventDimId))
        #    {
        #        inventDim = InventDim::find(_inventDimId);
        #        productRecId = InventDimCombination::findByInventDim(this.ItemId, inventDim).DistinctProductVariant;
        #
        #    }
        #    //variant not found, get product from this
        #    if (!productRecId)
        #    {
        #        productRecId = this.Product;
        #    }
        #
        #    return EcoResProductTranslation::getDescriptionOrDefaultDescription(productRecId, _languageId);
        #}
      ENDSOURCE
      SOURCE #productDimensionGroup
        #/// <summary>
        #/// Retrieves a product dimension group ID related to the current item.
        #/// </summary>
        #/// <returns>
        #/// A product dimension group ID.
        #/// </returns>
        #public display EcoResProductDimensionGroupRecId productDimensionGroup()
        #{
        #    return EcoResProductDimensionGroupProduct::findByProduct(this.Product).ProductDimensionGroup;
        #}
      ENDSOURCE
      SOURCE #productDimensionGroupName
        #/// <summary>
        #/// Retrieves a product dimension group name that is related to the current item.
        #/// </summary>
        #/// <returns>
        #/// A product dimension group name.
        #/// </returns>
        #public display EcoResProductDimensionGroupName productDimensionGroupName()
        #{
        #    EcoResProductDimensionGroup ecoResProductDimensionGroup;
        #
        #    ecoResProductDimensionGroup = EcoResProductDimensionGroup::find(this.productDimensionGroup());
        #    return ecoResProductDimensionGroup.Name;
        #}
      ENDSOURCE
      SOURCE #productHasCWSetup
        #/// <summary>
        #/// Specifies whether the product definition for this item has catch-weight setup.
        #/// </summary>
        #/// <returns>
        #/// True if the product definition for this item has catch weight setup; otherwise, false.
        #/// </returns>
        #/// <remarks>
        #/// Method is cached as the product setup will never change.
        #/// </remarks>
        #[SysClientCacheDataMethodAttribute(false)]
        #public display NoYes productHasCWSetup()
        #{
        #    return EcoResProduct::find(this.Product).PdsCWProduct;
        #}
      ENDSOURCE
      SOURCE #productName
        #/// <summary>
        #/// Retrieves the name of a product that this item represents.
        #/// </summary>
        #/// <param name="_languageId">
        #/// The ID of the language for which the name is retrieved.
        #/// </param>
        #/// <param name="_inventDimId">
        #/// The ID of an <c>InventDim</c> record.
        #/// </param>
        #/// <returns>
        #/// The name of a product.
        #/// </returns>
        #/// <remarks>
        #/// The method finds a product variant that is based on the value of the <c>_inventDimId</c>
        #/// parameter.If the product variant is found then its name is returned; otherwise, the name of a
        #/// product that this item represents is returned.
        #/// </remarks>
        #public client server EcoResProductName productName(
        #    LanguageId      _languageId,
        #    InventDimId     _inventDimId = InventDim::inventDimIdBlank())
        #{
        #    EcoResProductRecId  productRecId;
        #    InventDim           inventDim;
        #
        #    //check if a variant
        #    if (!prmisDefault(_inventDimId))
        #    {
        #        inventDim = InventDim::find(_inventDimId);
        #        productRecId = InventDimCombination::findByInventDim(this.ItemId, inventDim).DistinctProductVariant;
        #
        #    }
        #    //variant not found, get product from this
        #    if (!productRecId)
        #    {
        #        productRecId = this.Product;
        #    }
        #
        #    return EcoResProduct::find(productRecId).productName(_languageId);
        #}
      ENDSOURCE
      SOURCE #productSubtype
        #/// <summary>
        #/// Retrieves a product subtype related to the current item.
        #/// </summary>
        #/// <returns>
        #/// A product subtype.
        #/// </returns>
        #public display EcoResProductSubtype productSubtype()
        #{
        #    InventTableExpanded         inventTableExpanded;
        #
        #    select ProductSubtype from inventTableExpanded where inventTableExpanded.ItemId == this.ItemId;
        #
        #    return inventTableExpanded.ProductSubtype;
        #}
      ENDSOURCE
      SOURCE #purchInventLocationId
        #/// <summary>
        #/// Gets a purchase warehouse ID.
        #/// </summary>
        #/// <param name="_inventLocationId">
        #/// The current purchase warehouse ID.
        #/// </param>
        #/// <param name="_inventDimId">
        #/// The inventory dimension ID for which to retrieve a warehouse; optional.
        #/// </param>
        #/// <param name="_inventSiteIdParent">
        #/// A purchase site ID to which the <paramref name="_inventLocationId" /> parameter belongs; optional.
        #/// </param>
        #/// <returns>
        #/// A purchase warehouse ID.
        #/// </returns>
        #/// <remarks>
        #/// The value of the <paramref name="_inventLocationId" /> will be returned back if it is not empty and
        #/// the mandatory warehouse parameter is not set on the item's purchase order settings.If the <paramref
        #/// name="_inventDimId" /> parameter is not specified, the default settings are used.The <paramref
        #/// name="_inventSiteIdParent" /> parameter applies only when the <paramref name="_inventLocationId" />
        #/// parameter is specified.If the <paramref name="_inventSiteIdParent" /> and <paramref
        #/// name="_inventLocationId" /> parameters are passed and no site specific settings are found, the
        #/// check whether the passed <paramref name="_inventLocationId" /> parameter belongs to the site
        #/// specified by the <paramref name="_inventSiteIdParent" /> parameter will be performed, and if it
        #/// does not, then an empty string will be returned back, but if it does, then the <paramref
        #/// name="_inventLocationId" /> parameter is returned.
        #/// </remarks>
        #
        #public display InventLocationId purchInventLocationId(
        #    InventLocationId    _inventLocationId   = '',
        #    InventDimId         _inventDimId        = InventDim::inventDimIdBlank(),
        #    InventSiteId        _inventSiteIdParent = '')
        #{
        #    return this.inventItemPurchSetup(_inventDimId).inventLocationId(_inventLocationId, this, _inventSiteIdParent);
        #}
      ENDSOURCE
      SOURCE #purchInventSiteId
        #public display PurchInventSiteId purchInventSiteId(InventSiteId _inventSiteId = '')
        #{
        #    return this.inventItemPurchSetup().inventSiteId(_inventSiteId, this);
        #}
      ENDSOURCE
      SOURCE #purchLineDisc
        #public display LineDiscCode    purchLineDisc()
        #{
        #    return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Purch).LineDisc;
        #}
      ENDSOURCE
      SOURCE #purchLowestQty
        #/// <summary>
        #/// Gets the minimum allowed inventory order quantity.
        #/// </summary>
        #/// <param name="_inventDimId">
        #/// The inventory dimension ID settings for which to find; optional.
        #/// </param>
        #/// <returns>
        #/// A minimum allowed inventory order quantity.
        #/// </returns>
        #/// <remarks>
        #/// If the <paramref name="_inventDimId" /> parameter is not specified, the default settings are used.
        #/// </remarks>
        #
        #public display QtyLowest purchLowestQty(InventDimId _inventDimId = InventDim::inventDimIdBlank())
        #{
        #    return this.inventItemPurchSetup(_inventDimId).getLowestQty();
        #}
      ENDSOURCE
      SOURCE #purchMarkupGroup
        #public display MarkupGroupId  purchMarkupGroup()
        #{
        #    return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Purch).MarkupGroupId;
        #}
      ENDSOURCE
      SOURCE #purchMultiLineDisc
        #public display PriceGroupId purchMultiLineDisc()
        #{
        #    return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Purch).MultiLineDisc;
        #}
      ENDSOURCE
      SOURCE #purchOverDeliveryPct
        #public display PurchOverDeliveryPct  purchOverDeliveryPct()
        #{
        #    return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Purch).OverDeliveryPct;
        #}
      ENDSOURCE
      SOURCE #purchPcsPrice
        #public display Price purchPcsPrice()
        #{
        #    return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Purch).pcsPrice();
        #}
      ENDSOURCE
      SOURCE #purchPriceAgreement
        #public server container purchPriceAgreement(
        #    TransDate           _priceDate,
        #    InventDim           _inventDim,
        #    Qty                 _qty,
        #    UnitOfMeasureSymbol _unit,
        #    VendAccount         _accountNum         = this.primaryVendorId(_inventDim.InventDimId,_inventDim),
        #    CurrencyCode        _currencyCode       = VendTable::find(_accountNum).Currency,
        #    boolean             _includeLineDisc    = true)
        #{
        #    VendTable           vendTable;
        #    InventTableModule   inventTableModule;
        #
        #    PriceDisc           priceDisc;
        #
        #    DiscAmount          lineDiscAmount;
        #    DiscPct             lineDiscPct;
        #
        #    Price               price;
        #    PriceMarkup         priceMarkup;
        #    // <GEERU>
        #    Price               priceSecCur;
        #    PriceMarkup         priceMarkupSecCur;
        #    #ISOCountryRegionCodes
        #    boolean             countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        #    // </GEERU>
        #    PriceUnit           priceUnit;
        #
        #    if (!_currencyCode)
        #    {
        #        _currencyCode = CompanyInfo::standardCurrency();
        #    }
        #
        #    inventTableModule= InventTableModule::find(this.ItemId, ModuleInventPurchSales::Purch);
        #
        #    if (_unit  != inventTableModule.UnitId)
        #    {
        #        _qty   = UnitOfMeasureConverter::convert(
        #            _qty,
        #            UnitOfMeasure::unitOfMeasureIdBySymbol(_unit),
        #            UnitOfMeasure::unitOfMeasureIdBySymbol(inventTableModule.UnitId),
        #            NoYes::Yes,
        #            InventTable::itemProduct(this.ItemId));
        #    }
        #
        #    vendTable= VendTable::find(_accountNum);
        #
        #    priceDisc = new PriceDisc(ModuleInventPurchSales::Purch,
        #                              this.ItemId,
        #                              _inventDim,
        #                              inventTableModule.UnitId,
        #                              _priceDate,
        #                              _qty,
        #                              vendTable.AccountNum,
        #                              _currencyCode);
        #
        #    if (!priceDisc.findPrice(vendTable.PriceGroup, false))
        #    {
        #        // Price agreement is not found
        #        // <GEERU>
        #        if (countryRegion_RU)
        #        {
        #            return [0, 1, 0, dateNull(), dateNull(), 0, 0];
        #        }
        #        else
        #        {
        #            return [0, 1, 0, dateNull(), dateNull()];
        #        }
        #        // </GEERU>
        #    }
        #
        #    price       = priceDisc.price();
        #    priceMarkup = priceDisc.markup();
        #    priceUnit   = priceDisc.priceUnit();
        #    // <GEERU>
        #    if (countryRegion_RU)
        #    {
        #        priceSecCur       = priceDisc.priceSecCur_RU();
        #        priceMarkupSecCur = priceDisc.markupSecCur_RU();
        #    }
        #    // </GEERU>
        #
        #    if (_includeLineDisc && priceDisc.findLineDisc(this.purchLineDisc(), vendTable.LineDisc))
        #    {
        #        lineDiscAmount  = priceDisc.lineDiscAmount();
        #        lineDiscPct     = priceDisc.lineDiscPct();
        #
        #        price       = ((price - lineDiscAmount) / (priceUnit ? priceUnit : 1)) * ((100 - lineDiscPct) / 100);
        #        price       = price * (priceUnit ? priceUnit : 1);
        #        priceMarkup = priceMarkup * ((100 - lineDiscPct) / 100);
        #    }
        #
        #    // <GEERU>
        #    if (countryRegion_RU)
        #    {
        #        return [Currency::mstPrice(price, _currencyCode),
        #            priceUnit,
        #            Currency::mstPrice(priceMarkup, _currencyCode),
        #            priceDisc.priceTable().FromDate,
        #            priceDisc.priceTable().ToDate,
        #            priceSecCur,
        #            priceMarkupSecCur];
        #    }
        #    else
        #    {
        #    // </GEERU>
        #        return [Currency::mstPrice(price, _currencyCode),
        #                priceUnit,
        #                Currency::mstPrice(priceMarkup, _currencyCode),
        #                priceDisc.priceTable().FromDate,
        #                priceDisc.priceTable().ToDate];
        #    // <GEERU>
        #    }
        #    // </GEERU>
        #}
      ENDSOURCE
      SOURCE #purchPriceUnit
        #public display PriceUnit  purchPriceUnit()
        #{
        #    return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Purch).getPriceUnit();
        #}
      ENDSOURCE
      SOURCE #purchStandardQty
        #/// <summary>
        #/// Gets the standard purchase order quantity.
        #/// </summary>
        #/// <param name="_inventDimId">
        #/// The inventory dimension ID settings for which to find; optional.
        #/// </param>
        #/// <returns>
        #/// A standard purchase order quantity.
        #/// </returns>
        #/// <remarks>
        #/// If the <paramref name="_inventDimId" /> parameter is not specified, the default settings are used.
        #/// </remarks>
        #
        #public display QtyStandard purchStandardQty(InventDimId _inventDimId = InventDim::inventDimIdBlank())
        #{
        #    return this.inventItemPurchSetup(_inventDimId).getStandardQty();
        #}
      ENDSOURCE
      SOURCE #purchSuppItemGroupId
        #public display InventSuppItemGroupId purchSuppItemGroupId()
        #{
        #    return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Purch).SuppItemGroupId;
        #}
      ENDSOURCE
      SOURCE #purchTaxItemGroupId
        #public display TaxItemGroup purchTaxItemGroupId()
        #{
        #    return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Purch).TaxItemGroupId;
        #}
      ENDSOURCE
      SOURCE #purchUnderDeliveryPct
        #public display PurchUnderDeliveryPct  purchUnderDeliveryPct()
        #{
        #    return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Purch).UnderDeliveryPct;
        #}
      ENDSOURCE
      SOURCE #purchUnitId
        #public display PurchUnit  purchUnitId()
        #{
        #    return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Purch).UnitId;
        #}
      ENDSOURCE
      SOURCE #renamePrimaryKey
        #public void renamePrimaryKey()
        #{
        #    BOMTable        bomTable;
        #    ItemId          oldItemId = this.orig().ItemId;
        #    InventTable     inventTable;
        #
        #    if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        #    {
        #        RetailConnActionManagement::errorOnRename(this);
        #    }
        #
        #    ttsbegin;
        #
        #    inventTable = this.orig().data(); // remember selected record
        #
        #    super();
        #
        #    DimensionStorage::syncRenamedValue(this, inventTable);
        #
        #    if (! BOMVersion::dictConfigurationKey().enabled())
        #    {
        #        bomTable = BOMTable::find(oldItemId);
        #        if (bomTable)
        #        {
        #            bomTable.bomId = this.ItemId;
        #            bomTable.renamePrimaryKey();
        #        }
        #    }
        #
        #    if (this.dataSource())
        #    {
        #        this.dataSource().research();
        #        if (inventTable) // restore selected record
        #        {
        #            this.dataSource().findRecord(inventTable);
        #        }
        #    }
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #routeId
        #public RouteId routeId(
        #    TransDate   _searchDate,
        #    FromQty     _searchQty,
        #    InventDim   _searchInventDim)
        #{
        #    return RouteVersion::findActive(this.ItemId, _searchDate, _searchQty, _searchInventDim).RouteId;
        #}
      ENDSOURCE
      SOURCE #routeIdConstruction
        #public RouteId routeIdConstruction(
        #    BOMRouteVersionSelect   _bomRouteVersionSelect,
        #    TransDate               _searchDate,
        #    FromQty                 _searchQty,
        #    InventDim               _searchInventDim)
        #{
        #    RouteVersion            routeVersion;
        #
        #    if (!this.RecId || !this.inventItemType().canHaveRoutes())
        #    {
        #        return '';
        #    }
        #
        #    if (_bomRouteVersionSelect == BOMRouteVersionSelect::Active)
        #    {
        #        return this.routeId(_searchDate, _searchQty, _searchInventDim);
        #    }
        #
        #    select firstonly RecId, RouteId from routeVersion
        #        where routeVersion.ItemId          == this.ItemId &&
        #              routeVersion.Construction    == NoYes::Yes;
        #
        #    if (_bomRouteVersionSelect == BOMRouteVersionSelect::Selected)
        #    {
        #        return routeVersion.RouteId;
        #    }
        #
        #    return routeVersion.RecId ? routeVersion.RouteId : this.routeId(_searchDate, _searchQty, _searchInventDim);
        #}
      ENDSOURCE
      SOURCE #salesInventLocationId
        #/// <summary>
        #/// Gets a sales warehouse ID.
        #/// </summary>
        #/// <param name="_inventLocationId">
        #/// The current sales warehouse ID.
        #/// </param>
        #/// <param name="_inventDimId">
        #/// The inventory dimension ID settings to find.
        #/// </param>
        #/// <param name="_inventSiteIdParent">
        #/// A sales site ID that the <paramref name="_inventLocationId" /> parameter should belong to; optional.
        #/// </param>
        #/// <returns>
        #/// A sales warehouse ID.
        #/// </returns>
        #
        #public display InventLocationId salesInventLocationId(
        #    InventLocationId    _inventLocationId   = '',
        #    InventDimId         _inventDimId        = InventDim::inventDimIdBlank(),
        #    InventSiteId        _inventSiteIdParent = '')
        #{
        #    return this.inventItemSalesSetup(_inventDimId).inventLocationId(_inventLocationId, this, _inventSiteIdParent);
        #}
      ENDSOURCE
      SOURCE #salesInventSiteId
        #public display SalesInventSiteId salesInventSiteId(InventSiteId _inventSiteId = '')
        #{
        #    return this.inventItemSalesSetup().inventSiteId(_inventSiteId, this);
        #}
      ENDSOURCE
      SOURCE #salesLineDisc
        #public display LineDiscCode    salesLineDisc()
        #{
        #    return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Sales).LineDisc;
        #}
      ENDSOURCE
      SOURCE #salesMarkupGroup
        #public display MarkupGroupId  salesMarkupGroup()
        #{
        #    return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Sales).MarkupGroupId;
        #}
      ENDSOURCE
      SOURCE #salesMultiLineDisc
        #public display PriceGroupId salesMultiLineDisc()
        #{
        #    return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Sales).MultiLineDisc;
        #}
      ENDSOURCE
      SOURCE #salesOverDeliveryPct
        #public display SalesOverDeliveryPct  salesOverDeliveryPct()
        #{
        #    return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Sales).OverDeliveryPct;
        #}
      ENDSOURCE
      SOURCE #salesPcsPrice
        #public display Price salesPcsPrice()
        #{
        #    return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Sales).pcsPrice();
        #}
      ENDSOURCE
      SOURCE #salesPriceAgreement
        #public server container salesPriceAgreement(
        #    TransDate           _searchDate,
        #    InventDim           _inventDim,
        #    Qty                 _qty,
        #    UnitOfMeasureSymbol _unit,
        #    CustAccount         _accountNum,
        #    CurrencyCode        _currencyCode,
        #    PriceGroupId        _priceGroupId = '')
        #{
        #    PriceDisc           priceDisc;
        #    InventTableModule   inventTableModule   = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Sales);
        #    CustTable           custTable;
        #    PriceGroupId        priceGroupId;
        #
        #    if (_unit != inventTableModule.UnitId)
        #    {
        #        _qty = UnitOfMeasureConverter::convert(
        #            _qty,
        #            UnitOfMeasure::unitOfMeasureIdBySymbol(_unit),
        #            UnitOfMeasure::unitOfMeasureIdBySymbol(inventTableModule.UnitId),
        #            NoYes::Yes,
        #            InventTable::itemProduct(this.ItemId));
        #    }
        #
        #    if (_priceGroupId)
        #    {
        #        priceGroupId = _priceGroupId;
        #    }
        #    else
        #    {
        #        custTable = CustTable::find(_accountNum);
        #        priceGroupId = custTable.PriceGroup;
        #    }
        #
        #    priceDisc = new PriceDisc(ModuleInventPurchSales::Sales,
        #                              this.ItemId,
        #                              _inventDim,
        #                              inventTableModule.UnitId,
        #                              _searchDate,
        #                              _qty,
        #                              _accountNum,
        #                              _currencyCode);
        #
        #    if (! priceDisc.findPrice(priceGroupId))
        #    {
        #        priceDisc.findItemPrice();
        #    }
        #
        #    return [priceDisc.price(), priceDisc.priceUnit(), priceDisc.markup()];
        #}
      ENDSOURCE
      SOURCE #salesPriceUnit
        #public display PriceUnit  salesPriceUnit()
        #{
        #    return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Sales).getPriceUnit();
        #}
      ENDSOURCE
      SOURCE #salesProcessSerialActive
        #/// <summary>
        #/// Returns a boolean value
        #/// indicating whether the Serial Number inventory dimension is active for sales process for current item or not.
        #/// </summary>
        #/// <returns>
        #/// True - if Serial Number inventoty dimension is active for sales process for current item, otherwise - False.
        #/// </returns>
        #boolean salesProcessSerialActive()
        #{
        #    return EcoResDimensionGroupSetup::isInventoryDimensionSalesProcessActive(this.ItemId, fieldNum(InventDim, InventSerialId));
        #}
      ENDSOURCE
      SOURCE #salesStandardQty
        #/// <summary>
        #/// Gets a standard sales order quantity.
        #/// </summary>
        #/// <param name="_inventDimId">
        #/// The inventory dimension ID settings to find; optional.
        #/// </param>
        #/// <returns>
        #/// A standard sales order quantity.
        #/// </returns>
        #
        #public display QtyStandard salesStandardQty(InventDimId _inventDimId = InventDim::inventDimIdBlank())
        #{
        #    return this.inventItemSalesSetup(_inventDimId).getStandardQty();
        #}
      ENDSOURCE
      SOURCE #salesSuppItemGroupId
        #public display InventSuppItemGroupId salesSuppItemGroupId()
        #{
        #    return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Sales).SuppItemGroupId;
        #}
      ENDSOURCE
      SOURCE #salesTaxItemGroupId
        #public display TaxItemGroup salesTaxItemGroupId()
        #{
        #    return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Sales).TaxItemGroupId;
        #}
      ENDSOURCE
      SOURCE #salesUnderDeliveryPct
        #public display SalesUnderDeliveryPct  salesUnderDeliveryPct()
        #{
        #    return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Sales).UnderDeliveryPct;
        #}
      ENDSOURCE
      SOURCE #salesUnitId
        #public display SalesUnit  salesUnitId()
        #{
        #    return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Sales).UnitId;
        #}
      ENDSOURCE
      SOURCE #serviceCode_BR
        #/// <summary>
        #/// Returns the service code for a service.
        #/// </summary>
        #/// <param name="_logisticsPostalAddress"><c>LogisticsPostalAddress</c> related to the service code</param>
        #/// <returns>Returns the company service code if a <c>LogisticsPostalAddress</c> is not provided. Otherwise return the the child service code related to the <c>LogisticsPostalAddress</c></returns>
        #// <GBR>
        #public TaxServiceCode_BR serviceCode_BR(LogisticsPostalAddress _logisticsPostalAddress = null)
        #{
        #    ;
        #    if(_logisticsPostalAddress)
        #    {
        #        return TaxServiceCode_BR::findDlvServiceCode(this.TaxServiceCode_BR,
        #                                                    _logisticsPostalAddress.CountryRegionId,
        #                                                    _logisticsPostalAddress.State,
        #                                                    _logisticsPostalAddress.City);
        #    }
        #    return TaxServiceCode_BR::findCompanyServiceCode(this.TaxServiceCode_BR);
        #}
        #// </GBR>
      ENDSOURCE
      SOURCE #showCSSItemDescription
        #/// <summary>
        #/// Indicates whether the SPCSS item description Web page must show when an item is added to the basket.
        #/// </summary>
        #/// <returns>
        #/// true if the configuration, the size, or the color is active for the item and if the item has
        #/// standard values; otherwise, false.
        #/// </returns>
        #public boolean  showCSSItemDescription()
        #{
        #    boolean  itemDescription;
        #
        #
        #    if (this.StandardConfigId)
        #    {
        #        itemDescription = false;
        #    }
        #    else
        #    {
        #        itemDescription = this.hasConfigs();
        #    }
        #
        #    if (!itemDescription)
        #    {
        #        if (this.StandardInventColorId
        #            && this.StandardInventStyleId
        #            && this.StandardInventSizeId)
        #        {
        #            itemDescription = false;
        #        }
        #        else
        #        {
        #            itemDescription = this.hasProductDimensions();
        #        }
        #    }
        #
        #    return itemDescription;
        #}
      ENDSOURCE
      SOURCE #sizeActive
        #public display boolean sizeActive()
        #{
        #    return EcoResProductDimGroupSetup::newItemId(this.ItemId).getFieldSetup(fieldNum(InventDim, InventSizeId)).isActive();
        #}
      ENDSOURCE
      SOURCE #storageDimensionGroup
        #/// <summary>
        #/// Retrieves the ID of a storage dimension group that is related to the current item.
        #/// </summary>
        #/// <returns>
        #/// The ID of a storage dimension group.
        #/// </returns>
        #public EcoResStorageDimensionGroupRecId storageDimensionGroup()
        #{
        #    return EcoResStorageDimensionGroupItem::findByItem(this.DataAreaId, this.ItemId).StorageDimensionGroup;
        #}
      ENDSOURCE
      SOURCE #styleActive
        #/// <summary>
        #///    Checks if the style dimension is active for this item.
        #/// </summary>
        #/// <returns>
        #///    true if the style dimension is active; otherwise, false.
        #/// </returns>
        #public display boolean styleActive()
        #{
        #    return EcoResProductDimGroupSetup::newItemId(this.ItemId).getFieldSetup(fieldNum(InventDim, InventStyleId)).isActive();
        #}
      ENDSOURCE
      SOURCE #title
        #/// <summary>
        #///    Retrieves the ID and a product name of the current product per company and combines it into a title.
        #/// </summary>
        #/// <returns>
        #///    The title of the current product per company.
        #/// </returns>
        #/// <remarks>
        #///    The method is used as a title in product per company list page and details forms.
        #/// </remarks>
        #[SysClientCacheDataMethodAttribute]
        #public display EcoResProductTitle title()
        #{
        #    EcoResProductName   productName;
        #
        #    productName = EcoResProductTranslation::getNameOrDefaultName(this.Product, CompanyInfo::languageId());
        #    if (productName)
        #    {
        #        return strFmt('%1 : %2', this.ItemId, productName);
        #    }
        #
        #    return this.ItemId;
        #}
      ENDSOURCE
      SOURCE #totalAvailPhysical
        #/// <summary>
        #/// Calculates the total physical quantity available for the specified item.
        #/// </summary>
        #/// <returns>
        #/// the available physical quantity value.
        #/// </returns>
        #//BP Deviation documented
        #display InventQtyAvailPhysical totalAvailPhysical()
        #{
        #    return InventSum::hhtAvailPhysical(this.ItemId);
        #}
      ENDSOURCE
      SOURCE #trackingDimensionGroup
        #/// <summary>
        #/// Retrieves the ID of a tracking dimension group that is related to the current item.
        #/// </summary>
        #/// <returns>
        #/// The ID of a tracking dimension group.
        #/// </returns>
        #public EcoResTrackingDimensionGroupRecId trackingDimensionGroup()
        #{
        #    return EcoResTrackingDimensionGroupItem::findByItem(this.DataAreaId, this.ItemId).TrackingDimensionGroup;
        #}
      ENDSOURCE
      SOURCE #update
        #public void update()
        #{
        #    InventTable     this_Orig           = this.orig();
        #    boolean         productHasCWSetup   = this.productHasCWSetup();
        #
        #    InventItemSetupSupplyType   inventItemSetupSupplyType;
        #
        #    if (!this.pdsValidateBestBeforeDays())
        #    {
        #        return;
        #    }
        #
        #    ttsbegin;
        #
        #    if (this.isModelGroupSetup())
        #    {
        #        this.modelGroup().inventModelType().preUpdateInventTable(this);
        #    }
        #
        #    BOMLevelCalc::checkLevelRecalcInventTable(this);
        #
        #    if (this.PmfProductType != this_Orig.PmfProductType
        #        && ( (this.PmfProductType == PmfProductType::Formula && !productHasCWSetup)
        #           || this.PmfProductType == PmfProductType::MainItem
        #           || this.PmfProductType == PmfProductType::Co_Product))
        #    {
        #        inventItemSetupSupplyType = this.inventItemSetupSupplyType(true);
        #        inventItemSetupSupplyType.DefaultOrderType = ReqPOType::Production;
        #        inventItemSetupSupplyType.update();
        #    }
        #
        #    super();
        #
        #    // Update the full text search table.
        #    MCRFullTextSearch::update(this);
        #
        #    this.SysExtensionSerializerMap::postUpdate();
        #
        #
        #    if (this_Orig.SalesModel                != this.SalesModel              ||
        #        this_Orig.SalesPriceModelBasic      != this.SalesPriceModelBasic    ||
        #        this_Orig.SalesContributionRatio    != this.SalesContributionRatio  ||
        #        this_Orig.SalesPercentMarkup        != this.SalesPercentMarkup)
        #    {
        #        InventTable::updateAutoSalesPrice(this.ItemId);
        #    }
        #
        #    this.insertBOMTable();
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #updateAutoSalesPercent
        #public server boolean updateAutoSalesPercent()
        #{
        #    InventTableModule   inventTableSales;
        #    InventTableModule   inventTableBasic;
        #
        #    if (this.SalesModel == SalesPriceModel::None)
        #    {
        #        return false;
        #    }
        #
        #    inventTableSales = InventTableModule::find(this.ItemId,ModuleInventPurchSales::Sales,true);
        #
        #    if (this.SalesPriceModelBasic == SalesPriceModelBasic::PurchPrice)
        #    {
        #        inventTableBasic = InventTableModule::find(this.ItemId,ModuleInventPurchSales::Purch);
        #    }
        #    else
        #    {
        #        inventTableBasic = InventTableModule::find(this.ItemId,ModuleInventPurchSales::Invent);
        #    }
        #
        #    if (! inventTableSales || ! inventTableBasic)
        #    {
        #        return false;
        #    }
        #
        #    switch(this.SalesModel)
        #    {
        #        case SalesPriceModel::Contributionratio:
        #            if (inventTableSales.pcsPrice())
        #            {
        #                this.SalesContributionRatio = (inventTableSales.pcsPrice() - inventTableBasic.pcsPrice()) * 100 / inventTableSales.pcsPrice();
        #            }
        #            break;
        #        case SalesPriceModel::PercentMarkup:
        #            if (inventTableBasic.pcsPrice())
        #            {
        #                this.SalesPercentMarkup = (inventTableSales.pcsPrice() - inventTableBasic.pcsPrice()) * 100 / inventTableBasic.pcsPrice();
        #                this.SalesPercentMarkup = this.SalesPercentMarkup < 0 ? 0 : this.SalesPercentMarkup; // SalesPercentMarkup should never be negative
        #            }
        #            break;
        #        default:
        #    }
        #
        #    this.update();
        #    return true;
        #}
      ENDSOURCE
      SOURCE #updateCheckFix
        #public server void updateCheckFix(InventConsistencyCheck_Table _inventConsistencyCheck_Table)
        #{
        #    InventTableModule                   inventTableModule;
        #    InventItemLocation                  inventItemLocation;
        #    InventDimGroupFieldSetup            inventDimGroupFieldSetup;
        #    Counter                             serialNoErrors;
        #    InventSum                           inventSum;
        #    InventDim                           inventDim;
        #    InventSerial                        inventSerial;
        #
        #    void addError(str _str)
        #    {
        #        checkFailed(_str, '', SysInfoAction_TableField::newBuffer(this));
        #    }
        #
        #    setPrefix(fieldLabelValue(this.TableId, fieldNum(InventTable,ItemId), this.ItemId));
        #
        #    inventTableModule = InventTableModule::find(this.ItemId,ModuleInventPurchSales::Purch,true);
        #    if (! inventTableModule)
        #    {
        #        addError(strFmt("@SYS55203",ModuleInventPurchSales::Purch));
        #        if (_inventConsistencyCheck_Table.checkFix() == CheckFix::Fix)
        #        {
        #            inventTableModule.initValue();
        #            inventTableModule.ItemId        = this.ItemId;
        #            inventTableModule.ModuleType    = ModuleInventPurchSales::Purch;
        #            inventTableModule.insert();
        #
        #            _inventConsistencyCheck_Table.updateCorrected();
        #        }
        #    }
        #
        #    inventTableModule = InventTableModule::find(this.ItemId,ModuleInventPurchSales::Invent,true);
        #    if (! inventTableModule)
        #    {
        #        addError(strFmt("@SYS55203",ModuleInventPurchSales::Invent));
        #        if (_inventConsistencyCheck_Table.checkFix() == CheckFix::Fix)
        #        {
        #            inventTableModule.initValue();
        #            inventTableModule.ItemId        = this.ItemId;
        #            inventTableModule.ModuleType    = ModuleInventPurchSales::Invent;
        #            inventTableModule.insert();
        #
        #            _inventConsistencyCheck_Table.updateCorrected();
        #        }
        #    }
        #
        #    inventTableModule = InventTableModule::find(this.ItemId,ModuleInventPurchSales::Sales,true);
        #    if (! inventTableModule)
        #    {
        #        addError(strFmt("@SYS55203",ModuleInventPurchSales::Sales));
        #        if (_inventConsistencyCheck_Table.checkFix() == CheckFix::Fix)
        #        {
        #            inventTableModule.initValue();
        #            inventTableModule.ItemId        = this.ItemId;
        #            inventTableModule.ModuleType    = ModuleInventPurchSales::Sales;
        #            inventTableModule.insert();
        #
        #            _inventConsistencyCheck_Table.updateCorrected();
        #        }
        #    }
        #
        #    inventItemLocation = InventItemLocation::findDefault(this.ItemId,true);
        #    if (! inventItemLocation)
        #    {
        #        addError("@SYS55204");
        #        if (_inventConsistencyCheck_Table.checkFix() == CheckFix::Fix)
        #        {
        #            inventItemLocation.initValue();
        #            inventItemLocation.ItemId        = this.ItemId;
        #            inventItemLocation.InventDimId   = InventDim::inventDimIdBlank();
        #            inventItemLocation.insert();
        #
        #            _inventConsistencyCheck_Table.updateCorrected();
        #        }
        #    }
        #
        #    // Check the extra serial number control
        #    inventDimGroupFieldSetup = EcoResDimensionGroupSetup::getFieldSetupForItem(this.ItemId, fieldNum(InventDim, InventSerialId));
        #    if (   inventDimGroupFieldSetup.dimFieldId()
        #        && inventDimGroupFieldSetup.isActive()
        #        && inventDimGroupFieldSetup.isSerialNumberControlEnabled())
        #    {
        #        while select inventSum
        #            where inventSum.ItemId      == this.ItemId      &&
        #                  inventSum.ClosedQty   == NoYes::No        &&
        #                  (inventSum.PhysicalInvent != 0            ||
        #                   inventSum.Arrived        != 0)
        #        {
        #            inventDim = inventSum.inventDim();
        #            if (inventDim.InventSerialId && !InventSerial::exist(this.ItemId, inventDim.InventSerialId))
        #            {
        #                serialNoErrors++;
        #                if (_inventConsistencyCheck_Table.checkFix() == CheckFix::Fix)
        #                {
        #                    inventSerial.ItemId             = this.ItemId;
        #                    inventSerial.InventSerialId     = inventDim.InventSerialId;
        #                    inventSerial.insert();
        #                }
        #            }
        #        }
        #        if (serialNoErrors > 0)
        #        {
        #            addError(strFmt("@SYS68715", this.ItemId, serialNoErrors));
        #            if (_inventConsistencyCheck_Table.checkFix() == CheckFix::Fix)
        #            {
        #                _inventConsistencyCheck_Table.updateCorrected();
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #updateLastCostPrice
        #public server void updateLastCostPrice(
        #    CostAmount      _value,
        #    InventQty       _qty,
        #    PriceDate       _priceDate,
        #    InventDim       _inventDim)
        #{
        #    InventTableModule       inventTableModule;
        #    CostPrice       costPrice;
        #
        #    void initInventTableModule()
        #    {
        #        inventTableModule.Price     = costPrice;
        #        inventTableModule.Markup    = 0;
        #        inventTableModule.PriceDate = _priceDate;
        #    }
        #
        #    if (!_value)
        #    {
        #        return;
        #    }
        #
        #    if (this.CostModel && _qty > 0 && _value  > 0 && this.modelGroup().inventModelType().mustUpdateInventTableCostPrice())
        #    {
        #        inventTableModule = InventTableModule::find(this.ItemId,ModuleInventPurchSales::Invent);
        #        costPrice         = Currency::price(inventTableModule.getPriceUnit() * _value / _qty);
        #
        #        if (inventTableModule.PriceDate <= _priceDate)
        #        {
        #            if (costPrice != inventTableModule.Price)
        #            {
        #                inventTableModule = InventTableModule::find(this.ItemId,ModuleInventPurchSales::Invent,true);
        #
        #                initInventTableModule();
        #                inventTableModule.update(false);
        #            }
        #        }
        #
        #        initInventTableModule();
        #        InventItemPrice::updateLastCostPrice(inventTableModule, _inventDim, _priceDate);
        #    }
        #}
      ENDSOURCE
      SOURCE #updateLastCostPriceSecCur_RU
        #public server void updateLastCostPriceSecCur_RU(
        #    CostAmount       _value,
        #    InventQty        _qty,
        #    PriceDate        _priceDate,
        #    InventDim        _inventDim)
        #{
        #    InventTableModule       inventTableModule;
        #    CostPrice               costPrice;
        #
        #    void initInventTableModule()
        #    {
        #        inventTableModule.PriceSecCur_RU  = costPrice;
        #        inventTableModule.MarkupSecCur_RU = 0;
        #        inventTableModule.PriceDate       = _priceDate;
        #    }
        #
        #    if (!_value)
        #    {
        #        return;
        #    }
        #
        #    if (this.CostModel && _qty > 0 && _value  > 0 && this.modelGroup().inventModelTypeSecCur_RU().mustUpdateInventTableCostPrice())
        #    {
        #        inventTableModule = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent);
        #        costPrice = Currency::price(inventTableModule.priceUnit() * _value / _qty, CompanyInfo::secondaryCurrency_RU());
        #
        #        if (inventTableModule.PriceDate <= _priceDate)
        #        {
        #            if (costPrice != inventTableModule.PriceSecCur_RU)
        #            {
        #                inventTableModule = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent, true);
        #
        #                initInventTableModule();
        #                inventTableModule.update(false);
        #            }
        #        }
        #
        #        initInventTableModule();
        #        InventItemPrice::updateLastCostPrice(inventTableModule, _inventDim, _priceDate);
        #    }
        #}
      ENDSOURCE
      SOURCE #updateLastPurchPrice
        #public server void updateLastPurchPrice(
        #    TransDate       _transDate,
        #    CurrencyCode    _currencyCode,
        #    Price           _purchPrice,
        #    PriceUnit       _priceUnit,
        #    PriceMarkup     _priceMarkup,
        #    PurchUnit       _purchUnit,
        #    InventDim       _inventDim)
        #{
        #    InventTableModule   inventTableModule;
        #    Price               price;
        #    PriceMarkup         markup;
        #
        #    void initInventTableModule()
        #    {
        #        inventTableModule.Price     = price;
        #        inventTableModule.PriceUnit = _priceUnit;
        #        inventTableModule.Markup    = markup;
        #        inventTableModule.PriceDate = _transDate;
        #    }
        #
        #    if (!_purchPrice)
        #    {
        #        return;
        #    }
        #
        #    if (this.PurchModel)
        #    {
        #        inventTableModule   = InventTableModule::find(this.ItemId,ModuleInventPurchSales::Purch);
        #        price               = UnitOfMeasureConverter::convert(
        #            Currency::price(Currency::amountCur2MST(_purchPrice,_currencyCode,0,_transDate)),
        #            UnitOfMeasure::unitOfMeasureIdBySymbol(inventTableModule.UnitId),
        #            UnitOfMeasure::unitOfMeasureIdBySymbol(_purchUnit),
        #            NoYes::Yes,
        #            InventTable::itemProduct(inventTableModule.ItemId),
        #            NoYes::No);
        #        markup              = UnitOfMeasureConverter::convert(
        #            Currency::price(Currency::amountCur2MST(_priceMarkup,_currencyCode,0,_transDate)),
        #            UnitOfMeasure::unitOfMeasureIdBySymbol(inventTableModule.UnitId),
        #            UnitOfMeasure::unitOfMeasureIdBySymbol(_purchUnit),
        #            NoYes::Yes,
        #            InventTable::itemProduct(inventTableModule.ItemId),
        #            NoYes::No);
        #
        #        if (inventTableModule.PriceDate <= _transDate)
        #        {
        #            if (price)
        #            {
        #                if (price != inventTableModule.Price || markup != inventTableModule.Markup || inventTableModule.PriceUnit != _priceUnit)
        #                {
        #                    inventTableModule = InventTableModule::find(this.ItemId,ModuleInventPurchSales::Purch,true);
        #                    initInventTableModule();
        #                    inventTableModule.update(false);
        #                }
        #                initInventTableModule();
        #                InventItemPrice::updateLastPurchPrice(inventTableModule, _inventDim, _transDate);
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #validateDelete
        #public boolean validateDelete()
        #{
        #    // <GEERU>
        #    #ISOCountryRegionCodes
        #    // </GEERU>
        #    boolean         ret;
        #    BOM             bomLines;
        #    BOMId           activeBOMId;
        #    str             warningStr;
        #    InventDim       inventDim;
        #
        #    ret = super();
        #
        #    //check if the item is used in a bom line template in Product Configuration
        #    ret = ret && PCModelingLibrary::validateDeleteItem(this);
        #
        #    if (! ret)
        #    {
        #        return ret;
        #    }
        #
        #    inventDim.InventSiteId = this.inventInventSiteId();
        #
        #    if (   isConfigurationkeyEnabled(configurationKeyNum(BOMVersion))
        #        && this.inventItemType().canHaveBOM()
        #        && this.storageDimensionGroup()
        #        && this.trackingDimensionGroup())
        #    {
        #        activeBOMId = BOMVersion::findActive(this.ItemId, systemDateGet(), this.inventStandardQty(), inventDim).bomId;
        #
        #        select firstonly RecId from bomLines
        #            where bomLines.bomId == activeBOMId;
        #
        #        if (bomLines.RecId)
        #        {
        #            warningStr = "@SYS81601";
        #        }
        #    }
        #
        #    if (warningStr && Box::yesNo(warningStr+'\n\n'+"@SYS62458",DialogButton::No, strFmt("@SYS81613",this.ItemId)) == DialogButton::No)
        #    {
        #        ret = false;
        #    }
        #    // <GEERU>
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
        #        InventBaileeCalcSetup_RU::existCalcItemId(this.ItemId))
        #    {
        #        ret = checkFailed("@GLS115685");
        #    }
        #    // </GEERU>
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateFieldValue
        #public boolean validateFieldValue(
        #    FieldName   _fieldName,
        #    int         _arrayIndex = 1)
        #{
        #    // <GEERU>
        #    #ISOCountryRegionCodes
        #    // </GEERU>
        #
        #    boolean         ret = super(_fieldName, _arrayIndex);
        #
        #    InventTable     inventTable;
        #
        #    // <GIN>
        #    CustomsTariffCodeTable_IN customsTariffCodeTable;
        #    boolean    isCustomsEnabled = TaxParameters::isCustomsEnable_IN();
        #    // </GIN>
        #
        #    PdsBatchAttribType      batchAttribType;
        #
        #    InventTrans inventTrans;
        #    InventTransOrigin inventTransOrigin;
        #
        #    switch (_fieldName)
        #    {
        #        case fieldStr(InventTable, ProjCategoryId):
        #            ret = ret && this.checkProjCategoryId();
        #            break;
        #
        #        case fieldStr(InventTable, InventFiscalLIFOGroup):
        #            if (this.RecId
        #                && (!InventFiscalLIFOGroup::find(this.InventFiscalLIFOGroup).Individual
        #                    || !InventFiscalLIFOGroup::find(this.orig().InventFiscalLIFOGroup).Individual)
        #                && !SysRecordTemplate::isTemplateEditFormRecord(this)
        #                && this.checkFiscalLIFOValuePrevYear())
        #            {
        #                ret = checkFailed("@SYS99199");
        #            }
        #            break;
        #
        #        case fieldStr(InventTable, MatchingPolicy):
        #            if (!this.RecId || this.MatchingPolicy != this.orig().MatchingPolicy)
        #            {
        #                if (!PurchMatchingPolicyManager::canMatchingPolicyWithNotSetBeChanged(this.MatchingPolicy))
        #                {
        #                    ret = checkFailed(strFmt("@SYS130454", VendParameters::find().MatchingPolicy));
        #                }
        #            }
        #            break;
        #        case fieldStr(InventTable, CostGroupId):
        #            ret = ret && this.checkCostGroupId();
        #            break;
        #        // <GEERU>
        #        case fieldStr(InventTable, MarkupCode_RU):
        #            if (    SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
        #                &&  this.isMarkupCodeEnabled_RU()
        #                &&  this.existsVendInvoiceTrans_RU())
        #            {
        #                ret = checkFailed(strFmt("@GLS114517", this.ItemId));
        #            }
        #            break;
        #        case fieldStr(InventTable, AssetGroupId_RU):
        #            if (    SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
        #                &&  this.orig().AssetGroupId_RU
        #                &&  this.existsVendInvoiceTrans_RU())
        #            {
        #                ret = checkFailed(strFmt("@GLS114517", this.ItemId));
        #            }
        #        // </GEERU>
        #
        #        // <GBR>
        #        case fieldStr(InventTable, ItemType):
        #            if (BrazilParameters::isEnabled())
        #            {
        #                if (this.ItemType == ItemType::Service
        #                    && this.TaxFiscalClassification_BR)
        #                {
        #                    ret = checkFailed("@GLS430");
        #                }
        #
        #                if (this.ItemType != ItemType::Service
        #                    && this.TaxServiceCode_BR)
        #                {
        #                    ret = checkFailed("@GLS60421");
        #                }
        #            }
        #            break;
        #
        #        case fieldStr(InventTable, TaxFiscalClassification_BR) :
        #            if (this.ItemType == ItemType::Service
        #                && this.TaxFiscalClassification_BR)
        #            {
        #                ret = checkFailed("@GLS430");
        #            }
        #            break;
        #
        #        case fieldStr(InventTable, TaxServiceCode_BR) :
        #            if (this.TaxServiceCode_BR)
        #            {
        #                if (!TaxServiceCode_BR::findCompanyServiceCode(this.TaxServiceCode_BR))
        #                {
        #                    ret = checkFailed("@GLS60420");
        #                }
        #                if (this.ItemType != ItemType::Service)
        #                {
        #                    ret = checkFailed("@GLS60421");
        #                }
        #            }
        #            break;
        #
        #        case fieldStr(InventTable, icmsOnService_BR) :
        #            ret = ret && this.checkICMSOnService_BR();
        #            break;
        #        // </GBR>
        #
        #        // <GIN>
        #        case fieldStr(InventTable, CustomsImportTariffCodeTable_IN):
        #            if (isCustomsEnabled
        #                && this.CustomsImportTariffCodeTable_IN)
        #            {
        #                customsTariffCodeTable = CustomsTariffCodeTable_IN::find(this.CustomsImportTariffCodeTable_IN);
        #                if (ret && customsTariffCodeTable.Direction != Direction_IN::Import)
        #                {
        #                    ret = checkFailed(strFmt("@GLS5200",customsTariffCodeTable.TariffCode, Direction_IN::Import));
        #                }
        #            }
        #            break;
        #
        #        case fieldStr(InventTable, CustomsExportTariffCodeTable_IN):
        #            if (isCustomsEnabled
        #                && this.CustomsExportTariffCodeTable_IN)
        #            {
        #                customsTariffCodeTable =CustomsTariffCodeTable_IN::find(this.CustomsExportTariffCodeTable_IN);
        #                if (ret && customsTariffCodeTable.Direction != Direction_IN::Export)
        #                {
        #                    ret = checkFailed(strFmt("@GLS5200", customsTariffCodeTable.TariffCode, Direction_IN::Export));
        #                }
        #            }
        #            break;
        #        // </GIN>
        #    }
        #
        #    if (ret && #PdsApprovedVendorListEnabled)
        #    {
        #        switch (_fieldName)
        #        {
        #            case fieldStr(InventTable, PrimaryVendorId):
        #                ret = this.pdsCheckApprovedVendorList();
        #                break;
        #
        #            case fieldStr(InventTable, PdsVendorCheckItem):
        #                if (this.PdsVendorCheckItem == PdsVendorCheckItem::NotAllowed
        #                    && !this.pdsCheckApprovedVendorList())
        #                {
        #                    ret = checkFailed(strFmt("@PDS632",
        #                        new DictEnum(enumNum(PdsVendorCheckItem)).value2Label(
        #                            PdsVendorCheckItem::NotAllowed)));
        #                }
        #                break;
        #        }
        #    }
        #
        #    switch (_fieldName)
        #    {
        #        case fieldStr(InventTable, PmfProductType):
        #            if (ret
        #                && this.orig().isFormulaAllowed()
        #                && !this.isFormulaAllowed())
        #            {
        #                select firstonly RecId from inventTable
        #                    where inventTable.PmfPlanningItemId == this.ItemId;
        #                if(inventTable.RecId)
        #                {
        #                    ret = checkFailed("@PDS1389");
        #                }
        #            }
        #
        #            if (ret && pdsIsCWItem(this.ItemId))
        #            {
        #                if(this.PmfProductType  == PmfProductType::MainItem)
        #                {
        #                    ret = checkFailed("@PDS112");
        #                }
        #                if (this.PmfProductType == PmfProductType::BOM)
        #                {
        #                    ret = checkFailed("@PRO2642");
        #                }
        #            }
        #
        #            if (ret
        #                && this.orig().isCoByProduct()
        #                && !this.isCoByProduct())
        #            {
        #                if (PmfFormulaCoBy::existItemId(this.ItemId))
        #                {
        #                    ret = checkFailed("@PRO2643");
        #                }
        #                else
        #                {
        #                    //clear the value for planning item
        #                    this.PmfPlanningItemId = '';
        #                }
        #            }
        #
        #            if (ret
        #                && this.orig().PmfProductType != this.PmfProductType
        #                && this.orig().inventItemType().canBeProduced())
        #            {
        #                select firstonly RecId from inventTrans
        #                    where inventTrans.ItemId == this.ItemId
        #                       && inventTrans.StatusIssue != StatusIssue::Sold
        #                       && inventTrans.StatusReceipt != StatusReceipt::Purchased
        #                    exists join inventTransOrigin
        #                        where inventTransOrigin.RecId == inventTrans.InventTransOrigin
        #                           && (inventTransOrigin.ReferenceCategory == InventTransType::ProdLine
        #                            || inventTransOrigin.ReferenceCategory == InventTransType::Production);
        #
        #                if (inventTrans.RecId)
        #                {
        #                    ret = checkFailed(strFmt("@SYS4000201", this.PmfProductType));
        #                }
        #            }
        #            break;
        #
        #        case fieldStr(InventTable, BatchNumGroupId):
        #            if (ret
        #                && pdsIsCWItem(this.ItemId)
        #                && this.BatchNumGroupId)
        #            {
        #                ret = this.pdsCWCheckBatchNumGroupId();
        #            }
        #            break;
        #
        #        case fieldStr(InventTable, SerialNumGroupId):
        #            if (ret
        #                && pdsIsCWItem(this.ItemId)
        #                && this.SerialNumGroupId)
        #            {
        #                ret = this.pdsCWCheckSerialNumGroupId();
        #            }
        #            break;
        #
        #        case fieldStr(InventTable, ItemType):
        #            if (ret
        #                && pdsIsCWItem(this.ItemId))
        #            {
        #                ret = this.pdsCWCheckItemType();
        #            }
        #
        #            if (this.ItemType           == ItemType::Service
        #                && this.PmfProductType  == PmfProductType::Co_Product)
        #            {
        #                ret = checkFailed("@PRO2590");
        #            }
        #
        #            if (this.ItemType           == ItemType::Service
        #                && this.PmfProductType  == PmfProductType::By_Product)
        #            {
        #                ret = checkFailed("@PRO2591");
        #            }
        #            break;
        #
        #        case fieldStr(InventTable, PdsShelfAdvice),
        #             fieldStr(InventTable, PdsBestBefore),
        #             fieldStr(InventTable, PdsShelfLife):
        #
        #            if (ret && this.(fieldName2id(tableNum(InventTable), _fieldName)) < 0)
        #            {
        #                switch(_fieldName)
        #                {
        #                    case fieldStr(InventTable, PdsShelfAdvice) :
        #                        ret = checkFailed(strFmt(
        #                                    "@SYS69681",
        #                                    fieldPName(InventTable, PdsShelfAdvice)));
        #                        break;
        #                    case fieldStr(InventTable, PdsBestBefore) :
        #                        ret = checkFailed(strFmt(
        #                                    "@SYS69681",
        #                                    fieldPName(InventTable, PdsBestBefore)));
        #                        break;
        #                    case fieldStr(InventTable, PdsShelfLife) :
        #                        ret = checkFailed(strFmt(
        #                                    "@SYS69681",
        #                                    fieldPName(InventTable, PdsShelfLife)));
        #                        break;
        #                }
        #            }
        #
        #            if (ret)
        #            {
        #                ret = this.pdsValidateBestBeforeDays();
        #            }
        #            break;
        #
        #        case fieldStr(InventTable,PmfPlanningItemId):
        #            if (   this.PmfPlanningItemId != ''
        #               && !InventTable::find(this.PmfPlanningItemId).isFormulaAllowed())
        #            {
        #                ret = checkFailed(strFmt("@PRO2023",PmfProductType::Formula,PmfProductType::MainItem));
        #            }
        #            break;
        #
        #        case fieldStr(InventTable, PmfYieldPct):
        #            if (ret
        #                && (this.PmfProductType == PmfProductType::Formula
        #                    || this.PmfProductType == PmfProductType::MainItem)
        #                && this.PmfYieldPct <= 0)
        #            {
        #                ret = checkFailed(strFmt("@PRO214", fieldLabelValue(tableNum(InventTable), fieldNum(InventTable, PmfYieldPct),"")));
        #            }
        #            break;
        #
        #        case fieldStr(InventTable, pdsBaseAttributeId):
        #            if (this.pdsBaseAttributeId != this.orig().pdsBaseAttributeId)
        #            {
        #                if (this.pdsBaseAttributeId)
        #                {
        #                    batchAttribType = PdsBatchAttrib::findAttribType(PdsBatchAttribByItem::findItemId(this.ItemId, this.pdsBaseAttributeId, TableGroupAll::Table).PdsBatchAttribRelation);
        #                    if (batchAttribType != PdsBatchAttribType::Integer && batchAttribType != PdsBatchAttribType::Realnumber)
        #                    {
        #                        ret = checkFailed(strFmt("@PSC768", enum2str(PdsBatchAttribType::Integer), enum2str(PdsBatchAttribType::Realnumber)));
        #                    }
        #                }
        #
        #                if (ret)
        #                {
        #                    this.pdsTargetFactor           = 0.00;
        #                    this.pdsPotencyAttribRecording = PDSPotencyAttribRecordingEnum::PurchProdReceipt;
        #                }
        #            }
        #            break;
        #    }
        #
        #    if (this.isModelGroupSetup())
        #    {
        #        ret = ret && this.modelGroup().inventModelType().validateFieldInventTable(this, _fieldName, _arrayIndex);
        #    }
        #    return ret;
        #}
        #
        #
      ENDSOURCE
      SOURCE #validateProductVariantUnitConversion
        #/// <summary>
        #/// Checks if the current item is valid for enabling variant-level unit of conversion.
        #/// </summary>
        #/// <param name="_inventUnit">
        #/// The current Inventory Unit symbol.
        #/// </param>
        #/// <param name="_purchUnit">
        #/// The current Purchase Unit symbol.
        #/// </param>
        #/// <param name="_salesUnit">
        #/// The current Sales Unit symbol.
        #/// </param>
        #/// <returns>
        #/// True if the item is valid for variant-level unit of conversion; otherwise false.
        #/// </returns>
        #public boolean validateProductVariantUnitConversion(
        #                                            UnitOfMeasureSymbol _inventUnit = this.inventTableModuleInvent().UnitId,
        #                                            UnitOfMeasureSymbol _purchUnit  = this.inventTableModulePurch().UnitId,
        #                                            UnitOfMeasureSymbol _salesUnit  = this.inventTableModuleSales().UnitId)
        #{
        #    boolean             ret = true;
        #
        #    if (!this.whsItemIsWHSControlled())
        #    {
        #        ret = checkFailed(strFmt("@SYP4986006", this.ItemId, curext()));
        #    }
        #
        #    if (ret)
        #    {
        #        if (this.BOMUnitId != _inventUnit
        #            || this.BOMUnitId != _purchUnit
        #            || this.BOMUnitId != _salesUnit)
        #        {
        #            ret = checkFailed(strFmt("@SYP4986005", this.ItemId, curext()));
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateWrite
        #/// <summary>
        #/// Determines whether data is valid and ready to be written.
        #/// </summary>
        #/// <param name="_skipProductVariantUnitConversionValidation">
        #/// Boolean parameter to determine whether the product variant unit conversion validation must be skipped or not.
        #/// </param>
        #/// <returns>
        #/// Returns true if data is valid; otherwise, false.
        #/// </returns>
        #public boolean validateWrite(boolean _skipProductVariantUnitConversionValidation = false)
        #{
        #    MCRInventTable    mcrInventTableLocal;
        #    boolean           ret;
        #    RefRecId          alternativeProductRecId;
        #    // <GEERU>
        #    #ISOCountryRegionCodes
        #    // </GEERU>
        #
        #    ret = super();
        #
        #    ret = ret && this.checkProjCategoryId();
        #    ret = ret && this.checkInventDimCombination();
        #    // <GEERU>
        #    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        #    {
        #        if (this.isModelGroupSetup())
        #        {
        #            ret = ret && this.modelGroup().inventModelTypeSecCur_RU().validateWriteInventTable(this);
        #        }
        #
        #        if(this.MarkupCode_RU && ! this.isMarkupCodeEnabled_RU() )
        #        {
        #            ret = checkFailed(strFmt("@GLS114518",
        #                                     enum2str(ItemType::Service)));
        #        }
        #
        #        if (this.AlcoholProductionTypeId_RU)
        #        {
        #            if (! this.AlcoholStrength_RU)
        #            {
        #                ret = checkFailed(strFmt("@GLS103654", "@SYS4002922"));
        #            }
        #
        #            if (! this.AlcoholManufacturerId_RU)
        #            {
        #                ret = checkFailed(strFmt("@GLS103654", "@SYS4002911"));
        #            }
        #        }
        #
        #        if (this.AlcoholStrength_RU < 0 ||
        #            this.AlcoholStrength_RU > 100)
        #        {
        #            ret = checkFailed(strFmt("@GLS106085", "@SYS4002922"));
        #        }
        #    }
        #    // </GEERU>
        #    if (this.isModelGroupSetup())
        #    {
        #        ret = ret && this.modelGroup().inventModelType().validateWriteInventTable(this);
        #    }
        #
        #    // <GBR>
        #    if (BrazilParameters::isEnabled())
        #    {
        #        if(this.isFormDataSource() && this.ItemType == ItemType::Service &&!this.TaxServiceCode_BR)
        #        {
        #            ret = checkFailed (strFmt("@SYS26332", fieldPName(InventTable, TaxServiceCode_BR)));
        #        }
        #
        #        ret = ret && this.checkICMSOnService_BR();
        #    }
        #    // </GBR>
        #
        #    alternativeProductRecId = InventTable::itemProduct(this.AltItemId);
        #    if (alternativeProductRecId)
        #    {
        #        ret = EcoResProductVariantDimValue::newProductVariantDim_InventColorId().checkExist(alternativeProductRecId, this.AltInventColorId) && ret;
        #        ret = EcoResProductVariantDimValue::newProductVariantDim_InventStyleId().checkExist(alternativeProductRecId, this.AltInventStyleId) && ret;
        #        ret = EcoResProductVariantDimValue::newProductVariantDim_InventSizeId().checkExist(alternativeProductRecId, this.AltInventSizeId) && ret;
        #        ret = EcoResProductVariantDimValue::newProductVariantDim_ConfigId().checkExist(alternativeProductRecId, this.AltConfigId) && ret;
        #    }
        #    else
        #    {
        #        if (   this.AltInventColorId
        #            || this.AltInventStyleId
        #            || this.AltInventSizeId
        #            || this.AltConfigId)
        #        {
        #            ret = checkFailed("@SYS308707");
        #        }
        #    }
        #    ret = EcoResProductVariantDimValue::newProductVariantDim_InventColorId().checkExist(this.Product, this.StandardInventColorId) && ret;
        #    ret = EcoResProductVariantDimValue::newProductVariantDim_InventStyleId().checkExist(this.Product, this.StandardInventStyleId) && ret;
        #    ret = EcoResProductVariantDimValue::newProductVariantDim_InventSizeId().checkExist(this.Product, this.StandardInventSizeId) && ret;
        #    ret = EcoResProductVariantDimValue::newProductVariantDim_ConfigId().checkExist(this.Product, this.StandardConfigId) && ret;
        #
        #    // If an item's gross volume or weight is zero, warn the user.  The user
        #    // should still be allowed to save the record.
        #    mcrInventTableLocal = this.mcrInventTable();
        #    if (MCRPackingBoxLogic::isPackingBoxLogicEnabled() &&
        #        mcrInventTableLocal.IsPackingBoxable                       &&
        #            (this.grossVolume() == 0 || this.grossWeight() == 0))
        #    {
        #        warning("@MCR24036");
        #    }
        #
        #    if (ret)
        #    {
        #        ret = this.pdsValidateBestBeforeDays();
        #        if (ret && #PmfEnabled)
        #        {
        #           ret = this.pmfInventProductType().validatePmfProductType();
        #        }
        #
        #        if (ret
        #            && (this.PmfProductType == PmfProductType::Formula
        #                || this.PmfProductType == PmfProductType::MainItem)
        #            && this.PmfYieldPct <= 0)
        #        {
        #            ret = checkFailed(strFmt("@PRO214",fieldLabelValue(tableNum(InventTable), fieldNum(InventTable, PmfYieldPct), "")));
        #        }
        #
        #        if (ret
        #            && this.PmfProductType          == PmfProductType::MainItem
        #            && this.orig().PmfProductType   == PmfProductType::MainItem)
        #        {
        #            ret = this.checkPlanningItemCost();
        #        }
        #    }
        #
        #    if (ret && this.PmfProductType != this.orig().PmfProductType
        #        && ReqItemTable::pmfExistItemCoverage(this.ItemId))
        #    {
        #        info("@PRO2628");
        #    }
        #
        #    //
        #    //notify the user for the correct quality setup if this
        #    //is a potency item with value registered in quality order
        #    //
        #    this.pdsQualOrdWarning();
        #
        #    // Display a warning if two vendor approval methods are enabled for a single released product.
        #    if (ret
        #    &&  this.orig().PdsVendorCheckItem          != this.PdsVendorCheckItem
        #    &&  this.PdsVendorCheckItem                 != PdsVendorCheckItem::NoCheck
        #    &&  WHSInventEnabled::exist(this.ItemId)
        #    &&  WHSParameters::find().EnableVendFilters == NoYes::Yes)
        #    {
        #        warning("@WAX5492");
        #    }
        #
        #    if (this.isFormDataSource()
        #        && this.dataSource().formRun().args().name() == formStr(EcoResProductDetailsExtended))
        #    {
        #        _skipProductVariantUnitConversionValidation = true;
        #    }
        #
        #    if (ret
        #        && !_skipProductVariantUnitConversionValidation
        #        && this.isProductVariantUnitConversionEnabled())
        #    {
        #        ret = this.validateProductVariantUnitConversion();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #whsAllowPhysNeg
        #/// <summary>
        #/// Returns a boolean value indicating whether the physical inventory be negative or not.
        #/// </summary>
        #/// <returns>
        #/// True, if physical inventory may be negative, otherwise False.
        #/// </returns>
        #public boolean whsAllowPhysNeg()
        #{
        #    return this.modelGroup().NegativePhysical;
        #}
      ENDSOURCE
      SOURCE #whsBatchActive
        #/// <summary>
        #/// Returns a boolean value
        #/// indicating whether the Batch inventory dimension is active for current item or not.
        #/// </summary>
        #/// <returns>
        #/// True - if Batch inventoty dimension is active for current item, otherwise - False.
        #/// </returns>
        #boolean whsBatchActive()
        #{
        #    return EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim, InventBatchId));
        #}
      ENDSOURCE
      SOURCE #whsDisplayHasTransactions
        #/// <summary>
        #/// Returns an integer flag
        #/// indicating whether there are open inventory transactions for current item or not.
        #/// </summary>
        #/// <returns>
        #/// Integer 1 if there are open inventoty transactions for current item, otherwise - integer 0.
        #/// </returns>
        #// BP Deviation Documented
        #display Integer whsDisplayHasTransactions()
        #{
        #    int     ret;
        #
        #    ret = InventTrans::openTransactionsExist(this.ItemId);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #whsItemIsWHSControlled
        #/// <summary>
        #///    Determines if the current <c>InventTable</c> record is WHS controlled.
        #/// </summary>
        #/// <returns>
        #///    true if the current record is WHS controlled; otheriwse, false.
        #/// </returns>
        #boolean whsItemIsWHSControlled()
        #{
        #    return EcoResStorageDimensionGroup::find(this.storageDimensionGroup()).IsWarehouseWHSEnabled == NoYes::Yes;
        #}
      ENDSOURCE
      SOURCE #whsReservationHierarchy
        #/// <summary>
        #///     Retrieves the ID of the reservation hierarchy that is related to the current item.
        #/// </summary>
        #/// <returns>
        #///     The <c>WHSReservationHierarchyRecId</c> ID of the reservation hierarchy.
        #/// </returns>
        #public WHSReservationHierarchyRecId whsReservationHierarchy()
        #{
        #    WHSReservationHierarchyRecId ret = 0;
        #
        #    if (WHSInventEnabled::exist(this.ItemId))
        #    {
        #        ret = WHSReservationHierarchyItem::findByItem(this.DataAreaId, this.ItemId).ReservationHierarchy;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #whsReservationHierarchyName
        #/// <summary>
        #///     Retrieves the name of the reservation hierarchy that is related to the current item.
        #/// </summary>
        #/// <returns>
        #///     The <c>WHSReservationHierarchyName</c> name of the reservation hierarchy.
        #/// </returns>
        #[SysClientCacheDataMethodAttribute(false)]
        #public display WHSReservationHierarchyName whsReservationHierarchyName()
        #{
        #    WHSReservationHierarchyName whsReservationHierarchyName;
        #
        #    if (WHSInventEnabled::exist(this.ItemId))
        #    {
        #        whsReservationHierarchyName = WHSReservationHierarchy::find(this.whsReservationHierarchy()).Name;
        #    }
        #
        #    return whsReservationHierarchyName;
        #}
      ENDSOURCE
      SOURCE #whsSerialActive
        #/// <summary>
        #/// Returns a boolean value
        #/// indicating whether the Serial Number inventory dimension is active for current item or not.
        #/// </summary>
        #/// <returns>
        #/// True - if Serial Number inventoty dimension is active for current item, otherwise - False.
        #/// </returns>
        #boolean whsSerialActive()
        #{
        #    return EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim, InventSerialId));
        #}
      ENDSOURCE
      SOURCE #write
        #public void write()
        #{
        #    // Add for Connector integration
        #    if (!this.daxIntegrationKey && isConfigurationkeyEnabled(configurationKeyNum(ProjCRMIntegration)))
        #    {
        #        this.daxIntegrationKey = newGuid();
        #    }
        #
        #    super();
        #}
      ENDSOURCE
      SOURCE #areProductVariantsDifferent
        #/// <summary>
        #///     Specifies if two product variants are different.
        #/// </summary>
        #/// <param name="_itemId">
        #///     The ID of the item.
        #/// </param>
        #/// <param name="_inventDimId">
        #///     InventDimId value representing the product dimensions to test.
        #/// </param>
        #/// <param name="_otherInventDimId">
        #///     InventDimId value representing the product dimensions to test against the first parameter.
        #/// </param>
        #/// <returns>
        #///     True if the Item supports product variant unit conversions and the two <c>InventDim</c>
        #///         records are different on the product dimensions; otherwise, false.
        #/// </returns>
        #public static boolean areProductVariantsDifferent(
        #    ItemId      _itemId,
        #    InventDimId _inventDimId,
        #    InventDimId _otherInventDimId)
        #{
        #    InventDim       inventDim;
        #    InventDim       otherInventDim;
        #    InventDimParm   inventDimParmProduct;
        #    InventTable     inventTable;
        #    boolean         ret = false;
        #
        #    if (_inventDimId == _otherInventDimId)
        #    {
        #        return false;
        #    }
        #
        #    inventTable = InventTable::find(_itemId);
        #
        #    if (inventTable.isProductVariantUnitConversionEnabled())
        #    {
        #        inventDimParmProduct = inventTable.inventDimParmProductDimensions();
        #        inventDim            = InventDim::find(_inventDimId);
        #        otherInventDim       = inventDim::find(_otherInventDimId);
        #
        #        if (!InventDim::isInventDimParmEqual(inventDim, otherInventDim, inventDimParmProduct, false))
        #        {
        #            ret = true;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #buildMaxQtyDialogStr
        #private static TempStr buildMaxQtyDialogStr(
        #    Qty     _highestQty,
        #    Qty     _transQty,
        #    boolean _allowUserInteraction)
        #{
        #    TempStr maxQtyDialogStr;
        #
        #    maxQtyDialogStr =   strFmt("@SYS14410",_highestQty)
        #                      + '\n'
        #                      + strFmt("@SYS10407",_transQty);
        #
        #    if (_allowUserInteraction)
        #    {
        #        maxQtyDialogStr += '\n\n' + "@SYS53119";
        #    }
        #
        #    return maxQtyDialogStr;
        #}
      ENDSOURCE
      SOURCE #buildMinQtyDialogStr
        #private static TempStr buildMinQtyDialogStr(
        #    Qty     _lowestQty,
        #    Qty     _transQty,
        #    boolean _allowUserInteraction)
        #{
        #    TempStr minQtyDialogStr;
        #
        #    minQtyDialogStr =    strFmt("@SYS2024",_lowestQty)
        #                      + '\n'
        #                      + strFmt("@SYS10407",_transQty);
        #
        #    if (_allowUserInteraction)
        #    {
        #        minQtyDialogStr += '\n\n' + "@SYS53116";
        #    }
        #
        #    return minQtyDialogStr;
        #}
      ENDSOURCE
      SOURCE #buildMultipleDialogStr
        #/// <summary>
        #///     Builds the text for the dialog to adjust for the transaction quantity based on the multiple unit defined.
        #/// </summary>
        #/// <param name="_multipleQty">
        #///     The predefined multiple unit size.
        #/// </param>
        #/// <param name="_transQty">
        #///     The specified transaction quantity.
        #/// </param>
        #/// <param name="_roundedUpQty">
        #///     The suggested adjusted quantity.
        #/// </param>
        #/// <param name="_allowUserInteraction">
        #///     A boolean value indicating whether the user can accept or cancel the adjustment operation.
        #/// </param>
        #/// <param name="_showRoundedUp">
        #///     A boolean value indicating whether the dialog shows the suggested quantity to the user.
        #/// </param>
        #/// <returns>
        #///     The string produced used to compose the dialog.
        #/// </returns>
        #public
        #static TempStr buildMultipleDialogStr(
        #    Qty     _multipleQty,
        #    Qty     _transQty,
        #    Qty     _roundedUpQty,
        #    boolean _allowUserInteraction,
        #    boolean _showRoundedUp = true)
        #{
        #    TempStr multipleDialogStr;
        #
        #    multipleDialogStr =    strFmt("@SYS1100",_multipleQty)
        #                        + '\n'
        #                        + strFmt("@SYS10407",_transQty);
        #
        #    if (_showRoundedUp)
        #    {
        #        multipleDialogStr += '\n' + strFmt("@SYS15651",_roundedUpQty);
        #    }
        #
        #    if (_allowUserInteraction)
        #    {
        #        multipleDialogStr += '\n\n' + "@SYS4901";
        #    }
        #
        #    return multipleDialogStr;
        #}
      ENDSOURCE
      SOURCE #checkAssetId_RU
        #public static RAssetId checkAssetId_RU(ItemId _itemId)
        #{
        #    return InventTable::find(_itemId).AssetId_RU;
        #}
      ENDSOURCE
      SOURCE #checkColor
        #public server static boolean checkColor(
        #    ItemId              _itemId,
        #    EcoResItemColorName _inventColorId)
        #{
        #    InventTable                     inventTable;
        #
        #    inventTable = InventTable::find(_itemId);
        #
        #    if (inventTable.colorActive())
        #    {
        #        if (! _inventColorId)
        #        {
        #            return checkFailed(strFmt("@SYS73924", EcoResColor::label(),_itemId));
        #        }
        #    }
        #    else if (_inventColorId)
        #    {
        #        return checkFailed(strFmt("@SYS73923", _itemId, EcoResColor::label()));
        #    }
        #
        #    if (! EcoResProductVariantDimValue::newProductVariantDim_InventColorId().checkExist(inventTable.Product, _inventColorId))
        #    {
        #        return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkConfig
        #public server static boolean checkConfig(
        #    ItemId                      _itemId,
        #    EcoResItemConfigurationName _configId)
        #{
        #    InventTable                     inventTable = InventTable::find(_itemId);
        #
        #    if (inventTable.configActive())
        #    {
        #        if (!_configId)
        #        {
        #            return checkFailed(strFmt("@SYS25771", _itemId));
        #        }
        #    }
        #    else if (_configId)
        #    {
        #        return checkFailed(strFmt("@SYS25621", _itemId));
        #    }
        #
        #    if ( !EcoResProductVariantDimValue::newProductVariantDim_ConfigId().checkExist(inventTable.Product, _configId))
        #    {
        #        return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkExist
        #public static boolean checkExist(ItemId _itemId)
        #{
        #    if (_itemId && !InventTable::exist(_itemId))
        #    {
        #        return checkFailed(strFmt(InventTable::txtNotExist(), _itemId));
        #    }
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkProductDimensions
        #/// <summary>
        #/// Indicates whether the product dimensions are valid for the specified item.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The item to validate.
        #/// </param>
        #/// <param name="_inventDim">
        #/// A set of inventory dimensions.
        #/// </param>
        #/// <param name="_onlyTestSpecifiedDimensions">
        #/// true if only specified inventory dimensions should be tested; otherwise, false.
        #/// </param>
        #/// <returns>
        #/// true if the product dimensions are valid; otherwise, false.
        #/// </returns>
        #public server static boolean checkProductDimensions(
        #    ItemId      _itemId,
        #    InventDim   _inventDim
        #    , boolean     _onlyTestSpecifiedDimensions = false
        #    )
        #{
        #    #InventDimDevelop
        #    boolean ok   = true;
        #
        #    if (!_onlyTestSpecifiedDimensions || _inventDim.ConfigId)
        #    {
        #        ok = ok && InventTable::checkConfig(_itemId, _inventDim.ConfigId);
        #    }
        #
        #    if (!_onlyTestSpecifiedDimensions || _inventDim.InventSizeId)
        #    {
        #        ok = ok && InventTable::checkSize(_itemId, _inventDim.InventSizeId);
        #    }
        #
        #    if (!_onlyTestSpecifiedDimensions || _inventDim.InventColorId)
        #    {
        #        ok = ok && InventTable::checkColor(_itemId, _inventDim.InventColorId);
        #    }
        #
        #    if (!_onlyTestSpecifiedDimensions || _inventDim.InventStyleId)
        #    {
        #        ok = ok && InventTable::checkStyle(_itemId, _inventDim.InventStyleId);
        #    }
        #    ok = ok && _inventDim.validateWriteInventDimCombination(_itemId);
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #checkSize
        #public server static boolean checkSize(
        #    ItemId              _itemId,
        #    EcoResItemSizeName  _inventSizeId)
        #{
        #    InventTable                     inventTable = InventTable::find(_itemId);
        #
        #    if (inventTable.sizeActive())
        #    {
        #        if (!_inventSizeId)
        #        {
        #            return checkFailed(strFmt("@SYS73924", EcoResSize::label(),_itemId));
        #        }
        #    }
        #    else if (_inventSizeId)
        #    {
        #        return checkFailed(strFmt("@SYS73923",_itemId, EcoResSize::label()));
        #    }
        #
        #    if ( !EcoResProductVariantDimValue::newProductVariantDim_InventSizeId().checkExist(inventTable.Product, _inventSizeId))
        #    {
        #        return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #checkStyle
        #/// <summary>
        #///    Checks if a style name is valid for an item.
        #/// </summary>
        #/// <param name="_itemId">
        #///    An item ID.
        #/// </param>
        #/// <param name="_inventStyleId">
        #///    A style name.
        #/// </param>
        #/// <returns>
        #///    true if a style is valid for an item; otherwise, false.
        #/// </returns>
        #public server static boolean checkStyle(
        #    ItemId              _itemId,
        #    EcoResItemStyleName _inventStyleId)
        #{
        #    InventTable                     inventTable;
        #
        #    inventTable = InventTable::find(_itemId);
        #
        #    if (inventTable.styleActive())
        #    {
        #        if (! _inventStyleId)
        #        {
        #            return checkFailed(strFmt("@SYS73924", EcoResStyle::label(),_itemId));
        #        }
        #    }
        #    else if (_inventStyleId)
        #    {
        #        return checkFailed(strFmt("@SYS73923", _itemId, EcoResStyle::label()));
        #    }
        #
        #    if (! EcoResProductVariantDimValue::newProductVariantDim_InventStyleId().checkExist(inventTable.Product, _inventStyleId))
        #    {
        #        return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #exist
        #public static boolean exist(ItemId  _itemId)
        #{
        #    return _itemId && (select RecId from inventTable
        #                index hint ItemIdx
        #                where inventTable.ItemId == _itemId
        #           ).RecId != 0;
        #}
      ENDSOURCE
      SOURCE #existsWithExceptionCode_BR
        #/// <summary>
        #/// It verifies if exist at least one record on <c>InventTable</c> with the Exception Code
        #/// </summary>
        #/// <param name="_exceptionCode">
        #/// ExceptionCode that needs to be verified
        #/// </param>
        #/// <returns>
        #/// It returns true if at least one record is found
        #/// </returns>
        #// <GBR>
        #public static boolean existsWithExceptionCode_BR(ExceptionCode_BR _exceptionCode)
        #{
        #    InventTable inventTable;
        #
        #    return _exceptionCode &&
        #    (
        #        select firstonly   RecId
        #        from               inventTable
        #        where              inventTable.ExceptionCode_BR == _exceptionCode
        #    ).RecId;
        #}
        #// </GBR>
      ENDSOURCE
      SOURCE #existsWithInventProductType_BR
        #/// <summary>
        #/// It verifies if exist at least one record on <c>InventTable</c> with the Invent Product Type ID
        #/// </summary>
        #/// <param name="_inventProductTypeId">
        #/// InventProductTypeId that needs to be verified
        #/// </param>
        #/// <returns>
        #/// It returns true if at least one record is found
        #/// </returns>
        #// <GBR>
        #public static boolean existsWithInventProductType_BR(InventProductTypeId_BR _inventProductTypeId)
        #{
        #    InventTable inventTable;
        #
        #    return _inventProductTypeId &&
        #    (
        #        select firstonly   RecId
        #        from               inventTable
        #        where              inventTable.InventProductType_BR == _inventProductTypeId
        #    ).RecId;
        #}
        #// </GBR>
      ENDSOURCE
      SOURCE #existsWithTaxFiscalClassification_BR
        #/// <summary>
        #/// It verifies if exist at least one record on <c>InventTable</c> with the Tax Fiscal CLassification ID
        #/// </summary>
        #/// <param name="_taxFiscalClassificationId">
        #/// TaxFiscalClassificationId that needs to be verified
        #/// </param>
        #/// <returns>
        #/// It returns true if at least one record is found
        #/// </returns>
        #// <GBR>
        #public static boolean existsWithTaxFiscalClassification_BR(TaxFiscalClassificationId_BR _taxFiscalClassificationId)
        #{
        #    InventTable inventTable;
        #
        #    return _taxFiscalClassificationId &&
        #    (
        #        select firstonly   RecId
        #        from               inventTable
        #        where              inventTable.TaxFiscalClassification_BR == _taxFiscalClassificationId
        #    ).RecId;
        #}
        #// </GBR>
      ENDSOURCE
      SOURCE #find
        #public static InventTable find(
        #    ItemId      _itemId,
        #    boolean     _update = false)
        #{
        #    InventTable  inventTable;
        #
        #    inventTable.selectForUpdate(_update);
        #
        #    if (_itemId)
        #    {
        #        select firstonly inventTable
        #            index hint ItemIdx
        #            where inventTable.ItemId == _itemId;
        #    }
        #
        #    return inventTable;
        #}
      ENDSOURCE
      SOURCE #findAlternativeItem
        #public static container findAlternativeItem (
        #    ItemId          _itemId,
        #    InventDim       _inventDim,
        #    InventQty       _qty)
        #{
        #    InventDimParm               inventDimParm;
        #    InventDim                   inventDim;
        #    InventOnHandQty             inventOnHandQty;
        #    Set                         visitedItems    = new Set(Types::String);
        #    NoYes                       nextItem;
        #    ItemId                      newItemId       = _itemId;
        #    InventTable                 inventTable     = InventTable::find(_itemId);
        #    EcoResProductDimGroupSetup  dimSetup        = EcoResProductDimGroupSetup::newInventTable(inventTable);
        #
        #    dimSetup.copyProductDimensions(_inventDim, inventDim);
        #    inventDimParm = dimSetup.inventDimParmActiveDimensions();
        #
        #    if (inventTable.UseAltItemId != ItemNumAlternative::Never)
        #    {
        #        while (inventTable.AltItemId)
        #        {
        #            visitedItems.add(newItemId);
        #
        #            if (visitedItems.in(inventTable.AltItemId))
        #            {
        #                newItemId = _itemId;
        #                inventDim = _inventDim;
        #                break;
        #            }
        #
        #            switch(inventTable.UseAltItemId)
        #            {
        #                case ItemNumAlternative::Never          :   newItemId   = inventTable.ItemId;
        #                                                            nextItem    = NoYes::No;
        #                                                            break;
        #
        #                case ItemNumAlternative::InventWhen0   :
        #                    inventOnHandQty = InventOnHandQty::newParameters(
        #                                              newItemId,
        #                                              inventDim,
        #                                              inventDimParm);
        #
        #
        #
        #                    if (inventOnHandQty.availPhysical() >= _qty)
        #                    {
        #                        newItemId   = inventTable.ItemId;
        #                        nextItem    = NoYes::No;
        #                        break;
        #                    }
        #                    else
        #                    {
        #                        inventDim.ConfigId      = inventTable.AltConfigId;
        #                        inventDim.InventSizeId  = inventTable.AltInventSizeId;
        #                        inventDim.InventColorId = inventTable.AltInventColorId;
        #                        inventDim.InventStyleId = inventTable.AltInventStyleId;
        #                        inventTable             = InventTable::find(inventTable.AltItemId);
        #                        newItemId               = inventTable.ItemId;
        #                        inventDimParm           = dimSetup.inventDimParmActiveDimensions();
        #                        nextItem                = NoYes::Yes;
        #                        break;
        #                    }
        #
        #                case ItemNumAlternative::Always         :   inventDim.ConfigId      = inventTable.AltConfigId;
        #                                                            inventDim.InventSizeId  = inventTable.AltInventSizeId;
        #                                                            inventDim.InventColorId = inventTable.AltInventColorId;
        #                                                            inventDim.InventStyleId = inventTable.AltInventStyleId;
        #                                                            inventTable             = InventTable::find(inventTable.AltItemId);
        #                                                            newItemId               = inventTable.ItemId;
        #                                                            inventDimParm           = dimSetup.inventDimParmActiveDimensions();
        #                                                            nextItem                = NoYes::Yes;
        #                                                            break;
        #            }
        #            if (nextItem)
        #            {
        #                continue;
        #            }
        #            else
        #            {
        #                break;
        #            }
        #        }
        #    }
        #    return [newItemId,inventDim];
        #}
      ENDSOURCE
      SOURCE #findByProduct
        #static public InventTable findByProduct(
        #    RefRecId   _product,
        #    boolean    _update = false)
        #{
        #    InventTable  inventTable;
        #
        #    inventTable.selectForUpdate(_update);
        #
        #    if (_product)
        #    {
        #        select firstonly inventTable
        #            where inventTable.Product == _product;
        #    }
        #
        #    return inventTable;
        #}
      ENDSOURCE
      SOURCE #findByProductInCompany
        #/// <summary>
        #///    Finds the specified record in the <c>InventTable</c> table.
        #/// </summary>
        #/// <param name="_product">
        #///    The ID of the <c>EcoResProduct</c> record to find.
        #/// </param>
        #/// <param name="_companyId">
        #///    The company for the item record.
        #/// </param>
        #/// <param name="_update">
        #///    A Boolean value that indicates whether to read the record for update; optional.
        #/// </param>
        #/// <returns>
        #///    A record in the <c>InventTable</c> table; otherwise, an empty record.
        #/// </returns>
        #static public InventTable findByProductInCompany(
        #    EcoResProductRecId  _product,
        #    CompanyId           _companyId,
        #    boolean             _update = false)
        #{
        #    InventTable  inventTable;
        #
        #    if (_product && _companyId)
        #    {
        #        changecompany(_companyId)
        #        {
        #            inventTable = InventTable::findByProduct(_product, _update);
        #        }
        #    }
        #
        #    return inventTable;
        #}
      ENDSOURCE
      SOURCE #findCostPcsPrice
        #public static Price findCostPcsPrice(
        #    ItemId      _itemId,
        #    InventDimId _inventDimId,
        #    InventDim   _inventDim   = null,  // set this parameter for better performance if avail
        #    PriceDate   _priceDate   = systemDateGet())
        #{
        #    return InventTable::find(_itemId).costPcsPrice(_inventDimId,_inventDim, null, _priceDate);
        #}
      ENDSOURCE
      SOURCE #findCostPcsPriceSecCur_RU
        #public static Price findCostPcsPriceSecCur_RU(
        #    ItemId      _itemId,
        #    InventDimId _inventDimId,
        #    InventDim   _inventDim   = null,  // set this parameter for better performance if avail
        #    PriceDate   _priceDate   = systemDateGet())
        #{
        #    return InventTable::find(_itemId).costPcsPriceSecCur_RU(_inventDimId, _inventDim, null, _priceDate);
        #}
      ENDSOURCE
      SOURCE #findExternalItemId
        #public static container findExternalItemId(
        #    ModuleInventCustVend    _moduleInventCustVend,
        #    CustVendAC              _custVendAccount,
        #    ExternalItemId          _externalItemId)
        #{
        #    CustVendExternalItem                custVendExternalItem;
        #    ModuleInventPurchSalesVendCustGroup moduleInventPurchSalesVendCustGroup;
        #    CustVendItemGroupId                 custVendItemGroupId;
        #
        #    if (_custVendAccount && _externalItemId)
        #    {
        #        if (_moduleInventCustVend == ModuleInventCustVend::Cust)
        #        {
        #            moduleInventPurchSalesVendCustGroup = ModuleInventPurchSalesVendCustGroup::Cust;
        #        }
        #        else
        #        {
        #            moduleInventPurchSalesVendCustGroup = ModuleInventPurchSalesVendCustGroup::Vend;
        #        }
        #
        #        custVendExternalItem    = CustVendExternalItem::findExternalItemId(moduleInventPurchSalesVendCustGroup, _custVendAccount, _externalItemId);
        #
        #        if (!custVendExternalItem)
        #        {
        #            if (_moduleInventCustVend == ModuleInventCustVend::Cust)
        #            {
        #                moduleInventPurchSalesVendCustGroup = ModuleInventPurchSalesVendCustGroup::CustGroup;
        #                custVendItemGroupId                 = CustTable::find(_custVendAccount).CustItemGroupId;
        #            }
        #            else
        #            {
        #                moduleInventPurchSalesVendCustGroup = ModuleInventPurchSalesVendCustGroup::VendGroup;
        #                custVendItemGroupId                 = VendTable::find(_custVendAccount).VendItemGroupId;
        #            }
        #
        #            custVendExternalItem    = CustVendExternalItem::findExternalItemId(moduleInventPurchSalesVendCustGroup, custVendItemGroupId, _externalItemId);
        #        }
        #    }
        #
        #    return [custVendExternalItem.ItemId, custVendExternalItem.inventDim()];
        #}
      ENDSOURCE
      SOURCE #findHavingPotencyAttribute
        #/// <summary>
        #///     Finds the specified record in the <c>InventTable</c> table that is tied to a product-specific potency attribute.
        #/// </summary>
        #/// <param name="_itemId">
        #///     The item ID.
        #/// </param>
        #/// <param name="_recordAttribValue">
        #///     The indication of when the attribute value must be recorded.
        #/// </param>
        #/// <param name="_forUpdate">
        #///     A Boolean value that indicates whether to read the record for update; optional.
        #/// </param>
        #/// <returns>
        #///     A record in the <c>InventTable</c> table; otherwise, an empty record.
        #/// </returns>
        #public static InventTable findHavingPotencyAttribute(
        #    ItemId                          _itemId,
        #    PDSPotencyAttribRecordingEnum   _recordAttribValue = PDSPotencyAttribRecordingEnum::PurchProdReceipt,
        #    boolean                         _forUpdate = false)
        #{
        #    InventTable             inventTable;
        #    PdsBatchAttribByItem    pdsBatchAttribByItem;
        #
        #    inventTable = InventTable::find(_itemId, _forUpdate);
        #
        #    if (inventTable.pdsBaseAttributeId
        #    &&  inventTable.pdsTargetFactor             >  0
        #    &&  inventTable.pdsPotencyAttribRecording   == _recordAttribValue)
        #    {
        #        pdsBatchAttribByItem = InventTable::pdsFindBaseAttribute(inventTable.ItemId);
        #    }
        #
        #    if (pdsBatchAttribByItem.PdsBatchAttribMin > 0 && pdsBatchAttribByItem.PdsBatchAttribMax > 0)
        #    {
        #        return inventTable;
        #    }
        #
        #    return null;
        #}
      ENDSOURCE
      SOURCE #findInLegalEntity
        #/// <summary>
        #/// Finds the specified <c>InventTable</c> record.
        #/// </summary>
        #/// <param name="_itemId">
        #/// A string value that represents the item ID of the record to find.
        #/// </param>
        #/// <param name="_dataAreaId">
        #/// A string value that represents the <c>dataAreaId</c> value for a legal entity.
        #/// </param>
        #/// <returns>
        #/// The specified <c>InventTable</c> record if found; otherwise, an empty record.
        #/// </returns>
        #public static InventTable findInLegalEntity(
        #    ItemId      _itemId,
        #    DataAreaId  _dataAreaId)
        #{
        #    InventTable     inventTable;
        #
        #
        #    if (   _itemId
        #        && _dataAreaId)
        #    {
        #        select firstonly crosscompany inventTable
        #            where inventTable.ItemId     == _itemId
        #               && inventTable.DataAreaId == _dataAreaId;
        #    }
        #
        #    return inventTable;
        #}
      ENDSOURCE
      SOURCE #findRecId
        #public static InventTable findRecId(
        #    RecId       _recId,
        #    DataAreaId  _dataAreaId = curExt2dataareaid(tableNum(InventTable)),
        #    boolean     _update     = false)
        #{
        #    InventTable  inventTable;
        #
        #    inventTable.selectForUpdate(_update);
        #
        #    if (_recId)
        #    {
        #        select firstonly crossCompany inventTable
        #        where   inventTable.RecId       == _recId
        #            &&  inventTable.DataAreaId  == _dataAreaId;
        #    }
        #
        #    return inventTable;
        #}
      ENDSOURCE
      SOURCE #findTagId
        #public static InventTable findTagId(
        #    RFIDTagId   _tagId,
        #    boolean     _update = false)
        #{
        #    InventTable     inventTable;
        #    InventItemGTIN  gtin;
        #    RFIDEpc         epc;
        #
        #    inventTable.selectForUpdate(_update);
        #
        #    if (_tagId)
        #    {
        #        epc = RFIDEpc::construct(_tagId);
        #
        #        if (epc  &&  epc.objectType() == EPCObjectType::ItemType)
        #        {
        #            gtin = InventItemGTIN::findGTINNumeric(epc.object());
        #
        #            if (gtin)
        #            {
        #                select firstonly inventTable
        #                    where inventTable.ItemId == gtin.ItemId;
        #            }
        #        }
        #    }
        #
        #    return inventTable;
        #}
      ENDSOURCE
      SOURCE #getDistinctProductRecId
        #/// <summary>
        #/// Retrieves the record ID of a <c>EcoResDistinctProduct</c> or <c>EcoResDistinctProductVariant</c>
        #/// record.
        #/// </summary>
        #/// <param name="_itemId">
        #/// An item ID to use to find a <c>EcoResDistinctProduct</c> record.
        #/// </param>
        #/// <param name="_inventDim">
        #/// An <c>InventDim</c> record to use to find a <c>EcoResDistinctProductVariant</c> record.
        #/// </param>
        #/// <returns>
        #/// The record ID of a <c>EcoResDistinctProduct</c> or <c>EcoResDistinctProductVariant</c> record if
        #/// found; otherwise, 0.
        #/// </returns>
        #/// <remarks>
        #/// This method searches for products in the context of the current company.
        #/// </remarks>
        #public static client server EcoResDistinctProductRecId getDistinctProductRecId(
        #    ItemId      _itemId,
        #    InventDim   _inventDim)
        #{
        #    EcoResProductRecId          productRecId;
        #
        #    if (!_itemId)
        #    {
        #        throw error("@SYS16661");
        #    }
        #
        #    productRecId = InventTable::itemProduct(_itemId);
        #
        #    if (!productRecId)
        #    {
        #        return 0; //no product found for itemId in this company
        #    }
        #
        #    if (EcoResProduct::find(productRecId).isDistinctProduct())
        #    {
        #        return productRecId;
        #    }
        #
        #    return InventDimCombination::findByInventDim(_itemId,_inventDim).DistinctProductVariant;
        #}
      ENDSOURCE
      SOURCE #getInventDimId
        #public static server InventDimId getInventDimId(ItemId _itemId)
        #{
        #    InventDimId inventDimId;
        #    InventTable inventTable = InventTable::find(_itemId);
        #    InventDim   inventDim;
        #
        #    if (inventTable)
        #    {
        #        if (inventTable.hasProductDimensions())
        #        {
        #            inventDim.InventDimFieldsMap::initProductDimensionsFrom(inventTable);
        #            inventDimId              = InventDim::findOrCreate(inventDim).InventDimId;
        #        }
        #        else
        #        {
        #            inventDimId = InventDim::inventDimIdBlank();
        #        }
        #    }
        #    return inventDimId;
        #}
      ENDSOURCE
      SOURCE #infoActionBOMCalcGroup
        #private static SysInfoAction_Formrun infoActionBOMCalcGroup(
        #    ItemId          _itemId,
        #    InventTable     _inventTable = null) // set this parameter for better performance
        #{
        #    SysInfoAction_Formrun   infoActionBOMCalcGroup;
        #
        #    infoActionBOMCalcGroup = SysInfoAction_Formrun::newFormnameControlname(formStr(EcoResProductDetailsExtended),
        #                                                                           identifierStr(EngineerBOMCalculation_BOMCalcGroupId));
        #    if (!_inventTable)
        #    {
        #        _inventTable = InventTable::find(_itemId);
        #    }
        #
        #    infoActionBOMCalcGroup.parmCallerBuffer(_inventTable);
        #
        #    return infoActionBOMCalcGroup;
        #}
      ENDSOURCE
      SOURCE #infoActionItemId
        #public static SysInfoAction_Formrun infoActionItemId(
        #    ItemId          _itemId,
        #    InventTable     _inventTable = null) // set this parameter for better performance
        #{
        #    SysInfoAction_Formrun   infoActionItemId;
        #
        #    infoActionItemId = SysInfoAction_Formrun::newFormnameControlname(formStr(EcoResProductDetailsExtended),
        #                                                                     identifierStr(InventTable_ItemId));
        #    if (!_inventTable)
        #    {
        #        _inventTable = InventTable::find(_itemId);
        #    }
        #
        #    infoActionItemId.parmCallerBuffer(_inventTable);
        #
        #    return infoActionItemId;
        #}
      ENDSOURCE
      SOURCE #inventDecimals
        #public static UnitOfMeasureDecimalPrecision inventDecimals(ItemId _itemId)
        #{
        #    return UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(
        #        InventTableModule::find(_itemId, ModuleInventPurchSales::Invent).UnitId));
        #}
      ENDSOURCE
      SOURCE #isBatchReceiptRequired
        #public static boolean isBatchReceiptRequired(ItemId _itemId)
        #{
        #    InventDimGroupFieldSetup    inventDimGroupFieldSetup;
        #
        #    inventDimGroupFieldSetup = EcoResDimensionGroupSetup::getFieldSetupForItem(_itemId, fieldNum(InventDim, InventBatchId));
        #
        #    if (!inventDimGroupFieldSetup.dimFieldId()
        #     || !inventDimGroupFieldSetup.isActive()
        #     ||  inventDimGroupFieldSetup.isAllowBlankReceiptEnabled())
        #    {
        #        return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #isCoByItem
        #/// <summary>
        #/// Specifies whether an item is a co-product or by-product.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The ID of the item.
        #/// </param>
        #/// <returns>
        #/// True if the item is a co-product or by-product; otherwise, false.
        #/// </returns>
        #public static boolean isCoByItem(ItemId _itemId)
        #{
        #    return InventTable::find(_itemId).isCoByProduct();
        #}
      ENDSOURCE
      SOURCE #isFormulaItem
        #/// <summary>
        #/// Specifies whether an item is a formula item.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The ID of the item.
        #/// </param>
        #/// <returns>
        #/// True if the item is a formula item; otherwise, false.
        #/// </returns>
        #public static boolean isFormulaItem(ItemId _itemId)
        #{
        #    return InventTable::find(_itemId).PmfProductType == PmfProductType::Formula;
        #}
      ENDSOURCE
      SOURCE #isPlanningItem
        #/// <summary>
        #/// Specifies whether an item is a planning item.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The ID of the item.
        #/// </param>
        #/// <returns>
        #/// True if the item is a planning item; otherwise, false.
        #/// </returns>
        #public static boolean isPlanningItem(ItemId _itemId)
        #{
        #    return InventTable::find(_itemId).PmfProductType == PmfProductType::MainItem;
        #}
      ENDSOURCE
      SOURCE #isPotencyItem
        #/// <summary>
        #/// Specifies whether the item is a potency item.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The ID of the item.
        #/// </param>
        #/// <returns>
        #/// True if the item is a potency item; otherwise, false.
        #/// </returns>
        #public static boolean isPotencyItem(ItemId  _itemId)
        #{
        #    return InventTable::find(_itemId).pdsBaseAttributeId != '';
        #}
      ENDSOURCE
      SOURCE #itemGroupByItemId
        #/// <summary>
        #/// Retrieves an item group for an item.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The ID of an item.
        #/// </param>
        #/// <param name="_dataAreaId">
        #/// The ID of company in which the item exists.
        #/// </param>
        #/// <returns>
        #/// An item group.
        #/// </returns>
        #public static client server InventItemGroup itemGroupByItemId(ItemId _itemId, DataAreaId _dataAreaId = curExt2dataareaid(tableNum(InventTable)))
        #{
        #    return InventItemGroupItem::itemGroupByItemIdLegalEntity(_itemId, _dataAreaId);
        #}
      ENDSOURCE
      SOURCE #itemGroupIdByItemId
        #/// <summary>
        #/// Retrieves an item group ID for an item.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The ID of an item.
        #/// </param>
        #/// <param name="_dataAreaId">
        #/// The ID of company in which the item exists.
        #/// </param>
        #/// <returns>
        #/// An item group ID.
        #/// </returns>
        #public static client server ItemGroupId itemGroupIdByItemId(ItemId _itemId, DataAreaId _dataAreaId = curExt2dataareaid(tableNum(InventTable)))
        #{
        #    return InventItemGroupItem::itemGroupId(_itemId, _dataAreaId);
        #}
      ENDSOURCE
      SOURCE #itemProduct
        #/// <summary>
        #/// Finds the reference record ID for the specified <c>ItemId</c> record
        #/// </summary>
        #/// <param name="_itemId">
        #/// The specified <c>ItemId</c> record.
        #/// </param>
        #/// <returns>
        #/// The product reference record ID of the record.
        #/// </returns>
        #public client server static RefRecId itemProduct(ItemId _itemId)
        #{
        #    return InventTable::find(_itemId).Product;
        #}
      ENDSOURCE
      SOURCE #itemProductDimensionGroup
        #public static RefRecId itemProductDimensionGroup(ItemId _itemId)
        #{
        #    return InventTable::find(_itemId).productDimensionGroup();
        #}
      ENDSOURCE
      SOURCE #itemTypeByProductType
        #/// <summary>
        #/// Converts a product type to an item type.
        #/// </summary>
        #/// <param name="_productType">
        #/// An <c>EcoResProductType</c> enumeration value.
        #/// </param>
        #/// <returns>
        #/// An <c>ItemType</c> enumeration value.
        #/// </returns>
        #/// <exception cref="M:Exception::Error">
        #/// An <c>EcoResProductType</c> enumeration value cannot be converted.
        #/// </exception>
        #public static ItemType itemTypeByProductType(EcoResProductType _productType)
        #{
        #    switch (_productType)
        #    {
        #        case EcoResProductType::Item:
        #            return ItemType::Item;
        #
        #        case EcoResProductType::Service:
        #            return ItemType::Service;
        #
        #        default:
        #            // "Invalid argument."
        #            throw error("@SYS111577");
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #jumpRefItemId
        #/// <summary>
        #/// Provides the open main table functionality for an item.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The ID of an item.
        #/// </param>
        #public static void jumpRefItemId(ItemId _itemId)
        #{
        #    InventTable     inventTable;
        #    MenuFunction    menuFunction;
        #    Args            args = new Args();
        #
        #    if (_itemId)
        #    {
        #        inventTable = InventTable::find(_itemId);
        #    }
        #
        #    if (!inventTable)
        #    {
        #        return;
        #    }
        #
        #    args.record(inventTable);
        #
        #    menuFunction = new MenuFunction(menuitemDisplayStr(EcoResProductDetailsExtended),MenuItemType::Display);
        #    menuFunction.run(args);
        #}
      ENDSOURCE
      SOURCE #lookupBOMId
        #/// <summary>
        #///    Performs a lookup on the <c>BOMVersio</c> table.
        #/// </summary>
        #/// <param name="_lookupCtrl">
        #///    The <c>FormStringControl</c> control that the lookup will be attached to.
        #/// </param>
        #/// <param name="_itemId">
        #///    The item that is used to filter the lookup.
        #/// </param>
        #/// <param name="_inventDimCriteria">
        #///    The inventory dimensions that are used to filter the lookup.
        #/// </param>
        #/// <param name="_onlyApproved">
        #///    A Boolean value that indicates if only approved BOM versions are shown in the lookup; optional.
        #/// </param>
        #/// <param name="_onlyActive">
        #///    A Boolean value that indicates if only active BOM versions are shown in the lookup; optional.
        #/// </param>
        #public client static void lookupBOMId(
        #    FormStringControl   _lookupCtrl,
        #    ItemId              _itemId,
        #    InventDim           _inventDimCriteria,
        #    boolean             _onlyApproved  = false,
        #    boolean             _onlyActive    = false)
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(BOMVersion), _lookupCtrl);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(BOMVersion));
        #    QueryBuildRange         queryBuildRange;
        #
        #    QueryBuildDataSource    qbdsDim;
        #    InventDimParm           inventDimParm;
        #    ListEnumerator          enumerator  = InventDim::dimFieldListEnumerator();
        #    FieldId                 dimFieldId;
        #    FieldId                 dimParmFieldId;
        #
        #    inventDimParm.initDimBOMRouteVersion(InventDimGroupSetup::newItemId(_itemId));
        #
        #    if (_itemId)
        #    {
        #        queryBuildRange = queryBuildDataSource.addRange(fieldNum(BOMVersion, ItemId));
        #        queryBuildRange.value(queryValue(_itemId));
        #    }
        #
        #    if (_onlyApproved && isConfigurationkeyEnabled(configurationKeyNum(BOMApprove)))
        #    {
        #        queryBuildRange = queryBuildDataSource.addRange(fieldNum(BOMVersion, Approved));
        #        queryBuildRange.value(queryValue(NoYes::Yes));
        #    }
        #
        #    if (_onlyActive)
        #    {
        #        queryBuildRange = queryBuildDataSource.addRange(fieldNum(BOMVersion, Active));
        #        queryBuildRange.value(queryValue(NoYes::Yes));
        #    }
        #
        #    queryBuildDataSource.addSelectionField(fieldNum(BOMVersion, InventDimId)); // needed below for the addLookupMethod
        #
        #    qbdsDim = queryBuildDataSource.addDataSource(tableNum(InventDim));
        #    qbdsDim.joinMode(JoinMode::InnerJoin);
        #    qbdsDim.relations(true);
        #
        #    while (enumerator.moveNext())
        #    {
        #        dimFieldId = enumerator.current();
        #        dimParmFieldId = InventDim::dim2dimParm(dimFieldId);
        #        if (inventDimParm.(dimParmFieldId))  //dimension is active for the item
        #        {
        #            if (_inventDimCriteria.(dimFieldId))  //limitation is specified
        #            {
        #                qbdsDim.addRange(dimFieldId).value(queryValue(_inventDimCriteria.(dimFieldId)));
        #                qbdsDim.addRange(dimFieldId).value(SysQuery::valueEmptyString());
        #                qbdsDim.addSortField(dimFieldId);
        #            }
        #
        #            if (tableHasInstanceMethod(new DictTable(tableNum(BOMVersion)), fieldId2name(tableNum(InventDim),dimFieldId)))
        #            {
        #                sysTableLookup.addLookupMethod(fieldId2name(tableNum(InventDim), dimFieldId));
        #            }
        #        }
        #    }
        #
        #    sysTableLookup.addLookupfield(fieldNum(BOMVersion, bomId));
        #    sysTableLookup.addLookupfield(fieldNum(BOMVersion, Name));
        #
        #    sysTableLookup.addLookupfield(fieldNum(BOMVersion, FromDate));
        #    sysTableLookup.addLookupfield(fieldNum(BOMVersion, ToDate));
        #
        #    if (InventTable::find(_itemId).isFormulaAllowed())
        #    {
        #        sysTableLookup.addLookupfield(fieldNum(BOMVersion, PmfBatchSize));
        #    }
        #    else
        #    {
        #        sysTableLookup.addLookupfield(fieldNum(BOMVersion, FromQty));
        #    }
        #
        #    sysTableLookup.addLookupfield(fieldNum(BOMVersion, Active));
        #    queryBuildDataSource.addSelectionField(fieldNum(BOMVersion, Approver)); // Needed for below lookup method.
        #    sysTableLookup.addLookupMethod(tableMethodStr(BOMVersion, approverPersonnelNumber));
        #    sysTableLookup.addLookupfield(fieldNum(BOMVersion, Approved));
        #
        #    queryBuildDataSource.addSortField(fieldNum(BOMVersion, bomId),SortOrder::Descending);
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
        #
      ENDSOURCE
      SOURCE #lookupBOMItemId
        #/// <summary>
        #/// Provides a lookup for the <c>InventTable</c> table containing only BOM items.
        #/// </summary>
        #/// <param name="_ctrl">
        #/// The form string control object with which to perform the lookup.
        #/// </param>
        #public static client void lookupBOMItemId(FormStringControl _ctrl)
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable),_ctrl);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(InventTable));
        #    QueryBuildRange         queryBuildRangeItemType = queryBuildDataSource.addRange(fieldNum(InventTable, PmfProductType));
        #
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,ItemId));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable,itemGroupId));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable,defaultProductName));
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,ItemType));
        #    sysTableLookup.addSelectionField(fieldNum(InventTable,Product));
        #
        #    // service items need to be excluded from the lookup
        #    queryBuildDataSource.addRange(fieldNum(InventTable,ItemType)).value(InventItemType::valueCanBeProduced());
        #    InventInventoriedPolicy::addInventoriedRangeToInventTable(queryBuildDataSource);
        #
        #    queryBuildRangeItemType.value(queryValue(PmfProductType::BOM));
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
        #
        #
      ENDSOURCE
      SOURCE #lookupBulkPackItemForSetup
        #/// <summary>
        #/// Provides a lookup for the <c>InventTable</c> table containing only items compatible with the containerized packaging.
        #/// </summary>
        #/// <param name="_ctrl">
        #/// The form string control object with which to perform the lookup.
        #/// </param>
        #public static client void lookupBulkPackItemForSetup(
        #    FormStringControl   _ctrl)
        #{
        #    SysTableLookup          sysTableLookup              = SysTableLookup::newParameters(tableNum(InventTable),_ctrl, true);
        #    Query                   query                       = new Query();
        #    QueryBuildDataSource    queryBuildDataSource        = query.addDataSource(tableNum(InventTable));
        #    QueryBuildRange         queryBuildRangeItemType     = queryBuildDataSource.addRange(fieldNum(InventTable, ItemType));
        #    QueryBuildRange         queryBuildRangeProductType  = queryBuildDataSource.addRange(fieldNum(InventTable, PmfProductType));
        #    QueryBuildDataSource    queryBuildDataSourceCW;
        #
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,ItemId));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable,itemGroupId));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable,defaultProductName));
        #
        #    //filters
        #    queryBuildRangeItemType.value(queryValue(ItemType::Item));
        #    queryBuildRangeProductType.value(queryValue(PmfProductType::Formula));
        #
        #    //the exists join will suffice as a filter
        #    queryBuildDataSourceCW = queryBuildDataSource.addDataSource(tableNum(PdsCatchWeightItem));
        #    queryBuildDataSourceCW.addLink(fieldNum(InventTable, ItemId) ,fieldNum(PdsCatchWeightItem, ItemId));
        #    queryBuildDataSourceCW.joinMode(JoinMode::NoExistsJoin);
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
        #
      ENDSOURCE
      SOURCE #lookupFormulaId
        #/// <summary>
        #/// Provides a lookup for the <c>BOMVersion</c> table containing only formulas.
        #/// </summary>
        #/// <param name="_lookupCtrl">
        #/// The form string control object with which to perform the lookup.
        #/// </param>
        #/// <param name="_itemId">
        #/// The ID of the item to filter the records with.
        #/// </param>
        #/// <param name="_inventDimCriteria">
        #/// The inventory dimension filter criteria.
        #/// </param>
        #public client static void lookupFormulaId(
        #    FormStringControl   _lookupCtrl,
        #    ItemId              _itemId,
        #    InventDim           _inventDimCriteria)
        #{
        #    Query                   query                   = new Query();
        #    QueryBuildDataSource    queryBuildDataSource    = query.addDataSource(tableNum(BOMVersion));
        #    QueryBuildRange         queryBuildRange         = queryBuildDataSource.addRange(fieldNum(BOMVersion, ItemId));
        #
        #    QueryBuildDataSource    qbdsDim;
        #    List                    dimFields               = InventDim::dimFieldsList();
        #    ListEnumerator          dimFieldsEnum           = dimFields.getEnumerator();
        #    InventDimParm           inventDimParm;
        #    int                     y;
        #    int                     x;
        #
        #    inventDimParm.initDimBOMRouteVersion(InventDimGroupSetup::newItemId(_itemId));
        #
        #    qbdsDim = queryBuildDataSource.addDataSource(tableNum(InventDim));
        #    qbdsDim.joinMode(JoinMode::InnerJoin);
        #    qbdsDim.relations(true);
        #
        #    while(dimFieldsEnum.moveNext())
        #    {
        #        y = dimFieldsEnum.current();
        #        x = InventDim::dim2dimParm(y);
        #
        #        if (inventDimParm.(x))  //dimension is active for the item
        #        {
        #            if (_inventDimCriteria.(y))  //limitation is specified
        #            {
        #                qbdsDim.addRange(y).value(queryValue(_inventDimCriteria.(y)));
        #                qbdsDim.addRange(y).value(SysQuery::valueEmptyString());
        #                qbdsDim.addSortField(y);
        #            }
        #        }
        #    }
        #
        #    if (!_itemId)
        #    {
        #        throw error("@SYS23094");
        #    }
        #
        #    queryBuildRange.value(_itemId);
        #
        #    new InventLookup(_lookupCtrl,query,formStr(PmfFormulaLookupSimple)).run();
        #}
      ENDSOURCE
      SOURCE #lookupFormulaItemId
        #/// <summary>
        #/// Provides a lookup for the <c>InventTable</c> table containing only BOM items.
        #/// </summary>
        #/// <param name="_ctrl">
        #/// The form string control object with which to perform the lookup.
        #/// </param>
        #/// <param name="_includeCoProducts">
        #/// If set to true, items of type co product are included in lookup.
        #/// </param>
        #/// <param name="_itemId">
        #/// <c>ItemId</c> used in filtering the lookup.
        #/// </param>
        #/// <remarks>
        #/// Performs a lookup of items with item type of formula.  If the item with _itemId is a co-product,
        #/// only items that have formulas with the _itemId as a coproduct are included in the lookup.
        #/// </remarks>
        #public static client void lookupFormulaItemId(
        #    FormStringControl   _ctrl,
        #    boolean             _includeCoProducts = false,
        #    ItemId              _itemId = '')
        #{
        #    SysTableLookup          sysTableLookup              = SysTableLookup::newParameters(tableNum(InventTable),_ctrl);
        #    Query                   query                       = new Query();
        #    QueryBuildDataSource    queryBuildDataSource        = query.addDataSource(tableNum(InventTable));
        #    QueryBuildRange         queryBuildRangeItemType     = queryBuildDataSource.addRange(fieldNum(InventTable, ItemType));
        #    QueryBuildRange         queryBuildRangeProductType  = queryBuildDataSource.addRange(fieldNum(InventTable, PmfProductType));
        #
        #    QueryBuildDataSource    qbdsCoBy;
        #    QueryBuildDataSource    qbdsBOMVersion;
        #
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,ItemId));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable,itemGroupId));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable,defaultProductName));
        #    sysTableLookup.addSelectionField(fieldNum(InventTable,Product));
        #    queryBuildRangeItemType.value(queryValue(ItemType::Item));
        #
        #
        #    if (InventTable::find(_itemId).PmfProductType == PmfProductType::Co_Product)
        #    {
        #        queryBuildRangeProductType.value(
        #            strFmt(
        #                '( (%1 == %2) || (%3 == %4) || (%5 == %6) )',
        #                fieldStr(InventTable, PmfProductType),
        #                    any2int(PmfProductType::Formula),
        #                fieldStr(InventTable, PmfProductType),
        #                    any2int(PmfProductType::Co_Product),
        #                fieldStr(InventTable, PmfProductType),
        #                    any2int(PmfProductType::MainItem)));
        #
        #        qbdsBOMVersion = queryBuildDataSource.addDataSource(tableNum(BOMVersion));
        #        qbdsBOMVersion.addLink(fieldNum(InventTable, ItemId) ,fieldNum(BOMVersion, ItemId));
        #        qbdsBOMVersion.joinMode(JoinMode::ExistsJoin);
        #
        #        qbdsCoBy = qbdsBOMVersion.addDataSource(tableNum(PmfFormulaCoBy));
        #        qbdsCoBy.addLink(fieldNum(BOMVersion, RecId), fieldNum(PmfFormulaCoBy, bomVersionRefRecId));
        #        qbdsCoBy.addRange(fieldNum(PmfFormulaCoBy, ItemId)).value(_itemId);
        #
        #    }
        #    else
        #    {
        #        queryBuildRangeProductType.value(
        #                strFmt(
        #                    '( (%1 == %2) || (%3 == %4) )',
        #                    fieldStr(InventTable, PmfProductType),
        #                        any2int(PmfProductType::Formula),
        #                    fieldStr(InventTable, PmfProductType),
        #                        any2int(PmfProductType::MainItem)));
        #
        #
        #        if (_includeCoProducts)
        #        {
        #            queryBuildRangeProductType.value(
        #                strFmt(
        #                    '( (%1 == %2) || (%3 == %4) || (%5 == %6) )',
        #                    fieldStr(InventTable, PmfProductType),
        #                        any2int(PmfProductType::Formula),
        #                    fieldStr(InventTable, PmfProductType),
        #                        any2int(PmfProductType::Co_Product),
        #                    fieldStr(InventTable, PmfProductType),
        #                        any2int(PmfProductType::MainItem)));
        #        }
        #    }
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
        #
      ENDSOURCE
      SOURCE #lookupItem
        #  /// <summary>
        #/// Provides a lookup for the <c>InventTable</c> table.
        #/// </summary>
        #/// <param name="_ctrl">
        #/// The form string control object with which to perform the lookup.
        #/// </param>
        #public client static void lookupItem(FormStringControl _ctrl)
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable),_ctrl);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(InventTable));
        #
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,ItemId));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable,defaultProductName));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable,itemGroupId));
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,NameAlias));
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,ItemType));
        #    sysTableLookup.addSelectionField(fieldNum(InventTable,Product));
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #lookupItemByTrackingDimension
        #/// <summary>
        #///    Creates and displays a lookup from which the user can select for items tracked by a specific dimension only.
        #/// </summary>
        #/// <param name="_control">
        #///    The calling form control.
        #/// </param>
        #/// <param name="_inventDimTrackingFieldId">
        #///    The inventory dimension tracking field ID that must be an active dimension for the items shown in the lookup; optional.
        #/// </param>
        #/// <remarks>
        #///    If <paramref name="_inventDimTrackingFieldId"/> is not specified then it defaults to the inventory batch dimension field.
        #/// </remarks>
        #public static client void lookupItemByTrackingDimension(FormStringControl _control, FieldId _inventDimTrackingFieldId = fieldNum(InventDim, InventBatchId))
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable), _control);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    dsInventTable;
        #    QueryBuildDataSource    dsEcoResTrackingDimensionGroupItem;
        #    QueryBuildDataSource    dsEcoResTrackingDimensionGroup;
        #    QueryBuildDataSource    dsEcoResTrackingDimensionGroupFldSetup;
        #
        #    sysTableLookup.addLookupfield(fieldNum(InventTable, ItemId));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable, defaultProductName));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable, itemGroupId));
        #    sysTableLookup.addLookupfield(fieldNum(InventTable, NameAlias));
        #    sysTableLookup.addLookupfield(fieldNum(InventTable, PmfProductType));
        #    sysTableLookup.addSelectionField(fieldNum(InventTable, Product));
        #
        #    dsInventTable = query.addDataSource(tableNum(InventTable));
        #
        #    dsEcoResTrackingDimensionGroupItem = dsInventTable.addDataSource(tableNum(EcoResTrackingDimensionGroupItem));
        #    dsEcoResTrackingDimensionGroupItem.joinMode(JoinMode::ExistsJoin);
        #    dsEcoResTrackingDimensionGroupItem.relations(true);
        #
        #    dsEcoResTrackingDimensionGroup = dsEcoResTrackingDimensionGroupItem.addDataSource(tableNum(EcoResTrackingDimensionGroup));
        #    dsEcoResTrackingDimensionGroup.joinMode(JoinMode::ExistsJoin);
        #    dsEcoResTrackingDimensionGroup.relations(true);
        #
        #    dsEcoResTrackingDimensionGroupFldSetup = dsEcoResTrackingDimensionGroup.addDataSource(tableNum(EcoResTrackingDimensionGroupFldSetup));
        #    dsEcoResTrackingDimensionGroupFldSetup.joinMode(JoinMode::ExistsJoin);
        #    dsEcoResTrackingDimensionGroupFldSetup.relations(true);
        #
        #    dsEcoResTrackingDimensionGroupFldSetup.addRange(fieldNum(EcoResTrackingDimensionGroupFldSetup, DimensionFieldId)).value(queryValue(_inventDimTrackingFieldId));
        #    dsEcoResTrackingDimensionGroupFldSetup.addRange(fieldNum(EcoResTrackingDimensionGroupFldSetup, IsActive)).value(queryValue(NoYes::Yes));
        #
        #    dsInventTable.addSortField(fieldNum(InventTable, ItemId));
        #
        #    InventInventoriedPolicy::addInventoriedRangeToInventTable(dsInventTable);
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #lookupItemIdAsset_RU
        #/// <summary>
        #///    Find asset items.
        #/// </summary>
        #/// <param name="_ctrl">
        #///    The FormStringControl object where the lookup values should be displayed.
        #/// </param>
        #/// <param name="_showAsset">
        #///    true if the asset group ID should be displayed; otherwise, false.
        #/// </param>
        #public client static void lookupItemIdAsset_RU(FormStringControl _ctrl,
        #                                               boolean           _showAsset = true)
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable),_ctrl);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(InventTable));
        #
        #    sysTableLookup.addLookupfield(fieldNum(InventTable, ItemId));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable, defaultProductName));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable, itemGroupId));
        #    sysTableLookup.addSelectionField(fieldNum(InventTable,Product));
        #
        #    if (_showAsset)
        #    {
        #        sysTableLookup.addLookupfield(fieldNum(InventTable, AssetGroupId_RU));
        #    }
        #
        #    queryBuildDataSource.addRange(fieldNum(InventTable, AssetGroupId_RU)).value(_showAsset ?
        #                                                                                SysQuery::valueNotEmptyString() :
        #                                                                                SysQuery::valueEmptyString());
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #lookupItemIdCanBeProduced
        #public static client void lookupItemIdCanBeProduced(FormStringControl _ctrl)
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable),_ctrl);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(InventTable));
        #
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,ItemId));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable,defaultProductName));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable,itemGroupId));
        #    sysTableLookup.addSelectionField(fieldNum(InventTable,Product));
        #
        #    queryBuildDataSource.addRange(fieldNum(InventTable,ItemType)).value(InventItemType::valueCanBeProduced());
        #
        #    InventInventoriedPolicy::addInventoriedRangeToInventTable(queryBuildDataSource);
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #lookupItemIdCanBeTracked
        #/// <summary>
        #///    Creates and displays a lookup from which the user can select for trackable items only
        #/// </summary>
        #/// <param name="_ctrl">
        #///    The calling form control
        #/// </param>
        #public static client void lookupItemIdCanBeTracked(FormStringControl  _ctrl)
        #{
        #    Args                args = new Args();
        #    FormRun             formRun;
        #
        #    args.name(formStr(InventTrackingItemIdLookup));
        #    args.caller(_ctrl);
        #
        #    formRun = classfactory.formRunClass(args);
        #    formRun.init();
        #
        #    _ctrl.performFormLookup(formRun);
        #}
      ENDSOURCE
      SOURCE #lookupItemIdCanBeTransferred
        #/// <summary>
        #///    Finds items that can be transferred.
        #/// </summary>
        #/// <param name="_lookupctrl">
        #///    The <c>FormStringControl</c> object where the lookup values should be displayed.
        #/// </param>
        #/// <remarks>
        #///    Whether an item can be transferred depends on its item type, and is determined by the return value of the <c>InventItemType.canBeTransferred</c> method.
        #/// </remarks>
        #public static client void lookupItemIdCanBeTransferred(FormStringControl _lookupctrl)
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable), _lookupctrl);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    queryBuildDataSource;
        #
        #    sysTableLookup.addLookupfield(fieldNum(InventTable, ItemId));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable,defaultProductName));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable,itemGroupId));
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,NameAlias));
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,ItemType));
        #    sysTableLookup.addSelectionField(fieldNum(InventTable,Product));
        #
        #    queryBuildDataSource = query.addDataSource(tableNum(InventTable));
        #    queryBuildDataSource.addRange(fieldNum(InventTable,ItemType)).value(InventItemType::valueCanBeTransferred());
        #
        #    queryBuildDataSource.addSortField(fieldNum(InventTable,ItemId));
        #
        #    InventInventoriedPolicy::addInventoriedRangeToInventTable(queryBuildDataSource);
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #lookupItemIdCanHaveBOMFormula
        #/// <summary>
        #///    Find BOM and formula items.
        #/// </summary>
        #/// <param name="_ctrl">
        #///    The FormStringControl object where the lookup values should be displayed.
        #/// </param>
        #public static client void lookupItemIdCanHaveBOMFormula(
        #    FormStringControl _ctrl)
        #{
        #    SysTableLookup          sysTableLookup          = SysTableLookup::newParameters(tableNum(InventTable),_ctrl);
        #    Query                   query                   = new Query();
        #    QueryBuildDataSource    queryBuildDataSource    = query.addDataSource(tableNum(InventTable));
        #
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,ItemId));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable,itemGroupId));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable,defaultProductName));
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,ItemType));
        #
        #    // service items need to be excluded from the lookup
        #    queryBuildDataSource.addRange(fieldNum(InventTable,ItemType)).value(InventItemType::valueCanBeProduced());
        #    InventInventoriedPolicy::addInventoriedRangeToInventTable(queryBuildDataSource);
        #
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,PmfProductType));
        #    sysTableLookup.addSelectionField(fieldNum(InventTable,Product));
        #    queryBuildDataSource.addRange(fieldNum(InventTable,PmfProductType)).value(queryValue(PmfProductType::BOM));
        #    queryBuildDataSource.addRange(fieldNum(InventTable,PmfProductType)).value(queryValue(PmfProductType::Formula));
        #    queryBuildDataSource.addRange(fieldNum(InventTable,PmfProductType)).value(queryValue(PmfProductType::MainItem));
        #
        #    queryBuildDataSource.addSortField(fieldNum(InventTable,ItemId));
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
        #
        #
      ENDSOURCE
      SOURCE #lookupItemIdCanHaveCoProdBOMFormula
        #/// <summary>
        #///    Find BOM items, formula items and co-products.
        #/// </summary>
        #/// <param name="_ctrl">
        #///    The FormStringControl object where the lookup values should be displayed.
        #/// </param>
        #public static client void lookupItemIdCanHaveCoProdBOMFormula(
        #    FormStringControl _ctrl)
        #{
        #    SysTableLookup          sysTableLookup          = SysTableLookup::newParameters(tableNum(InventTable),_ctrl);
        #    Query                   query                   = new Query();
        #    QueryBuildDataSource    queryBuildDataSource    = query.addDataSource(tableNum(InventTable));
        #
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,ItemId));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable, itemGroupId));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable, defaultProductName));
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,ItemType));
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,PmfProductType));
        #    sysTableLookup.addSelectionField(fieldNum(InventTable,Product));
        #
        #    queryBuildDataSource.addRange(fieldNum(InventTable,PmfProductType)).value(queryValue(PmfProductType::BOM));
        #    queryBuildDataSource.addRange(fieldNum(InventTable,PmfProductType)).value(queryValue(PmfProductType::Formula));
        #    queryBuildDataSource.addRange(fieldNum(InventTable,PmfProductType)).value(queryValue(PmfProductType::MainItem));
        #    queryBuildDataSource.addRange(fieldNum(InventTable,PmfProductType)).value(queryValue(PmfProductType::Co_Product));
        #
        #    queryBuildDataSource.addSortField(fieldNum(InventTable,ItemId));
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
        #
        #
      ENDSOURCE
      SOURCE #lookupItemIdDefaultOrderType
        #/// <summary>
        #///     Creates a lookup for selecting items with the specified default order type.
        #/// </summary>
        #/// <param name="_ctrl">
        #///     The string control calling the lookup.
        #/// </param>
        #/// <param name="_poType">
        #///     The default order type to search for.
        #/// </param>
        #/// <param name="_stockedProduct">
        #///     A <c>NoYes</c> value that specifies the stocking policy for the item.
        #/// </param>
        #public static client void lookupItemIdDefaultOrderType(FormStringControl _ctrl, ReqPOType _poType, NoYes _stockedProduct)
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable),_ctrl);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    qbdsItem                    = query.addDataSource(tableNum(InventTable));
        #    QueryBuildDataSource    qbdsOrderType               = qbdsItem.addDataSource(tableNum(InventItemSetupSupplyType));
        #    QueryBuildDataSource    qbdsInventModelGroupItem    = qbdsItem.addDataSource(tableNum(InventModelGroupItem));
        #    QueryBuildDataSource    qbdsInventModelGroup        = qbdsInventModelGroupItem.addDataSource(tableNum(InventModelGroup));
        #
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,ItemId));
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,PmfProductType));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable, pdsDefaultOrderType));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable, defaultProductName));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable, itemGroupId));
        #    sysTableLookup.parmUseLookupValue(true);
        #
        #    // service items shoud be filtered out for commodity runs
        #    qbdsItem.addRange(fieldNum(InventTable, ItemType)).value(queryValue(ItemType::Item));
        #
        #    qbdsOrderType.addLink(fieldNum(InventTable,ItemId),     fieldNum(InventItemSetupSupplyType,ItemId));
        #    qbdsOrderType.addLink(fieldNum(InventTable,DataAreaId), fieldNum(InventItemSetupSupplyType,ItemDataAreaId));
        #    qbdsOrderType.joinMode(JoinMode::InnerJoin);
        #
        #    qbdsInventModelGroupItem.addLink(fieldNum(InventTable,ItemId),     fieldNum(InventModelGroupItem,ItemId));
        #    qbdsInventModelGroupItem.addLink(fieldNum(InventTable,DataAreaId), fieldNum(InventModelGroupItem,ItemDataAreaId));
        #    qbdsInventModelGroupItem.joinMode(JoinMode::ExistsJoin);
        #
        #    qbdsInventModelGroup.addLink(fieldNum(InventModelGroupItem,ModelGroupId), fieldNum(InventModelGroup,ModelGroupId));
        #    qbdsInventModelGroup.addLink(fieldNum(InventModelGroupItem,ModelGroupDataAreaId), fieldNum(InventModelGroup,DataAreaId));
        #    qbdsInventModelGroup.joinMode(JoinMode::ExistsJoin);
        #
        #    qbdsOrderType.addRange(fieldNum(InventItemSetupSupplyType,DefaultOrderType)).value(queryValue(_poType));
        #    qbdsInventModelGroup.addRange(fieldNum(InventModelGroup, StockedProduct)).value(queryValue(_stockedProduct));
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #lookupItemIdGroup
        #public client server static void lookupItemIdGroup(
        #    FormStringControl   _ctrl,
        #    ItemGroupId         _itemGroupId,
        #    boolean             _showBOM     = false,
        #    boolean             _showRoute   = false
        #    ,
        #    boolean             _showFormula = false
        #    )
        #{
        #    InventLookupItemIdGroup inventLookup;
        #
        #    if (!_showFormula || !#PmfEnabled)
        #    {
        #        inventLookup = new InventLookupItemIdGroup(_ctrl, _itemGroupId, _showBOM, _showRoute);
        #    }
        #    else if (_showFormula)
        #    {
        #        inventLookup = new InventLookupItemIdGroup(
        #                                _ctrl,
        #                                _itemGroupId,
        #                                _showBOM,
        #                                _showRoute,
        #                                _showFormula);
        #    }
        #
        #    inventLookup.run();
        #}
      ENDSOURCE
      SOURCE #lookupItemIdHasReleasedVariants
        #/// <summary>
        #///     Creates a lookup for selecting product master items that have released variants.
        #/// </summary>
        #/// <param name="_ctrl">
        #///     The string control calling the lookup.
        #/// </param>
        #public static client void lookupItemIdHasReleasedVariants(FormStringControl _ctrl)
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable),_ctrl);
        #    Query                   query = new Query();
        #
        #    QueryBuildDataSource    qbdsItem                    = query.addDataSource(tableNum(InventTable));
        #    QueryBuildDataSource    qbdsReleasedVariants        = qbdsItem.addDataSource(tableNum(InventDimCombination));
        #
        #    sysTableLookup.addLookupfield(fieldNum(InventTable, ItemId));
        #    sysTableLookup.addSelectionField(fieldNum(InventTable,Product));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable,defaultProductName));
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,NameAlias));
        #
        #    qbdsReleasedVariants.relations(true);
        #    qbdsReleasedVariants.joinMode(JoinMode::ExistsJoin);
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #lookupItemIdType
        #public static client void lookupItemIdType(
        #    FormStringControl   _ctrl,
        #    str                 _filterStr,
        #    Set                 _itemTypes)
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable),_ctrl);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(InventTable));
        #    SetEnumerator           se;
        #
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,ItemId));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable,defaultProductName));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable,itemGroupId));
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,NameAlias));
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,ItemType));
        #    sysTableLookup.addSelectionField(fieldNum(InventTable, Product));
        #
        #    queryBuildDataSource.addRange(fieldNum(InventTable,ItemId)).value(_filterStr+'*');
        #
        #    if (_itemTypes)
        #    {
        #        se = _itemTypes.getEnumerator();
        #        while (se.moveNext())
        #        {
        #            queryBuildDataSource.addRange(fieldNum(InventTable,ItemType)).value(queryValue(se.current()));
        #        }
        #    }
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #lookupItemIdTypePricingTemplate
        #/// <summary>
        #///    Find items that can be used for a commodity pricing template.
        #/// </summary>
        #/// <param name="_ctrl">
        #///    The FormStringControl object where the lookup values should be displayed.
        #/// </param>
        #/// <param name="_filterStr">
        #///    A filter expression for the item ID.
        #/// </param>
        #/// <param name="_itemTypes">
        #///    A list of product types to filter the result list.
        #/// </param>
        #public static client void lookupItemIdTypePricingTemplate(
        #    FormStringControl   _ctrl,
        #    str                 _filterStr,
        #    Set                 _itemTypes)
        #{
        #    SysTableLookup          sysTableLookup          = SysTableLookup::newParameters(tableNum(InventTable),_ctrl);
        #    Query                   query                   = new Query();
        #    QueryBuildDataSource    queryBuildDataSource    = query.addDataSource(tableNum(InventTable));
        #    SetEnumerator           se;
        #
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,ItemId));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable,itemGroupId));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable,defaultProductName));
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,NameAlias));
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,ItemType));
        #
        #    queryBuildDataSource.addRange(fieldNum(InventTable,ItemId)).value(_filterStr+'*');
        #
        #    queryBuildDataSource.addRange(fieldNum(InventTable,PmfProductType)).value(strFmt('!%1', queryValue(PmfProductType::MainItem)));
        #
        #    if (_itemTypes)
        #    {
        #        se = _itemTypes.getEnumerator();
        #        while (se.moveNext())
        #        {
        #            queryBuildDataSource.addRange(
        #                fieldNum(InventTable, PmfProductType)).value(
        #                    queryValue(se.current()));
        #        }
        #    }
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #lookupItemsForQuotes
        #/// <summary>
        #/// Provides a lookup for the items which belongs to a catalog for a specified <c>MCRSourceID</c> source code.
        #/// </summary>
        #/// <param name="_sourceID">
        #/// A specified <c>MCRSourceID</c> source code.
        #/// </param>
        #/// <param name="_callingControl">
        #/// The form string control object with which to perform the lookup.
        #/// </param>
        #static void lookupItemsForQuotes(MCRSourceID _sourceID, FormControl _callingControl)
        #{
        #    SysTableLookup          sysTableLookup;
        #    Query                   query = new Query();
        #    QueryBuildDataSource    queryBuildDataSourceInventTable;
        #    QueryBuildDataSource    queryBuildDataSourceCatalogProduct;
        #    QueryBuildDataSource    queryBuildDataSourceEcoResProduct;
        #    QueryBuildDataSource    queryBuildDataSourceMCRInventTable;
        #    Catalog                 catalog;
        #
        #    catalog = Catalog::find(MCRSourceCodeSetup::find(_sourceID).Catalog);
        #
        #    sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable), _callingControl);
        #    sysTableLookup.addLookupfield(fieldNum(InventTable, ItemID));
        #    sysTableLookup.addLookupMethod(tablemethodstr(InventTable, itemName));
        #    sysTableLookup.addLookupMethod(tablemethodstr(InventTable, itemGroupId));
        #    sysTableLookup.addLookupfield(fieldNum(InventTable, NameAlias));
        #    sysTableLookup.addLookupfield(fieldNum(InventTable, ItemType));
        #    sysTableLookup.addSelectionField(fieldNum(InventTable, Product));  //needed for itemName() display method
        #
        #    queryBuildDataSourceInventTable = query.addDataSource(tablenum(InventTable));
        #    if (catalog)
        #    {
        #        // Catalog exists, show items related to catalog
        #        queryBuildDataSourceEcoResProduct = queryBuildDataSourceInventTable.addDataSource(tablenum(EcoResProduct));
        #        queryBuildDataSourceEcoResProduct.relations(true);
        #        queryBuildDataSourceEcoResProduct.joinMode(JoinMode::InnerJoin);
        #
        #        queryBuildDataSourceCatalogProduct = queryBuildDataSourceEcoResProduct.addDataSource(tablenum(CatalogProduct));
        #        queryBuildDataSourceCatalogProduct.relations(true);
        #        queryBuildDataSourceCatalogProduct.joinMode(JoinMode::InnerJoin);
        #
        #        queryBuildDataSourceCatalogProduct.addRange(fieldNum(CatalogProduct, Catalog)).value(queryValue(catalog.RecId));
        #    }
        #    else
        #    {
        #        // Catalog doesn't exist, show all items
        #        queryBuildDataSourceMCRInventTable = queryBuildDataSourceInventTable.addDataSource(tableNum(MCRInventTable));
        #        queryBuildDataSourceMCRInventTable.relations(true);
        #        queryBuildDataSourceMCRInventTable.joinMode(JoinMode::NoExistsJoin);
        #        queryBuildDataSourceMCRInventTable.addRange(fieldnum(MCRInventTable,ContinuityScheduleID)).value(sysQuery::valueNotEmptyString());
        #    }
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #lookupItemType
        #/// <summary>
        #///    Find co-products and by-products.
        #/// </summary>
        #/// <param name="_ctrl">
        #///    The FormStringControl object where the lookup values should be displayed.
        #/// </param>
        #public client static void lookupItemType(FormStringControl   _ctrl)
        #{
        #    SysTableLookup          sysTableLookup  = SysTableLookup::newParameters(tableNum(InventTable), _ctrl);
        #    Query                   query           = new Query();
        #    QueryBuildDataSource    qbdInventTable;
        #    #xppTexts
        #
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,ItemId));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable,itemGroupId));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable,defaultProductName));
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,ItemType));
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,PmfProductType));
        #    sysTableLookup.addSelectionField(fieldNum(InventTable,Product));
        #
        #    qbdInventTable = query.addDataSource(tableNum(InventTable));
        #    qbdInventTable.addRange(fieldNum(InventTable,ItemType)).value(queryValue(ItemType::Item));
        #
        #    qbdInventTable.addRange(fieldNum(InventTable, PmfProductType)).value(queryValue(PmfProductType::By_Product)
        #                    + #Comma
        #                    + queryValue(PmfProductType::Co_Product));
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
        #
      ENDSOURCE
      SOURCE #lookupPmfBulkItem
        #/// <summary>
        #///    Finds bulk items for the specified BOMId.
        #/// </summary>
        #/// <param name="_lookupCtrl">
        #///    The FormStringControl object where the lookup values should be displayed.
        #/// </param>
        #/// <param name="_bomId">
        #///    The ID of the BOM.
        #/// </param>
        #/// <param name="_packedItemId">
        #///     The ID of the packed item.
        #/// </param>
        #public client static void lookupPmfBulkItem(
        #    FormStringControl   _lookupCtrl,
        #    BOMId               _bomId,
        #    ItemId              _packedItemId
        #    )
        #{
        #    SysTableLookup          sysTableLookup          = SysTableLookup::newParameters(tableNum(InventTable), _lookupCtrl);
        #    Query                   query                   = new Query();
        #    QueryBuildDataSource    queryBuildDataSource    = query.addDataSource(tableNum(InventTable));
        #    QueryBuildRange         queryBuildRange;
        #    QueryBuildDataSource    qbdsBOM;
        #    QueryBuildDataSource    qbdsBulkConv;
        #
        #    queryBuildDataSource.addSelectionField(fieldNum(InventTable, ItemId));
        #
        #    qbdsBOM  = queryBuildDataSource.addDataSource(tableNum(BOM));
        #    qbdsBOM.joinMode(JoinMode::InnerJoin);
        #    qbdsBOM.relations(true);
        #
        #    queryBuildRange  = qbdsBOM.addRange(fieldNum(BOM, bomId));
        #    queryBuildRange.value(queryValue(_bomId));
        #
        #    queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventTable, ItemType));
        #
        #    queryBuildRange.value(queryValue(ItemType::Item));
        #
        #    queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventTable, PmfProductType));
        #    queryBuildRange.value(queryValue(PmfProductType::Formula));
        #
        #    qbdsBulkConv = qbdsBOM.addDataSource(tableNum(PmfBulkItemConv));
        #    qbdsBulkConv.joinMode(JoinMode::InnerJoin);
        #    qbdsBulkConv.relations(false);
        #    qbdsBulkConv.addLink(fieldNum(BOM, ItemId), fieldNum(PmfBulkItemConv,BulkItem));
        #    queryBuildRange = qbdsBulkConv.addRange(fieldNum(PmfBulkItemConv,PackedItem));
        #    queryBuildRange.value(queryValue(_packedItemId));
        #
        #    sysTableLookup.addLookupfield(fieldNum(InventTable, ItemId));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable, itemGroupId));
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable, defaultProductName));
        #    sysTableLookup.addLookupfield(fieldNum(InventTable, NameAlias));
        #
        #    queryBuildDataSource.addSortField(fieldNum(InventTable, ItemId), SortOrder::Ascending);
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
        #
      ENDSOURCE
      SOURCE #lookupPmfPlanningItem
        #/// <summary>
        #/// Runs a lookup form for formula or planning items that can be used for planning a given co-product item.
        #/// </summary>
        #/// <param name="_ctrl">
        #/// The form string control that initiated this lookup.
        #/// </param>
        #/// <param name="_coProductId">
        #/// The co-product item id for which this lookup is for.
        #/// </param>
        #/// <remarks>
        #/// The lookup that this creates will show only formula or planning items that can
        #/// be used as a planning item for <paramref name="_coProductId"/>. If
        #/// the planning item is defined for the co-product then just that
        #/// formula item will be shown. Otherwise, this will show all the formula
        #/// items that have the co-product on any of its BOM versions, ignoring the
        #/// active status of those BOM versions.
        #/// </remarks>
        #public static client void lookupPmfPlanningItem(
        #    FormStringControl   _ctrl,
        #    ItemId              _coProductId)
        #{
        #    SysTableLookup          sysTableLookup;
        #    Query                   query;
        #    QueryBuildDataSource    qbdsInventTable;
        #    InventTable             coProduct = InventTable::find(_coProductId);
        #
        #    if (coProduct.PmfPlanningItemId)
        #    {
        #        // Only show the default planning item
        #        sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable), _ctrl);
        #        query = new Query();
        #
        #        sysTableLookup.addLookupfield(fieldNum(InventTable, ItemId));
        #        sysTableLookup.addLookupMethod(tableMethodStr(InventTable,itemName));
        #        sysTableLookup.addLookupMethod(tableMethodStr(InventTable,itemGroupId));
        #
        #        qbdsInventTable = query.addDataSource(tableNum(InventTable));
        #        qbdsInventTable.addRange(fieldNum(InventTable, ItemId)).value(queryValue(coProduct.PmfPlanningItemId));
        #
        #        sysTableLookup.parmQuery(query);
        #        sysTableLookup.performFormLookup();
        #    }
        #    else
        #    {
        #        // Show all planning or formula items that has the co-product as output
        #        InventTable::lookupFormulaItemId(_ctrl, false, _coProductId);
        #    }
        #}
      ENDSOURCE
      SOURCE #lookupRouteId
        #/// <summary>
        #///    Performs a lookup on the <c>RouteVersion</c> table.
        #/// </summary>
        #/// <param name="_lookupCtrl">
        #///    The <c>FormStringControl</c> control that the lookup will be attached to.
        #/// </param>
        #/// <param name="_itemId">
        #///    The item that is used to filter the lookup.
        #/// </param>
        #/// <param name="_inventDimCriteria">
        #///    The inventory dimensions that are used to filter the lookup.
        #/// </param>
        #/// <param name="_onlyApproved">
        #///    A Boolean value that indicates if only approved route versions are shown in the lookup; optional.
        #/// </param>
        #/// <param name="_onlyActive">
        #///    A Boolean value that indicates if only active route versions are shown in the lookup; optional.
        #/// </param>
        #public client static void lookupRouteId(
        #    FormStringControl   _lookupCtrl,
        #    ItemId              _itemId,
        #    InventDim           _inventDimCriteria,
        #    boolean             _onlyApproved  = false,
        #    boolean             _onlyActive    = false)
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(RouteVersion), _lookupCtrl);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(RouteVersion));
        #    QueryBuildRange         queryBuildRange;
        #
        #    QueryBuildDataSource    qbdsDim;
        #
        #    InventDimParm           inventDimParm;
        #    ListEnumerator          enumerator  = InventDim::dimFieldListEnumerator();
        #    FieldId                 dimFieldId;
        #    FieldId                 dimParmFieldId;
        #
        #    inventDimParm.initDimBOMRouteVersion(InventDimGroupSetup::newItemId(_itemId));
        #
        #    if (_itemId)
        #    {
        #        queryBuildRange = queryBuildDataSource.addRange(fieldNum(RouteVersion, ItemId));
        #        queryBuildRange.value(queryValue(_itemId));
        #    }
        #
        #    if (_onlyApproved && isConfigurationkeyEnabled(configurationKeyNum(RouteApprove)))
        #    {
        #        queryBuildRange = queryBuildDataSource.addRange(fieldNum(RouteVersion, Approved));
        #        queryBuildRange.value(queryValue(NoYes::Yes));
        #    }
        #
        #    if (_onlyActive)
        #    {
        #        queryBuildRange = queryBuildDataSource.addRange(fieldNum(RouteVersion, Active));
        #        queryBuildRange.value(queryValue(NoYes::Yes));
        #    }
        #
        #    queryBuildDataSource.addSelectionField(fieldNum(RouteVersion, InventDimId)); // needed below for the addLookupMethod
        #
        #    qbdsDim = queryBuildDataSource.addDataSource(tableNum(InventDim));
        #    qbdsDim.joinMode(JoinMode::InnerJoin);
        #    qbdsDim.relations(true);
        #
        #    //Adding inventory dimensions
        #    while (enumerator.moveNext())
        #    {
        #        dimFieldId = enumerator.current();
        #        dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
        #        if (inventDimParm.(dimParmFieldId))  //dimension is active for the item
        #        {
        #            if (_inventDimCriteria.(dimFieldId)) //limitation is specified
        #            {
        #                qbdsDim.addRange(dimFieldId).value(queryValue(_inventDimCriteria.(dimFieldId)));
        #                qbdsDim.addRange(dimFieldId).value(SysQuery::valueEmptyString());
        #                qbdsDim.addSortField(dimFieldId);
        #            }
        #
        #            if (tableHasInstanceMethod(new DictTable(tableNum(RouteVersion)), fieldId2name(tableNum(InventDim), dimFieldId)))
        #            {
        #                sysTableLookup.addLookupMethod(fieldId2name(tableNum(InventDim), dimFieldId));
        #            }
        #        }
        #    }
        #
        #    sysTableLookup.addLookupfield(fieldNum(RouteVersion, RouteId));
        #    sysTableLookup.addLookupfield(fieldNum(RouteVersion, Name));
        #    sysTableLookup.addLookupfield(fieldNum(RouteVersion, FromDate));
        #    sysTableLookup.addLookupfield(fieldNum(RouteVersion, ToDate));
        #    sysTableLookup.addLookupfield(fieldNum(RouteVersion, FromQty));
        #    sysTableLookup.addLookupfield(fieldNum(RouteVersion, Active));
        #    sysTableLookup.addLookupMethod(tableMethodStr(RouteVersion, approverPersonnelNumber));
        #    sysTableLookup.addLookupfield(fieldNum(RouteVersion, Approved));
        #
        #    queryBuildDataSource.addSortField(fieldNum(RouteVersion, RouteId),SortOrder::Descending);
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #mcrFindByContinuitySchedId
        #/// <summary>
        #/// Finds the <c>InventTable</c> record via the passed continuity schedule ID.
        #/// </summary>
        #/// <param name="_schedId">
        #/// The continuity schedule ID used to find the inventory table record.
        #/// </param>
        #/// <param name="update">
        #/// A boolean that determines whether to select the <c>InventTable</c> record
        #/// for update; optional.
        #/// </param>
        #/// <returns>
        #/// The <c>InventTable</c> record found via the passed continuity schedule ID.
        #/// </returns>
        #public static InventTable mcrFindByContinuitySchedId(MCRContinuityScheduleId _schedId,
        #                                                    boolean update = false)
        #{
        #    InventTable  inventTable;
        #    MCRInventTable mcrInventTable;
        #
        #    inventTable.selectForUpdate(update);
        #
        #    if (_schedId)
        #    {
        #        select firstonly inventTable
        #            exists join mcrInventTable
        #                where mcrInventTable.InventTable == inventTable.RecId
        #                    && mcrInventTable.ContinuityScheduleID == _schedId;
        #    }
        #
        #    return inventTable;
        #}
        #
      ENDSOURCE
      SOURCE #mcrFindUpcomingProdOrder
        #/// <summary>
        #/// Finds the first upcoming scheduled production order for a given item and item dimensions,
        #/// whose scheduled end date is after today.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The <c>ItemId</c> of the item used to search for the upcoming scheduled production order.
        #/// </param>
        #/// <param name="_inventDim">
        #/// The inventory dimensions used for finding the upcoming scheduled production order.
        #/// </param>
        #/// <param name="_inventDimParm">
        #/// The <c>InventDimParm</c> table record to be used for finding the upcoming scheduled production order.
        #/// </param>
        #/// <returns>
        #/// The first upcoming scheduled production order for a given item and item dimensions.
        #/// </returns>
        #public static ProdTable mcrFindUpcomingProdOrder(ItemId _itemId, InventDim _inventDim, InventDimParm _inventDimParm)
        #{
        #    ProdTable prodTable;
        #    InventDim inventDim;
        #
        #    select firstonly prodTable
        #        order by SchedEnd asc
        #        where  prodTable.ItemId == _itemId
        #            && prodTable.ProdStatus <= ProdStatus::StartedUp
        #            && prodTable.QtySched > 0
        #            && prodTable.SchedEnd > systemDateGet()
        #        #InventDimJoin(prodTable.InventDimId, inventDim, _inventDim, _inventDimParm);
        #
        #    return prodTable;
        #}
      ENDSOURCE
      SOURCE #mcrFindUpcomingPurchLine
        #/// <summary>
        #/// Finds the first upcoming open purchase line for a given item and item
        #/// dimensions, whose delivery date is after today.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The <c>ItemId</c> of the item used to search for the upcoming open purchase lines.
        #/// </param>
        #/// <param name="_inventDim">
        #/// The inventory dimensions used for finding the upcoming open purchase lines.
        #/// </param>
        #/// <param name="_inventDimParm">
        #/// The <c>InventDimParm</c> table record to be used for finding the upcoming open purchase lines.
        #/// </param>
        #/// <returns>
        #/// The first upcoming open purchase line for a given item and item
        #/// dimensions, whose delivery date is after today.
        #/// </returns>
        #public static PurchLine mcrFindUpcomingPurchLine(ItemId _itemId, InventDim _inventDim, InventDimParm _inventDimParm)
        #{
        #    PurchLine           purchLine;
        #    InventTransOrigin   purchInventTransOrigin;
        #    InventTrans         purchInventTrans;
        #    InventDim           inventDim;
        #
        #    select firstonly purchLine
        #        order by DeliveryDate asc
        #        exists join purchInventTransOrigin
        #        where purchInventTransOrigin.ItemId == _itemId
        #            && purchInventTransOrigin.InventTransId == purchLine.InventTransId
        #            && purchInventTransOrigin.ReferenceCategory == InventTransType::Purch
        #            && purchLine.DeliveryDate > systemDateGet()
        #        exists join purchInventTrans
        #        where  purchInventTrans.InventTransOrigin == purchInventTransOrigin.RecId
        #            && purchInventTrans.StatusReceipt == StatusReceipt::Ordered
        #            && purchInventTrans.Qty > 0
        #        #InventDimJoin(purchInventTrans.InventDimId, inventDim, _inventDim, _inventDimParm);
        #
        #    return purchLine;
        #}
      ENDSOURCE
      SOURCE #mcrGetUpcomingInventAvailDate
        #/// <summary>
        #/// Gets the first upcoming date after today that the item with given item
        #/// dimensions will become available.
        #/// </summary>
        #/// <param name="_inventTable">
        #/// The item used to search for the upcoming date after today that the item with given item
        #/// dimensions and will become available.
        #/// </param>
        #/// <param name="_inventDim">
        #/// The inventory dimensions used for finding the upcoming date after today that the item with given item
        #/// dimensions and will become available.
        #/// </param>
        #/// <param name="_inventDimParm">
        #/// The <c>InventDimParm</c> table record to be used for finding the upcoming date after today that the item with
        #/// given item  dimensions and will become available.
        #/// </param>
        #/// <returns>
        #/// The first upcoming date after today that the item with given item
        #/// dimensions and will become available.
        #/// </returns>
        #public static TransDate mcrGetUpcomingInventAvailDate(InventTable _inventTable, InventDim _inventDim, InventDimParm _inventDimParm)
        #{
        #
        #    if (_inventTable.isProducedByDefault())
        #    {
        #        return InventTable::MCRFindUpcomingProdOrder(_inventTable.ItemId, _inventDim, _inventDimParm).SchedEnd;
        #    }
        #    else if (_inventTable.ItemType == ItemType::Item)
        #    {
        #        return InventTable::MCRFindUpcomingPurchLine(_inventTable.ItemId, _inventDim, _inventDimParm).DeliveryDate;
        #    }
        #    else if (_inventTable.ItemType == ItemType::Service)
        #    {
        #        // A service item should be marked as FTC exempt.
        #        return datenull();
        #    }
        #    else
        #    {
        #        throw error(strfmt("@SYS19306", funcname()));
        #    }
        #}
      ENDSOURCE
      SOURCE #mcrIsItemContinuity
        #/// <summary>
        #/// Gets whether or not the item is a continuity item.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The <c>ItemId</c> of the item to check for a continuity schedule.
        #/// </param>
        #/// <returns>
        #/// true if the item is a continuity item; otherwise, false.
        #/// </returns>
        #public static boolean mcrIsItemContinuity(Itemid _itemId)
        #{
        #    MCRInventTable  mcrInventTable = MCRInventTable::findByItemId(_itemId);
        #
        #    if (mcrInventTable && mcrInventTable.ContinuityScheduleID)
        #    {
        #        return  true;
        #    }
        #    else
        #    {
        #        return false;
        #    }
        #}
      ENDSOURCE
      SOURCE #mcrLookupContinuityItems
        #/// <summary>
        #/// Looks up continuity schedules and continuity customer information lines
        #/// on items that are continuity.
        #/// </summary>
        #/// <param name="_ctrl">
        #/// The form control that fired the lookup.
        #/// </param>
        #public static void mcrLookupContinuityItems(FormStringControl _ctrl)
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable), _ctrl);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(InventTable));
        #    queryBuildDataSource    mcrInventTableQueryBuildDataSource;
        #
        #    sysTableLookup.addLookupfield(fieldNum(InventTable, itemId));
        #    sysTableLookup.addLookupfield(fieldNum(InventTable, Product));
        #    sysTableLookup.addLookupMethod(tablemethodstr(InventTable, defaultProductName));
        #    sysTableLookup.addLookupMethod(tablemethodstr(InventTable, itemGroupId));
        #    mcrInventTableQueryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(MCRInventTable));
        #    mcrInventTableQueryBuildDataSource.relations(true);
        #    mcrInventTableQueryBuildDataSource.joinMode(JoinMode::InnerJoin);
        #    mcrInventTableQueryBuildDataSource.addRange(fieldnum(MCRInventTable, ContinuityScheduleId)).value(sysQuery::valueNotEmptyString());
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #mcrLookupItemIds
        #/// <summary>
        #/// Looks up basic item information.
        #/// </summary>
        #/// <param name="_ctrl">
        #/// The form control that fired the lookup.
        #/// </param>
        #public static void mcrLookupItemIds(FormStringControl _ctrl)
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable), _ctrl);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(InventTable));
        #
        #    sysTableLookup.addLookupfield(fieldNum(InventTable, itemId));
        #    sysTableLookup.addLookupfield(fieldNum(InventTable, Product));
        #    sysTableLookup.addLookupMethod(tablemethodstr(InventTable, defaultProductName));
        #    sysTableLookup.addLookupMethod(tablemethodstr(InventTable, itemGroupId));
        #
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
        #
      ENDSOURCE
      SOURCE #mcrLookupNonContinuityItems
        #/// <summary>
        #/// Looks up the continuity schedules and continuity customer information lines
        #/// on items that are continuity and cannot be added at the line level.
        #/// </summary>
        #/// <param name="_ctrl">
        #/// The form control that fired the lookup.
        #/// </param>
        #public static void mcrLookupNonContinuityItems(FormStringControl _ctrl)
        #{
        #    SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable), _ctrl);
        #    Query                   query = new Query();
        #    QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(InventTable));
        #    queryBuildDataSource    mcrInventTableQueryBuildDataSource;
        #
        #    sysTableLookup.addLookupfield(fieldNum(InventTable, itemId));
        #    sysTableLookup.addLookupfield(fieldNum(InventTable, Product));
        #    sysTableLookup.addLookupMethod(tablemethodstr(InventTable, defaultProductName));
        #    sysTableLookup.addLookupMethod(tablemethodstr(InventTable, itemGroupId));
        #    mcrInventTableQueryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(MCRInventTable));
        #    mcrInventTableQueryBuildDataSource.relations(true);
        #    mcrInventTableQueryBuildDataSource.joinMode(JoinMode::InnerJoin);
        #    mcrInventTableQueryBuildDataSource.addRange(fieldnum(MCRInventTable, ContinuityScheduleID)).value(sysQuery::valueEmptyString());
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #mcrValidStartEndDate
        #/// <summary>
        #/// Determines whether the start and end dates are valid.
        #/// </summary>
        #/// <param name="_ItemId">
        #/// The item's ID for which this method validates start and end dates.
        #/// </param>
        #/// <param name="_inventTable">
        #/// The <c>InventTable</c> record for which this method validates start and end dates.
        #/// </param>
        #/// <returns>
        #/// true if the start and end dates are valid; otherwise, false.
        #/// </returns>
        #public static NoYes mcrValidStartEndDate(ItemId _ItemId, InventTable _inventTable = null)
        #{
        #    InventTable inventTableLocal = _inventTable;
        #    MCRInventTable mcrInventTableLocal;
        #
        #    if (!inventTableLocal)
        #    {
        #        inventTableLocal = InventTable::find(_itemId);
        #    }
        #    mcrInventTableLocal = inventTableLocal.mcrInventTable();
        #
        #    if ((((systemdateget() > mcrInventTableLocal.SellEndDate)
        #        && (mcrInventTableLocal.SellEndDate != datenull()))
        #        || ((systemdateget() < mcrInventTableLocal.SellStartDate)
        #        && (mcrInventTableLocal.SellStartDate != datenull())) ) )
        #    {
        #        return NoYes::No;
        #    }
        #
        #    return NoYes::Yes;
        #}
      ENDSOURCE
      SOURCE #modelGroupByItemId
        #/// <summary>
        #/// Retrieves an item model group for an item.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The ID of an item.
        #/// </param>
        #/// <param name="_dataAreaId">
        #/// The ID of the company in which the item exists.
        #/// </param>
        #/// <returns>
        #/// An item model group.
        #/// </returns>
        #public static client server InventModelGroup modelGroupByItemId(ItemId _itemId, DataAreaId _dataAreaId = curExt2dataareaid(tableNum(InventTable)))
        #{
        #    return InventModelGroupItem::modelGroupByItemIdLegalEntity(_itemId, _dataAreaId);
        #}
      ENDSOURCE
      SOURCE #modelGroupIdByItemId
        #/// <summary>
        #/// Retrieves an item model group ID for an item.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The ID of an item.
        #/// </param>
        #/// <param name="_dataAreaId">
        #/// The ID of company in which the item exists.
        #/// </param>
        #/// <returns>
        #/// An item model group ID.
        #/// </returns>
        #public static client server InventModelGroupId modelGroupIdByItemId(ItemId _itemId, DataAreaId _dataAreaId = curExt2dataareaid(tableNum(InventTable)))
        #{
        #    return InventModelGroupItem::modelGroupId(_itemId, _dataAreaId);
        #}
      ENDSOURCE
      SOURCE #mustConvertQty
        #private static client server boolean mustConvertQty(
        #    boolean _showDialog,
        #    boolean _lockQtyCheck,
        #    TempStr _dialogText)
        #{
        #    // When the code is executed on the client, we are allowed to use dialog
        #    boolean canUseDialog = (xGlobal::clientKind() == ClientType::Client);
        #
        #    // When working with EP, the infolog is the way to communicate with the user. No real interaction happens in this case.
        #    boolean isCommunicationInInfolog = (xGlobal::clientKind() != ClientType::Client && xGlobal::clientKind() != ClientType::Server);
        #
        #    //if no dialog is shown we always convert the qty
        #    if (!_showDialog)
        #    {
        #        return true;
        #    }
        #
        #    //if the quanity check is locked, we always convert
        #    if (_lockQtyCheck)
        #    {
        #        if (isCommunicationInInfolog)
        #        {
        #            info(_dialogText);
        #            return true;
        #        }
        #
        #        if (canUseDialog)
        #        {
        #            Box::info(_dialogText);
        #            return true;
        #        }
        #
        #        return InventTable::mustConvertQtyClient(_lockQtyCheck, _dialogText);
        #    }
        #
        #    if (isCommunicationInInfolog)
        #    {
        #        warning(_dialogText);
        #    }
        #    //if we can display the dialog the user can choose whether to convert or not
        #    else if (canUseDialog)
        #    {
        #        if (Box::yesNo(_dialogText, DialogButton::Yes) == DialogButton::Yes)
        #        {
        #            return true;
        #        }
        #    }
        #    else
        #    {
        #        // if we cannot show a dialog, we execute on the client
        #        return InventTable::mustConvertQtyClient(_lockQtyCheck, _dialogText);
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #mustConvertQtyClient
        #private static client boolean mustConvertQtyClient(boolean _lockQtyCheck, TempStr _dialogText)
        #{
        #    return InventTable::mustConvertQty(true, _lockQtyCheck, _dialogText);
        #}
      ENDSOURCE
      SOURCE #name
        #public static Name name(
        #    ItemId      _itemId,
        #    InventDim   _inventDim = null)
        #{
        #    if (_inventDim.InventDimId)
        #    {
        #        return InventTable::find(_itemId).productName(CompanyInfo::languageId(), _inventDim.InventDimId);
        #    }
        #    return InventTable::find(_itemId).defaultProductName();
        #}
      ENDSOURCE
      SOURCE #pbaLookupItemIdGroup
        #/// <summary>
        #/// Displays a manually created lookup form for picking the item to be associated with the current
        #/// product model.
        #/// </summary>
        #/// <param name="_ctrl">
        #/// The <c>FormStringControl</c> instance that will receive the item name.
        #/// </param>
        #/// <param name="_itemGroupId">
        #/// The item group to which the item must belong; optional.
        #/// </param>
        #/// <param name="_showBOM">
        #/// A Boolean value that states if the BOM is shown on the lookup form.
        #/// </param>
        #/// <param name="_showRoute">
        #/// A Boolean value that indicates whether to show the route on the lookup form.
        #/// </param>
        #public static void pbaLookupItemIdGroup(
        #    FormStringControl   _ctrl,
        #    ItemGroupId         _itemGroupId,
        #    boolean             _showBOM            = false,
        #    boolean             _showRoute          = false)
        #{
        #    PBAInventLookupItemIdGroup  inventLookup = new PBAInventLookupItemIdGroup(_ctrl, _itemGroupId, _showBOM, _showRoute);
        #    inventLookup.run();
        #}
      ENDSOURCE
      SOURCE #pdsFillDefaultBatchAttribforItem
        #/// <summary>
        #/// Creates a list of batch attributes for an item.
        #/// </summary>
        #/// <param name="_itemId">
        #/// Item for which to get batch attributes.
        #/// </param>
        #/// <param name="_custAcct">
        #/// Customer account to get the list of batch attributes.
        #/// </param>
        #/// <returns>
        #/// List of batch attributes for the item in a temporary table.
        #/// </returns>
        #public static TmpPdsBatchAttribSelect  pdsFillDefaultBatchAttribforItem(
        #    ItemId      _itemId,
        #    CustAccount _custAcct = '')
        #{
        #    UnitOfMeasureDecimalPrecision   decimals;
        #    TmpPdsBatchAttribSelect         tmpAttrSel;
        #    PdsBatchAttribByItem            itemAttrs;
        #    PdsBatchAttribByAttribGroup     groupAttrs;
        #    boolean                         attrsFound;
        #    PdsBatchAttrib                  pdsBatchAttrib;
        #    #define.emptyStr('')
        #
        #    decimals = UnitOfMeasure::unitOfMeasureDecimalPrecision(
        #                    UnitOfMeasure::unitOfMeasureIdBySymbol(InventTableModule::find(
        #                        _itemId,
        #                        ModuleInventPurchSales::Sales).UnitId));
        #
        #    if (#PdsBatchAttribEnabled)
        #    {
        #        itemAttrs.recordLevelSecurity(true);
        #
        #        while select PdsBatchAttribRelation, PdsBatchAttribMin, PdsBatchAttribMax
        #            from itemAttrs
        #            where  itemAttrs.PdsBatchAttribItemId == _itemId
        #                && itemAttrs.PdsBatchAttribCode   == TableGroupAll::Table
        #        {
        #            select firstonly tmpAttrSel
        #                where tmpAttrSel.PdsBatchAttribId == itemAttrs.PdsBatchAttribRelation;
        #
        #            if (!tmpAttrSel.RecId)
        #            {
        #                tmpAttrSel.clear();
        #                tmpAttrSel.PdsBatchAttribId     = itemAttrs.PdsBatchAttribRelation;
        #                tmpAttrSel.PdsBatchAttribOpr1   = PdsBatchAttribOpr::MoreEqual;
        #                tmpAttrSel.PdsBatchAttribOpr2   = PdsBatchAttribOpr::LessEqual;
        #
        #                switch (PdsBatchAttrib::find(tmpAttrSel.PdsBatchAttribId).PdsBatchAttribType)
        #                {
        #                    case PdsBatchAttribType::Enumerate :
        #                        tmpAttrSel.PdsBatchAttribValue1 =
        #                            (select firstonly PdsAttribEnumValue
        #                                from pdsBatchAttribEnumValues
        #                                order by PdsAttribEnumSeq asc
        #                                where pdsBatchAttribEnumValues.PdsBatchAttribId
        #                                        == tmpAttrSel.PdsBatchAttribId)
        #                            .PdsAttribEnumValue;
        #
        #                        tmpAttrSel.PdsBatchAttribOpr2   = PdsBatchAttribOpr::empty;
        #                        tmpAttrSel.PdsBatchAttribValue2 = #emptyStr;
        #                        break;
        #
        #                    case PdsBatchAttribType::String :
        #                        tmpAttrSel.PdsBatchAttribValue1 = #emptyStr;
        #                        tmpAttrSel.PdsBatchAttribOpr2   = PdsBatchAttribOpr::empty;
        #                        tmpAttrSel.PdsBatchAttribValue2 = #emptyStr;
        #                        break;
        #
        #                    case PdsBatchAttribType::Date :
        #                        tmpAttrSel.PdsBatchAttribValue1 = PdsBatchAttrib::date2StorageType(dateNull());
        #                        tmpAttrSel.PdsBatchAttribValue2 = PdsBatchAttrib::date2StorageType( maxDate());
        #                        break;
        #
        #                    case PdsBatchAttribType::Integer :
        #                        //Fallthrough
        #                    case PdsBatchAttribType::Realnumber :
        #                        tmpAttrSel.PdsBatchAttribValue1 = num2str(itemAttrs.PdsBatchAttribMin, 0, decimals, 1, 0);
        #                        tmpAttrSel.PdsBatchAttribValue2 = num2str(itemAttrs.PdsBatchAttribMax, 0, decimals, 1, 0);
        #                        break;
        #                }
        #
        #                tmpAttrSel.insert();
        #                attrsFound = true;
        #            }
        #        }
        #
        #        //Check group records
        #        groupAttrs.recordLevelSecurity(true);
        #
        #        while select RecId
        #            from itemAttrs
        #            where  itemAttrs.PdsBatchAttribItemId   == _itemId
        #                && itemAttrs.PdsBatchAttribCode     == TableGroupAll::GroupId
        #            join PdsBatchAttribAttribId, PdsBatchAttribMin, PdsBatchAttribMax
        #            from groupAttrs
        #            where groupAttrs.PdsBatchAttribGroupId  == itemAttrs.PdsBatchAttribRelation
        #        {
        #            select firstonly tmpAttrSel
        #                where tmpAttrSel.PdsBatchAttribId   == groupAttrs.PdsBatchAttribAttribId;
        #
        #            if (!tmpAttrSel.RecId)
        #            {
        #                tmpAttrSel.clear();
        #                tmpAttrSel.PdsBatchAttribId     = groupAttrs.PdsBatchAttribAttribId;
        #                tmpAttrSel.PdsBatchAttribOpr1   = PdsBatchAttribOpr::MoreEqual;
        #                tmpAttrSel.PdsBatchAttribOpr2   = PdsBatchAttribOpr::LessEqual;
        #
        #                switch (PdsBatchAttrib::find(tmpAttrSel.PdsBatchAttribId).PdsBatchAttribType)
        #                {
        #                    case PdsBatchAttribType::Enumerate :
        #                        tmpAttrSel.PdsBatchAttribValue1 =
        #                            (select firstonly PdsAttribEnumValue
        #                                from pdsBatchAttribEnumValues
        #                                order by PdsAttribEnumSeq asc
        #                                where pdsBatchAttribEnumValues.PdsBatchAttribId == tmpAttrSel.PdsBatchAttribId)
        #                            .PdsAttribEnumValue;
        #                        tmpAttrSel.PdsBatchAttribOpr2   = PdsBatchAttribOpr::empty;
        #                        tmpAttrSel.PdsBatchAttribValue2 = #emptyStr;
        #                        break;
        #
        #                    case PdsBatchAttribType::String :
        #                        tmpAttrSel.PdsBatchAttribValue1 = #emptyStr;
        #                        tmpAttrSel.PdsBatchAttribOpr2   = PdsBatchAttribOpr::empty;
        #                        tmpAttrSel.PdsBatchAttribValue2 = #emptyStr;
        #                        break;
        #
        #                    case PdsBatchAttribType::Date :
        #                        tmpAttrSel.PdsBatchAttribValue1 = PdsBatchAttrib::date2StorageType(dateNull());
        #                        tmpAttrSel.PdsBatchAttribValue2 = PdsBatchAttrib::date2StorageType( maxDate());
        #                        break;
        #
        #                    case PdsBatchAttribType::Integer :
        #                        //Fallthrough
        #                    case PdsBatchAttribType::Realnumber :
        #                        tmpAttrSel.PdsBatchAttribValue1 = num2str(groupAttrs.PdsBatchAttribMin, 0, decimals, 1, 0);
        #                        tmpAttrSel.PdsBatchAttribValue2 = num2str(groupAttrs.PdsBatchAttribMax, 0, decimals, 1, 0);
        #                        break;
        #                }
        #
        #                tmpAttrSel.insert();
        #                attrsFound = true;
        #            }
        #        }
        #
        #        itemAttrs.recordLevelSecurity(true);
        #
        #        select firstonly RecId from itemAttrs
        #            where itemAttrs.PdsBatchAttribItemId == _itemId
        #                && itemAttrs.PdsBatchAttribCode   == TableGroupAll::All;
        #
        #        if (itemAttrs.RecId)
        #        {
        #            while select pdsBatchAttrib
        #            {
        #                select firstonly tmpAttrSel
        #                    where tmpAttrSel.PdsBatchAttribId == pdsBatchAttrib.PdsBatchAttribId;
        #
        #                if (!tmpAttrSel.RecId)
        #                {
        #                    tmpAttrSel.clear();
        #                    tmpAttrSel.PdsBatchAttribId     = pdsBatchAttrib.PdsBatchAttribId;
        #                    tmpAttrSel.PdsBatchAttribOpr1   = PdsBatchAttribOpr::MoreEqual;
        #                    tmpAttrSel.PdsBatchAttribOpr2   = PdsBatchAttribOpr::LessEqual;
        #
        #                    switch (PdsBatchAttrib::find(tmpAttrSel.PdsBatchAttribId).PdsBatchAttribType)
        #                    {
        #                        case PdsBatchAttribType::Enumerate :
        #                            tmpAttrSel.PdsBatchAttribValue1 =
        #                                (select firstonly PdsAttribEnumValue
        #                                    from pdsBatchAttribEnumValues
        #                                    order by PdsAttribEnumSeq asc
        #                                    where pdsBatchAttribEnumValues.PdsBatchAttribId
        #                                            == tmpAttrSel.PdsBatchAttribId)
        #                                    .PdsAttribEnumValue;
        #
        #                            tmpAttrSel.PdsBatchAttribOpr2   = PdsBatchAttribOpr::empty;
        #                            tmpAttrSel.PdsBatchAttribValue2 = #emptyStr;
        #                            break;
        #
        #                        case PdsBatchAttribType::String :
        #                            tmpAttrSel.PdsBatchAttribValue1 = #emptyStr;
        #                            tmpAttrSel.PdsBatchAttribOpr2   = PdsBatchAttribOpr::empty;
        #                            tmpAttrSel.PdsBatchAttribValue2 = #emptyStr;
        #                            break;
        #
        #                        case PdsBatchAttribType::Date :
        #                            tmpAttrSel.PdsBatchAttribValue1 = PdsBatchAttrib::date2StorageType(dateNull());
        #                            tmpAttrSel.PdsBatchAttribValue2 = PdsBatchAttrib::date2StorageType( maxDate());
        #                            break;
        #
        #                        case PdsBatchAttribType::Integer :
        #                        case PdsBatchAttribType::Realnumber :
        #                            tmpAttrSel.PdsBatchAttribValue1 = num2str(pdsBatchAttrib.PdsBatchAttribMin, 0, decimals, 1, 0);
        #                            tmpAttrSel.PdsBatchAttribValue2 = num2str(pdsBatchAttrib.PdsBatchAttribMax, 0, decimals, 1, 0);
        #                            break;
        #                    }
        #                    tmpAttrSel.insert();
        #                    attrsFound = true;
        #                }
        #            }
        #
        #        }
        #
        #        if (attrsFound
        #            && _custAcct != ''
        #            && PdsBatchAttribByItemCustomer::existAnyCustRelation(_custAcct,_itemId)
        #            )
        #        {
        #            tmpAttrSel = PdsBatchAttribByItemCustomer::updateAttrSelList(tmpAttrSel, _itemId, _custAcct);
        #        }
        #    }
        #
        #    return tmpAttrSel;
        #}
      ENDSOURCE
      SOURCE #pdsFindBaseAttribute
        #/// <summary>
        #/// Return the Base Batch Attribute for a given item.
        #/// </summary>
        #/// <param name="_itemId" type="ItemId">Item Identification that is searched.</param>
        #/// <returns>
        #/// a PdsBatchAttribByItem record, for the base attribute if one is defined, an empty record
        #/// </returns>
        #public static PdsBatchAttribByItem pdsFindBaseAttribute(ItemId _itemId)
        #{
        #    InventTable             inventTable;
        #    PdsBatchAttribByItem    attrib;
        #
        #    inventTable = InventTable::find(_itemId);
        #    if (inventTable.pdsBaseAttributeId)
        #    {
        #        attrib = PdsBatchAttribByItem::findItemId(_itemId, inventTable.pdsBaseAttributeId, TableGroupAll::Table);
        #    }
        #
        #    return attrib;
        #}
      ENDSOURCE
      SOURCE #pmfCheckAllowQuality
        #/// <summary>
        #/// Specifies whether quality orders can be created for an item.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The ID of the item.
        #/// </param>
        #/// <returns>
        #/// True if a quality order can be created for the item; otherwise, false.
        #/// </returns>
        #// AOSRunMode::Called
        #public static boolean pmfCheckAllowQuality(ItemId _itemId)
        #{
        #    InventTable inventTable = InventTable::find(_itemId);
        #    boolean     ret         = true;
        #
        #    if (inventTable.PmfProductType == PmfProductType::MainItem)
        #    {
        #        ret = false;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #pmfCheckFormulaItemForCoBy
        #/// <summary>
        #/// Specifies whether a formula item has assigned co-products or by-products.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The ID of the item.
        #/// </param>
        #/// <returns>
        #/// True if a co-product or by-product is assigned to the item; otherwise, false.
        #/// </returns>
        #public server static boolean pmfCheckFormulaItemForCoBy(
        #    ItemId _itemId)
        #{
        #    BOMVersion      bomVersion;
        #    PmfFormulaCoBy coBy;
        #
        #    select firstonly RecId from bomVersion
        #        where  bomVersion.ItemId    == _itemId
        #            && bomVersion.PmfTypeId == PmfBOMFormula::Formula
        #        exists join coBy
        #            where coBy.bomId == bomVersion.bomId;
        #
        #    return bomVersion.RecId != 0;
        #}
      ENDSOURCE
      SOURCE #pmflookupItemIdCoBy
        #/// <summary>
        #///    Find co-products and by-products.
        #/// </summary>
        #/// <param name="_ctrl">
        #///    The FormStringControl object where the lookup values should be displayed.
        #/// </param>
        #public static client void pmflookupItemIdCoBy(
        #    FormStringControl _ctrl)
        #{
        #    SysTableLookup          sysTableLookup          = SysTableLookup::newParameters(tableNum(InventTable),_ctrl);
        #    Query                   query                   = new Query();
        #    QueryBuildDataSource    queryBuildDataSource    = query.addDataSource(tableNum(InventTable));
        #
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,ItemId), true);
        #    sysTableLookup.addLookupMethod(tableMethodStr(InventTable, defaultProductName));
        #    sysTableLookup.addLookupfield(fieldNum(InventTable,PmfProductType));
        #
        #    queryBuildDataSource.addRange(fieldNum(InventTable,PmfProductType)).value(SysQuery::range(PmfProductType::Co_Product, PmfProductType::By_Product));
        #
        #    sysTableLookup.parmQuery(query);
        #    sysTableLookup.performFormLookup();
        #}
      ENDSOURCE
      SOURCE #priceInventDimId
        #/// <summary>
        #/// Find or create an inventDimId for storing the price of an item price.
        #/// </summary>
        #/// <param name="_itemId">
        #/// The item ID.
        #/// </param>
        #/// <param name="_inventDimId">
        #/// The inventDimId that is converted.
        #/// </param>
        #/// <returns>
        #/// InventDimId for a specific dimension/site combination
        #/// </returns>
        #
        #public static InventDimId priceInventDimId(
        #    ItemId      _itemId,
        #    InventDimId _inventDimId)
        #{
        #    InventTable     inventTable;
        #    InventDimId     inventDimId;
        #    InventDim       inventDim;
        #    InventDim       siteAndProductDim;
        #    InventDimParm   inventDimParm;
        #
        #    inventTable = InventTable::find(_itemId);
        #
        #    inventDim = InventDim::find(_inventDimId);
        #    if (inventTable.ItemDimCostPrice)
        #    {
        #        inventDim.clearNotSiteAndProductDim(InventDimGroupSetup::newInventTable(inventTable));
        #    }
        #    else
        #    {
        #        inventDimParm.InventSiteIdFlag = NoYes::Yes;
        #        inventDim.clearNotSelectedDim(inventDimParm);
        #    }
        #
        #    siteAndProductDim = InventDim::findOrCreate(inventDim);
        #    inventDimId = siteAndProductDim.InventDimId;
        #
        #    return inventDimId;
        #}
      ENDSOURCE
      SOURCE #queryIsBomOrFormulaAllowed
        #/// <summary>
        #/// Filters the user query to ensure only BOM items or formula items are selected.
        #/// </summary>
        #/// <param name="_queryRun">
        #/// The user query to be modified.
        #/// </param>
        #/// <returns>
        #/// The filtered user query to be modified.
        #/// </returns>
        #/// <remarks>
        #/// Only certain kinds of items can be selected for margin update calculation. As
        #/// the user can choose to select any item, this method is used to add criteria
        #/// to ensure that only items with the correct production type will be selected.
        #/// </remarks>
        #public static server QueryRun queryIsBomOrFormulaAllowed(QueryRun _queryRun)
        #{
        #    QueryRun                    qr = _queryRun;
        #    QueryBuildDataSource        ds;
        #    QueryBuildRange             range;
        #
        #    ds = SysQuery::findOrCreateDataSource(qr.query(), tableNum(InventTable));
        #
        #    range = SysQuery::findOrCreateRange(ds, fieldNum(InventTable, PmfProductType));
        #
        #    range.value(strFmt('((%1==%2) || (%1==%3))', fieldStr(InventTable, PmfProductType), enum2int(PmfProductType::Formula), enum2int(PmfProductType::BOM)));
        #
        #    return qr;
        #}
        #
      ENDSOURCE
      SOURCE #setMinMaxQty
        #/// <summary>
        #///    Determines a quantity that conforms with the minimum, maximum and multiple settings of an ItemAccount.
        #/// </summary>
        #/// <param name="_inventItemOrderSetupMap">
        #///    A <c>InventItemOrderSetupMap</c> map.
        #/// </param>
        #/// <param name="_transQty">
        #///    The quantity specified in the transaction unit.
        #/// </param>
        #/// <param name="_transUnitId">
        #///    The transaction unit.
        #/// </param>
        #/// <param name="_displayInformationToUser">
        #///    A Boolean value that defines if the information should be shown to the user.
        #/// </param>
        #/// <param name="_lockMinQtyCheck">
        #///    A Boolean value that defines if the minimum quantity must be adjusted without user interaction if the requirement is not met.
        #/// </param>
        #/// <param name="_lockMaxQtyCheck">
        #///    A Boolean value that defines if the maximum quantity must be adjusted without user interaction if the requirement is not met.
        #/// </param>
        #/// <param name="_lockMultipleCheck">
        #///    A Boolean value that defines if the multiple quantity must be adjusted without user interaction if the requirement is not met.
        #/// </param>
        #/// <param name="_doMultipleCheck">
        #///    A Boolean value that defines if the multiple quantity should be validated after corrected.
        #/// </param>
        #/// <param name="_doMinQtyCheck">
        #///    A Boolean value that defines if the minimum quantity should be validated after corrected.
        #/// </param>
        #/// <param name="_doMaxQtyCheck">
        #///    A Boolean value that defines if the maximum quantity should be validated after corrected.
        #/// </param>
        #/// <returns>
        #///    The adjusted transaction quantity.
        #/// </returns>
        #public static Qty setMinMaxQty(
        #    InventItemOrderSetupMap _inventItemOrderSetupMap,
        #    Qty                     _transQty,
        #    UnitOfMeasureSymbol     _transUnitId,
        #    boolean                 _displayInformationToUser   = true,
        #    boolean                 _lockMinQtyCheck            = false,
        #    boolean                 _lockMaxQtyCheck            = false,
        #    boolean                 _lockMultipleCheck          = false,
        #    boolean                 _doMultipleCheck            = true,
        #    boolean                 _doMinQtyCheck              = true,
        #    boolean                 _doMaxQtyCheck              = true
        #    )
        #{
        #    #define.emptyStr('')
        #    Qty                 transQty;
        #    boolean             hasSetUOMparameters = false;
        #    Qty                 lowestQtyModuleUnit;
        #    Qty                 lowestQtyTransUnit;
        #    Qty                 highestQtyModuleUnit;
        #    Qty                 highestQtyTransUnit;
        #    Qty                 multipleQtyModuleUnit;
        #    Qty                 multipleQtyTransUnit;
        #    Qty                 roundedUpQtyTransUnit;
        #    UnitOfMeasureRecId  unitIdMeasure;
        #    UnitOfMeasureRecId  transUnitIdMeasure;
        #    EcoResProductRecId  productRecId;
        #    TempStr             minQtyDialogStr;
        #    TempStr             maxQtyDialogStr;
        #    TempStr             multipleDialogStr;
        #
        #    UnitOfMeasureSymbol unitID = InventTableModule::find(_inventItemOrderSetupMap.ItemId, InventItemOrderSetupMap::setup2ModuleType(_inventItemOrderSetupMap.setupType())).UnitId;
        #
        #    // When working with EP, the infolog is the way to communicate with the user. No real interaction happens in this case.
        #    boolean isCommunicationInInfolog = (xGlobal::clientKind() != ClientType::Client && xGlobal::clientKind() != ClientType::Server);
        #
        #    //convert from module default unit to transaction unit
        #    real unitConvert(Qty _qty)
        #    {
        #        if (_transUnitId == unitID)
        #        {
        #            return _qty;
        #        }
        #
        #        //set parameters on first call
        #        if (!hasSetUOMparameters)
        #        {
        #            unitIdMeasure       = UnitOfMeasure::unitOfMeasureIdBySymbol(unitID);
        #            transUnitIdMeasure  = UnitOfMeasure::unitOfMeasureIdBySymbol(_transUnitId);
        #            productRecId        = InventTable::itemProduct(_inventItemOrderSetupMap.ItemId);
        #            hasSetUOMparameters = true;
        #        }
        #
        #        return UnitOfMeasureConverter::convert(_qty, unitIdMeasure, transUnitIdMeasure,NoYes::Yes, productRecId);
        #    }
        #
        #    transQty = _transQty;
        #
        #    if (transQty > 0)
        #    {
        #        if (_doMinQtyCheck)
        #        {
        #            lowestQtyModuleUnit = _inventItemOrderSetupMap.lowestQty();
        #            if (lowestQtyModuleUnit !=0)
        #            {
        #                lowestQtyTransUnit  = unitConvert(lowestQtyModuleUnit);
        #                if (lowestQtyTransUnit > transQty)
        #                {
        #                    minQtyDialogStr =
        #                        _displayInformationToUser ?
        #                            InventTable::buildMinQtyDialogStr(
        #                                lowestQtyTransUnit,
        #                                transQty,
        #                                !isCommunicationInInfolog && !_lockMinQtyCheck) :
        #                            #emptyStr;
        #
        #                    if (InventTable::mustConvertQty(_displayInformationToUser, _lockMinQtyCheck, minQtyDialogStr))
        #                    {
        #                        transQty = lowestQtyTransUnit;
        #                    }
        #                }
        #            }
        #        }
        #
        #        if (_doMaxQtyCheck)
        #        {
        #            highestQtyModuleUnit = _inventItemOrderSetupMap.highestQty();
        #            if (highestQtyModuleUnit != 0)
        #            {
        #                highestQtyTransUnit  = unitConvert(highestQtyModuleUnit);
        #                if (highestQtyTransUnit < transQty)
        #                {
        #                    maxQtyDialogStr =
        #                        _displayInformationToUser ?
        #                            InventTable::buildMaxQtyDialogStr(
        #                                highestQtyTransUnit,
        #                                transQty,
        #                                !isCommunicationInInfolog && !_lockMaxQtyCheck) :
        #                            #emptyStr;
        #
        #                    if (InventTable::mustConvertQty(_displayInformationToUser, _lockMaxQtyCheck, maxQtyDialogStr))
        #                    {
        #                        transQty = highestQtyTransUnit;
        #                    }
        #                }
        #            }
        #        }
        #
        #        if (_doMultipleCheck)
        #        {
        #            multipleQtyModuleUnit = _inventItemOrderSetupMap.multipleQty();
        #            if (multipleQtyModuleUnit)
        #            {
        #                multipleQtyTransUnit  = unitConvert(multipleQtyModuleUnit);
        #                // rounded up in the transaction unit
        #                roundedUpQtyTransUnit = round(transQty + multipleQtyTransUnit / 2.00001, multipleQtyTransUnit);
        #                if (roundedUpQtyTransUnit != transQty)
        #                {
        #                    multipleDialogStr =
        #                        _displayInformationToUser ?
        #                            InventTable::buildMultipleDialogStr(
        #                                multipleQtyTransUnit,
        #                                transQty,
        #                                roundedUpQtyTransUnit,
        #                                !isCommunicationInInfolog && !_lockMultipleCheck,
        #                                !isCommunicationInInfolog) :
        #                        #emptyStr;
        #
        #                    if (InventTable::mustConvertQty(_displayInformationToUser, _lockMultipleCheck, multipleDialogStr))
        #                    {
        #                        transQty = roundedUpQtyTransUnit;
        #                    }
        #                }
        #            }
        #        }
        #
        #        transQty = decRound(transQty, UnitOfMeasure::unitOfMeasureDecimalPrecision(
        #                            UnitOfMeasure::unitOfMeasureIdBySymbol(_transUnitId)));
        #    }
        #
        #    return transQty;
        #}
      ENDSOURCE
      SOURCE #showItemSiteAndProductDim
        #public static str showItemSiteAndProductDim(
        #    ItemId          _itemId,
        #    InventDim       _inventDim,
        #    InventSiteId    _newSiteId)
        #{
        #    InventDim   inventDim;
        #    str         preFix;
        #
        #    inventDim.data(_inventDim);
        #    inventDim.InventSiteId = _newSiteId;
        #    inventDim.clearNotSiteAndProductDim(InventDimGroupSetup::newItemId(_itemId));
        #
        #    preFix = inventDim.preFix();
        #    return (prefix) ? strFmt("%1 %2",_itemId, preFix) : strFmt("%1",_itemId);
        #}
      ENDSOURCE
      SOURCE #txtNotExist
        #public static TxtNotExist txtNotExist()
        #{
        #    return "@SYS10752";
        #}
      ENDSOURCE
      SOURCE #unitConvert
        #public static Qty  unitConvert(
        #    ItemId                              _itemId,
        #    UnitOfMeasureSymbol                 _unitFrom,
        #    UnitOfMeasureSymbol                 _unitTo,
        #    UnitOfMeasureSymbol                 _unitInvent,
        #    Qty                                 _valueFrom = 1,
        #    InventDimId                         _inventDimId = '',
        #    EcoResReleasedProductUnitConverter  _releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct())
        #{
        #    InventQty                           inventQty;
        #
        #    if (_unitFrom != _unitTo)
        #    {
        #        inventQty   = _releasedProductUnitConverter.convert(
        #            _valueFrom,
        #            UnitOfMeasure::unitOfMeasureIdBySymbol(_unitFrom),
        #            UnitOfMeasure::unitOfMeasureIdBySymbol(_unitInvent),
        #            NoYes::Yes,
        #            _itemId,
        #            _inventDimId);
        #
        #        return _releasedProductUnitConverter.convert(
        #            inventQty,
        #            UnitOfMeasure::unitOfMeasureIdBySymbol(_unitInvent),
        #            UnitOfMeasure::unitOfMeasureIdBySymbol(_unitTo),
        #            NoYes::Yes,
        #            _itemId,
        #            _inventDimId);
        #    }
        #
        #    return _valueFrom;
        #}
      ENDSOURCE
      SOURCE #unitConvertValue
        #public static real  unitConvertValue(
        #    ItemId                              _itemId,
        #    UnitOfMeasureSymbol                 _unitFrom,
        #    UnitOfMeasureSymbol                 _unitTo,
        #    UnitOfMeasureSymbol                 _unitInvent,
        #    real                                _valueFrom,
        #    InventDimId                         _inventDimId = '',
        #    EcoResReleasedProductUnitConverter  _releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct())
        #{
        #    real    inventValue;
        #
        #    if (_unitFrom != _unitTo)
        #    {
        #        inventValue   = _releasedProductUnitConverter.convert(
        #            _valueFrom,
        #            UnitOfMeasure::unitOfMeasureIdBySymbol(_unitFrom),
        #            UnitOfMeasure::unitOfMeasureIdBySymbol(_unitInvent),
        #            NoYes::No,
        #            _itemId,
        #            _inventDimId,
        #            NoYes::No);
        #
        #        return _releasedProductUnitConverter.convert(
        #            inventValue,
        #            UnitOfMeasure::unitOfMeasureIdBySymbol(_unitInvent),
        #            UnitOfMeasure::unitOfMeasureIdBySymbol(_unitTo),
        #            NoYes::No,
        #            _itemId,
        #            _inventDimId,
        #            NoYes::No);
        #    }
        #
        #    return _valueFrom;
        #}
      ENDSOURCE
      SOURCE #updateAssetId_RU
        #public static void updateAssetId_RU(RAssetId   _assetId,
        #                                    ItemId     _itemId)
        #{
        #    InventTable inventTable;
        #
        #    ttsbegin;
        #    inventTable = InventTable::find(_itemId, true);
        #    if (inventTable)
        #    {
        #        inventTable.AssetId_RU = _assetId;
        #        inventTable.update();
        #    }
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #updateAutoSalesPrice
        #public server static void updateAutoSalesPrice(
        #    ItemId      _itemId,
        #    PriceDate   _priceDate = systemDateGet())
        #{
        #    InventTable         inventTable = InventTable::find(_itemId);
        #    InventTableModule   inventTableSales;
        #    InventTableModule   inventTableBasic;
        #
        #    if (inventTable.SalesModel == SalesPriceModel::None)
        #    {
        #        return;
        #    }
        #
        #    inventTableSales = InventTableModule::find(_itemId, ModuleInventPurchSales::Sales, true);
        #    if (_priceDate < inventTableSales.PriceDate)
        #    {
        #        return;
        #    }
        #
        #    if (inventTable.SalesPriceModelBasic == SalesPriceModelBasic::PurchPrice)
        #    {
        #        inventTableBasic = InventTableModule::find(_itemId, ModuleInventPurchSales::Purch);
        #    }
        #    else
        #    {
        #        inventTableBasic = InventTableModule::find(_itemId, ModuleInventPurchSales::Invent);
        #    }
        #
        #    if (! inventTableSales || ! inventTableBasic)
        #    {
        #        return;
        #    }
        #
        #    inventTableSales.calcSalesPrice(inventTable, inventTableBasic);
        #    inventTableSales.update();
        #}
      ENDSOURCE
      SOURCE #webLookupItemIdQuery
        #/// <summary>
        #/// Creates a query object that is used in the Enterprise Portal and adds ranges based on the customer
        #/// or vendor.
        #/// </summary>
        #/// <param name="_showExternalItem">
        #/// A Boolean value that determines whether to filter out external items; optional.
        #/// </param>
        #/// <returns>
        #/// The <c>Query</c> object.
        #/// </returns>
        #public static Query webLookupItemIdQuery(boolean _showExternalItem = false)
        #{
        #    Query                   query;
        #    QueryBuildDataSource    queryBDSInventTable;
        #    QueryBuildDataSource    queryBDSInventProductGroupItem;
        #    QueryBuildDataSource    queryBDSInventProductGroup;
        #    QueryBuildDataSource    queryBDSEcoResProductTranslation;
        #    QueryBuildDataSource    queryBDSCustVendExternalItem;
        #    WebSession              webSession = new WebSession();
        #
        #    query = new Query();
        #    queryBDSInventTable = query.addDataSource(tableNum(InventTable));
        #
        #    if (EP::isCustomer())
        #    {
        #        queryBDSInventTable.orderMode(OrderMode::GroupBy);
        #        queryBDSInventTable.addSortField(fieldNum(InventTable,ItemId));
        #        queryBDSInventTable.addSortField(fieldNum(InventTable,Product));
        #
        #        queryBDSInventProductGroupItem = queryBDSInventTable.addDataSource(tableNum(InventProductGroupItem));
        #        queryBDSInventProductGroupItem.joinMode(JoinMode::InnerJoin);
        #        queryBDSInventProductGroupItem.relations(true);
        #        queryBDSInventProductGroupItem.orderMode(OrderMode::GroupBy);
        #        queryBDSInventProductGroupItem.addSortField(fieldNum(InventProductGroupItem,ItemId));
        #
        #        queryBDSInventProductGroup = queryBDSInventProductGroupItem.addDataSource(tableNum(InventProductGroup));
        #        queryBDSInventProductGroup.relations(true);
        #        queryBDSInventProductGroup.joinMode(JoinMode::ExistsJoin);
        #        queryBDSInventProductGroup.addRange(fieldNum(InventProductGroup,Module)).value(queryValue(ModuleSalesPurch::Sales));
        #        queryBDSInventProductGroup.fetchMode(0);
        #
        #        queryBDSEcoResProductTranslation = queryBDSInventTable.addDataSource(tableNum(EcoResProductTranslation));
        #        queryBDSEcoResProductTranslation.joinMode(JoinMode::OuterJoin);
        #        queryBDSEcoResProductTranslation.relations(false);
        #        queryBDSEcoResProductTranslation.addLink(fieldNum(InventTable,Product),fieldNum(EcoResProductTranslation,Product));
        #        queryBDSEcoResProductTranslation.orderMode(OrderMode::GroupBy);
        #        queryBDSEcoResProductTranslation.addSortField(fieldNum(EcoResProductTranslation,Product));
        #        queryBDSEcoResProductTranslation.addSortField(fieldNum(EcoResProductTranslation,Description));
        #        queryBDSEcoResProductTranslation.fetchMode(0);
        #
        #        queryBDSEcoResProductTranslation.addRange(fieldNum(EcoResProductTranslation, LanguageId)).value(webSession.language());
        #
        #        _showExternalItem = false;
        #    }
        #
        #    if (_showExternalItem)
        #    {
        #        queryBDSCustVendExternalItem = queryBDSInventTable.addDataSource(tableNum(CustVendExternalItem));
        #        queryBDSCustVendExternalItem.joinMode(JoinMode::OuterJoin);
        #
        #        if (EP::isVendor())
        #        {
        #            queryBDSCustVendExternalItem.addRange(fieldNum(CustVendExternalItem,ModuleType)).value(SysQuery::value(ModuleInventPurchSalesVendCustGroup::Vend));
        #            queryBDSCustVendExternalItem.addRange(fieldNum(CustVendExternalItem,CustVendRelation)).value(SysQuery::value(DirPersonUser::current().vendAccount()));
        #        }
        #
        #        queryBDSCustVendExternalItem.relations(true);
        #
        #        queryBDSEcoResProductTranslation = queryBDSInventTable.addDataSource(tableNum(EcoResProductTranslation));
        #        queryBDSEcoResProductTranslation.joinMode(JoinMode::OuterJoin);
        #        queryBDSEcoResProductTranslation.relations(false);
        #        queryBDSEcoResProductTranslation.addLink(fieldNum(InventTable,Product),fieldNum(EcoResProductTranslation,Product));
        #        queryBDSEcoResProductTranslation.addRange(fieldNum(EcoResProductTranslation, LanguageId)).value(webSession.language());
        #
        #    }
        #
        #    if (EP::isVendor())
        #    {
        #        query = EPQuery::makeMyVendorSelfServiceQuery(query,tableNum(InventTable));
        #    }
        #
        #    return query;
        #}
      ENDSOURCE
      SOURCE #wmsPalletTypeId
        #public static WMSPalletTypeId wmsPalletTypeId(ItemId _itemId)
        #{
        #    WMSPalletTypeId wmsPalletTypeId = InventTable::find(_itemId).wmsPalletTypeId;
        #    if (!wmsPalletTypeId)
        #    {
        #        wmsPalletTypeId = WMSParameters::find().DefaultPalletTypeId;
        #    }
        #    return wmsPalletTypeId;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : WHSReceiptDetails unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #WHSReceiptDetails
    EnforceFKRelation 1
    PROPERTIES
      Name                #WHSReceiptDetails
      Label               #@WAX5541
      TitleField1         #ReceiptId
      TitleField2         #InventDimId
      ConfigurationKey    #WHSandTMS
      CacheLookup         #FoundAndEmpty
      CreateRecIdIndex    #Yes
      TableGroup          #Main
      PrimaryIndex        #SurrogateKey
      ClusterIndex        #ReceiptIdInventDimIdIdx
      ReplacementKey      #ReceiptIdInventDimIdIdx
      CreatedDateTime     #Yes
      DeveloperDocumentation  #@WAX5542
      Origin              #{C509C421-0FD2-449D-8A09-2D94C14B6895}
    ENDPROPERTIES
    
    FIELDS
      FIELD #InventDimId
        STRING
        PROPERTIES
          Name                #InventDimId
          Mandatory           #Yes
          AllowEdit           #No
          Table               #WHSReceiptDetails
          Origin              #{D20B26A6-1649-4902-874D-300A1A0D8C6C}
          ExtendedDataType    #InventDimId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #InventQty
        REAL
        PROPERTIES
          Name                #InventQty
          Table               #WHSReceiptDetails
          Origin              #{97C29FDB-4C68-4A8A-A974-7B39E2B31B4D}
          ExtendedDataType    #InventQty
        ENDPROPERTIES
        
      FIELD #ReceiptId
        STRING
        PROPERTIES
          Name                #ReceiptId
          Mandatory           #Yes
          AllowEdit           #No
          Table               #WHSReceiptDetails
          Origin              #{3CED3B84-666F-4962-8288-523BA44023E0}
          ExtendedDataType    #WHSReceiptId
          StringSize          #20
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoReport
        PROPERTIES
          Name                #AutoReport
        ENDPROPERTIES
        
        GROUPFIELDS
          #ReceiptId
          #InventDimId
          #InventQty
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #AutoIdentification
        PROPERTIES
          Name                #AutoIdentification
        ENDPROPERTIES
        
        GROUPFIELDS
          #ReceiptId
          #InventDimId
        ENDGROUPFIELDS
      ENDGROUP
      GROUP #All
        PROPERTIES
          Name                #All
          Label               #@WAX2277
        ENDPROPERTIES
        
        GROUPFIELDS
          #ReceiptId
          #InventDimId
          #InventQty
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #ReceiptIdInventDimIdIdx
      PROPERTIES
        Name                #ReceiptIdInventDimIdIdx
        AllowDuplicates     #No
        AlternateKey        #Yes
        Origin              #{C45ED4B1-DAB0-4DA7-8C59-86AA86B9C21D}
      ENDPROPERTIES
      
      INDEXFIELDS
        #ReceiptId
        #InventDimId
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #InventDim
        PROPERTIES
          Name                #InventDim
          Table               #InventDim
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          RelationshipType    #Association
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #InventDimId
            RelatedField        #inventDimId
            SourceEDT           #InventDimId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #createOrUpdateReceiptDetails
        #/// <summary>
        #/// Creates or updates receipt details record depending on if one already exists.
        #/// </summary>
        #/// <param name="_receiptId">
        #/// The receipt identification number of the record we are inserting or updating.
        #/// </param>
        #/// <param name="_inventDimId">
        #/// The inventory dimension identification number of the record we are inserting or updating.
        #/// </param>
        #/// <param name="_inventQty">
        #/// The inventory unit qty of the record we are inserting or updating.
        #/// </param>
        #public static server void createOrUpdateReceiptDetails(
        #    WHSReceiptId    _receiptId,
        #    InventDimId     _inventDimId,
        #    InventQty       _inventQty
        #    )
        #{
        #    WHSReceiptDetails   receiptDetails;
        #
        #    ttsbegin;
        #
        #    receiptDetails = WHSReceiptDetails::find(_receiptId, _inventDimId, true);
        #
        #    if (receiptDetails.RecId != 0)
        #    {
        #
        #        // Cannot scanned label twice!!
        #
        #        throw error("Batch label is already exist or scanned");
        #       // receiptDetails.InventQty += _inventQty;
        #       // receiptDetails.update();
        #    }
        #    else
        #    {
        #        receiptDetails.ReceiptId    = _receiptId;
        #        receiptDetails.InventDimId  = _inventDimId;
        #        receiptDetails.InventQty    = _inventQty;
        #        receiptDetails.insert();
        #    }
        #
        #    ttscommit;
        #}
      ENDSOURCE
      SOURCE #exist
        #public static boolean exist(
        #    WHSReceiptId    _receiptId,
        #    InventDimId     _inventDimId)
        #{
        #    return _receiptId && _inventDimId &&
        #           (select firstonly RecId from whsReceiptDetails
        #                where whsReceiptDetails.ReceiptId   == _receiptId
        #                &&    whsReceiptDetails.InventDimId == _inventDimId).RecId != 0;
        #}
        #
      ENDSOURCE
      SOURCE #existByReceiptIdLicensePlate
        #public static boolean existByReceiptIdLicensePlate(
        #    WHSReceiptId        _receiptId,
        #    WHSLicensePlateId   _licensePlateId)
        #{
        #    WHSReceiptDetails   receiptDetails;
        #    InventDim           inventDim;
        #
        #    if (_receiptId)
        #    {
        #        select firstonly RecId from receiptDetails
        #            where receiptDetails.ReceiptId == _receiptId
        #            exists join inventDim
        #                where inventDim.InventDimId     == receiptDetails.InventDimId
        #                &&    inventDim.LicensePlateId  == _licensePlateId;
        #    }
        #    return receiptDetails.RecId != 0;
        #}
      ENDSOURCE
      SOURCE #find
        #public static WHSReceiptDetails find(
        #    WHSReceiptId    _receiptId,
        #    InventDimId     _inventDimId,
        #    boolean         _forupdate = false)
        #{
        #    WHSReceiptDetails    receiptDetails;
        #
        #    if (_receiptId &&
        #        _inventDimId)
        #    {
        #        receiptDetails.selectForUpdate(_forupdate);
        #
        #        select firstonly receiptDetails
        #            where receiptDetails.ReceiptId      == _receiptId
        #            &&    receiptDetails.InventDimId    == _inventDimId;
        #    }
        #
        #    return receiptDetails;
        #}
        #
      ENDSOURCE
      SOURCE #findByReceiptIdAndInventDimId
        #/// <summary>
        #/// Finds a record in the <c>WHSReceiptDetails</c> table by using the specified receipt ID and inventory dimension ID.
        #/// </summary>
        #/// <param name="_receiptId">
        #/// The receipt ID of the <c>WHSReceiptDetails</c> record to find.
        #/// </param>
        #/// <param name="_inventDimId">
        #/// The inventory dimension ID of the <c>WHSReceiptDetails</c> record to find.
        #/// </param>
        #/// <param name="_forUpdate">
        #/// A Boolean value that indicates whether the record should be read for update; optional.
        #/// </param>
        #/// <returns>
        #/// A record in the <c>WHSReceiptDetails</c> table; otherwise, an empty record.
        #/// </returns>
        #public static WHSReceiptDetails findByReceiptIdAndInventDimId(
        #    WHSReceiptId    _receiptId,
        #    InventDimId     _inventDimId,
        #    boolean         _forUpdate = false)
        #{
        #    WHSReceiptDetails receiptDetails;
        #
        #    if (_receiptId && _inventDimId)
        #    {
        #        if (_forUpdate)
        #        {
        #            receiptDetails.selectForUpdate(_forUpdate);
        #        }
        #
        #        select firstonly RecId from receiptDetails
        #            where receiptDetails.ReceiptId == _receiptId
        #               && receiptDetails.InventDimId == _inventDimId;
        #    }
        #
        #    return receiptDetails;
        #}
      ENDSOURCE
      SOURCE #findByReceiptIdLicensePlate
        #/// <summary>
        #/// Fetch warehouse receipt detail based on receipt Id and license plate Id.
        #/// </summary>
        #/// <param name="_receiptId">
        #/// Warehouse receipt Id.
        #/// </param>
        #/// <param name="_licensePlateId">
        #/// Warehouse license plate Id.
        #/// </param>
        #/// <param name="_forupdate">
        #/// A boolean value that indicates whether the record should be read for update; optional.
        #/// </param>
        #/// <returns>
        #/// A <c>WHSReceiptDetails</c> record that satisfies the search criteria, if such record exists; otherwise, an empty record.
        #/// </returns>
        #[SysObsoleteAttribute('This method is not needed', true)]
        #public static WHSReceiptDetails findByReceiptIdLicensePlate(
        #    WHSReceiptId        _receiptId,
        #    WHSLicensePlateId   _licensePlateId,
        #    boolean             _forupdate = false)
        #{
        #    throw error(Error::wrongUseOfFunction(funcname()));
        #}
      ENDSOURCE
      SOURCE #updateWHSReceiptDetailWithSerialNumber
        #/// <summary>
        #/// Update warehouse receipt detail record with serial number.
        #/// </summary>
        #/// <param name="_receiptId">
        #/// Warehouse receipt Id.
        #/// </param>
        #/// <param name="_licensePlateId">
        #/// Warehouse license plate Id.
        #/// </param>
        #/// <param name="_inventSerialId">
        #/// Inventory serial Id.
        #/// </param>
        #[SysObsoleteAttribute('This method is not needed', true)]
        #public static void updateWHSReceiptDetailWithSerialNumber(
        #    WHSReceiptId        _receiptId,
        #    WHSLicensePlateId   _licensePlateId,
        #    InventSerialId      _inventSerialId)
        #{
        #    throw error(Error::wrongUseOfFunction(funcname()));
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: END
